
sd_card_test.elf:     file format elf32-littlenios2
sd_card_test.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x400801bc

Program Header:
    LOAD off    0x00001020 vaddr 0x40080020 paddr 0x40080020 align 2**12
         filesz 0x0001a348 memsz 0x0001a348 flags r-x
    LOAD off    0x0001b368 vaddr 0x4009a368 paddr 0x4009bff0 align 2**12
         filesz 0x00001c88 memsz 0x00001c88 flags rw-
    LOAD off    0x0001dc78 vaddr 0x4009dc78 paddr 0x4009dc78 align 2**12
         filesz 0x00000000 memsz 0x0000405c flags rw-
    LOAD off    0x0001d000 vaddr 0x40141000 paddr 0x40141000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  40141000  40141000  0001d000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   0000019c  40080020  40080020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00019be0  400801bc  400801bc  000011bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000005cc  40099d9c  40099d9c  0001ad9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001c88  4009a368  4009bff0  0001b368  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          0000405c  4009dc78  4009dc78  0001dc78  2**2
                  ALLOC, SMALL_DATA
  6 .sram         00000000  400a1cd4  400a1cd4  0001d020  2**0
                  CONTENTS
  7 .onchip_memory2 00000000  40120000  40120000  0001d020  2**0
                  CONTENTS
  8 .epcs         00000000  40141020  40141020  0001d020  2**0
                  CONTENTS
  9 .comment      00000023  00000000  00000000  0001d020  2**0
                  CONTENTS, READONLY
 10 .debug_aranges 00000f48  00000000  00000000  0001d048  2**3
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_info   00029ec9  00000000  00000000  0001df90  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 0000a880  00000000  00000000  00047e59  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0000d85c  00000000  00000000  000526d9  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  0000349c  00000000  00000000  0005ff38  2**2
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000042af  00000000  00000000  000633d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_loc    00016f7f  00000000  00000000  00067683  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_alt_sim_info 00000060  00000000  00000000  0007e604  2**2
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_ranges 00001368  00000000  00000000  0007e668  2**3
                  CONTENTS, READONLY, DEBUGGING
 19 .thread_model 00000003  00000000  00000000  000840b1  2**0
                  CONTENTS, READONLY
 20 .cpu          0000000a  00000000  00000000  000840b4  2**0
                  CONTENTS, READONLY
 21 .qsys         00000001  00000000  00000000  000840be  2**0
                  CONTENTS, READONLY
 22 .simulation_enabled 00000001  00000000  00000000  000840bf  2**0
                  CONTENTS, READONLY
 23 .sysid_hash   00000004  00000000  00000000  000840c0  2**0
                  CONTENTS, READONLY
 24 .sysid_base   00000004  00000000  00000000  000840c4  2**0
                  CONTENTS, READONLY
 25 .sysid_time   00000004  00000000  00000000  000840c8  2**0
                  CONTENTS, READONLY
 26 .stderr_dev   00000009  00000000  00000000  000840cc  2**0
                  CONTENTS, READONLY
 27 .stdin_dev    00000009  00000000  00000000  000840d5  2**0
                  CONTENTS, READONLY
 28 .stdout_dev   00000009  00000000  00000000  000840de  2**0
                  CONTENTS, READONLY
 29 .sopc_system_name 00000008  00000000  00000000  000840e7  2**0
                  CONTENTS, READONLY
 30 .quartus_project_dir 0000004d  00000000  00000000  000840ef  2**0
                  CONTENTS, READONLY
 31 .jdi          00004c76  00000000  00000000  0008413c  2**0
                  CONTENTS, READONLY
 32 .sopcinfo     000cf927  00000000  00000000  00088db2  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
40141000 l    d  .entry	00000000 .entry
40080020 l    d  .exceptions	00000000 .exceptions
400801bc l    d  .text	00000000 .text
40099d9c l    d  .rodata	00000000 .rodata
4009a368 l    d  .rwdata	00000000 .rwdata
4009dc78 l    d  .bss	00000000 .bss
400a1cd4 l    d  .sram	00000000 .sram
40120000 l    d  .onchip_memory2	00000000 .onchip_memory2
40141020 l    d  .epcs	00000000 .epcs
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../sd_card_test_bsp//obj/HAL/src/crt0.o
40080204 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_exception_entry.o
40080094 l       .exceptions	00000000 alt_exception_unknown
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 main.c
00000000 l    df *ABS*	00000000 fatfs.c
00000000 l    df *ABS*	00000000 fatfs_diskio.c
4009bfa4 l     O .rwdata	00000001 Stat
4009dc78 l     O .bss	00000001 CardType
4009dc7a l     O .bss	00000002 Timer1
4009dc7c l     O .bss	00000002 Timer2
4009dc7e l     O .bss	00000001 XMITDummy
4009dc80 l     O .bss	00000004 Control1
40080334 l     F .text	0000004c SetLowSpeed
40080380 l     F .text	0000006c SetHighSpeed
400803ec l     F .text	00000044 InitDiskIOHardware
40080430 l     F .text	0000003c Set8BitTransfer
4008046c l     F .text	00000038 Set32BitTransfer
400804a4 l     F .text	00000050 ReceiveU8
400804f4 l     F .text	0000012c ReceiveDatablock
40080620 l     F .text	00000188 TransmitDatablock
400807cc l     F .text	00000054 WaitReady
400807a8 l     F .text	00000024 GetCDWP
40080820 l     F .text	00000044 ReleaseBus
40080864 l     F .text	00000250 SendCMD
4009dc84 l     O .bss	00000004 pvm.1812
00000000 l    df *ABS*	00000000 fatfs_nios2_de0_nano_spi.c
00000000 l    df *ABS*	00000000 fatfs_nios2_de1_pio.c
00000000 l    df *ABS*	00000000 fatfs_nios2_de1_spi.c
00000000 l    df *ABS*	00000000 ff.c
4009dc88 l     O .bss	00000004 FatFs
4009dc8c l     O .bss	00000002 Fsid
400815c8 l     F .text	0000006c mem_cpy
40081634 l     F .text	00000058 mem_set
4008168c l     F .text	0000008c mem_cmp
40081718 l     F .text	0000007c chk_chr
40081794 l     F .text	0000015c move_window
400818f0 l     F .text	0000021c sync
4008216c l     F .text	00000114 remove_chain
40082280 l     F .text	000001e4 create_chain
40082464 l     F .text	000001ec dir_sdi
40082650 l     F .text	000002e8 dir_next
40082938 l     F .text	000000f4 dir_find
40082a2c l     F .text	000000fc dir_read
40082b28 l     F .text	00000120 dir_register
40082c48 l     F .text	00000098 dir_remove
40082ce0 l     F .text	000002ec create_name
40099e48 l     O .rodata	00000080 excvt.1838
40082fcc l     F .text	00000230 get_fileinfo
400831fc l     F .text	000001d0 follow_path
400833cc l     F .text	00000174 check_fs
40083540 l     F .text	00000934 chk_mounted
40083e74 l     F .text	00000090 validate
40099ec8 l     O .rodata	00000016 vst.2077
40099ede l     O .rodata	00000016 cst.2078
00000000 l    df *ABS*	00000000 monitor.c
00000000 l    df *ABS*	00000000 sd_card.c
4009dce8 l     O .bss	00000018 alarm2
4009dc90 l     O .bss	00000004 Systick
4009dc94 l     O .bss	00000002 Timer
4009dc96 l     O .bss	00000002 wTimer10ms.3227
00000000 l    df *ABS*	00000000 Uart.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 putchar.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
4009a19a l     O .rodata	00000010 zeroes.4181
4009a1aa l     O .rodata	00000010 blanks.4180
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
4008bf80 l     F .text	00000200 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
4008db00 l     F .text	00000008 __fp_lock
4008db08 l     F .text	00000008 __fp_unlock
4008db1c l     F .text	000001a0 __sinit.part.1
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
4009a368 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 locale.c
4009a7ac l     O .rwdata	00000020 lc_ctype_charset
4009a78c l     O .rwdata	00000020 lc_message_charset
4009a7cc l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
4009a1dc l     O .rodata	0000000c p05.2678
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 vfprintf.c
400910e4 l     F .text	000000fc __sprint_r.part.0
4009a310 l     O .rodata	00000010 blanks.4125
4009a300 l     O .rodata	00000010 zeroes.4126
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
40093a00 l     F .text	0000006c udivmodsi4
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_close.c
40095700 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
40095820 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
4009584c l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_irq_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_isatty.c
40095afc l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
40095bf0 l     F .text	00000064 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
40095cd4 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
40095eb0 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
4009bfdc l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
400962d8 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
40096420 l     F .text	00000038 alt_dev_reg
4009adb4 l     O .rwdata	000000cc epcs
4009ae80 l     O .rwdata	00001060 jtag_uart
4009bee0 l     O .rwdata	000000c4 uart_usb
00000000 l    df *ABS*	00000000 altera_avalon_epcs_flash_controller.c
40096518 l     F .text	00000038 alt_flash_device_register
400965a4 l     F .text	000003f8 alt_epcs_flash_query
4009699c l     F .text	000000e8 alt_epcs_flash_memcmp
40096d70 l     F .text	00000094 alt_epcs_test_address
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
40097238 l     F .text	00000204 altera_avalon_jtag_uart_irq
4009743c l     F .text	000000a8 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
40097a5c l     F .text	00000074 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_avalon_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_uart_init.c
40097d10 l     F .text	00000098 altera_avalon_uart_irq
40097da8 l     F .text	000000e0 altera_avalon_uart_rxirq
40097e88 l     F .text	00000144 altera_avalon_uart_txirq
00000000 l    df *ABS*	00000000 altera_avalon_uart_read.c
40098020 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 altera_avalon_uart_write.c
4009824c l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 epcs_commands.c
400984a4 l     F .text	00000038 epcs_test_wip
400984dc l     F .text	00000038 epcs_await_wip_released
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
40098be0 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_flash_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
40099144 l     F .text	000000c0 alt_open_fd
00000000 l    df *ABS*	00000000 alt_open.c
4009927c l     F .text	00000050 alt_get_errno
400992cc l     F .text	000000cc alt_file_locked
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 altera_avalon_spi.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
40089cb4 g     F .text	00000018 putchar
400905bc g     F .text	00000074 _mprec_log10
40096ce4 g     F .text	0000008c alt_epcs_flash_get_info
400906a8 g     F .text	0000008c __any_on
40092ba4 g     F .text	00000054 _isatty_r
4009a1e8 g     O .rodata	00000028 __mprec_tinytens
4008781c g     F .text	000000d0 f_gets
40095df8 g     F .text	00000078 alt_main
40089ccc g     F .text	000000b8 _puts_r
4009dd28 g     O .bss	00000230 Fatfs
400a1bd4 g     O .bss	00000100 alt_irq
40092bf8 g     F .text	0000005c _lseek_r
40081b78 g     F .text	00000284 get_fat
4009bff0 g       *ABS*	00000000 __flash_rwdata_start
40094c94 g     F .text	00000084 .hidden __eqdf2
40088d40 g     F .text	0000005c GetChar_uart
400a1cd4 g       *ABS*	00000000 __alt_heap_start
40089c70 g     F .text	0000003c printf
400879f8 g     F .text	0000064c f_printf
4009dca0 g     O .bss	00000004 control
40092cb0 g     F .text	0000009c _wcrtomb_r
40080000 g       *ABS*	00000000 __alt_mem_sram
40090fdc g     F .text	0000005c __sseek
4008de50 g     F .text	00000010 __sinit
40092578 g     F .text	00000154 __swbuf_r
4008e8c8 g     F .text	0000007c _setlocale_r
4008dcbc g     F .text	00000064 __sfmoreglue
4009dc9e g     O .bss	00000002 RxTail_1
40095e90 g     F .text	00000020 __malloc_unlock
4009df58 g     O .bss	00000224 File1
4008f528 g     F .text	0000015c memmove
4008de38 g     F .text	00000018 _cleanup
4008f7a8 g     F .text	000000a8 _Balloc
400890d8 g     F .text	000000e0 .hidden __gtdf2
00000000  w      *UND*	00000000 __errno
40088ec8 g     F .text	000000c0 get_pack_data_uart
40098514 g     F .text	000000f8 epcs_sector_erase
40141000 g     F .entry	0000001c __reset
40088cfc g     F .text	00000020 GET_POS
40080020 g       *ABS*	00000000 __flash_exceptions_start
40092b4c g     F .text	00000058 _fstat_r
4009dccc g     O .bss	00000004 errno
40090f58 g     F .text	00000008 __seofread
40080f88 g     F .text	0000016c ffs_DiskIOWrite
4009dcd8 g     O .bss	00000004 alt_argv
400a3fa4 g       *ABS*	00000000 _gp
400962a8 g     F .text	00000030 usleep
40088f88 g     F .text	00000080 uart_write
4009ac34 g     O .rwdata	00000180 alt_fd_list
4009e17c g     O .bss	00000018 Finfo
40089cac g     F .text	00000008 _putchar_r
40098750 g     F .text	00000068 epcs_write_status_register
400810f4 g     F .text	000004a8 ffs_DiskIOIoctl
40099714 g     F .text	00000090 alt_find_dev
4008f3f0 g     F .text	00000138 memcpy
4008db10 g     F .text	0000000c _cleanup_r
40089b10 g     F .text	000000d0 .hidden __floatsidf
40099204 g     F .text	00000078 alt_io_redirect
40094d18 g     F .text	000000e0 .hidden __ltdf2
40099d9c g       *ABS*	00000000 __DTOR_END__
40089d84 g     F .text	00000014 puts
40096e78 g     F .text	00000100 alt_epcs_flash_write_block
40090e3c g     F .text	00000074 __fpclassifyd
40090518 g     F .text	000000a4 __ratio
40092554 g     F .text	00000024 __vfiprintf_internal
4008665c g     F .text	00000314 f_rename
40097638 g     F .text	0000020c altera_avalon_jtag_uart_read
00000000  w      *UND*	00000000 malloc
40089c44 g     F .text	0000002c _printf_r
40093b1c g     F .text	00000008 .hidden __udivsi3
40095b4c g     F .text	000000a4 isatty
4009a238 g     O .rodata	000000c8 __mprec_tens
4008e944 g     F .text	0000000c __locale_charset
40089064 g     F .text	00000074 .hidden __fixunsdfsi
400882c8 g     F .text	000001ac xitoa
4009996c g     F .text	0000008c alt_icache_flush
4009dcc8 g     O .bss	00000004 __malloc_top_pad
40085c04 g     F .text	000001e8 f_truncate
40088044 g     F .text	00000284 xatoi
4009bfb0 g     O .rwdata	00000004 __mb_cur_max
4008e974 g     F .text	0000000c _localeconv_r
4008fba8 g     F .text	0000003c __i2b
4008e2b4 g     F .text	000004a4 __sfvwrite_r
40090eb0 g     F .text	00000054 _sbrk_r
40088474 g     F .text	00000114 put_dump
40092c54 g     F .text	0000005c _read_r
4009bfd0 g     O .rwdata	00000004 alt_max_fd
4009285c g     F .text	00000100 _fclose_r
4008dad0 g     F .text	00000030 fflush
4009dcc4 g     O .bss	00000004 __malloc_max_sbrked_mem
4009594c g     F .text	000001b0 alt_irq_register
40093b2c g     F .text	0000089c .hidden __adddf3
40096e04 g     F .text	00000074 alt_epcs_flash_erase_block
40088a9c g     F .text	00000114 IsrUart1
400902c0 g     F .text	0000011c __b2d
40093470 g     F .text	00000590 .hidden __umoddi3
40095d24 g     F .text	000000d4 lseek
40088588 g     F .text	00000068 TimerFunction
4009bfa8 g     O .rwdata	00000004 _global_impure_ptr
40098a18 g     F .text	0000005c epcs_exit_4_bytes_mode
4009089c g     F .text	000005a0 _realloc_r
400a1cd4 g       *ABS*	00000000 __bss_end
40099054 g     F .text	000000f0 alt_iic_isr_register
400961a4 g     F .text	00000104 alt_tick
40092eb0 g     F .text	000005c0 .hidden __udivdi3
40092970 g     F .text	00000184 _fputwc_r
4009a210 g     O .rodata	00000028 __mprec_bigtens
4008f98c g     F .text	00000104 __s2b
4009551c g     F .text	000000a4 .hidden __floatunsidf
40090068 g     F .text	00000060 __mcmp
40097c68 g     F .text	000000a8 altera_avalon_uart_init
4008de70 g     F .text	00000018 __fp_lock_all
40085dec g     F .text	00000218 f_unlink
40099008 g     F .text	0000004c alt_ic_irq_enabled
4009610c g     F .text	00000098 alt_alarm_stop
4009dcd0 g     O .bss	00000004 alt_irq_active
400800ec g     F .exceptions	000000d0 alt_irq_handler
4009ac0c g     O .rwdata	00000028 alt_dev_null
40088cc0 g     F .text	0000003c IsEmptyUart
400878ec g     F .text	00000074 f_putc
40087960 g     F .text	00000098 f_puts
40098b9c g     F .text	00000044 alt_dcache_flush_all
4008fa90 g     F .text	00000068 __hi0bits
40089a88 g     F .text	00000088 .hidden __fixdfsi
4009bff0 g       *ABS*	00000000 __ram_rwdata_end
4009bfc8 g     O .rwdata	00000008 alt_dev_list
40096328 g     F .text	000000f8 write
40090734 g     F .text	000000a0 _putc_r
4009a368 g       *ABS*	00000000 __ram_rodata_end
4009589c g     F .text	000000b0 fstat
40094d18 g     F .text	000000e0 .hidden __ledf2
4008fde0 g     F .text	00000140 __pow5mult
400911f8 g     F .text	0000135c ___vfiprintf_internal_r
4009dcbc g     O .bss	00000004 __nlocale_changed
40093b24 g     F .text	00000008 .hidden __umodsi3
400988d4 g     F .text	00000068 epcs_read_electronic_signature
400a1cd4 g       *ABS*	00000000 end
4009829c g     F .text	000001ac altera_avalon_uart_write
40097174 g     F .text	000000c4 altera_avalon_jtag_uart_init
400885f0 g     F .text	00000044 IoInit
40099d9c g       *ABS*	00000000 __CTOR_LIST__
40100000 g       *ABS*	00000000 __alt_stack_pointer
40097ad0 g     F .text	00000088 alt_avalon_timer_sc_init
40097bb8 g     F .text	00000060 altera_avalon_uart_write_fd
40089be0 g     F .text	00000064 .hidden __clzsi2
40097c18 g     F .text	00000050 altera_avalon_uart_close_fd
40097844 g     F .text	00000218 altera_avalon_jtag_uart_write
4008de60 g     F .text	00000004 __sfp_lock_acquire
4008f308 g     F .text	000000e8 memchr
40089e30 g     F .text	00001ffc ___vfprintf_internal_r
4008dfc4 g     F .text	000002f0 _free_r
4008e950 g     F .text	00000010 __locale_mb_cur_max
40099bd4 g     F .text	00000194 __call_exitprocs
4009e194 g     O .bss	00002000 Buff
4009dcb8 g     O .bss	00000004 __mlocale_changed
40085104 g     F .text	00000048 f_close
4009bfb4 g     O .rwdata	00000004 __malloc_sbrk_base
400801bc g     F .text	0000004c _start
4009dce0 g     O .bss	00000004 _alt_tick_rate
4008ff20 g     F .text	00000148 __lshift
40099510 g     F .text	00000204 alt_avalon_spi_command
4009dce4 g     O .bss	00000004 _alt_nticks
40095f00 g     F .text	000000fc read
4009dca4 g     O .bss	00000004 divisor
4009648c g     F .text	0000008c alt_sys_init
40099ac0 g     F .text	00000114 __register_exitproc
4008441c g     F .text	000004e4 f_read
4009dc9a g     O .bss	00000002 TxTail_1
4008fbe4 g     F .text	000001fc __multiply
40085794 g     F .text	000000e4 f_readdir
400974e4 g     F .text	00000068 altera_avalon_jtag_uart_close
4009a368 g       *ABS*	00000000 __ram_rwdata_start
40080e6c g     F .text	0000011c ffs_DiskIORead
40099d9c g       *ABS*	00000000 __ram_rodata_start
4009dd00 g     O .bss	00000028 __malloc_current_mallinfo
400903dc g     F .text	0000013c __d2b
40098448 g     F .text	0000005c epcs_read_status_register
40086444 g     F .text	00000104 f_chmod
400a0194 g     O .bss	00000224 File2
40097010 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
400998b8 g     F .text	000000b4 alt_get_fd
40080ae0 g     F .text	00000108 ffs_DiskIOTimerproc
40098a74 g     F .text	00000128 alt_busy_sleep
40092744 g     F .text	00000054 _close_r
40080be8 g     F .text	0000025c ffs_DiskIOInitialize
4009893c g     F .text	00000080 epcs_read_device_id
40099a44 g     F .text	0000007c memcmp
400970d0 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
400a1cd4 g       *ABS*	00000000 __alt_stack_base
40097120 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
4008be50 g     F .text	00000130 __swsetup_r
400a03b8 g     O .bss	0000001c Dir
400943c8 g     F .text	000008cc .hidden __divdf3
4008dd20 g     F .text	00000118 __sfp
40090630 g     F .text	00000078 __copybits
4009a804 g     O .rwdata	00000408 __malloc_av_
4008de6c g     F .text	00000004 __sinit_lock_release
40094df8 g     F .text	00000724 .hidden __muldf3
40090f04 g     F .text	00000054 __sread
4008159c g     F .text	0000002c get_fattime
400997a4 g     F .text	00000114 alt_find_file
40098c30 g     F .text	000000a4 alt_dev_llist_insert
40095e70 g     F .text	00000020 __malloc_lock
4009605c g     F .text	000000b0 sbrk
4008d8a8 g     F .text	00000228 _fflush_r
40092798 g     F .text	000000c4 _calloc_r
4009bfe8 g     O .rwdata	00000008 alt_flash_dev_list
400886d8 g     F .text	000002f4 ls_dir
4009dc78 g       *ABS*	00000000 __bss_start
4009dca8 g     O .bss	00000002 data
4008f684 g     F .text	00000124 memset
40080208 g     F .text	00000108 main
4009dcdc g     O .bss	00000004 alt_envp
4009dcc0 g     O .bss	00000004 __malloc_max_total_mem
40097070 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
400926cc g     F .text	0000001c __swbuf
40084e7c g     F .text	00000288 f_sync
400a03d4 g     O .bss	00001400 rx_buffer_1
4009dc98 g     O .bss	00000002 TxHead_1
40091038 g     F .text	00000008 __sclose
40100000 g       *ABS*	00000000 __alt_heap_limit
4009295c g     F .text	00000014 fclose
4008c180 g     F .text	00001728 _dtoa_r
4008eb60 g     F .text	000007a8 _malloc_r
40092e24 g     F .text	00000030 __ascii_wctomb
40086970 g     F .text	00000eac f_mkfs
40088d9c g     F .text	0000012c sendChar_uart
4009bfd4 g     O .rwdata	00000004 alt_errno
40083f04 g     F .text	00000094 f_mount
4008e758 g     F .text	000000b8 _fwalk
40085624 g     F .text	00000170 f_opendir
400907d4 g     F .text	000000c8 putc
40093a6c g     F .text	00000054 .hidden __divsi3
4008dea0 g     F .text	00000124 _malloc_trim_r
40099d9c g       *ABS*	00000000 __CTOR_END__
4009dc9c g     O .bss	00000002 RxHead_1
40096a84 g     F .text	00000260 alt_epcs_flash_write
40091040 g     F .text	000000a4 strcmp
40099d9c g       *ABS*	00000000 __flash_rodata_start
40099d9c g       *ABS*	00000000 __DTOR_LIST__
40081dfc g     F .text	00000370 put_fat
40094c94 g     F .text	00000084 .hidden __nedf2
40096458 g     F .text	00000034 alt_irq_init
40095ffc g     F .text	00000060 alt_release_fd
4008514c g     F .text	000004d8 f_lseek
4009a054 g     O .rodata	00000100 .hidden __clz_tab
4009dcb4 g     O .bss	00000004 _PathLocale
400a17d4 g     O .bss	00000400 tx_buffer_1
400999f8 g     F .text	00000014 atexit
400926e8 g     F .text	0000005c _write_r
4008e980 g     F .text	0000001c setlocale
4009bfac g     O .rwdata	00000004 _impure_ptr
4009dcd4 g     O .bss	00000004 alt_argc
40098d30 g     F .text	0000005c _do_dtors
40088bb0 g     F .text	00000110 InitUart
4008e96c g     F .text	00000008 __locale_cjk_lang
40080020 g       .exceptions	00000000 alt_irq_entry
40080e44 g     F .text	00000028 ffs_DiskIOStatus
40090260 g     F .text	00000060 __ulp
40085878 g     F .text	000000a0 f_stat
4008de88 g     F .text	00000018 __fp_unlock_all
40088d1c g     F .text	00000024 CLEAR_FIFO
4009bfc0 g     O .rwdata	00000008 alt_fs_list
40080020 g       *ABS*	00000000 __ram_exceptions_start
4008e99c g     F .text	0000000c localeconv
40081b0c g     F .text	0000006c clust2sect
4009860c g     F .text	000000f4 epcs_read_buffer
40120000 g       *ABS*	00000000 __alt_mem_onchip_memory2
40096550 g     F .text	00000054 alt_epcs_flash_init
40098e74 g     F .text	00000050 alt_ic_isr_register
4009bff0 g       *ABS*	00000000 _edata
40086548 g     F .text	00000114 f_utime
40097b58 g     F .text	00000060 altera_avalon_uart_read_fd
400a1cd4 g       *ABS*	00000000 _end
40098d8c g     F .text	00000068 alt_flash_open_dev
400801bc g       *ABS*	00000000 __ram_exceptions_end
40089008 g     F .text	0000005c InitUart1
40084900 g     F .text	0000057c f_write
4009754c g     F .text	000000ec altera_avalon_jtag_uart_ioctl
4009dcac g     O .bss	00000004 uartControl
40098f64 g     F .text	000000a4 alt_ic_irq_disable
400989bc g     F .text	0000005c epcs_enter_4_bytes_mode
40090f60 g     F .text	0000007c __swrite
4009bfb8 g     O .rwdata	00000004 __malloc_trim_threshold
40083f98 g     F .text	00000484 f_open
400994f0 g     F .text	00000020 altera_nios2_qsys_irq_init
4008e960 g     F .text	0000000c __locale_msgcharset
40099a0c g     F .text	00000038 exit
4008e810 g     F .text	000000b8 _fwalk_reent
400900c8 g     F .text	00000198 __mdiff
40098df4 g     F .text	00000050 alt_flash_close_dev
40093ac0 g     F .text	0000005c .hidden __modsi3
40100000 g       *ABS*	00000000 __alt_data_end
40080020 g     F .exceptions	00000000 alt_exception
4008de64 g     F .text	00000004 __sfp_lock_release
40088634 g     F .text	000000a4 put_rc
40086004 g     F .text	00000440 f_mkdir
40097fcc g     F .text	00000054 altera_avalon_uart_close
40099d68 g     F .text	00000034 _exit
40080310 g     F .text	00000024 ffs_Init
400955c0 g     F .text	00000140 alt_alarm_start
4008e9a8 g     F .text	000001b8 __smakebuf_r
40089d98 g     F .text	00000098 strlen
40098700 g     F .text	00000050 epcs_write_enable
40099398 g     F .text	00000158 open
400890d8 g     F .text	000000e0 .hidden __gedf2
4009bfbc g     O .rwdata	00000004 __wctomb
400911e0 g     F .text	00000018 __sprint_r
40098e44 g     F .text	00000030 alt_icache_flush_all
40085918 g     F .text	000002ec f_getfree
4009bfd8 g     O .rwdata	00000004 alt_priority_mask
40098ec4 g     F .text	000000a0 alt_ic_irq_enable
4008be2c g     F .text	00000024 __vfprintf_internal
40141000 g       *ABS*	00000000 __alt_mem_epcs
40098070 g     F .text	000001dc altera_avalon_uart_read
40092e54 g     F .text	0000005c _wctomb_r
400891b8 g     F .text	000008d0 .hidden __subdf3
40080ab4 g     F .text	0000002c ffs_DiskIOInit
400889cc g     F .text	000000d0 uart_handle
40096f78 g     F .text	00000098 alt_epcs_flash_read
4008faf8 g     F .text	000000b0 __lo0bits
4009bfe0 g     O .rwdata	00000008 alt_alarm_list
40098cd4 g     F .text	0000005c _do_ctors
4009dcb0 g     O .bss	00000002 status
40092d4c g     F .text	000000d8 wcrtomb
40095750 g     F .text	000000d0 close
40095c54 g     F .text	00000080 alt_load
40092af4 g     F .text	00000058 fputwc
00000000  w      *UND*	00000000 free
4008de68 g     F .text	00000004 __sinit_lock_acquire
400987b8 g     F .text	0000011c epcs_write_buffer
4008f878 g     F .text	00000114 __multadd
4008f850 g     F .text	00000028 _Bfree



Disassembly of section .entry:

40141000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && !defined(ALT_SIM_OPTIMIZE)
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
40141000:	00840014 	movui	r2,4096
#endif

0:
    initi r2
40141004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
40141008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
4014100c:	00bffd16 	blt	zero,r2,40141004 <__reset+0x4>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
40141010:	00500234 	movhi	at,16392
    ori r1, r1, %lo(_start)
40141014:	08406f14 	ori	at,at,444
    jmp r1
40141018:	0800683a 	jmp	at
4014101c:	00000000 	call	40000000 <__alt_mem_sram-0x80000>

Disassembly of section .exceptions:

40080020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
40080020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
40080024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
40080028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
4008002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
40080030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
40080034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
40080038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
4008003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
40080040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
40080044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
40080048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
4008004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
40080050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
40080054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
40080058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
4008005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
40080060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
40080064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
40080068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
4008006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
40080070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
40080074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
40080078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
4008007c:	10000326 	beq	r2,zero,4008008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
40080080:	20000226 	beq	r4,zero,4008008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
40080084:	00800ec0 	call	400800ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
40080088:	00000306 	br	40080098 <alt_exception_unknown+0x4>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
4008008c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
40080090:	e8bfff17 	ldw	r2,-4(ea)

40080094 <alt_exception_unknown>:
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
40080094:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
40080098:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
4008009c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
400800a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
400800a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
400800a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
400800ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
400800b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
400800b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
400800b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
400800bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
400800c0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
400800c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
400800c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
400800cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
400800d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
400800d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
400800d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
400800dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
400800e0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
400800e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
400800e8:	ef80083a 	eret

400800ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
400800ec:	defff904 	addi	sp,sp,-28
400800f0:	dfc00615 	stw	ra,24(sp)
400800f4:	df000515 	stw	fp,20(sp)
400800f8:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
400800fc:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
40080100:	0005313a 	rdctl	r2,ipending
40080104:	e0bffe15 	stw	r2,-8(fp)

  return active;
40080108:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
4008010c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
40080110:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
40080114:	00800044 	movi	r2,1
40080118:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
4008011c:	e0fffb17 	ldw	r3,-20(fp)
40080120:	e0bffc17 	ldw	r2,-16(fp)
40080124:	1884703a 	and	r2,r3,r2
40080128:	10001426 	beq	r2,zero,4008017c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
4008012c:	009002b4 	movhi	r2,16394
40080130:	1086f504 	addi	r2,r2,7124
40080134:	e0fffd17 	ldw	r3,-12(fp)
40080138:	180690fa 	slli	r3,r3,3
4008013c:	10c5883a 	add	r2,r2,r3
40080140:	10c00017 	ldw	r3,0(r2)
40080144:	009002b4 	movhi	r2,16394
40080148:	1086f504 	addi	r2,r2,7124
4008014c:	e13ffd17 	ldw	r4,-12(fp)
40080150:	200890fa 	slli	r4,r4,3
40080154:	1105883a 	add	r2,r2,r4
40080158:	10800104 	addi	r2,r2,4
4008015c:	10800017 	ldw	r2,0(r2)
40080160:	1009883a 	mov	r4,r2
40080164:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
40080168:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
4008016c:	0005313a 	rdctl	r2,ipending
40080170:	e0bfff15 	stw	r2,-4(fp)

  return active;
40080174:	e0bfff17 	ldw	r2,-4(fp)
40080178:	00000706 	br	40080198 <alt_irq_handler+0xac>
      }
      mask <<= 1;
4008017c:	e0bffc17 	ldw	r2,-16(fp)
40080180:	1085883a 	add	r2,r2,r2
40080184:	e0bffc15 	stw	r2,-16(fp)
      i++;
40080188:	e0bffd17 	ldw	r2,-12(fp)
4008018c:	10800044 	addi	r2,r2,1
40080190:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
40080194:	003fe106 	br	4008011c <__alt_mem_epcs+0xfff3f11c>

    active = alt_irq_pending ();
40080198:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
4008019c:	e0bffb17 	ldw	r2,-20(fp)
400801a0:	103fdb1e 	bne	r2,zero,40080110 <__alt_mem_epcs+0xfff3f110>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
400801a4:	0001883a 	nop
}
400801a8:	e037883a 	mov	sp,fp
400801ac:	dfc00117 	ldw	ra,4(sp)
400801b0:	df000017 	ldw	fp,0(sp)
400801b4:	dec00204 	addi	sp,sp,8
400801b8:	f800283a 	ret

Disassembly of section .text:

400801bc <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
400801bc:	00820014 	movui	r2,2048
#endif

0:
    initd 0(r2)
400801c0:	10000033 	initd	0(r2)
#ifdef NIOS2_ECC_PRESENT
    addi r2, r2, -4
#else
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
400801c4:	10bff804 	addi	r2,r2,-32
#endif
    bgt r2, zero, 0b
400801c8:	00bffd16 	blt	zero,r2,400801c0 <__alt_mem_epcs+0xfff3f1c0>

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
400801cc:	06d00434 	movhi	sp,16400
    ori sp, sp, %lo(__alt_stack_pointer)
400801d0:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
400801d4:	069002b4 	movhi	gp,16394
    ori gp, gp, %lo(_gp)
400801d8:	d68fe914 	ori	gp,gp,16292
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
400801dc:	00900274 	movhi	r2,16393
    ori r2, r2, %lo(__bss_start)
400801e0:	10b71e14 	ori	r2,r2,56440

    movhi r3, %hi(__bss_end)
400801e4:	00d002b4 	movhi	r3,16394
    ori r3, r3, %lo(__bss_end)
400801e8:	18c73514 	ori	r3,r3,7380

    beq r2, r3, 1f
400801ec:	10c00326 	beq	r2,r3,400801fc <_start+0x40>

0:
    stw zero, (r2)
400801f0:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
400801f4:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
400801f8:	10fffd36 	bltu	r2,r3,400801f0 <__alt_mem_epcs+0xfff3f1f0>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
400801fc:	0095c540 	call	40095c54 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
40080200:	0095df80 	call	40095df8 <alt_main>

40080204 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
40080204:	003fff06 	br	40080204 <__alt_mem_epcs+0xfff3f204>

40080208 <main>:
extern FATFS Fatfs[_VOLUMES]; /* File system object for each logical drive */

/***************************************************************************/
/*  main                                                                   */
/***************************************************************************/
int main(void) {
40080208:	defffd04 	addi	sp,sp,-12
4008020c:	dfc00215 	stw	ra,8(sp)
40080210:	df000115 	stw	fp,4(sp)
40080214:	df000104 	addi	fp,sp,4

	FATFS *fs; /* Pointer to file system object */
	unsigned char counter = 0;
40080218:	e03fff85 	stb	zero,-2(fp)
	unsigned short counter2 = 0;
4008021c:	e03fff0d 	sth	zero,-4(fp)
	//Sd_card init
	IoInit();
40080220:	00885f00 	call	400885f0 <IoInit>
	if ((uint16_t) disk_initialize(0) == 0) {
40080224:	0009883a 	mov	r4,zero
40080228:	0080be80 	call	40080be8 <ffs_DiskIOInitialize>
4008022c:	10803fcc 	andi	r2,r2,255
40080230:	10000b1e 	bne	r2,zero,40080260 <main+0x58>
		puts("sd card was initialized");
40080234:	011002b4 	movhi	r4,16394
40080238:	21276704 	addi	r4,r4,-25188
4008023c:	0089d840 	call	40089d84 <puts>
		f_mount(0, &Fatfs[0]);
40080240:	0009883a 	mov	r4,zero
40080244:	015002b4 	movhi	r5,16394
40080248:	29774a04 	addi	r5,r5,-8920
4008024c:	0083f040 	call	40083f04 <f_mount>

		//list directory
		ls_dir("");
40080250:	011002b4 	movhi	r4,16394
40080254:	21276d04 	addi	r4,r4,-25164
40080258:	00886d80 	call	400886d8 <ls_dir>
4008025c:	00000306 	br	4008026c <main+0x64>

	} else {
		puts("sd card was NOT initialized");
40080260:	011002b4 	movhi	r4,16394
40080264:	21276e04 	addi	r4,r4,-25160
40080268:	0089d840 	call	40089d84 <puts>
	}

	usleep(5000000);
4008026c:	01001334 	movhi	r4,76
40080270:	2112d004 	addi	r4,r4,19264
40080274:	00962a80 	call	400962a8 <usleep>

	//Init UART
	InitUart(38400);
40080278:	01258014 	movui	r4,38400
4008027c:	0088bb00 	call	40088bb0 <InitUart>

	while (1) { // programa principal

		//IOWR(LED_GREEN_BASE, 0, counter);
		IOWR(LED_RED_BASE, 0, counter2);
40080280:	e0ffff0b 	ldhu	r3,-4(fp)
40080284:	00900534 	movhi	r2,16404
40080288:	10881c04 	addi	r2,r2,8304
4008028c:	10c00035 	stwio	r3,0(r2)

		printf("LED_RED[9:0]= x%03x\n", counter2);
40080290:	e0bfff0b 	ldhu	r2,-4(fp)
40080294:	011002b4 	movhi	r4,16394
40080298:	21277504 	addi	r4,r4,-25132
4008029c:	100b883a 	mov	r5,r2
400802a0:	0089c700 	call	40089c70 <printf>
		//counter++;
		counter2++;
400802a4:	e0bfff0b 	ldhu	r2,-4(fp)
400802a8:	10800044 	addi	r2,r2,1
400802ac:	e0bfff0d 	sth	r2,-4(fp)
		sendChar_uart('h');
400802b0:	01001a04 	movi	r4,104
400802b4:	0088d9c0 	call	40088d9c <sendChar_uart>
		if (!IsEmptyUart()) {
400802b8:	0088cc00 	call	40088cc0 <IsEmptyUart>
400802bc:	10803fcc 	andi	r2,r2,255
400802c0:	10000f1e 	bne	r2,zero,40080300 <main+0xf8>
			while (!IsEmptyUart()) {
400802c4:	00000b06 	br	400802f4 <main+0xec>
				counter=GetChar_uart();
400802c8:	0088d400 	call	40088d40 <GetChar_uart>
400802cc:	e0bfff85 	stb	r2,-2(fp)
				IOWR(LED_GREEN_BASE, 0, counter);
400802d0:	e0ffff83 	ldbu	r3,-2(fp)
400802d4:	00900534 	movhi	r2,16404
400802d8:	10882004 	addi	r2,r2,8320
400802dc:	10c00035 	stwio	r3,0(r2)
				printf("LED_GREEN[7:0]= x%02x\n", counter);
400802e0:	e0bfff83 	ldbu	r2,-2(fp)
400802e4:	011002b4 	movhi	r4,16394
400802e8:	21277b04 	addi	r4,r4,-25108
400802ec:	100b883a 	mov	r5,r2
400802f0:	0089c700 	call	40089c70 <printf>
		printf("LED_RED[9:0]= x%03x\n", counter2);
		//counter++;
		counter2++;
		sendChar_uart('h');
		if (!IsEmptyUart()) {
			while (!IsEmptyUart()) {
400802f4:	0088cc00 	call	40088cc0 <IsEmptyUart>
400802f8:	10803fcc 	andi	r2,r2,255
400802fc:	103ff226 	beq	r2,zero,400802c8 <__alt_mem_epcs+0xfff3f2c8>
				counter=GetChar_uart();
				IOWR(LED_GREEN_BASE, 0, counter);
				printf("LED_GREEN[7:0]= x%02x\n", counter);
			}
		}
		usleep(100000);
40080300:	010000b4 	movhi	r4,2
40080304:	2121a804 	addi	r4,r4,-31072
40080308:	00962a80 	call	400962a8 <usleep>

	}
4008030c:	003fdc06 	br	40080280 <__alt_mem_epcs+0xfff3f280>

40080310 <ffs_Init>:
/*  In    : none                                                           */
/*  Out   : none                                                           */
/*  Return: error cause                                                    */
/***************************************************************************/
FFS_RESULT ffs_Init(void)
{
40080310:	defffe04 	addi	sp,sp,-8
40080314:	df000115 	stw	fp,4(sp)
40080318:	df000104 	addi	fp,sp,4
   FFS_RESULT Error = FFS_OK;
4008031c:	e03fff0d 	sth	zero,-4(fp)
   
   return (Error);
40080320:	e0bfff0b 	ldhu	r2,-4(fp)
} /* ffs_Init */
40080324:	e037883a 	mov	sp,fp
40080328:	df000017 	ldw	fp,0(sp)
4008032c:	dec00104 	addi	sp,sp,4
40080330:	f800283a 	ret

40080334 <SetLowSpeed>:
/*  In    : none                                                           */
/*  Out   : none                                                           */
/*  Return: none                                                           */
/***************************************************************************/
static void SetLowSpeed(void)
{
40080334:	deffff04 	addi	sp,sp,-4
40080338:	df000015 	stw	fp,0(sp)
4008033c:	d839883a 	mov	fp,sp
   Control1 &= ~0xFF00;
40080340:	d0e73717 	ldw	r3,-25380(gp)
40080344:	00bffff4 	movhi	r2,65535
40080348:	10803fc4 	addi	r2,r2,255
4008034c:	1884703a 	and	r2,r3,r2
40080350:	d0a73715 	stw	r2,-25380(gp)
   Control1 |= (249 << 8);
40080354:	d0a73717 	ldw	r2,-25380(gp)
40080358:	10be4014 	ori	r2,r2,63744
4008035c:	d0a73715 	stw	r2,-25380(gp)
   SPI_CTRL  = Control1;
40080360:	00b00534 	movhi	r2,49172
40080364:	10880204 	addi	r2,r2,8200
40080368:	d0e73717 	ldw	r3,-25380(gp)
4008036c:	10c00015 	stw	r3,0(r2)
} /* SetLowSpeed */
40080370:	e037883a 	mov	sp,fp
40080374:	df000017 	ldw	fp,0(sp)
40080378:	dec00104 	addi	sp,sp,4
4008037c:	f800283a 	ret

40080380 <SetHighSpeed>:
/*  In    : none                                                           */
/*  Out   : none                                                           */
/*  Return: none                                                           */
/***************************************************************************/
static void SetHighSpeed(void)
{
40080380:	deffff04 	addi	sp,sp,-4
40080384:	df000015 	stw	fp,0(sp)
40080388:	d839883a 	mov	fp,sp
   Control1 &= ~0xFF00;
4008038c:	d0e73717 	ldw	r3,-25380(gp)
40080390:	00bffff4 	movhi	r2,65535
40080394:	10803fc4 	addi	r2,r2,255
40080398:	1884703a 	and	r2,r3,r2
4008039c:	d0a73715 	stw	r2,-25380(gp)

   if (0 == (CardType & 0x01))
400803a0:	d0a73503 	ldbu	r2,-25388(gp)
400803a4:	10803fcc 	andi	r2,r2,255
400803a8:	1080004c 	andi	r2,r2,1
400803ac:	1000041e 	bne	r2,zero,400803c0 <SetHighSpeed+0x40>
   {
      /* SD card 25 MHz */
      Control1 |= (1 << 8);
400803b0:	d0a73717 	ldw	r2,-25380(gp)
400803b4:	10804014 	ori	r2,r2,256
400803b8:	d0a73715 	stw	r2,-25380(gp)
400803bc:	00000306 	br	400803cc <SetHighSpeed+0x4c>
   }
   else
   {
      /* MMC card 16 MHz */
      Control1 |= (2 << 8);
400803c0:	d0a73717 	ldw	r2,-25380(gp)
400803c4:	10808014 	ori	r2,r2,512
400803c8:	d0a73715 	stw	r2,-25380(gp)
   }
   SPI_CTRL  = Control1;
400803cc:	00b00534 	movhi	r2,49172
400803d0:	10880204 	addi	r2,r2,8200
400803d4:	d0e73717 	ldw	r3,-25380(gp)
400803d8:	10c00015 	stw	r3,0(r2)
} /* SetHighSpeed */
400803dc:	e037883a 	mov	sp,fp
400803e0:	df000017 	ldw	fp,0(sp)
400803e4:	dec00104 	addi	sp,sp,4
400803e8:	f800283a 	ret

400803ec <InitDiskIOHardware>:
/*  In    : none                                                           */
/*  Out   : none                                                           */
/*  Return: none                                                           */
/***************************************************************************/
static void InitDiskIOHardware(void)
{
400803ec:	defffe04 	addi	sp,sp,-8
400803f0:	dfc00115 	stw	ra,4(sp)
400803f4:	df000015 	stw	fp,0(sp)
400803f8:	d839883a 	mov	fp,sp
   /*
    * Deselct before to prevent glitch
    */
   DESELECT();
400803fc:	d0a73717 	ldw	r2,-25380(gp)
40080400:	10800054 	ori	r2,r2,1
40080404:	d0a73715 	stw	r2,-25380(gp)
40080408:	00b00534 	movhi	r2,49172
4008040c:	10880204 	addi	r2,r2,8200
40080410:	d0e73717 	ldw	r3,-25380(gp)
40080414:	10c00015 	stw	r3,0(r2)

   /* Slow during init */
   SetLowSpeed();
40080418:	00803340 	call	40080334 <SetLowSpeed>
   
} /* InitDiskIOHardware */
4008041c:	e037883a 	mov	sp,fp
40080420:	dfc00117 	ldw	ra,4(sp)
40080424:	df000017 	ldw	fp,0(sp)
40080428:	dec00204 	addi	sp,sp,8
4008042c:	f800283a 	ret

40080430 <Set8BitTransfer>:
/*  In    : none                                                           */
/*  Out   : none                                                           */
/*  Return: none                                                           */
/***************************************************************************/
static void Set8BitTransfer(void)
{
40080430:	deffff04 	addi	sp,sp,-4
40080434:	df000015 	stw	fp,0(sp)
40080438:	d839883a 	mov	fp,sp
   Control1 &= ~CTRL_BIT32;
4008043c:	d0e73717 	ldw	r3,-25380(gp)
40080440:	00bfff44 	movi	r2,-3
40080444:	1884703a 	and	r2,r3,r2
40080448:	d0a73715 	stw	r2,-25380(gp)
   SPI_CTRL  = Control1;
4008044c:	00b00534 	movhi	r2,49172
40080450:	10880204 	addi	r2,r2,8200
40080454:	d0e73717 	ldw	r3,-25380(gp)
40080458:	10c00015 	stw	r3,0(r2)
} /* Set8BitTransfer */
4008045c:	e037883a 	mov	sp,fp
40080460:	df000017 	ldw	fp,0(sp)
40080464:	dec00104 	addi	sp,sp,4
40080468:	f800283a 	ret

4008046c <Set32BitTransfer>:
/*  In    : none                                                           */
/*  Out   : none                                                           */
/*  Return: none                                                           */
/***************************************************************************/
static void Set32BitTransfer(void)
{
4008046c:	deffff04 	addi	sp,sp,-4
40080470:	df000015 	stw	fp,0(sp)
40080474:	d839883a 	mov	fp,sp
   Control1 |= CTRL_BIT32;
40080478:	d0a73717 	ldw	r2,-25380(gp)
4008047c:	10800094 	ori	r2,r2,2
40080480:	d0a73715 	stw	r2,-25380(gp)
   SPI_CTRL  = Control1;
40080484:	00b00534 	movhi	r2,49172
40080488:	10880204 	addi	r2,r2,8200
4008048c:	d0e73717 	ldw	r3,-25380(gp)
40080490:	10c00015 	stw	r3,0(r2)
} /* Set32BitTransfer */
40080494:	e037883a 	mov	sp,fp
40080498:	df000017 	ldw	fp,0(sp)
4008049c:	dec00104 	addi	sp,sp,4
400804a0:	f800283a 	ret

400804a4 <ReceiveU8>:
/*  In    : none                                                           */
/*  Out   : none                                                           */
/*  Return: Data                                                           */
/***************************************************************************/
static FFS_U8 ReceiveU8 (void)
{
400804a4:	deffff04 	addi	sp,sp,-4
400804a8:	df000015 	stw	fp,0(sp)
400804ac:	d839883a 	mov	fp,sp
   SPI_TXR = (uint32_t) 0xff;
400804b0:	00b00534 	movhi	r2,49172
400804b4:	10880004 	addi	r2,r2,8192
400804b8:	00c03fc4 	movi	r3,255
400804bc:	10c00015 	stw	r3,0(r2)

   /* wait for char */
   while (!(SPI_SR & SPI_SR_DONE)) ;
400804c0:	0001883a 	nop
400804c4:	00b00534 	movhi	r2,49172
400804c8:	10880304 	addi	r2,r2,8204
400804cc:	10800017 	ldw	r2,0(r2)
400804d0:	1080004c 	andi	r2,r2,1
400804d4:	103ffb26 	beq	r2,zero,400804c4 <__alt_mem_epcs+0xfff3f4c4>

   return(SPI_RXR);
400804d8:	00b00534 	movhi	r2,49172
400804dc:	10880104 	addi	r2,r2,8196
400804e0:	10800017 	ldw	r2,0(r2)
} /* ReceiveU8 */
400804e4:	e037883a 	mov	sp,fp
400804e8:	df000017 	ldw	fp,0(sp)
400804ec:	dec00104 	addi	sp,sp,4
400804f0:	f800283a 	ret

400804f4 <ReceiveDatablock>:
/*  In    : buff, btr                                                      */
/*  Out   : none                                                           */
/*  Return: In case of an error return FALSE                               */
/***************************************************************************/
static int ReceiveDatablock(FFS_U8 * buff, uint32_t btr)
{
400804f4:	defff904 	addi	sp,sp,-28
400804f8:	dfc00615 	stw	ra,24(sp)
400804fc:	df000515 	stw	fp,20(sp)
40080500:	df000504 	addi	fp,sp,20
40080504:	e13ffe15 	stw	r4,-8(fp)
40080508:	e17fff15 	stw	r5,-4(fp)
   FFS_U8 token, cnt;
   FFS_U32 *buff32 = (FFS_U32*)buff;
4008050c:	e0bffe17 	ldw	r2,-8(fp)
40080510:	e0bffc15 	stw	r2,-16(fp)

   Timer1 = 10;
40080514:	00800284 	movi	r2,10
40080518:	d0a7358d 	sth	r2,-25386(gp)
   do /* Wait for data packet in timeout of 100ms */
   {
      token = ReceiveU8();
4008051c:	00804a40 	call	400804a4 <ReceiveU8>
40080520:	e0bffd05 	stb	r2,-12(fp)
   }
   while ((token == 0xFF) && Timer1);
40080524:	e0bffd03 	ldbu	r2,-12(fp)
40080528:	10803fd8 	cmpnei	r2,r2,255
4008052c:	1000031e 	bne	r2,zero,4008053c <ReceiveDatablock+0x48>
40080530:	d0a7358b 	ldhu	r2,-25386(gp)
40080534:	10bfffcc 	andi	r2,r2,65535
40080538:	103ff81e 	bne	r2,zero,4008051c <__alt_mem_epcs+0xfff3f51c>

   if (token != 0xFE)
4008053c:	e0bffd03 	ldbu	r2,-12(fp)
40080540:	10803fa0 	cmpeqi	r2,r2,254
40080544:	1000021e 	bne	r2,zero,40080550 <ReceiveDatablock+0x5c>
      return(FFS_FALSE);  /* If not valid data token, return with error */
40080548:	0005883a 	mov	r2,zero
4008054c:	00002f06 	br	4008060c <ReceiveDatablock+0x118>
      
   /* Receive the data block into buffer */
   Set32BitTransfer();
40080550:	008046c0 	call	4008046c <Set32BitTransfer>
   
   /* Divide by 8 */
   cnt = btr >> 3;
40080554:	e0bfff17 	ldw	r2,-4(fp)
40080558:	1004d0fa 	srli	r2,r2,3
4008055c:	e0bffb05 	stb	r2,-20(fp)

   do /* Receive the data block into buffer */
   {
      RECEIVE_FAST(buff32);
40080560:	00b00534 	movhi	r2,49172
40080564:	10880004 	addi	r2,r2,8192
40080568:	00ffffc4 	movi	r3,-1
4008056c:	10c00015 	stw	r3,0(r2)
40080570:	0001883a 	nop
40080574:	00b00534 	movhi	r2,49172
40080578:	10880304 	addi	r2,r2,8204
4008057c:	10800017 	ldw	r2,0(r2)
40080580:	1080004c 	andi	r2,r2,1
40080584:	103ffb26 	beq	r2,zero,40080574 <__alt_mem_epcs+0xfff3f574>
40080588:	e0fffc17 	ldw	r3,-16(fp)
4008058c:	18800104 	addi	r2,r3,4
40080590:	e0bffc15 	stw	r2,-16(fp)
40080594:	00b00534 	movhi	r2,49172
40080598:	10880104 	addi	r2,r2,8196
4008059c:	10800017 	ldw	r2,0(r2)
400805a0:	18800015 	stw	r2,0(r3)
      RECEIVE_FAST(buff32);
400805a4:	00b00534 	movhi	r2,49172
400805a8:	10880004 	addi	r2,r2,8192
400805ac:	00ffffc4 	movi	r3,-1
400805b0:	10c00015 	stw	r3,0(r2)
400805b4:	0001883a 	nop
400805b8:	00b00534 	movhi	r2,49172
400805bc:	10880304 	addi	r2,r2,8204
400805c0:	10800017 	ldw	r2,0(r2)
400805c4:	1080004c 	andi	r2,r2,1
400805c8:	103ffb26 	beq	r2,zero,400805b8 <__alt_mem_epcs+0xfff3f5b8>
400805cc:	e0fffc17 	ldw	r3,-16(fp)
400805d0:	18800104 	addi	r2,r3,4
400805d4:	e0bffc15 	stw	r2,-16(fp)
400805d8:	00b00534 	movhi	r2,49172
400805dc:	10880104 	addi	r2,r2,8196
400805e0:	10800017 	ldw	r2,0(r2)
400805e4:	18800015 	stw	r2,0(r3)
   }
   while (--cnt);
400805e8:	e0bffb03 	ldbu	r2,-20(fp)
400805ec:	10bfffc4 	addi	r2,r2,-1
400805f0:	e0bffb05 	stb	r2,-20(fp)
400805f4:	e0bffb03 	ldbu	r2,-20(fp)
400805f8:	103fd91e 	bne	r2,zero,40080560 <__alt_mem_epcs+0xfff3f560>
   
   Set8BitTransfer();   
400805fc:	00804300 	call	40080430 <Set8BitTransfer>
   ReceiveU8();   /* Discard CRC */
40080600:	00804a40 	call	400804a4 <ReceiveU8>
   ReceiveU8();   /* Discard CRC */
40080604:	00804a40 	call	400804a4 <ReceiveU8>

   return(FFS_TRUE);  /* Return with success */
40080608:	00800044 	movi	r2,1
} /* ReceiveDatablock */
4008060c:	e037883a 	mov	sp,fp
40080610:	dfc00117 	ldw	ra,4(sp)
40080614:	df000017 	ldw	fp,0(sp)
40080618:	dec00204 	addi	sp,sp,8
4008061c:	f800283a 	ret

40080620 <TransmitDatablock>:
/*  In    : buff, token (Data/Stop token)                                  */
/*  Out   : none                                                           */
/*  Return: In case of an error return FALSE                               */
/***************************************************************************/
static int TransmitDatablock(const FFS_U8 * buff, FFS_U8 token)
{
40080620:	defff904 	addi	sp,sp,-28
40080624:	dfc00615 	stw	ra,24(sp)
40080628:	df000515 	stw	fp,20(sp)
4008062c:	df000504 	addi	fp,sp,20
40080630:	e13ffe15 	stw	r4,-8(fp)
40080634:	2805883a 	mov	r2,r5
40080638:	e0bfff05 	stb	r2,-4(fp)
   FFS_U8 resp, cnt = 0;
4008063c:	e03ffb05 	stb	zero,-20(fp)
   FFS_U32 *buff32 = (FFS_U32*)buff;
40080640:	e0bffe17 	ldw	r2,-8(fp)
40080644:	e0bffc15 	stw	r2,-16(fp)

   if (WaitReady() != 0xFF)
40080648:	00807cc0 	call	400807cc <WaitReady>
4008064c:	10803fcc 	andi	r2,r2,255
40080650:	10803fe0 	cmpeqi	r2,r2,255
40080654:	1000021e 	bne	r2,zero,40080660 <TransmitDatablock+0x40>
      return(FFS_FALSE);
40080658:	0005883a 	mov	r2,zero
4008065c:	00004d06 	br	40080794 <TransmitDatablock+0x174>

   TRANSMIT_U8(token);  /* Xmit data token */
40080660:	00b00534 	movhi	r2,49172
40080664:	10880004 	addi	r2,r2,8192
40080668:	e0ffff03 	ldbu	r3,-4(fp)
4008066c:	10c00015 	stw	r3,0(r2)
40080670:	0001883a 	nop
40080674:	00b00534 	movhi	r2,49172
40080678:	10880304 	addi	r2,r2,8204
4008067c:	10800017 	ldw	r2,0(r2)
40080680:	1080004c 	andi	r2,r2,1
40080684:	103ffb26 	beq	r2,zero,40080674 <__alt_mem_epcs+0xfff3f674>
   if (token != 0xFD)   /* Is data token */
40080688:	e0bfff03 	ldbu	r2,-4(fp)
4008068c:	10803f60 	cmpeqi	r2,r2,253
40080690:	10003f1e 	bne	r2,zero,40080790 <TransmitDatablock+0x170>
   {
   
      cnt = 512 / 8;
40080694:	00801004 	movi	r2,64
40080698:	e0bffb05 	stb	r2,-20(fp)
   
      /* Send the 512 byte data block */
      Set32BitTransfer();
4008069c:	008046c0 	call	4008046c <Set32BitTransfer>
      do /* Send the 512 byte data block */
      {
         TRANSMIT_FAST(*buff32++);
400806a0:	00b00534 	movhi	r2,49172
400806a4:	10880004 	addi	r2,r2,8192
400806a8:	e0fffc17 	ldw	r3,-16(fp)
400806ac:	19000104 	addi	r4,r3,4
400806b0:	e13ffc15 	stw	r4,-16(fp)
400806b4:	18c00017 	ldw	r3,0(r3)
400806b8:	10c00015 	stw	r3,0(r2)
400806bc:	0001883a 	nop
400806c0:	00b00534 	movhi	r2,49172
400806c4:	10880304 	addi	r2,r2,8204
400806c8:	10800017 	ldw	r2,0(r2)
400806cc:	1080004c 	andi	r2,r2,1
400806d0:	103ffb26 	beq	r2,zero,400806c0 <__alt_mem_epcs+0xfff3f6c0>
         TRANSMIT_FAST(*buff32++);
400806d4:	00b00534 	movhi	r2,49172
400806d8:	10880004 	addi	r2,r2,8192
400806dc:	e0fffc17 	ldw	r3,-16(fp)
400806e0:	19000104 	addi	r4,r3,4
400806e4:	e13ffc15 	stw	r4,-16(fp)
400806e8:	18c00017 	ldw	r3,0(r3)
400806ec:	10c00015 	stw	r3,0(r2)
400806f0:	0001883a 	nop
400806f4:	00b00534 	movhi	r2,49172
400806f8:	10880304 	addi	r2,r2,8204
400806fc:	10800017 	ldw	r2,0(r2)
40080700:	1080004c 	andi	r2,r2,1
40080704:	103ffb26 	beq	r2,zero,400806f4 <__alt_mem_epcs+0xfff3f6f4>
      }
      while (--cnt);
40080708:	e0bffb03 	ldbu	r2,-20(fp)
4008070c:	10bfffc4 	addi	r2,r2,-1
40080710:	e0bffb05 	stb	r2,-20(fp)
40080714:	e0bffb03 	ldbu	r2,-20(fp)
40080718:	103fe11e 	bne	r2,zero,400806a0 <__alt_mem_epcs+0xfff3f6a0>

      Set8BitTransfer();
4008071c:	00804300 	call	40080430 <Set8BitTransfer>
      TRANSMIT_U8(0xFF);   /* CRC (Dummy) */
40080720:	00b00534 	movhi	r2,49172
40080724:	10880004 	addi	r2,r2,8192
40080728:	00c03fc4 	movi	r3,255
4008072c:	10c00015 	stw	r3,0(r2)
40080730:	0001883a 	nop
40080734:	00b00534 	movhi	r2,49172
40080738:	10880304 	addi	r2,r2,8204
4008073c:	10800017 	ldw	r2,0(r2)
40080740:	1080004c 	andi	r2,r2,1
40080744:	103ffb26 	beq	r2,zero,40080734 <__alt_mem_epcs+0xfff3f734>
      TRANSMIT_U8(0xFF);   /* CRC (Dummy) */
40080748:	00b00534 	movhi	r2,49172
4008074c:	10880004 	addi	r2,r2,8192
40080750:	00c03fc4 	movi	r3,255
40080754:	10c00015 	stw	r3,0(r2)
40080758:	0001883a 	nop
4008075c:	00b00534 	movhi	r2,49172
40080760:	10880304 	addi	r2,r2,8204
40080764:	10800017 	ldw	r2,0(r2)
40080768:	1080004c 	andi	r2,r2,1
4008076c:	103ffb26 	beq	r2,zero,4008075c <__alt_mem_epcs+0xfff3f75c>

      resp = ReceiveU8();  /* Reveive data response */
40080770:	00804a40 	call	400804a4 <ReceiveU8>
40080774:	e0bffd05 	stb	r2,-12(fp)
      if ((resp & 0x1F) != 0x05) /* If not accepted, return with error */
40080778:	e0bffd03 	ldbu	r2,-12(fp)
4008077c:	108007cc 	andi	r2,r2,31
40080780:	10800160 	cmpeqi	r2,r2,5
40080784:	1000021e 	bne	r2,zero,40080790 <TransmitDatablock+0x170>
      {
         return(FFS_FALSE);
40080788:	0005883a 	mov	r2,zero
4008078c:	00000106 	br	40080794 <TransmitDatablock+0x174>
      }
   }

   return(FFS_TRUE);  /* Return with success */
40080790:	00800044 	movi	r2,1
} /* TransmitDatablock */
40080794:	e037883a 	mov	sp,fp
40080798:	dfc00117 	ldw	ra,4(sp)
4008079c:	df000017 	ldw	fp,0(sp)
400807a0:	dec00204 	addi	sp,sp,8
400807a4:	f800283a 	ret

400807a8 <GetCDWP>:
/*  In    : none                                                           */
/*  Out   : none                                                           */
/*  Return: Data                                                           */
/***************************************************************************/
static FFS_U32 GetCDWP(void)
{
400807a8:	defffe04 	addi	sp,sp,-8
400807ac:	df000115 	stw	fp,4(sp)
400807b0:	df000104 	addi	fp,sp,4
   FFS_U32 value = 0;
400807b4:	e03fff15 	stw	zero,-4(fp)
   
   /*
    * CD and WP is not supported by the Altera DE1 board.
    */

   return(value);
400807b8:	e0bfff17 	ldw	r2,-4(fp)
} /* GetCDWP */
400807bc:	e037883a 	mov	sp,fp
400807c0:	df000017 	ldw	fp,0(sp)
400807c4:	dec00104 	addi	sp,sp,4
400807c8:	f800283a 	ret

400807cc <WaitReady>:

/*-----------------------------------------------------------------------*/
/* Wait for card ready                                                   */
/*-----------------------------------------------------------------------*/
static FFS_U8 WaitReady (void)
{
400807cc:	defffd04 	addi	sp,sp,-12
400807d0:	dfc00215 	stw	ra,8(sp)
400807d4:	df000115 	stw	fp,4(sp)
400807d8:	df000104 	addi	fp,sp,4
   FFS_U8 res;
   
#if (FFS_USE_REAL_TIME_OS == 0)
   Timer2 = (WAIT_READY_TIME_MAX_MS / 10);
400807dc:	00800c84 	movi	r2,50
400807e0:	d0a7360d 	sth	r2,-25384(gp)
   ReceiveU8();
400807e4:	00804a40 	call	400804a4 <ReceiveU8>
   do
   {
      res = ReceiveU8();
400807e8:	00804a40 	call	400804a4 <ReceiveU8>
400807ec:	e0bfff05 	stb	r2,-4(fp)
   }
   while ((res != 0xFF) && Timer2);
400807f0:	e0bfff03 	ldbu	r2,-4(fp)
400807f4:	10803fe0 	cmpeqi	r2,r2,255
400807f8:	1000031e 	bne	r2,zero,40080808 <WaitReady+0x3c>
400807fc:	d0a7360b 	ldhu	r2,-25384(gp)
40080800:	10bfffcc 	andi	r2,r2,65535
40080804:	103ff81e 	bne	r2,zero,400807e8 <__alt_mem_epcs+0xfff3f7e8>
      ff_wait_ms(WAIT_READY_TIME_RTOS_MS);
   }
   while ((res != 0xFF) && (cnt < WAIT_READY_TIME_CNT_RTOS));
#endif   

   return(res);
40080808:	e0bfff03 	ldbu	r2,-4(fp)
} /* WaitReady */
4008080c:	e037883a 	mov	sp,fp
40080810:	dfc00117 	ldw	ra,4(sp)
40080814:	df000017 	ldw	fp,0(sp)
40080818:	dec00204 	addi	sp,sp,8
4008081c:	f800283a 	ret

40080820 <ReleaseBus>:

/*-----------------------------------------------------------------------*/
/* Deselect the card and release SPI bus                                 */
/*-----------------------------------------------------------------------*/
static void ReleaseBus (void)
{
40080820:	defffe04 	addi	sp,sp,-8
40080824:	dfc00115 	stw	ra,4(sp)
40080828:	df000015 	stw	fp,0(sp)
4008082c:	d839883a 	mov	fp,sp
    * master device must send a byte after deasserted CS signal.   
    *
    * More information can be found here:
    * http://elm-chan.org/docs/mmc/mmc_e.html
    */
   DESELECT();
40080830:	d0a73717 	ldw	r2,-25380(gp)
40080834:	10800054 	ori	r2,r2,1
40080838:	d0a73715 	stw	r2,-25380(gp)
4008083c:	00b00534 	movhi	r2,49172
40080840:	10880204 	addi	r2,r2,8200
40080844:	d0e73717 	ldw	r3,-25380(gp)
40080848:	10c00015 	stw	r3,0(r2)
   ReceiveU8();
4008084c:	00804a40 	call	400804a4 <ReceiveU8>
} /* ReleaseBus */
40080850:	e037883a 	mov	sp,fp
40080854:	dfc00117 	ldw	ra,4(sp)
40080858:	df000017 	ldw	fp,0(sp)
4008085c:	dec00204 	addi	sp,sp,8
40080860:	f800283a 	ret

40080864 <SendCMD>:
/*-----------------------------------------------------------------------*/
/* Send a command packet to MMC                                          */
/*-----------------------------------------------------------------------*/
static FFS_U8 SendCMD (FFS_U8 cmd,   /* Command byte */
                       FFS_U32 arg)  /* Argument */
{
40080864:	defffb04 	addi	sp,sp,-20
40080868:	dfc00415 	stw	ra,16(sp)
4008086c:	df000315 	stw	fp,12(sp)
40080870:	df000304 	addi	fp,sp,12
40080874:	2005883a 	mov	r2,r4
40080878:	e17fff15 	stw	r5,-4(fp)
4008087c:	e0bffe05 	stb	r2,-8(fp)
   FFS_U8 n, res;

   if (cmd & 0x80)   /* ACMD<n> is the command sequense of CMD55-CMD<n> */
40080880:	e0bffe03 	ldbu	r2,-8(fp)
40080884:	10803fcc 	andi	r2,r2,255
40080888:	1080201c 	xori	r2,r2,128
4008088c:	10bfe004 	addi	r2,r2,-128
40080890:	10000c0e 	bge	r2,zero,400808c4 <SendCMD+0x60>
   {
      cmd &= 0x7F;
40080894:	e0bffe03 	ldbu	r2,-8(fp)
40080898:	10801fcc 	andi	r2,r2,127
4008089c:	e0bffe05 	stb	r2,-8(fp)
      res = SendCMD(CMD55, 0);
400808a0:	01001dc4 	movi	r4,119
400808a4:	000b883a 	mov	r5,zero
400808a8:	00808640 	call	40080864 <SendCMD>
400808ac:	e0bffd45 	stb	r2,-11(fp)
      if (res > 1)
400808b0:	e0bffd43 	ldbu	r2,-11(fp)
400808b4:	108000b0 	cmpltui	r2,r2,2
400808b8:	1000021e 	bne	r2,zero,400808c4 <SendCMD+0x60>
         return res;
400808bc:	e0bffd43 	ldbu	r2,-11(fp)
400808c0:	00007706 	br	40080aa0 <SendCMD+0x23c>
   }

   /* Select the card and wait for ready */
   DESELECT();
400808c4:	d0a73717 	ldw	r2,-25380(gp)
400808c8:	10800054 	ori	r2,r2,1
400808cc:	d0a73715 	stw	r2,-25380(gp)
400808d0:	00b00534 	movhi	r2,49172
400808d4:	10880204 	addi	r2,r2,8200
400808d8:	d0e73717 	ldw	r3,-25380(gp)
400808dc:	10c00015 	stw	r3,0(r2)
   SELECT();
400808e0:	d0e73717 	ldw	r3,-25380(gp)
400808e4:	00bfff84 	movi	r2,-2
400808e8:	1884703a 	and	r2,r3,r2
400808ec:	d0a73715 	stw	r2,-25380(gp)
400808f0:	00b00534 	movhi	r2,49172
400808f4:	10880204 	addi	r2,r2,8200
400808f8:	d0e73717 	ldw	r3,-25380(gp)
400808fc:	10c00015 	stw	r3,0(r2)

   if (WaitReady() != 0xFF)
40080900:	00807cc0 	call	400807cc <WaitReady>
40080904:	10803fcc 	andi	r2,r2,255
40080908:	10803fe0 	cmpeqi	r2,r2,255
4008090c:	1000021e 	bne	r2,zero,40080918 <SendCMD+0xb4>
      return 0xFF;
40080910:	00bfffc4 	movi	r2,-1
40080914:	00006206 	br	40080aa0 <SendCMD+0x23c>

   /* Send command packet */
   TRANSMIT_U8(cmd); /* Start + Command index */
40080918:	00b00534 	movhi	r2,49172
4008091c:	10880004 	addi	r2,r2,8192
40080920:	e0fffe03 	ldbu	r3,-8(fp)
40080924:	10c00015 	stw	r3,0(r2)
40080928:	0001883a 	nop
4008092c:	00b00534 	movhi	r2,49172
40080930:	10880304 	addi	r2,r2,8204
40080934:	10800017 	ldw	r2,0(r2)
40080938:	1080004c 	andi	r2,r2,1
4008093c:	103ffb26 	beq	r2,zero,4008092c <__alt_mem_epcs+0xfff3f92c>
   TRANSMIT_U8((FFS_U8) (arg >> 24));  /* Argument[31..24] */
40080940:	00b00534 	movhi	r2,49172
40080944:	10880004 	addi	r2,r2,8192
40080948:	e0ffff17 	ldw	r3,-4(fp)
4008094c:	1806d63a 	srli	r3,r3,24
40080950:	18c03fcc 	andi	r3,r3,255
40080954:	10c00015 	stw	r3,0(r2)
40080958:	0001883a 	nop
4008095c:	00b00534 	movhi	r2,49172
40080960:	10880304 	addi	r2,r2,8204
40080964:	10800017 	ldw	r2,0(r2)
40080968:	1080004c 	andi	r2,r2,1
4008096c:	103ffb26 	beq	r2,zero,4008095c <__alt_mem_epcs+0xfff3f95c>
   TRANSMIT_U8((FFS_U8) (arg >> 16));  /* Argument[23..16] */
40080970:	00b00534 	movhi	r2,49172
40080974:	10880004 	addi	r2,r2,8192
40080978:	e0ffff17 	ldw	r3,-4(fp)
4008097c:	1806d43a 	srli	r3,r3,16
40080980:	18c03fcc 	andi	r3,r3,255
40080984:	10c00015 	stw	r3,0(r2)
40080988:	0001883a 	nop
4008098c:	00b00534 	movhi	r2,49172
40080990:	10880304 	addi	r2,r2,8204
40080994:	10800017 	ldw	r2,0(r2)
40080998:	1080004c 	andi	r2,r2,1
4008099c:	103ffb26 	beq	r2,zero,4008098c <__alt_mem_epcs+0xfff3f98c>
   TRANSMIT_U8((FFS_U8) (arg >> 8));   /* Argument[15..8] */
400809a0:	00b00534 	movhi	r2,49172
400809a4:	10880004 	addi	r2,r2,8192
400809a8:	e0ffff17 	ldw	r3,-4(fp)
400809ac:	1806d23a 	srli	r3,r3,8
400809b0:	18c03fcc 	andi	r3,r3,255
400809b4:	10c00015 	stw	r3,0(r2)
400809b8:	0001883a 	nop
400809bc:	00b00534 	movhi	r2,49172
400809c0:	10880304 	addi	r2,r2,8204
400809c4:	10800017 	ldw	r2,0(r2)
400809c8:	1080004c 	andi	r2,r2,1
400809cc:	103ffb26 	beq	r2,zero,400809bc <__alt_mem_epcs+0xfff3f9bc>
   TRANSMIT_U8((FFS_U8) arg); /* Argument[7..0] */
400809d0:	00b00534 	movhi	r2,49172
400809d4:	10880004 	addi	r2,r2,8192
400809d8:	e0ffff17 	ldw	r3,-4(fp)
400809dc:	18c03fcc 	andi	r3,r3,255
400809e0:	10c00015 	stw	r3,0(r2)
400809e4:	0001883a 	nop
400809e8:	00b00534 	movhi	r2,49172
400809ec:	10880304 	addi	r2,r2,8204
400809f0:	10800017 	ldw	r2,0(r2)
400809f4:	1080004c 	andi	r2,r2,1
400809f8:	103ffb26 	beq	r2,zero,400809e8 <__alt_mem_epcs+0xfff3f9e8>

   n = 0x01;   /* Dummy CRC + Stop */
400809fc:	00800044 	movi	r2,1
40080a00:	e0bffd05 	stb	r2,-12(fp)
   if (cmd == CMD0)
40080a04:	e0bffe03 	ldbu	r2,-8(fp)
40080a08:	10801018 	cmpnei	r2,r2,64
40080a0c:	1000021e 	bne	r2,zero,40080a18 <SendCMD+0x1b4>
      n = 0x95;   /* Valid CRC for CMD0(0) */
40080a10:	00bfe544 	movi	r2,-107
40080a14:	e0bffd05 	stb	r2,-12(fp)
   if (cmd == CMD8)
40080a18:	e0bffe03 	ldbu	r2,-8(fp)
40080a1c:	10801218 	cmpnei	r2,r2,72
40080a20:	1000021e 	bne	r2,zero,40080a2c <SendCMD+0x1c8>
      n = 0x87;   /* Valid CRC for CMD8(0x1AA) */
40080a24:	00bfe1c4 	movi	r2,-121
40080a28:	e0bffd05 	stb	r2,-12(fp)
   TRANSMIT_U8(n);
40080a2c:	00b00534 	movhi	r2,49172
40080a30:	10880004 	addi	r2,r2,8192
40080a34:	e0fffd03 	ldbu	r3,-12(fp)
40080a38:	10c00015 	stw	r3,0(r2)
40080a3c:	0001883a 	nop
40080a40:	00b00534 	movhi	r2,49172
40080a44:	10880304 	addi	r2,r2,8204
40080a48:	10800017 	ldw	r2,0(r2)
40080a4c:	1080004c 	andi	r2,r2,1
40080a50:	103ffb26 	beq	r2,zero,40080a40 <__alt_mem_epcs+0xfff3fa40>

   /* Receive command response */
   if (cmd == CMD12)
40080a54:	e0bffe03 	ldbu	r2,-8(fp)
40080a58:	10801318 	cmpnei	r2,r2,76
40080a5c:	1000011e 	bne	r2,zero,40080a64 <SendCMD+0x200>
      ReceiveU8();   /* Skip a stuff byte when stop reading */
40080a60:	00804a40 	call	400804a4 <ReceiveU8>

   n = 10;  /* Wait for a valid response in timeout of 10 attempts */
40080a64:	00800284 	movi	r2,10
40080a68:	e0bffd05 	stb	r2,-12(fp)
   do
   {
      res = ReceiveU8();
40080a6c:	00804a40 	call	400804a4 <ReceiveU8>
40080a70:	e0bffd45 	stb	r2,-11(fp)
   }
   while ((res & 0x80) && --n);
40080a74:	e0bffd43 	ldbu	r2,-11(fp)
40080a78:	10803fcc 	andi	r2,r2,255
40080a7c:	1080201c 	xori	r2,r2,128
40080a80:	10bfe004 	addi	r2,r2,-128
40080a84:	1000050e 	bge	r2,zero,40080a9c <SendCMD+0x238>
40080a88:	e0bffd03 	ldbu	r2,-12(fp)
40080a8c:	10bfffc4 	addi	r2,r2,-1
40080a90:	e0bffd05 	stb	r2,-12(fp)
40080a94:	e0bffd03 	ldbu	r2,-12(fp)
40080a98:	103ff41e 	bne	r2,zero,40080a6c <__alt_mem_epcs+0xfff3fa6c>

   return(res); /* Return with the response value */
40080a9c:	e0bffd43 	ldbu	r2,-11(fp)
} /* SendCMD */
40080aa0:	e037883a 	mov	sp,fp
40080aa4:	dfc00117 	ldw	ra,4(sp)
40080aa8:	df000017 	ldw	fp,0(sp)
40080aac:	dec00204 	addi	sp,sp,8
40080ab0:	f800283a 	ret

40080ab4 <ffs_DiskIOInit>:
/*  In    : none                                                           */
/*  Out   : none                                                           */
/*  Return: FFS_OK                                                         */
/***************************************************************************/
FFS_RESULT ffs_DiskIOInit (void)
{
40080ab4:	defffe04 	addi	sp,sp,-8
40080ab8:	dfc00115 	stw	ra,4(sp)
40080abc:	df000015 	stw	fp,0(sp)
40080ac0:	d839883a 	mov	fp,sp
   (void)XMITDummy;

   InitDiskIOHardware();
40080ac4:	00803ec0 	call	400803ec <InitDiskIOHardware>

   return(FFS_OK);
40080ac8:	0005883a 	mov	r2,zero
} /* ffs_DiskIOInit */
40080acc:	e037883a 	mov	sp,fp
40080ad0:	dfc00117 	ldw	ra,4(sp)
40080ad4:	df000017 	ldw	fp,0(sp)
40080ad8:	dec00204 	addi	sp,sp,8
40080adc:	f800283a 	ret

40080ae0 <ffs_DiskIOTimerproc>:
/*  In    : none                                                           */
/*  Out   : none                                                           */
/*  Return: none                                                           */
/***************************************************************************/
void ffs_DiskIOTimerproc (void)
{
40080ae0:	defffc04 	addi	sp,sp,-16
40080ae4:	dfc00315 	stw	ra,12(sp)
40080ae8:	df000215 	stw	fp,8(sp)
40080aec:	df000204 	addi	fp,sp,8
   static FFS_U32 pvm;
   FFS_U32 n;
   DSTATUS s;

   /* 100Hz decrement timer */
   n = Timer1;
40080af0:	d0a7358b 	ldhu	r2,-25386(gp)
40080af4:	10bfffcc 	andi	r2,r2,65535
40080af8:	e0bfff15 	stw	r2,-4(fp)
   if (n)
40080afc:	e0bfff17 	ldw	r2,-4(fp)
40080b00:	10000526 	beq	r2,zero,40080b18 <ffs_DiskIOTimerproc+0x38>
      Timer1 = (FFS_U16)-- n;
40080b04:	e0bfff17 	ldw	r2,-4(fp)
40080b08:	10bfffc4 	addi	r2,r2,-1
40080b0c:	e0bfff15 	stw	r2,-4(fp)
40080b10:	e0bfff17 	ldw	r2,-4(fp)
40080b14:	d0a7358d 	sth	r2,-25386(gp)
   n = Timer2;
40080b18:	d0a7360b 	ldhu	r2,-25384(gp)
40080b1c:	10bfffcc 	andi	r2,r2,65535
40080b20:	e0bfff15 	stw	r2,-4(fp)
   if (n)
40080b24:	e0bfff17 	ldw	r2,-4(fp)
40080b28:	10000526 	beq	r2,zero,40080b40 <ffs_DiskIOTimerproc+0x60>
      Timer2 = (FFS_U16)-- n;
40080b2c:	e0bfff17 	ldw	r2,-4(fp)
40080b30:	10bfffc4 	addi	r2,r2,-1
40080b34:	e0bfff15 	stw	r2,-4(fp)
40080b38:	e0bfff17 	ldw	r2,-4(fp)
40080b3c:	d0a7360d 	sth	r2,-25384(gp)

   n = pvm;
40080b40:	d0a73817 	ldw	r2,-25376(gp)
40080b44:	e0bfff15 	stw	r2,-4(fp)

   /* Sample socket switch */
   pvm = GetCDWP();
40080b48:	00807a80 	call	400807a8 <GetCDWP>
40080b4c:	d0a73815 	stw	r2,-25376(gp)

   /* Have contacts stabled? */
   if (n == pvm)
40080b50:	d0a73817 	ldw	r2,-25376(gp)
40080b54:	e0ffff17 	ldw	r3,-4(fp)
40080b58:	18801e1e 	bne	r3,r2,40080bd4 <ffs_DiskIOTimerproc+0xf4>
   {
      s = Stat;
40080b5c:	d0a00003 	ldbu	r2,-32768(gp)
40080b60:	e0bffe05 	stb	r2,-8(fp)

      /* Check write protect */
      if (pvm & SOCK_WP_ACTIVE)
40080b64:	d0a73817 	ldw	r2,-25376(gp)
40080b68:	1080008c 	andi	r2,r2,2
40080b6c:	10000426 	beq	r2,zero,40080b80 <ffs_DiskIOTimerproc+0xa0>
         s |= STA_PROTECT;
40080b70:	e0bffe03 	ldbu	r2,-8(fp)
40080b74:	10800114 	ori	r2,r2,4
40080b78:	e0bffe05 	stb	r2,-8(fp)
40080b7c:	00000406 	br	40080b90 <ffs_DiskIOTimerproc+0xb0>
      else
         s &= ~STA_PROTECT;
40080b80:	e0fffe03 	ldbu	r3,-8(fp)
40080b84:	00bffec4 	movi	r2,-5
40080b88:	1884703a 	and	r2,r3,r2
40080b8c:	e0bffe05 	stb	r2,-8(fp)

      /* Check socket empty */
      if (pvm & SOCK_CD_EMPTY)
40080b90:	d0a73817 	ldw	r2,-25376(gp)
40080b94:	1080004c 	andi	r2,r2,1
40080b98:	10000426 	beq	r2,zero,40080bac <ffs_DiskIOTimerproc+0xcc>
         s |= (STA_NODISK | STA_NOINIT);
40080b9c:	e0bffe03 	ldbu	r2,-8(fp)
40080ba0:	108000d4 	ori	r2,r2,3
40080ba4:	e0bffe05 	stb	r2,-8(fp)
40080ba8:	00000406 	br	40080bbc <ffs_DiskIOTimerproc+0xdc>
      else
         s &= ~STA_NODISK;
40080bac:	e0fffe03 	ldbu	r3,-8(fp)
40080bb0:	00bfff44 	movi	r2,-3
40080bb4:	1884703a 	and	r2,r3,r2
40080bb8:	e0bffe05 	stb	r2,-8(fp)

#if (FFS_SUPPORT_HW_WP == 0)
      /* Ignore the write protect */
      s &= ~STA_PROTECT;
40080bbc:	e0fffe03 	ldbu	r3,-8(fp)
40080bc0:	00bffec4 	movi	r2,-5
40080bc4:	1884703a 	and	r2,r3,r2
40080bc8:	e0bffe05 	stb	r2,-8(fp)
#endif

      Stat = s;
40080bcc:	e0bffe03 	ldbu	r2,-8(fp)
40080bd0:	d0a00005 	stb	r2,-32768(gp)
   }
} /* ffs_DiskIOTimerproc */
40080bd4:	e037883a 	mov	sp,fp
40080bd8:	dfc00117 	ldw	ra,4(sp)
40080bdc:	df000017 	ldw	fp,0(sp)
40080be0:	dec00204 	addi	sp,sp,8
40080be4:	f800283a 	ret

40080be8 <ffs_DiskIOInitialize>:
/*  In    : Physical drive nmuber                                          */
/*  Out   : none                                                           */
/*  Return: DSTATUS                                                        */
/***************************************************************************/
DSTATUS ffs_DiskIOInitialize (FFS_U8 drv)
{
40080be8:	defffa04 	addi	sp,sp,-24
40080bec:	dfc00515 	stw	ra,20(sp)
40080bf0:	df000415 	stw	fp,16(sp)
40080bf4:	dc000315 	stw	r16,12(sp)
40080bf8:	df000404 	addi	fp,sp,16
40080bfc:	2005883a 	mov	r2,r4
40080c00:	e0bffe05 	stb	r2,-8(fp)
   FFS_U8 n, ty, cmd, ocr[4];

   (void)drv;

   if (Stat & STA_NODISK)  /* No card in the socket */
40080c04:	d0a00003 	ldbu	r2,-32768(gp)
40080c08:	10803fcc 	andi	r2,r2,255
40080c0c:	1080008c 	andi	r2,r2,2
40080c10:	10000226 	beq	r2,zero,40080c1c <ffs_DiskIOInitialize+0x34>
      return Stat;
40080c14:	d0a00003 	ldbu	r2,-32768(gp)
40080c18:	00008406 	br	40080e2c <ffs_DiskIOInitialize+0x244>

   /* low speed during init */
   SetLowSpeed();
40080c1c:	00803340 	call	40080334 <SetLowSpeed>

   POWER_ON(); /* Force socket power ON */
   for (n = 10; n; n--)
40080c20:	00800284 	movi	r2,10
40080c24:	e0bffc05 	stb	r2,-16(fp)
40080c28:	00000406 	br	40080c3c <ffs_DiskIOInitialize+0x54>
      ReceiveU8();   /* 80 dummy clocks */
40080c2c:	00804a40 	call	400804a4 <ReceiveU8>

   /* low speed during init */
   SetLowSpeed();

   POWER_ON(); /* Force socket power ON */
   for (n = 10; n; n--)
40080c30:	e0bffc03 	ldbu	r2,-16(fp)
40080c34:	10bfffc4 	addi	r2,r2,-1
40080c38:	e0bffc05 	stb	r2,-16(fp)
40080c3c:	e0bffc03 	ldbu	r2,-16(fp)
40080c40:	103ffa1e 	bne	r2,zero,40080c2c <__alt_mem_epcs+0xfff3fc2c>
      ReceiveU8();   /* 80 dummy clocks */

   ty = 0;
40080c44:	e03ffc45 	stb	zero,-15(fp)
   if (SendCMD(CMD0, 0) == 1)
40080c48:	01001004 	movi	r4,64
40080c4c:	000b883a 	mov	r5,zero
40080c50:	00808640 	call	40080864 <SendCMD>
40080c54:	10803fcc 	andi	r2,r2,255
40080c58:	10800058 	cmpnei	r2,r2,1
40080c5c:	1000681e 	bne	r2,zero,40080e00 <ffs_DiskIOInitialize+0x218>
   {  /* Enter Idle state */
      Timer1 = 100;  /* Initialization timeout of 1000 msec */
40080c60:	00801904 	movi	r2,100
40080c64:	d0a7358d 	sth	r2,-25386(gp)
      if (SendCMD(CMD8, 0x1AA) == 1)
40080c68:	01001204 	movi	r4,72
40080c6c:	01406a84 	movi	r5,426
40080c70:	00808640 	call	40080864 <SendCMD>
40080c74:	10803fcc 	andi	r2,r2,255
40080c78:	10800058 	cmpnei	r2,r2,1
40080c7c:	10003e1e 	bne	r2,zero,40080d78 <ffs_DiskIOInitialize+0x190>
      {  /* SDC ver 2.00 */
         for (n = 0; n < 4; n++)
40080c80:	e03ffc05 	stb	zero,-16(fp)
40080c84:	00000906 	br	40080cac <ffs_DiskIOInitialize+0xc4>
            ocr[n] = ReceiveU8();
40080c88:	e43ffc03 	ldbu	r16,-16(fp)
40080c8c:	00804a40 	call	400804a4 <ReceiveU8>
40080c90:	1007883a 	mov	r3,r2
40080c94:	e0bffcc4 	addi	r2,fp,-13
40080c98:	1405883a 	add	r2,r2,r16
40080c9c:	10c00005 	stb	r3,0(r2)
   if (SendCMD(CMD0, 0) == 1)
   {  /* Enter Idle state */
      Timer1 = 100;  /* Initialization timeout of 1000 msec */
      if (SendCMD(CMD8, 0x1AA) == 1)
      {  /* SDC ver 2.00 */
         for (n = 0; n < 4; n++)
40080ca0:	e0bffc03 	ldbu	r2,-16(fp)
40080ca4:	10800044 	addi	r2,r2,1
40080ca8:	e0bffc05 	stb	r2,-16(fp)
40080cac:	e0bffc03 	ldbu	r2,-16(fp)
40080cb0:	10800130 	cmpltui	r2,r2,4
40080cb4:	103ff41e 	bne	r2,zero,40080c88 <__alt_mem_epcs+0xfff3fc88>
            ocr[n] = ReceiveU8();
         if (ocr[2] == 0x01 && ocr[3] == 0xAA)
40080cb8:	e0bffd43 	ldbu	r2,-11(fp)
40080cbc:	10803fcc 	andi	r2,r2,255
40080cc0:	10800058 	cmpnei	r2,r2,1
40080cc4:	10004e1e 	bne	r2,zero,40080e00 <ffs_DiskIOInitialize+0x218>
40080cc8:	e0bffd83 	ldbu	r2,-10(fp)
40080ccc:	10803fcc 	andi	r2,r2,255
40080cd0:	10802a98 	cmpnei	r2,r2,170
40080cd4:	10004a1e 	bne	r2,zero,40080e00 <ffs_DiskIOInitialize+0x218>
         {  /* The card can work at vdd range of 2.7-3.6V */
            while (Timer1 && SendCMD(ACMD41, 1UL << 30)) ;  /* ACMD41 with HCS bit */
40080cd8:	0001883a 	nop
40080cdc:	d0a7358b 	ldhu	r2,-25386(gp)
40080ce0:	10bfffcc 	andi	r2,r2,65535
40080ce4:	10000526 	beq	r2,zero,40080cfc <ffs_DiskIOInitialize+0x114>
40080ce8:	01003a44 	movi	r4,233
40080cec:	01500034 	movhi	r5,16384
40080cf0:	00808640 	call	40080864 <SendCMD>
40080cf4:	10803fcc 	andi	r2,r2,255
40080cf8:	103ff81e 	bne	r2,zero,40080cdc <__alt_mem_epcs+0xfff3fcdc>
            if (Timer1 && SendCMD(CMD58, 0) == 0)
40080cfc:	d0a7358b 	ldhu	r2,-25386(gp)
40080d00:	10bfffcc 	andi	r2,r2,65535
40080d04:	10003e26 	beq	r2,zero,40080e00 <ffs_DiskIOInitialize+0x218>
40080d08:	01001e84 	movi	r4,122
40080d0c:	000b883a 	mov	r5,zero
40080d10:	00808640 	call	40080864 <SendCMD>
40080d14:	10803fcc 	andi	r2,r2,255
40080d18:	1000391e 	bne	r2,zero,40080e00 <ffs_DiskIOInitialize+0x218>
            {  /* Check CCS bit */
               for (n = 0; n < 4; n++)
40080d1c:	e03ffc05 	stb	zero,-16(fp)
40080d20:	00000906 	br	40080d48 <ffs_DiskIOInitialize+0x160>
                  ocr[n] = ReceiveU8();
40080d24:	e43ffc03 	ldbu	r16,-16(fp)
40080d28:	00804a40 	call	400804a4 <ReceiveU8>
40080d2c:	1007883a 	mov	r3,r2
40080d30:	e0bffcc4 	addi	r2,fp,-13
40080d34:	1405883a 	add	r2,r2,r16
40080d38:	10c00005 	stb	r3,0(r2)
         if (ocr[2] == 0x01 && ocr[3] == 0xAA)
         {  /* The card can work at vdd range of 2.7-3.6V */
            while (Timer1 && SendCMD(ACMD41, 1UL << 30)) ;  /* ACMD41 with HCS bit */
            if (Timer1 && SendCMD(CMD58, 0) == 0)
            {  /* Check CCS bit */
               for (n = 0; n < 4; n++)
40080d3c:	e0bffc03 	ldbu	r2,-16(fp)
40080d40:	10800044 	addi	r2,r2,1
40080d44:	e0bffc05 	stb	r2,-16(fp)
40080d48:	e0bffc03 	ldbu	r2,-16(fp)
40080d4c:	10800130 	cmpltui	r2,r2,4
40080d50:	103ff41e 	bne	r2,zero,40080d24 <__alt_mem_epcs+0xfff3fd24>
                  ocr[n] = ReceiveU8();
               ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2; /* Card id SDv2 */
40080d54:	e0bffcc3 	ldbu	r2,-13(fp)
40080d58:	10803fcc 	andi	r2,r2,255
40080d5c:	1080100c 	andi	r2,r2,64
40080d60:	10000226 	beq	r2,zero,40080d6c <ffs_DiskIOInitialize+0x184>
40080d64:	00800304 	movi	r2,12
40080d68:	00000106 	br	40080d70 <ffs_DiskIOInitialize+0x188>
40080d6c:	00800104 	movi	r2,4
40080d70:	e0bffc45 	stb	r2,-15(fp)
40080d74:	00002206 	br	40080e00 <ffs_DiskIOInitialize+0x218>
            }
         }
      }
      else
      {  /* SDC ver 1.XX or MMC */
         if (SendCMD(ACMD41, 0) <= 1)
40080d78:	01003a44 	movi	r4,233
40080d7c:	000b883a 	mov	r5,zero
40080d80:	00808640 	call	40080864 <SendCMD>
40080d84:	10803fcc 	andi	r2,r2,255
40080d88:	108000a8 	cmpgeui	r2,r2,2
40080d8c:	1000051e 	bne	r2,zero,40080da4 <ffs_DiskIOInitialize+0x1bc>
         {
            ty  = CT_SD1;
40080d90:	00800084 	movi	r2,2
40080d94:	e0bffc45 	stb	r2,-15(fp)
            cmd = ACMD41;  /* SDC ver 1.XX */
40080d98:	00bffa44 	movi	r2,-23
40080d9c:	e0bffc85 	stb	r2,-14(fp)
40080da0:	00000406 	br	40080db4 <ffs_DiskIOInitialize+0x1cc>
         }
         else
         {
            ty  = CT_MMC;
40080da4:	00800044 	movi	r2,1
40080da8:	e0bffc45 	stb	r2,-15(fp)
            cmd = CMD1; /* MMC */
40080dac:	00801044 	movi	r2,65
40080db0:	e0bffc85 	stb	r2,-14(fp)
         }
         while (Timer1 && SendCMD(cmd, 0)) ; /* Wait for leaving idle state */
40080db4:	0001883a 	nop
40080db8:	d0a7358b 	ldhu	r2,-25386(gp)
40080dbc:	10bfffcc 	andi	r2,r2,65535
40080dc0:	10000626 	beq	r2,zero,40080ddc <ffs_DiskIOInitialize+0x1f4>
40080dc4:	e0bffc83 	ldbu	r2,-14(fp)
40080dc8:	1009883a 	mov	r4,r2
40080dcc:	000b883a 	mov	r5,zero
40080dd0:	00808640 	call	40080864 <SendCMD>
40080dd4:	10803fcc 	andi	r2,r2,255
40080dd8:	103ff71e 	bne	r2,zero,40080db8 <__alt_mem_epcs+0xfff3fdb8>
         if (!Timer1 || SendCMD(CMD16, 512) != 0)  /* Select R/W block length */
40080ddc:	d0a7358b 	ldhu	r2,-25386(gp)
40080de0:	10bfffcc 	andi	r2,r2,65535
40080de4:	10000526 	beq	r2,zero,40080dfc <ffs_DiskIOInitialize+0x214>
40080de8:	01001404 	movi	r4,80
40080dec:	01408004 	movi	r5,512
40080df0:	00808640 	call	40080864 <SendCMD>
40080df4:	10803fcc 	andi	r2,r2,255
40080df8:	10000126 	beq	r2,zero,40080e00 <ffs_DiskIOInitialize+0x218>
            ty = 0;
40080dfc:	e03ffc45 	stb	zero,-15(fp)
      }
   }
   CardType = ty;
40080e00:	e0bffc43 	ldbu	r2,-15(fp)
40080e04:	d0a73505 	stb	r2,-25388(gp)
   ReleaseBus();
40080e08:	00808200 	call	40080820 <ReleaseBus>

   if (ty)
40080e0c:	e0bffc43 	ldbu	r2,-15(fp)
40080e10:	10000526 	beq	r2,zero,40080e28 <ffs_DiskIOInitialize+0x240>
   {  /* Initialization succeded */
      Stat &= ~STA_NOINIT; /* Clear STA_NOINIT */
40080e14:	d0e00003 	ldbu	r3,-32768(gp)
40080e18:	00bfff84 	movi	r2,-2
40080e1c:	1884703a 	and	r2,r3,r2
40080e20:	d0a00005 	stb	r2,-32768(gp)

      SetHighSpeed();
40080e24:	00803800 	call	40080380 <SetHighSpeed>
   else
   {  /* Initialization failed */
      POWER_OFF();
   }

   return(Stat);
40080e28:	d0a00003 	ldbu	r2,-32768(gp)
} /* ffs_DiskIOInitialize */
40080e2c:	e6ffff04 	addi	sp,fp,-4
40080e30:	dfc00217 	ldw	ra,8(sp)
40080e34:	df000117 	ldw	fp,4(sp)
40080e38:	dc000017 	ldw	r16,0(sp)
40080e3c:	dec00304 	addi	sp,sp,12
40080e40:	f800283a 	ret

40080e44 <ffs_DiskIOStatus>:
/*  In    : Physical drive nmuber                                          */
/*  Out   : none                                                           */
/*  Return: DSTATUS                                                        */
/***************************************************************************/
DSTATUS ffs_DiskIOStatus (FFS_U8 drv)
{
40080e44:	defffe04 	addi	sp,sp,-8
40080e48:	df000115 	stw	fp,4(sp)
40080e4c:	df000104 	addi	fp,sp,4
40080e50:	2005883a 	mov	r2,r4
40080e54:	e0bfff05 	stb	r2,-4(fp)
   (void)drv;

   return(Stat);
40080e58:	d0a00003 	ldbu	r2,-32768(gp)
} /* ffs_DiskIOStatus */
40080e5c:	e037883a 	mov	sp,fp
40080e60:	df000017 	ldw	fp,0(sp)
40080e64:	dec00104 	addi	sp,sp,4
40080e68:	f800283a 	ret

40080e6c <ffs_DiskIORead>:
/*                                                                         */
/*  Out   : buff                                                           */
/*  Return: DRESULT                                                        */
/***************************************************************************/
DRESULT ffs_DiskIORead (FFS_U8 drv, FFS_U8 * buff, FFS_U32 sector, FFS_U8 count)
{
40080e6c:	defffa04 	addi	sp,sp,-24
40080e70:	dfc00515 	stw	ra,20(sp)
40080e74:	df000415 	stw	fp,16(sp)
40080e78:	df000404 	addi	fp,sp,16
40080e7c:	2007883a 	mov	r3,r4
40080e80:	e17ffd15 	stw	r5,-12(fp)
40080e84:	e1bffe15 	stw	r6,-8(fp)
40080e88:	3805883a 	mov	r2,r7
40080e8c:	e0fffc05 	stb	r3,-16(fp)
40080e90:	e0bfff05 	stb	r2,-4(fp)
   (void)drv;

   if (!count)
40080e94:	e0bfff03 	ldbu	r2,-4(fp)
40080e98:	1000021e 	bne	r2,zero,40080ea4 <ffs_DiskIORead+0x38>
      return RES_PARERR;
40080e9c:	00800104 	movi	r2,4
40080ea0:	00003406 	br	40080f74 <ffs_DiskIORead+0x108>
   if (Stat & STA_NOINIT)
40080ea4:	d0a00003 	ldbu	r2,-32768(gp)
40080ea8:	10803fcc 	andi	r2,r2,255
40080eac:	1080004c 	andi	r2,r2,1
40080eb0:	10000226 	beq	r2,zero,40080ebc <ffs_DiskIORead+0x50>
      return RES_NOTRDY;
40080eb4:	008000c4 	movi	r2,3
40080eb8:	00002e06 	br	40080f74 <ffs_DiskIORead+0x108>

   if (!(CardType & CT_BLOCK))
40080ebc:	d0a73503 	ldbu	r2,-25388(gp)
40080ec0:	10803fcc 	andi	r2,r2,255
40080ec4:	1080020c 	andi	r2,r2,8
40080ec8:	1000031e 	bne	r2,zero,40080ed8 <ffs_DiskIORead+0x6c>
      sector *= 512; /* Convert LBA to byte address if needed */
40080ecc:	e0bffe17 	ldw	r2,-8(fp)
40080ed0:	1004927a 	slli	r2,r2,9
40080ed4:	e0bffe15 	stw	r2,-8(fp)

   if (count == 1)
40080ed8:	e0bfff03 	ldbu	r2,-4(fp)
40080edc:	10800058 	cmpnei	r2,r2,1
40080ee0:	10000b1e 	bne	r2,zero,40080f10 <ffs_DiskIORead+0xa4>
   {  /* Single block read */
      if ((SendCMD(CMD17, sector) == 0)   /* READ_SINGLE_BLOCK */
40080ee4:	01001444 	movi	r4,81
40080ee8:	e17ffe17 	ldw	r5,-8(fp)
40080eec:	00808640 	call	40080864 <SendCMD>
40080ef0:	10803fcc 	andi	r2,r2,255
40080ef4:	10001b1e 	bne	r2,zero,40080f64 <ffs_DiskIORead+0xf8>
          && ReceiveDatablock(buff, 512))
40080ef8:	e13ffd17 	ldw	r4,-12(fp)
40080efc:	01408004 	movi	r5,512
40080f00:	00804f40 	call	400804f4 <ReceiveDatablock>
40080f04:	10001726 	beq	r2,zero,40080f64 <ffs_DiskIORead+0xf8>
         count = 0;
40080f08:	e03fff05 	stb	zero,-4(fp)
40080f0c:	00001506 	br	40080f64 <ffs_DiskIORead+0xf8>
   }
   else
   {  /* Multiple block read */
      if (SendCMD(CMD18, sector) == 0)
40080f10:	01001484 	movi	r4,82
40080f14:	e17ffe17 	ldw	r5,-8(fp)
40080f18:	00808640 	call	40080864 <SendCMD>
40080f1c:	10803fcc 	andi	r2,r2,255
40080f20:	1000101e 	bne	r2,zero,40080f64 <ffs_DiskIORead+0xf8>
      {  /* READ_MULTIPLE_BLOCK */
         do
         {
            if (!ReceiveDatablock(buff, 512))
40080f24:	e13ffd17 	ldw	r4,-12(fp)
40080f28:	01408004 	movi	r5,512
40080f2c:	00804f40 	call	400804f4 <ReceiveDatablock>
40080f30:	1000011e 	bne	r2,zero,40080f38 <ffs_DiskIORead+0xcc>
               break;
40080f34:	00000806 	br	40080f58 <ffs_DiskIORead+0xec>
            buff += 512;
40080f38:	e0bffd17 	ldw	r2,-12(fp)
40080f3c:	10808004 	addi	r2,r2,512
40080f40:	e0bffd15 	stw	r2,-12(fp)
         }
         while (--count);
40080f44:	e0bfff03 	ldbu	r2,-4(fp)
40080f48:	10bfffc4 	addi	r2,r2,-1
40080f4c:	e0bfff05 	stb	r2,-4(fp)
40080f50:	e0bfff03 	ldbu	r2,-4(fp)
40080f54:	103ff31e 	bne	r2,zero,40080f24 <__alt_mem_epcs+0xfff3ff24>
         SendCMD(CMD12, 0);   /* STOP_TRANSMISSION */
40080f58:	01001304 	movi	r4,76
40080f5c:	000b883a 	mov	r5,zero
40080f60:	00808640 	call	40080864 <SendCMD>
      }
   }
   ReleaseBus();
40080f64:	00808200 	call	40080820 <ReleaseBus>

   return(count ? RES_ERROR : RES_OK);
40080f68:	e0bfff03 	ldbu	r2,-4(fp)
40080f6c:	1004c03a 	cmpne	r2,r2,zero
40080f70:	10803fcc 	andi	r2,r2,255
} /* ffs_DiskIORead */
40080f74:	e037883a 	mov	sp,fp
40080f78:	dfc00117 	ldw	ra,4(sp)
40080f7c:	df000017 	ldw	fp,0(sp)
40080f80:	dec00204 	addi	sp,sp,8
40080f84:	f800283a 	ret

40080f88 <ffs_DiskIOWrite>:
/*                                                                         */
/*  Out   : buff                                                           */
/*  Return: DRESULT                                                        */
/***************************************************************************/
DRESULT ffs_DiskIOWrite (FFS_U8 drv, const FFS_U8 * buff, FFS_U32 sector, FFS_U8 count)
{
40080f88:	defffa04 	addi	sp,sp,-24
40080f8c:	dfc00515 	stw	ra,20(sp)
40080f90:	df000415 	stw	fp,16(sp)
40080f94:	df000404 	addi	fp,sp,16
40080f98:	2007883a 	mov	r3,r4
40080f9c:	e17ffd15 	stw	r5,-12(fp)
40080fa0:	e1bffe15 	stw	r6,-8(fp)
40080fa4:	3805883a 	mov	r2,r7
40080fa8:	e0fffc05 	stb	r3,-16(fp)
40080fac:	e0bfff05 	stb	r2,-4(fp)
   (void)drv;

   if (!count)
40080fb0:	e0bfff03 	ldbu	r2,-4(fp)
40080fb4:	1000021e 	bne	r2,zero,40080fc0 <ffs_DiskIOWrite+0x38>
      return RES_PARERR;
40080fb8:	00800104 	movi	r2,4
40080fbc:	00004806 	br	400810e0 <ffs_DiskIOWrite+0x158>
   if (Stat & STA_NOINIT)
40080fc0:	d0a00003 	ldbu	r2,-32768(gp)
40080fc4:	10803fcc 	andi	r2,r2,255
40080fc8:	1080004c 	andi	r2,r2,1
40080fcc:	10000226 	beq	r2,zero,40080fd8 <ffs_DiskIOWrite+0x50>
      return RES_NOTRDY;
40080fd0:	008000c4 	movi	r2,3
40080fd4:	00004206 	br	400810e0 <ffs_DiskIOWrite+0x158>
   if (Stat & STA_PROTECT)
40080fd8:	d0a00003 	ldbu	r2,-32768(gp)
40080fdc:	10803fcc 	andi	r2,r2,255
40080fe0:	1080010c 	andi	r2,r2,4
40080fe4:	10000226 	beq	r2,zero,40080ff0 <ffs_DiskIOWrite+0x68>
      return RES_WRPRT;
40080fe8:	00800084 	movi	r2,2
40080fec:	00003c06 	br	400810e0 <ffs_DiskIOWrite+0x158>

   if (!(CardType & CT_BLOCK))
40080ff0:	d0a73503 	ldbu	r2,-25388(gp)
40080ff4:	10803fcc 	andi	r2,r2,255
40080ff8:	1080020c 	andi	r2,r2,8
40080ffc:	1000031e 	bne	r2,zero,4008100c <ffs_DiskIOWrite+0x84>
      sector *= 512; /* Convert LBA to byte address if needed */
40081000:	e0bffe17 	ldw	r2,-8(fp)
40081004:	1004927a 	slli	r2,r2,9
40081008:	e0bffe15 	stw	r2,-8(fp)

   if (count == 1)
4008100c:	e0bfff03 	ldbu	r2,-4(fp)
40081010:	10800058 	cmpnei	r2,r2,1
40081014:	10000b1e 	bne	r2,zero,40081044 <ffs_DiskIOWrite+0xbc>
   {  /* Single block write */
      if ((SendCMD(CMD24, sector) == 0)   /* WRITE_BLOCK */
40081018:	01001604 	movi	r4,88
4008101c:	e17ffe17 	ldw	r5,-8(fp)
40081020:	00808640 	call	40080864 <SendCMD>
40081024:	10803fcc 	andi	r2,r2,255
40081028:	1000291e 	bne	r2,zero,400810d0 <ffs_DiskIOWrite+0x148>
          && TransmitDatablock(buff, 0xFE))
4008102c:	e13ffd17 	ldw	r4,-12(fp)
40081030:	01403f84 	movi	r5,254
40081034:	00806200 	call	40080620 <TransmitDatablock>
40081038:	10002526 	beq	r2,zero,400810d0 <ffs_DiskIOWrite+0x148>
         count = 0;
4008103c:	e03fff05 	stb	zero,-4(fp)
40081040:	00002306 	br	400810d0 <ffs_DiskIOWrite+0x148>
   }
   else
   {  /* Multiple block write */
      if (CardType & CT_SDC)
40081044:	d0a73503 	ldbu	r2,-25388(gp)
40081048:	10803fcc 	andi	r2,r2,255
4008104c:	1080018c 	andi	r2,r2,6
40081050:	10000726 	beq	r2,zero,40081070 <ffs_DiskIOWrite+0xe8>
      {
         SendCMD(CMD55, 0);
40081054:	01001dc4 	movi	r4,119
40081058:	000b883a 	mov	r5,zero
4008105c:	00808640 	call	40080864 <SendCMD>
         SendCMD(CMD23, count);  /* ACMD23 */
40081060:	e0bfff03 	ldbu	r2,-4(fp)
40081064:	010015c4 	movi	r4,87
40081068:	100b883a 	mov	r5,r2
4008106c:	00808640 	call	40080864 <SendCMD>
      }
      if (SendCMD(CMD25, sector) == 0)
40081070:	01001644 	movi	r4,89
40081074:	e17ffe17 	ldw	r5,-8(fp)
40081078:	00808640 	call	40080864 <SendCMD>
4008107c:	10803fcc 	andi	r2,r2,255
40081080:	1000131e 	bne	r2,zero,400810d0 <ffs_DiskIOWrite+0x148>
      {  /* WRITE_MULTIPLE_BLOCK */
         do
         {
            if (!TransmitDatablock(buff, 0xFC))
40081084:	e13ffd17 	ldw	r4,-12(fp)
40081088:	01403f04 	movi	r5,252
4008108c:	00806200 	call	40080620 <TransmitDatablock>
40081090:	1000011e 	bne	r2,zero,40081098 <ffs_DiskIOWrite+0x110>
               break;
40081094:	00000806 	br	400810b8 <ffs_DiskIOWrite+0x130>
            buff += 512;
40081098:	e0bffd17 	ldw	r2,-12(fp)
4008109c:	10808004 	addi	r2,r2,512
400810a0:	e0bffd15 	stw	r2,-12(fp)
         }
         while (--count);
400810a4:	e0bfff03 	ldbu	r2,-4(fp)
400810a8:	10bfffc4 	addi	r2,r2,-1
400810ac:	e0bfff05 	stb	r2,-4(fp)
400810b0:	e0bfff03 	ldbu	r2,-4(fp)
400810b4:	103ff31e 	bne	r2,zero,40081084 <__alt_mem_epcs+0xfff40084>
         if (!TransmitDatablock(0, 0xFD)) /* STOP_TRAN token */
400810b8:	0009883a 	mov	r4,zero
400810bc:	01403f44 	movi	r5,253
400810c0:	00806200 	call	40080620 <TransmitDatablock>
400810c4:	1000021e 	bne	r2,zero,400810d0 <ffs_DiskIOWrite+0x148>
            count = 1;
400810c8:	00800044 	movi	r2,1
400810cc:	e0bfff05 	stb	r2,-4(fp)
      }
   }
   ReleaseBus();
400810d0:	00808200 	call	40080820 <ReleaseBus>

   return(count ? RES_ERROR : RES_OK);
400810d4:	e0bfff03 	ldbu	r2,-4(fp)
400810d8:	1004c03a 	cmpne	r2,r2,zero
400810dc:	10803fcc 	andi	r2,r2,255
} /* ffs_DiskIOWrite */
400810e0:	e037883a 	mov	sp,fp
400810e4:	dfc00117 	ldw	ra,4(sp)
400810e8:	df000017 	ldw	fp,0(sp)
400810ec:	dec00204 	addi	sp,sp,8
400810f0:	f800283a 	ret

400810f4 <ffs_DiskIOIoctl>:
/*                                                                         */
/*  Out   : buff                                                           */
/*  Return: DRESULT                                                        */
/***************************************************************************/
DRESULT ffs_DiskIOIoctl (FFS_U8 drv, FFS_U8 ctrl, void *buff)
{
400810f4:	defff204 	addi	sp,sp,-56
400810f8:	dfc00d15 	stw	ra,52(sp)
400810fc:	df000c15 	stw	fp,48(sp)
40081100:	dc000b15 	stw	r16,44(sp)
40081104:	df000c04 	addi	fp,sp,48
40081108:	2007883a 	mov	r3,r4
4008110c:	2805883a 	mov	r2,r5
40081110:	e1bffe15 	stw	r6,-8(fp)
40081114:	e0fffc05 	stb	r3,-16(fp)
40081118:	e0bffd05 	stb	r2,-12(fp)
   DRESULT res;
   FFS_U8 n, csd[16], *ptr = buff;
4008111c:	e0bffe17 	ldw	r2,-8(fp)
40081120:	e0bff615 	stw	r2,-40(fp)
   FFS_U16 csize;

   (void)drv;

   if (Stat & STA_NOINIT)
40081124:	d0a00003 	ldbu	r2,-32768(gp)
40081128:	10803fcc 	andi	r2,r2,255
4008112c:	1080004c 	andi	r2,r2,1
40081130:	10000226 	beq	r2,zero,4008113c <ffs_DiskIOIoctl+0x48>
      return RES_NOTRDY;
40081134:	008000c4 	movi	r2,3
40081138:	00011206 	br	40081584 <ffs_DiskIOIoctl+0x490>

   res = RES_ERROR;
4008113c:	00800044 	movi	r2,1
40081140:	e0bff415 	stw	r2,-48(fp)
   switch (ctrl)
40081144:	e0bffd03 	ldbu	r2,-12(fp)
40081148:	10c003e8 	cmpgeui	r3,r2,15
4008114c:	1801091e 	bne	r3,zero,40081574 <ffs_DiskIOIoctl+0x480>
40081150:	100690ba 	slli	r3,r2,2
40081154:	00900234 	movhi	r2,16392
40081158:	10845a04 	addi	r2,r2,4456
4008115c:	1885883a 	add	r2,r3,r2
40081160:	10800017 	ldw	r2,0(r2)
40081164:	1000683a 	jmp	r2
40081168:	400811a4 	muli	zero,r8,8262
4008116c:	400811e0 	cmpeqi	zero,r8,8263
40081170:	400812f4 	orhi	zero,r8,8267
40081174:	40081308 	cmpgei	zero,r8,8268
40081178:	40081574 	orhi	zero,r8,8277
4008117c:	40081574 	orhi	zero,r8,8277
40081180:	40081574 	orhi	zero,r8,8277
40081184:	40081574 	orhi	zero,r8,8277
40081188:	40081574 	orhi	zero,r8,8277
4008118c:	40081574 	orhi	zero,r8,8277
40081190:	40081478 	rdprs	zero,r8,8273
40081194:	4008148c 	andi	zero,r8,8274
40081198:	400814bc 	xorhi	zero,r8,8274
4008119c:	400814ec 	andhi	zero,r8,8275
400811a0:	40081540 	call	44008154 <__alt_mem_epcs+0x3ec7154>
   {
      case CTRL_SYNC:  /* Make sure that pending write process has been finished */
         SELECT();
400811a4:	d0e73717 	ldw	r3,-25380(gp)
400811a8:	00bfff84 	movi	r2,-2
400811ac:	1884703a 	and	r2,r3,r2
400811b0:	d0a73715 	stw	r2,-25380(gp)
400811b4:	00b00534 	movhi	r2,49172
400811b8:	10880204 	addi	r2,r2,8200
400811bc:	d0e73717 	ldw	r3,-25380(gp)
400811c0:	10c00015 	stw	r3,0(r2)
         if (WaitReady() == 0xFF)
400811c4:	00807cc0 	call	400807cc <WaitReady>
400811c8:	10803fcc 	andi	r2,r2,255
400811cc:	10803fd8 	cmpnei	r2,r2,255
400811d0:	1000021e 	bne	r2,zero,400811dc <ffs_DiskIOIoctl+0xe8>
            res = RES_OK;
400811d4:	e03ff415 	stw	zero,-48(fp)
         break;
400811d8:	0000e806 	br	4008157c <ffs_DiskIOIoctl+0x488>
400811dc:	0000e706 	br	4008157c <ffs_DiskIOIoctl+0x488>

      case GET_SECTOR_COUNT: /* Get number of sectors on the disk (DWORD) */
         if ((SendCMD(CMD9, 0) == 0) && ReceiveDatablock(csd, 16))
400811e0:	01001244 	movi	r4,73
400811e4:	000b883a 	mov	r5,zero
400811e8:	00808640 	call	40080864 <SendCMD>
400811ec:	10803fcc 	andi	r2,r2,255
400811f0:	10003f1e 	bne	r2,zero,400812f0 <ffs_DiskIOIoctl+0x1fc>
400811f4:	e0bff784 	addi	r2,fp,-34
400811f8:	1009883a 	mov	r4,r2
400811fc:	01400404 	movi	r5,16
40081200:	00804f40 	call	400804f4 <ReceiveDatablock>
40081204:	10003a26 	beq	r2,zero,400812f0 <ffs_DiskIOIoctl+0x1fc>
         {
            if ((csd[0] >> 6) == 1)
40081208:	e0bff783 	ldbu	r2,-34(fp)
4008120c:	10803fcc 	andi	r2,r2,255
40081210:	1004d1ba 	srli	r2,r2,6
40081214:	10803fcc 	andi	r2,r2,255
40081218:	10800058 	cmpnei	r2,r2,1
4008121c:	10000d1e 	bne	r2,zero,40081254 <ffs_DiskIOIoctl+0x160>
            {  /* SDC ver 2.00 */
               //@@MF csize = csd[9] + ((FFS_U16)csd[8] << 8) + 1;
               csize = (FFS_U16) ((FFS_U16) csd[9] | ((FFS_U16) csd[8] << 8)) + 1;
40081220:	e0bff9c3 	ldbu	r2,-25(fp)
40081224:	10803fcc 	andi	r2,r2,255
40081228:	e0fff983 	ldbu	r3,-26(fp)
4008122c:	18c03fcc 	andi	r3,r3,255
40081230:	1806923a 	slli	r3,r3,8
40081234:	10c4b03a 	or	r2,r2,r3
40081238:	10800044 	addi	r2,r2,1
4008123c:	e0bff70d 	sth	r2,-36(fp)
               *(FFS_U32 *) buff = (FFS_U32) csize << 10;
40081240:	e0bff70b 	ldhu	r2,-36(fp)
40081244:	100692ba 	slli	r3,r2,10
40081248:	e0bffe17 	ldw	r2,-8(fp)
4008124c:	10c00015 	stw	r3,0(r2)
40081250:	00002506 	br	400812e8 <ffs_DiskIOIoctl+0x1f4>
            }
            else
            {  /* MMC or SDC ver 1.XX */
               n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
40081254:	e0bff8c3 	ldbu	r2,-29(fp)
40081258:	108003cc 	andi	r2,r2,15
4008125c:	1007883a 	mov	r3,r2
40081260:	e0bffa03 	ldbu	r2,-24(fp)
40081264:	10803fcc 	andi	r2,r2,255
40081268:	1004d1fa 	srli	r2,r2,7
4008126c:	1885883a 	add	r2,r3,r2
40081270:	1007883a 	mov	r3,r2
40081274:	e0bff9c3 	ldbu	r2,-25(fp)
40081278:	108000cc 	andi	r2,r2,3
4008127c:	1085883a 	add	r2,r2,r2
40081280:	1885883a 	add	r2,r3,r2
40081284:	10800084 	addi	r2,r2,2
40081288:	e0bff505 	stb	r2,-44(fp)
               csize = (csd[8] >> 6) + ((FFS_U16) csd[7] << 2) + ((FFS_U16) (csd[6] & 3) << 10) + 1;
4008128c:	e0bff983 	ldbu	r2,-26(fp)
40081290:	10803fcc 	andi	r2,r2,255
40081294:	1004d1ba 	srli	r2,r2,6
40081298:	10c03fcc 	andi	r3,r2,255
4008129c:	e0bff943 	ldbu	r2,-27(fp)
400812a0:	10803fcc 	andi	r2,r2,255
400812a4:	1085883a 	add	r2,r2,r2
400812a8:	1085883a 	add	r2,r2,r2
400812ac:	1885883a 	add	r2,r3,r2
400812b0:	1007883a 	mov	r3,r2
400812b4:	e0bff903 	ldbu	r2,-28(fp)
400812b8:	10803fcc 	andi	r2,r2,255
400812bc:	108000cc 	andi	r2,r2,3
400812c0:	100492ba 	slli	r2,r2,10
400812c4:	1885883a 	add	r2,r3,r2
400812c8:	10800044 	addi	r2,r2,1
400812cc:	e0bff70d 	sth	r2,-36(fp)
               *(FFS_U32 *) buff = (FFS_U32) csize << (n - 9);
400812d0:	e0fff70b 	ldhu	r3,-36(fp)
400812d4:	e0bff503 	ldbu	r2,-44(fp)
400812d8:	10bffdc4 	addi	r2,r2,-9
400812dc:	1886983a 	sll	r3,r3,r2
400812e0:	e0bffe17 	ldw	r2,-8(fp)
400812e4:	10c00015 	stw	r3,0(r2)
            }
            res = RES_OK;
400812e8:	e03ff415 	stw	zero,-48(fp)
         }
         break;
400812ec:	0000a306 	br	4008157c <ffs_DiskIOIoctl+0x488>
400812f0:	0000a206 	br	4008157c <ffs_DiskIOIoctl+0x488>

      case GET_SECTOR_SIZE:  /* Get sectors on the disk (WORD) */
         *(FFS_U16 *) buff = 512;
400812f4:	e0bffe17 	ldw	r2,-8(fp)
400812f8:	00c08004 	movi	r3,512
400812fc:	10c0000d 	sth	r3,0(r2)
         res = RES_OK;
40081300:	e03ff415 	stw	zero,-48(fp)
         break;
40081304:	00009d06 	br	4008157c <ffs_DiskIOIoctl+0x488>

      case GET_BLOCK_SIZE:   /* Get erase block size in unit of sectors (DWORD) */
         if (CardType & CT_SD2)
40081308:	d0a73503 	ldbu	r2,-25388(gp)
4008130c:	10803fcc 	andi	r2,r2,255
40081310:	1080010c 	andi	r2,r2,4
40081314:	10001e26 	beq	r2,zero,40081390 <ffs_DiskIOIoctl+0x29c>
         {  /* SDC ver 2.00 */
            if (SendCMD(ACMD13, 0) == 0)
40081318:	01003344 	movi	r4,205
4008131c:	000b883a 	mov	r5,zero
40081320:	00808640 	call	40080864 <SendCMD>
40081324:	10803fcc 	andi	r2,r2,255
40081328:	1000521e 	bne	r2,zero,40081474 <ffs_DiskIOIoctl+0x380>
            {  /* Read SD status */
               ReceiveU8();
4008132c:	00804a40 	call	400804a4 <ReceiveU8>
               if (ReceiveDatablock(csd, 16))
40081330:	e0bff784 	addi	r2,fp,-34
40081334:	1009883a 	mov	r4,r2
40081338:	01400404 	movi	r5,16
4008133c:	00804f40 	call	400804f4 <ReceiveDatablock>
40081340:	10004c26 	beq	r2,zero,40081474 <ffs_DiskIOIoctl+0x380>
               {  /* Read partial block */
                  for (n = 64 - 16; n; n--)
40081344:	00800c04 	movi	r2,48
40081348:	e0bff505 	stb	r2,-44(fp)
4008134c:	00000406 	br	40081360 <ffs_DiskIOIoctl+0x26c>
                     ReceiveU8();   /* Purge trailing data */
40081350:	00804a40 	call	400804a4 <ReceiveU8>
            if (SendCMD(ACMD13, 0) == 0)
            {  /* Read SD status */
               ReceiveU8();
               if (ReceiveDatablock(csd, 16))
               {  /* Read partial block */
                  for (n = 64 - 16; n; n--)
40081354:	e0bff503 	ldbu	r2,-44(fp)
40081358:	10bfffc4 	addi	r2,r2,-1
4008135c:	e0bff505 	stb	r2,-44(fp)
40081360:	e0bff503 	ldbu	r2,-44(fp)
40081364:	103ffa1e 	bne	r2,zero,40081350 <__alt_mem_epcs+0xfff40350>
                     ReceiveU8();   /* Purge trailing data */
                  *(FFS_U32 *) buff = 16UL << (csd[10] >> 4);
40081368:	e0bffa03 	ldbu	r2,-24(fp)
4008136c:	10803fcc 	andi	r2,r2,255
40081370:	1004d13a 	srli	r2,r2,4
40081374:	10803fcc 	andi	r2,r2,255
40081378:	00c00404 	movi	r3,16
4008137c:	1886983a 	sll	r3,r3,r2
40081380:	e0bffe17 	ldw	r2,-8(fp)
40081384:	10c00015 	stw	r3,0(r2)
                  res = RES_OK;
40081388:	e03ff415 	stw	zero,-48(fp)
                  *(FFS_U32 *) buff = ((FFS_U16) ((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
               }
               res = RES_OK;
            }
         }
         break;
4008138c:	00007b06 	br	4008157c <ffs_DiskIOIoctl+0x488>
               }
            }
         }
         else
         {  /* SDC ver 1.XX or MMC */
            if ((SendCMD(CMD9, 0) == 0) && ReceiveDatablock(csd, 16))
40081390:	01001244 	movi	r4,73
40081394:	000b883a 	mov	r5,zero
40081398:	00808640 	call	40080864 <SendCMD>
4008139c:	10803fcc 	andi	r2,r2,255
400813a0:	1000341e 	bne	r2,zero,40081474 <ffs_DiskIOIoctl+0x380>
400813a4:	e0bff784 	addi	r2,fp,-34
400813a8:	1009883a 	mov	r4,r2
400813ac:	01400404 	movi	r5,16
400813b0:	00804f40 	call	400804f4 <ReceiveDatablock>
400813b4:	10002f26 	beq	r2,zero,40081474 <ffs_DiskIOIoctl+0x380>
            {  /* Read CSD */
               if (CardType & CT_SD1)
400813b8:	d0a73503 	ldbu	r2,-25388(gp)
400813bc:	10803fcc 	andi	r2,r2,255
400813c0:	1080008c 	andi	r2,r2,2
400813c4:	10001526 	beq	r2,zero,4008141c <ffs_DiskIOIoctl+0x328>
               {  /* SDC ver 1.XX */
                  *(FFS_U32 *) buff = (((csd[10] & 63) << 1) + ((FFS_U16) (csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
400813c8:	e0bffa03 	ldbu	r2,-24(fp)
400813cc:	10803fcc 	andi	r2,r2,255
400813d0:	10800fcc 	andi	r2,r2,63
400813d4:	1085883a 	add	r2,r2,r2
400813d8:	1007883a 	mov	r3,r2
400813dc:	e0bffa43 	ldbu	r2,-23(fp)
400813e0:	10803fcc 	andi	r2,r2,255
400813e4:	1004d1fa 	srli	r2,r2,7
400813e8:	10803fcc 	andi	r2,r2,255
400813ec:	1885883a 	add	r2,r3,r2
400813f0:	10c00044 	addi	r3,r2,1
400813f4:	e0bffac3 	ldbu	r2,-21(fp)
400813f8:	10803fcc 	andi	r2,r2,255
400813fc:	1004d1ba 	srli	r2,r2,6
40081400:	10803fcc 	andi	r2,r2,255
40081404:	10bfffc4 	addi	r2,r2,-1
40081408:	1884983a 	sll	r2,r3,r2
4008140c:	1007883a 	mov	r3,r2
40081410:	e0bffe17 	ldw	r2,-8(fp)
40081414:	10c00015 	stw	r3,0(r2)
40081418:	00001406 	br	4008146c <ffs_DiskIOIoctl+0x378>
               }
               else
               {  /* MMC */
                  *(FFS_U32 *) buff = ((FFS_U16) ((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
4008141c:	e0bffa03 	ldbu	r2,-24(fp)
40081420:	10803fcc 	andi	r2,r2,255
40081424:	10801f0c 	andi	r2,r2,124
40081428:	1005d0ba 	srai	r2,r2,2
4008142c:	10bfffcc 	andi	r2,r2,65535
40081430:	10c00044 	addi	r3,r2,1
40081434:	e0bffa43 	ldbu	r2,-23(fp)
40081438:	10803fcc 	andi	r2,r2,255
4008143c:	108000cc 	andi	r2,r2,3
40081440:	100890fa 	slli	r4,r2,3
40081444:	e0bffa43 	ldbu	r2,-23(fp)
40081448:	10803fcc 	andi	r2,r2,255
4008144c:	1004d17a 	srli	r2,r2,5
40081450:	10803fcc 	andi	r2,r2,255
40081454:	2085883a 	add	r2,r4,r2
40081458:	10800044 	addi	r2,r2,1
4008145c:	1885383a 	mul	r2,r3,r2
40081460:	1007883a 	mov	r3,r2
40081464:	e0bffe17 	ldw	r2,-8(fp)
40081468:	10c00015 	stw	r3,0(r2)
               }
               res = RES_OK;
4008146c:	e03ff415 	stw	zero,-48(fp)
            }
         }
         break;
40081470:	00004206 	br	4008157c <ffs_DiskIOIoctl+0x488>
40081474:	00004106 	br	4008157c <ffs_DiskIOIoctl+0x488>
         
      /* Following command are not used by FatFs module */
         
      case MMC_GET_TYPE:  /* Get MMC/SDC type (BYTE) */
         *ptr = CardType;
40081478:	d0e73503 	ldbu	r3,-25388(gp)
4008147c:	e0bff617 	ldw	r2,-40(fp)
40081480:	10c00005 	stb	r3,0(r2)
         res = RES_OK;
40081484:	e03ff415 	stw	zero,-48(fp)
         break;
40081488:	00003c06 	br	4008157c <ffs_DiskIOIoctl+0x488>

      case MMC_GET_CSD:   /* Receive CSD as a data block (16 bytes) */
         if (SendCMD(CMD9, 0) == 0  /* READ_CSD */
4008148c:	01001244 	movi	r4,73
40081490:	000b883a 	mov	r5,zero
40081494:	00808640 	call	40080864 <SendCMD>
40081498:	10803fcc 	andi	r2,r2,255
4008149c:	1000061e 	bne	r2,zero,400814b8 <ffs_DiskIOIoctl+0x3c4>
             && ReceiveDatablock(ptr, 16))
400814a0:	e13ff617 	ldw	r4,-40(fp)
400814a4:	01400404 	movi	r5,16
400814a8:	00804f40 	call	400804f4 <ReceiveDatablock>
400814ac:	10000226 	beq	r2,zero,400814b8 <ffs_DiskIOIoctl+0x3c4>
            res = RES_OK;
400814b0:	e03ff415 	stw	zero,-48(fp)
         break;
400814b4:	00003106 	br	4008157c <ffs_DiskIOIoctl+0x488>
400814b8:	00003006 	br	4008157c <ffs_DiskIOIoctl+0x488>

      case MMC_GET_CID:   /* Receive CID as a data block (16 bytes) */
         if (SendCMD(CMD10, 0) == 0 /* READ_CID */
400814bc:	01001284 	movi	r4,74
400814c0:	000b883a 	mov	r5,zero
400814c4:	00808640 	call	40080864 <SendCMD>
400814c8:	10803fcc 	andi	r2,r2,255
400814cc:	1000061e 	bne	r2,zero,400814e8 <ffs_DiskIOIoctl+0x3f4>
             && ReceiveDatablock(ptr, 16))
400814d0:	e13ff617 	ldw	r4,-40(fp)
400814d4:	01400404 	movi	r5,16
400814d8:	00804f40 	call	400804f4 <ReceiveDatablock>
400814dc:	10000226 	beq	r2,zero,400814e8 <ffs_DiskIOIoctl+0x3f4>
            res = RES_OK;
400814e0:	e03ff415 	stw	zero,-48(fp)
         break;
400814e4:	00002506 	br	4008157c <ffs_DiskIOIoctl+0x488>
400814e8:	00002406 	br	4008157c <ffs_DiskIOIoctl+0x488>

      case MMC_GET_OCR:   /* Receive OCR as an R3 resp (4 bytes) */
         if (SendCMD(CMD58, 0) == 0)
400814ec:	01001e84 	movi	r4,122
400814f0:	000b883a 	mov	r5,zero
400814f4:	00808640 	call	40080864 <SendCMD>
400814f8:	10803fcc 	andi	r2,r2,255
400814fc:	10000f1e 	bne	r2,zero,4008153c <ffs_DiskIOIoctl+0x448>
         {  /* READ_OCR */
            for (n = 0; n < 4; n++)
40081500:	e03ff505 	stb	zero,-44(fp)
40081504:	00000806 	br	40081528 <ffs_DiskIOIoctl+0x434>
               *ptr++ = ReceiveU8();
40081508:	e43ff617 	ldw	r16,-40(fp)
4008150c:	80800044 	addi	r2,r16,1
40081510:	e0bff615 	stw	r2,-40(fp)
40081514:	00804a40 	call	400804a4 <ReceiveU8>
40081518:	80800005 	stb	r2,0(r16)
         break;

      case MMC_GET_OCR:   /* Receive OCR as an R3 resp (4 bytes) */
         if (SendCMD(CMD58, 0) == 0)
         {  /* READ_OCR */
            for (n = 0; n < 4; n++)
4008151c:	e0bff503 	ldbu	r2,-44(fp)
40081520:	10800044 	addi	r2,r2,1
40081524:	e0bff505 	stb	r2,-44(fp)
40081528:	e0bff503 	ldbu	r2,-44(fp)
4008152c:	10800130 	cmpltui	r2,r2,4
40081530:	103ff51e 	bne	r2,zero,40081508 <__alt_mem_epcs+0xfff40508>
               *ptr++ = ReceiveU8();
            res = RES_OK;
40081534:	e03ff415 	stw	zero,-48(fp)
         }
         break;
40081538:	00001006 	br	4008157c <ffs_DiskIOIoctl+0x488>
4008153c:	00000f06 	br	4008157c <ffs_DiskIOIoctl+0x488>

      case MMC_GET_SDSTAT:   /* Receive SD statsu as a data block (64 bytes) */
         if (SendCMD(ACMD13, 0) == 0)
40081540:	01003344 	movi	r4,205
40081544:	000b883a 	mov	r5,zero
40081548:	00808640 	call	40080864 <SendCMD>
4008154c:	10803fcc 	andi	r2,r2,255
40081550:	1000071e 	bne	r2,zero,40081570 <ffs_DiskIOIoctl+0x47c>
         {  /* SD_STATUS */
            ReceiveU8();
40081554:	00804a40 	call	400804a4 <ReceiveU8>
            if (ReceiveDatablock(ptr, 64))
40081558:	e13ff617 	ldw	r4,-40(fp)
4008155c:	01401004 	movi	r5,64
40081560:	00804f40 	call	400804f4 <ReceiveDatablock>
40081564:	10000226 	beq	r2,zero,40081570 <ffs_DiskIOIoctl+0x47c>
               res = RES_OK;
40081568:	e03ff415 	stw	zero,-48(fp)
         }
         break;
4008156c:	00000306 	br	4008157c <ffs_DiskIOIoctl+0x488>
40081570:	00000206 	br	4008157c <ffs_DiskIOIoctl+0x488>

      default:
         res = RES_PARERR;
40081574:	00800104 	movi	r2,4
40081578:	e0bff415 	stw	r2,-48(fp)
   }

   ReleaseBus();
4008157c:	00808200 	call	40080820 <ReleaseBus>

   return(res);
40081580:	e0bff417 	ldw	r2,-48(fp)
} /* ffs_DiskIOIoctl */
40081584:	e6ffff04 	addi	sp,fp,-4
40081588:	dfc00217 	ldw	ra,8(sp)
4008158c:	df000117 	ldw	fp,4(sp)
40081590:	dc000017 	ldw	r16,0(sp)
40081594:	dec00304 	addi	sp,sp,12
40081598:	f800283a 	ret

4008159c <get_fattime>:
/*  In    : none                                                           */
/*  Out   : none                                                           */
/*  Return: time                                                           */
/***************************************************************************/
FFS_U32 get_fattime (void)
{
4008159c:	defffe04 	addi	sp,sp,-8
400815a0:	df000115 	stw	fp,4(sp)
400815a4:	df000104 	addi	fp,sp,4
   FFS_U32 dTime;

   dTime = ((FFS_U32)(2008 - 1980) << 25) |
400815a8:	008e57f4 	movhi	r2,14687
400815ac:	10a87844 	addi	r2,r2,-24095
400815b0:	e0bfff15 	stw	r2,-4(fp)
                     ((FFS_U32) 30 << 16) | 
                     ((FFS_U32) 20 << 11) | 
                     ((FFS_U32) 15 << 5)  | 
                     ((FFS_U32) 2 >> 1);

   return(dTime);
400815b4:	e0bfff17 	ldw	r2,-4(fp)
} /* get_fattime */
400815b8:	e037883a 	mov	sp,fp
400815bc:	df000017 	ldw	fp,0(sp)
400815c0:	dec00104 	addi	sp,sp,4
400815c4:	f800283a 	ret

400815c8 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, uint32_t cnt) {
400815c8:	defffa04 	addi	sp,sp,-24
400815cc:	df000515 	stw	fp,20(sp)
400815d0:	df000504 	addi	fp,sp,20
400815d4:	e13ffd15 	stw	r4,-12(fp)
400815d8:	e17ffe15 	stw	r5,-8(fp)
400815dc:	e1bfff15 	stw	r6,-4(fp)
   uint8_t *d = (uint8_t*)dst;
400815e0:	e0bffd17 	ldw	r2,-12(fp)
400815e4:	e0bffb15 	stw	r2,-20(fp)
   const uint8_t *s = (const uint8_t*)src;
400815e8:	e0bffe17 	ldw	r2,-8(fp)
400815ec:	e0bffc15 	stw	r2,-16(fp)
      *(int*)d = *(int*)s;
      d += sizeof(int); s += sizeof(int);
      cnt -= sizeof(int);
   }
#endif
   while (cnt--)
400815f0:	00000806 	br	40081614 <mem_cpy+0x4c>
      *d++ = *s++;
400815f4:	e0bffb17 	ldw	r2,-20(fp)
400815f8:	10c00044 	addi	r3,r2,1
400815fc:	e0fffb15 	stw	r3,-20(fp)
40081600:	e0fffc17 	ldw	r3,-16(fp)
40081604:	19000044 	addi	r4,r3,1
40081608:	e13ffc15 	stw	r4,-16(fp)
4008160c:	18c00003 	ldbu	r3,0(r3)
40081610:	10c00005 	stb	r3,0(r2)
      *(int*)d = *(int*)s;
      d += sizeof(int); s += sizeof(int);
      cnt -= sizeof(int);
   }
#endif
   while (cnt--)
40081614:	e0bfff17 	ldw	r2,-4(fp)
40081618:	10ffffc4 	addi	r3,r2,-1
4008161c:	e0ffff15 	stw	r3,-4(fp)
40081620:	103ff41e 	bne	r2,zero,400815f4 <__alt_mem_epcs+0xfff405f4>
      *d++ = *s++;
}
40081624:	e037883a 	mov	sp,fp
40081628:	df000017 	ldw	fp,0(sp)
4008162c:	dec00104 	addi	sp,sp,4
40081630:	f800283a 	ret

40081634 <mem_set>:

/* Fill memory */
static
void mem_set (void* dst, int val, uint32_t cnt) {
40081634:	defffb04 	addi	sp,sp,-20
40081638:	df000415 	stw	fp,16(sp)
4008163c:	df000404 	addi	fp,sp,16
40081640:	e13ffd15 	stw	r4,-12(fp)
40081644:	e17ffe15 	stw	r5,-8(fp)
40081648:	e1bfff15 	stw	r6,-4(fp)
   uint8_t *d = (uint8_t*)dst;
4008164c:	e0bffd17 	ldw	r2,-12(fp)
40081650:	e0bffc15 	stw	r2,-16(fp)

   while (cnt--)
40081654:	00000506 	br	4008166c <mem_set+0x38>
      *d++ = (uint8_t)val;
40081658:	e0bffc17 	ldw	r2,-16(fp)
4008165c:	10c00044 	addi	r3,r2,1
40081660:	e0fffc15 	stw	r3,-16(fp)
40081664:	e0fffe17 	ldw	r3,-8(fp)
40081668:	10c00005 	stb	r3,0(r2)
/* Fill memory */
static
void mem_set (void* dst, int val, uint32_t cnt) {
   uint8_t *d = (uint8_t*)dst;

   while (cnt--)
4008166c:	e0bfff17 	ldw	r2,-4(fp)
40081670:	10ffffc4 	addi	r3,r2,-1
40081674:	e0ffff15 	stw	r3,-4(fp)
40081678:	103ff71e 	bne	r2,zero,40081658 <__alt_mem_epcs+0xfff40658>
      *d++ = (uint8_t)val;
}
4008167c:	e037883a 	mov	sp,fp
40081680:	df000017 	ldw	fp,0(sp)
40081684:	dec00104 	addi	sp,sp,4
40081688:	f800283a 	ret

4008168c <mem_cmp>:

/* Compare memory to memory */
static
int mem_cmp (const void* dst, const void* src, uint32_t cnt) {
4008168c:	defff904 	addi	sp,sp,-28
40081690:	df000615 	stw	fp,24(sp)
40081694:	df000604 	addi	fp,sp,24
40081698:	e13ffd15 	stw	r4,-12(fp)
4008169c:	e17ffe15 	stw	r5,-8(fp)
400816a0:	e1bfff15 	stw	r6,-4(fp)
   const uint8_t *d = (const uint8_t *)dst, *s = (const uint8_t *)src;
400816a4:	e0bffd17 	ldw	r2,-12(fp)
400816a8:	e0bffa15 	stw	r2,-24(fp)
400816ac:	e0bffe17 	ldw	r2,-8(fp)
400816b0:	e0bffb15 	stw	r2,-20(fp)
   int r = 0;
400816b4:	e03ffc15 	stw	zero,-16(fp)

   while (cnt-- && (r = *d++ - *s++) == 0) ;
400816b8:	0001883a 	nop
400816bc:	e0bfff17 	ldw	r2,-4(fp)
400816c0:	10ffffc4 	addi	r3,r2,-1
400816c4:	e0ffff15 	stw	r3,-4(fp)
400816c8:	10000e26 	beq	r2,zero,40081704 <mem_cmp+0x78>
400816cc:	e0bffa17 	ldw	r2,-24(fp)
400816d0:	10c00044 	addi	r3,r2,1
400816d4:	e0fffa15 	stw	r3,-24(fp)
400816d8:	10800003 	ldbu	r2,0(r2)
400816dc:	10c03fcc 	andi	r3,r2,255
400816e0:	e0bffb17 	ldw	r2,-20(fp)
400816e4:	11000044 	addi	r4,r2,1
400816e8:	e13ffb15 	stw	r4,-20(fp)
400816ec:	10800003 	ldbu	r2,0(r2)
400816f0:	10803fcc 	andi	r2,r2,255
400816f4:	1885c83a 	sub	r2,r3,r2
400816f8:	e0bffc15 	stw	r2,-16(fp)
400816fc:	e0bffc17 	ldw	r2,-16(fp)
40081700:	103fee26 	beq	r2,zero,400816bc <__alt_mem_epcs+0xfff406bc>
   return r;
40081704:	e0bffc17 	ldw	r2,-16(fp)
}
40081708:	e037883a 	mov	sp,fp
4008170c:	df000017 	ldw	fp,0(sp)
40081710:	dec00104 	addi	sp,sp,4
40081714:	f800283a 	ret

40081718 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {
40081718:	defffd04 	addi	sp,sp,-12
4008171c:	df000215 	stw	fp,8(sp)
40081720:	df000204 	addi	fp,sp,8
40081724:	e13ffe15 	stw	r4,-8(fp)
40081728:	e17fff15 	stw	r5,-4(fp)
   while (*str && *str != chr) str++;
4008172c:	00000306 	br	4008173c <chk_chr+0x24>
40081730:	e0bffe17 	ldw	r2,-8(fp)
40081734:	10800044 	addi	r2,r2,1
40081738:	e0bffe15 	stw	r2,-8(fp)
4008173c:	e0bffe17 	ldw	r2,-8(fp)
40081740:	10800003 	ldbu	r2,0(r2)
40081744:	10803fcc 	andi	r2,r2,255
40081748:	1080201c 	xori	r2,r2,128
4008174c:	10bfe004 	addi	r2,r2,-128
40081750:	10000726 	beq	r2,zero,40081770 <chk_chr+0x58>
40081754:	e0bffe17 	ldw	r2,-8(fp)
40081758:	10800003 	ldbu	r2,0(r2)
4008175c:	10c03fcc 	andi	r3,r2,255
40081760:	18c0201c 	xori	r3,r3,128
40081764:	18ffe004 	addi	r3,r3,-128
40081768:	e0bfff17 	ldw	r2,-4(fp)
4008176c:	18bff01e 	bne	r3,r2,40081730 <__alt_mem_epcs+0xfff40730>
   return *str;
40081770:	e0bffe17 	ldw	r2,-8(fp)
40081774:	10800003 	ldbu	r2,0(r2)
40081778:	10803fcc 	andi	r2,r2,255
4008177c:	1080201c 	xori	r2,r2,128
40081780:	10bfe004 	addi	r2,r2,-128
}
40081784:	e037883a 	mov	sp,fp
40081788:	df000017 	ldw	fp,0(sp)
4008178c:	dec00104 	addi	sp,sp,4
40081790:	f800283a 	ret

40081794 <move_window>:
static
FRESULT move_window (
   FATFS *fs,     /* File system object */
   uint32_t sector   /* Sector number to make appearance in the fs->win[] */
)              /* Move to zero only writes back dirty window */
{
40081794:	defffa04 	addi	sp,sp,-24
40081798:	dfc00515 	stw	ra,20(sp)
4008179c:	df000415 	stw	fp,16(sp)
400817a0:	df000404 	addi	fp,sp,16
400817a4:	e13ffe15 	stw	r4,-8(fp)
400817a8:	e17fff15 	stw	r5,-4(fp)
   uint32_t wsect;


   wsect = fs->winsect;
400817ac:	e0bffe17 	ldw	r2,-8(fp)
400817b0:	10800b17 	ldw	r2,44(r2)
400817b4:	e0bffc15 	stw	r2,-16(fp)
   if (wsect != sector) {  /* Changed current window */
400817b8:	e0fffc17 	ldw	r3,-16(fp)
400817bc:	e0bfff17 	ldw	r2,-4(fp)
400817c0:	18804526 	beq	r3,r2,400818d8 <move_window+0x144>
#if !_FS_READONLY
      if (fs->wflag) {  /* Write back dirty window if needed */
400817c4:	e0bffe17 	ldw	r2,-8(fp)
400817c8:	10800103 	ldbu	r2,4(r2)
400817cc:	10803fcc 	andi	r2,r2,255
400817d0:	10002f26 	beq	r2,zero,40081890 <move_window+0xfc>
         if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
400817d4:	e0bffe17 	ldw	r2,-8(fp)
400817d8:	10800043 	ldbu	r2,1(r2)
400817dc:	10c03fcc 	andi	r3,r2,255
400817e0:	e0bffe17 	ldw	r2,-8(fp)
400817e4:	10800c04 	addi	r2,r2,48
400817e8:	1809883a 	mov	r4,r3
400817ec:	100b883a 	mov	r5,r2
400817f0:	e1bffc17 	ldw	r6,-16(fp)
400817f4:	01c00044 	movi	r7,1
400817f8:	0080f880 	call	40080f88 <ffs_DiskIOWrite>
400817fc:	10000226 	beq	r2,zero,40081808 <move_window+0x74>
            return FR_DISK_ERR;
40081800:	00800044 	movi	r2,1
40081804:	00003506 	br	400818dc <move_window+0x148>
         fs->wflag = 0;
40081808:	e0bffe17 	ldw	r2,-8(fp)
4008180c:	10000105 	stb	zero,4(r2)
         if (wsect < (fs->fatbase + fs->fsize)) {  /* In FAT area */
40081810:	e0bffe17 	ldw	r2,-8(fp)
40081814:	10c00817 	ldw	r3,32(r2)
40081818:	e0bffe17 	ldw	r2,-8(fp)
4008181c:	10800717 	ldw	r2,28(r2)
40081820:	1885883a 	add	r2,r3,r2
40081824:	e0fffc17 	ldw	r3,-16(fp)
40081828:	1880192e 	bgeu	r3,r2,40081890 <move_window+0xfc>
            uint8_t nf;
            for (nf = fs->n_fats; nf > 1; nf--) {  /* Reflect the change to all FAT copies */
4008182c:	e0bffe17 	ldw	r2,-8(fp)
40081830:	108000c3 	ldbu	r2,3(r2)
40081834:	e0bffd05 	stb	r2,-12(fp)
40081838:	00001206 	br	40081884 <move_window+0xf0>
               wsect += fs->fsize;
4008183c:	e0bffe17 	ldw	r2,-8(fp)
40081840:	10800717 	ldw	r2,28(r2)
40081844:	e0fffc17 	ldw	r3,-16(fp)
40081848:	1885883a 	add	r2,r3,r2
4008184c:	e0bffc15 	stw	r2,-16(fp)
               disk_write(fs->drv, fs->win, wsect, 1);
40081850:	e0bffe17 	ldw	r2,-8(fp)
40081854:	10800043 	ldbu	r2,1(r2)
40081858:	10c03fcc 	andi	r3,r2,255
4008185c:	e0bffe17 	ldw	r2,-8(fp)
40081860:	10800c04 	addi	r2,r2,48
40081864:	1809883a 	mov	r4,r3
40081868:	100b883a 	mov	r5,r2
4008186c:	e1bffc17 	ldw	r6,-16(fp)
40081870:	01c00044 	movi	r7,1
40081874:	0080f880 	call	40080f88 <ffs_DiskIOWrite>
         if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
            return FR_DISK_ERR;
         fs->wflag = 0;
         if (wsect < (fs->fatbase + fs->fsize)) {  /* In FAT area */
            uint8_t nf;
            for (nf = fs->n_fats; nf > 1; nf--) {  /* Reflect the change to all FAT copies */
40081878:	e0bffd03 	ldbu	r2,-12(fp)
4008187c:	10bfffc4 	addi	r2,r2,-1
40081880:	e0bffd05 	stb	r2,-12(fp)
40081884:	e0bffd03 	ldbu	r2,-12(fp)
40081888:	108000a8 	cmpgeui	r2,r2,2
4008188c:	103feb1e 	bne	r2,zero,4008183c <__alt_mem_epcs+0xfff4083c>
               disk_write(fs->drv, fs->win, wsect, 1);
            }
         }
      }
#endif
      if (sector) {
40081890:	e0bfff17 	ldw	r2,-4(fp)
40081894:	10001026 	beq	r2,zero,400818d8 <move_window+0x144>
         if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK)
40081898:	e0bffe17 	ldw	r2,-8(fp)
4008189c:	10800043 	ldbu	r2,1(r2)
400818a0:	10c03fcc 	andi	r3,r2,255
400818a4:	e0bffe17 	ldw	r2,-8(fp)
400818a8:	10800c04 	addi	r2,r2,48
400818ac:	1809883a 	mov	r4,r3
400818b0:	100b883a 	mov	r5,r2
400818b4:	e1bfff17 	ldw	r6,-4(fp)
400818b8:	01c00044 	movi	r7,1
400818bc:	0080e6c0 	call	40080e6c <ffs_DiskIORead>
400818c0:	10000226 	beq	r2,zero,400818cc <move_window+0x138>
            return FR_DISK_ERR;
400818c4:	00800044 	movi	r2,1
400818c8:	00000406 	br	400818dc <move_window+0x148>
         fs->winsect = sector;
400818cc:	e0bffe17 	ldw	r2,-8(fp)
400818d0:	e0ffff17 	ldw	r3,-4(fp)
400818d4:	10c00b15 	stw	r3,44(r2)
      }
   }

   return FR_OK;
400818d8:	0005883a 	mov	r2,zero
}
400818dc:	e037883a 	mov	sp,fp
400818e0:	dfc00117 	ldw	ra,4(sp)
400818e4:	df000017 	ldw	fp,0(sp)
400818e8:	dec00204 	addi	sp,sp,8
400818ec:	f800283a 	ret

400818f0 <sync>:
#if !_FS_READONLY
static
FRESULT sync ( /* FR_OK: successful, FR_DISK_ERR: failed */
   FATFS *fs   /* File system object */
)
{
400818f0:	defffc04 	addi	sp,sp,-16
400818f4:	dfc00315 	stw	ra,12(sp)
400818f8:	df000215 	stw	fp,8(sp)
400818fc:	df000204 	addi	fp,sp,8
40081900:	e13fff15 	stw	r4,-4(fp)
   FRESULT res;


   res = move_window(fs, 0);
40081904:	e13fff17 	ldw	r4,-4(fp)
40081908:	000b883a 	mov	r5,zero
4008190c:	00817940 	call	40081794 <move_window>
40081910:	e0bffe15 	stw	r2,-8(fp)
   if (res == FR_OK) {
40081914:	e0bffe17 	ldw	r2,-8(fp)
40081918:	1000761e 	bne	r2,zero,40081af4 <sync+0x204>
      /* Update FSInfo sector if needed */
      if (fs->fs_type == FS_FAT32 && fs->fsi_flag) {
4008191c:	e0bfff17 	ldw	r2,-4(fp)
40081920:	10800003 	ldbu	r2,0(r2)
40081924:	10803fcc 	andi	r2,r2,255
40081928:	108000d8 	cmpnei	r2,r2,3
4008192c:	1000671e 	bne	r2,zero,40081acc <sync+0x1dc>
40081930:	e0bfff17 	ldw	r2,-4(fp)
40081934:	10800143 	ldbu	r2,5(r2)
40081938:	10803fcc 	andi	r2,r2,255
4008193c:	10006326 	beq	r2,zero,40081acc <sync+0x1dc>
         fs->winsect = 0;
40081940:	e0bfff17 	ldw	r2,-4(fp)
40081944:	10000b15 	stw	zero,44(r2)
         /* Create FSInfo structure */
         mem_set(fs->win, 0, 512);
40081948:	e0bfff17 	ldw	r2,-4(fp)
4008194c:	10800c04 	addi	r2,r2,48
40081950:	1009883a 	mov	r4,r2
40081954:	000b883a 	mov	r5,zero
40081958:	01808004 	movi	r6,512
4008195c:	00816340 	call	40081634 <mem_set>
         ST_WORD(fs->win+BS_55AA, 0xAA55);
40081960:	e0bfff17 	ldw	r2,-4(fp)
40081964:	00c01544 	movi	r3,85
40081968:	10c08b85 	stb	r3,558(r2)
4008196c:	e0bfff17 	ldw	r2,-4(fp)
40081970:	00ffea84 	movi	r3,-86
40081974:	10c08bc5 	stb	r3,559(r2)
         ST_DWORD(fs->win+FSI_LeadSig, 0x41615252);
40081978:	e0bfff17 	ldw	r2,-4(fp)
4008197c:	00c01484 	movi	r3,82
40081980:	10c00c05 	stb	r3,48(r2)
40081984:	e0bfff17 	ldw	r2,-4(fp)
40081988:	00c01484 	movi	r3,82
4008198c:	10c00c45 	stb	r3,49(r2)
40081990:	e0bfff17 	ldw	r2,-4(fp)
40081994:	00c01844 	movi	r3,97
40081998:	10c00c85 	stb	r3,50(r2)
4008199c:	e0bfff17 	ldw	r2,-4(fp)
400819a0:	00c01044 	movi	r3,65
400819a4:	10c00cc5 	stb	r3,51(r2)
         ST_DWORD(fs->win+FSI_StrucSig, 0x61417272);
400819a8:	e0bfff17 	ldw	r2,-4(fp)
400819ac:	00c01c84 	movi	r3,114
400819b0:	10c08505 	stb	r3,532(r2)
400819b4:	e0bfff17 	ldw	r2,-4(fp)
400819b8:	00c01c84 	movi	r3,114
400819bc:	10c08545 	stb	r3,533(r2)
400819c0:	e0bfff17 	ldw	r2,-4(fp)
400819c4:	00c01044 	movi	r3,65
400819c8:	10c08585 	stb	r3,534(r2)
400819cc:	e0bfff17 	ldw	r2,-4(fp)
400819d0:	00c01844 	movi	r3,97
400819d4:	10c085c5 	stb	r3,535(r2)
         ST_DWORD(fs->win+FSI_Free_Count, fs->free_clust);
400819d8:	e0bfff17 	ldw	r2,-4(fp)
400819dc:	10800417 	ldw	r2,16(r2)
400819e0:	1007883a 	mov	r3,r2
400819e4:	e0bfff17 	ldw	r2,-4(fp)
400819e8:	10c08605 	stb	r3,536(r2)
400819ec:	e0bfff17 	ldw	r2,-4(fp)
400819f0:	10800417 	ldw	r2,16(r2)
400819f4:	10bfffcc 	andi	r2,r2,65535
400819f8:	1004d23a 	srli	r2,r2,8
400819fc:	1007883a 	mov	r3,r2
40081a00:	e0bfff17 	ldw	r2,-4(fp)
40081a04:	10c08645 	stb	r3,537(r2)
40081a08:	e0bfff17 	ldw	r2,-4(fp)
40081a0c:	10800417 	ldw	r2,16(r2)
40081a10:	1004d43a 	srli	r2,r2,16
40081a14:	1007883a 	mov	r3,r2
40081a18:	e0bfff17 	ldw	r2,-4(fp)
40081a1c:	10c08685 	stb	r3,538(r2)
40081a20:	e0bfff17 	ldw	r2,-4(fp)
40081a24:	10800417 	ldw	r2,16(r2)
40081a28:	1004d63a 	srli	r2,r2,24
40081a2c:	1007883a 	mov	r3,r2
40081a30:	e0bfff17 	ldw	r2,-4(fp)
40081a34:	10c086c5 	stb	r3,539(r2)
         ST_DWORD(fs->win+FSI_Nxt_Free, fs->last_clust);
40081a38:	e0bfff17 	ldw	r2,-4(fp)
40081a3c:	10800317 	ldw	r2,12(r2)
40081a40:	1007883a 	mov	r3,r2
40081a44:	e0bfff17 	ldw	r2,-4(fp)
40081a48:	10c08705 	stb	r3,540(r2)
40081a4c:	e0bfff17 	ldw	r2,-4(fp)
40081a50:	10800317 	ldw	r2,12(r2)
40081a54:	10bfffcc 	andi	r2,r2,65535
40081a58:	1004d23a 	srli	r2,r2,8
40081a5c:	1007883a 	mov	r3,r2
40081a60:	e0bfff17 	ldw	r2,-4(fp)
40081a64:	10c08745 	stb	r3,541(r2)
40081a68:	e0bfff17 	ldw	r2,-4(fp)
40081a6c:	10800317 	ldw	r2,12(r2)
40081a70:	1004d43a 	srli	r2,r2,16
40081a74:	1007883a 	mov	r3,r2
40081a78:	e0bfff17 	ldw	r2,-4(fp)
40081a7c:	10c08785 	stb	r3,542(r2)
40081a80:	e0bfff17 	ldw	r2,-4(fp)
40081a84:	10800317 	ldw	r2,12(r2)
40081a88:	1004d63a 	srli	r2,r2,24
40081a8c:	1007883a 	mov	r3,r2
40081a90:	e0bfff17 	ldw	r2,-4(fp)
40081a94:	10c087c5 	stb	r3,543(r2)
         /* Write it into the FSInfo sector */
         disk_write(fs->drv, fs->win, fs->fsi_sector, 1);
40081a98:	e0bfff17 	ldw	r2,-4(fp)
40081a9c:	10800043 	ldbu	r2,1(r2)
40081aa0:	11003fcc 	andi	r4,r2,255
40081aa4:	e0bfff17 	ldw	r2,-4(fp)
40081aa8:	10c00c04 	addi	r3,r2,48
40081aac:	e0bfff17 	ldw	r2,-4(fp)
40081ab0:	10800517 	ldw	r2,20(r2)
40081ab4:	180b883a 	mov	r5,r3
40081ab8:	100d883a 	mov	r6,r2
40081abc:	01c00044 	movi	r7,1
40081ac0:	0080f880 	call	40080f88 <ffs_DiskIOWrite>
         fs->fsi_flag = 0;
40081ac4:	e0bfff17 	ldw	r2,-4(fp)
40081ac8:	10000145 	stb	zero,5(r2)
      }
      /* Make sure that no pending write process in the physical drive */
      if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK)
40081acc:	e0bfff17 	ldw	r2,-4(fp)
40081ad0:	10800043 	ldbu	r2,1(r2)
40081ad4:	10803fcc 	andi	r2,r2,255
40081ad8:	1009883a 	mov	r4,r2
40081adc:	000b883a 	mov	r5,zero
40081ae0:	000d883a 	mov	r6,zero
40081ae4:	00810f40 	call	400810f4 <ffs_DiskIOIoctl>
40081ae8:	10000226 	beq	r2,zero,40081af4 <sync+0x204>
         res = FR_DISK_ERR;
40081aec:	00800044 	movi	r2,1
40081af0:	e0bffe15 	stw	r2,-8(fp)
   }

   return res;
40081af4:	e0bffe17 	ldw	r2,-8(fp)
}
40081af8:	e037883a 	mov	sp,fp
40081afc:	dfc00117 	ldw	ra,4(sp)
40081b00:	df000017 	ldw	fp,0(sp)
40081b04:	dec00204 	addi	sp,sp,8
40081b08:	f800283a 	ret

40081b0c <clust2sect>:

uint32_t clust2sect (   /* !=0: Sector number, 0: Failed - invalid cluster# */
   FATFS *fs,     /* File system object */
   uint32_t clst     /* Cluster# to be converted */
)
{
40081b0c:	defffd04 	addi	sp,sp,-12
40081b10:	df000215 	stw	fp,8(sp)
40081b14:	df000204 	addi	fp,sp,8
40081b18:	e13ffe15 	stw	r4,-8(fp)
40081b1c:	e17fff15 	stw	r5,-4(fp)
   clst -= 2;
40081b20:	e0bfff17 	ldw	r2,-4(fp)
40081b24:	10bfff84 	addi	r2,r2,-2
40081b28:	e0bfff15 	stw	r2,-4(fp)
   if (clst >= (fs->n_fatent - 2)) return 0;    /* Invalid cluster# */
40081b2c:	e0bffe17 	ldw	r2,-8(fp)
40081b30:	10800617 	ldw	r2,24(r2)
40081b34:	10bfff84 	addi	r2,r2,-2
40081b38:	e0ffff17 	ldw	r3,-4(fp)
40081b3c:	18800236 	bltu	r3,r2,40081b48 <clust2sect+0x3c>
40081b40:	0005883a 	mov	r2,zero
40081b44:	00000806 	br	40081b68 <clust2sect+0x5c>
   return clst * fs->csize + fs->database;
40081b48:	e0bffe17 	ldw	r2,-8(fp)
40081b4c:	10800083 	ldbu	r2,2(r2)
40081b50:	10c03fcc 	andi	r3,r2,255
40081b54:	e0bfff17 	ldw	r2,-4(fp)
40081b58:	1887383a 	mul	r3,r3,r2
40081b5c:	e0bffe17 	ldw	r2,-8(fp)
40081b60:	10800a17 	ldw	r2,40(r2)
40081b64:	1885883a 	add	r2,r3,r2
}
40081b68:	e037883a 	mov	sp,fp
40081b6c:	df000017 	ldw	fp,0(sp)
40081b70:	dec00104 	addi	sp,sp,4
40081b74:	f800283a 	ret

40081b78 <get_fat>:

uint32_t get_fat (   /* 0xFFFFFFFF:Disk error, 1:Internal error, Else:Cluster status */
   FATFS *fs,  /* File system object */
   uint32_t clst  /* Cluster# to get the link information */
)
{
40081b78:	defff904 	addi	sp,sp,-28
40081b7c:	dfc00615 	stw	ra,24(sp)
40081b80:	df000515 	stw	fp,20(sp)
40081b84:	df000504 	addi	fp,sp,20
40081b88:	e13ffe15 	stw	r4,-8(fp)
40081b8c:	e17fff15 	stw	r5,-4(fp)
   uint32_t wc, bc;
   uint8_t *p;


   if (clst < 2 || clst >= fs->n_fatent)  /* Chack range */
40081b90:	e0bfff17 	ldw	r2,-4(fp)
40081b94:	108000b0 	cmpltui	r2,r2,2
40081b98:	1000041e 	bne	r2,zero,40081bac <get_fat+0x34>
40081b9c:	e0bffe17 	ldw	r2,-8(fp)
40081ba0:	10800617 	ldw	r2,24(r2)
40081ba4:	e0ffff17 	ldw	r3,-4(fp)
40081ba8:	18800236 	bltu	r3,r2,40081bb4 <get_fat+0x3c>
      return 1;
40081bac:	00800044 	movi	r2,1
40081bb0:	00008d06 	br	40081de8 <get_fat+0x270>

   switch (fs->fs_type) {
40081bb4:	e0bffe17 	ldw	r2,-8(fp)
40081bb8:	10800003 	ldbu	r2,0(r2)
40081bbc:	10803fcc 	andi	r2,r2,255
40081bc0:	10c000a0 	cmpeqi	r3,r2,2
40081bc4:	18003f1e 	bne	r3,zero,40081cc4 <get_fat+0x14c>
40081bc8:	10c000e0 	cmpeqi	r3,r2,3
40081bcc:	18005a1e 	bne	r3,zero,40081d38 <get_fat+0x1c0>
40081bd0:	10800060 	cmpeqi	r2,r2,1
40081bd4:	10008326 	beq	r2,zero,40081de4 <get_fat+0x26c>
   case FS_FAT12 :
      bc = (uint32_t)clst; bc += bc / 2;
40081bd8:	e0bfff17 	ldw	r2,-4(fp)
40081bdc:	e0bffb15 	stw	r2,-20(fp)
40081be0:	e0bffb17 	ldw	r2,-20(fp)
40081be4:	1004d07a 	srli	r2,r2,1
40081be8:	e0fffb17 	ldw	r3,-20(fp)
40081bec:	1885883a 	add	r2,r3,r2
40081bf0:	e0bffb15 	stw	r2,-20(fp)
      if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
40081bf4:	e0bffe17 	ldw	r2,-8(fp)
40081bf8:	10c00817 	ldw	r3,32(r2)
40081bfc:	e0bffb17 	ldw	r2,-20(fp)
40081c00:	1004d27a 	srli	r2,r2,9
40081c04:	1885883a 	add	r2,r3,r2
40081c08:	e13ffe17 	ldw	r4,-8(fp)
40081c0c:	100b883a 	mov	r5,r2
40081c10:	00817940 	call	40081794 <move_window>
40081c14:	10000126 	beq	r2,zero,40081c1c <get_fat+0xa4>
40081c18:	00007206 	br	40081de4 <get_fat+0x26c>
      wc = fs->win[bc % SS(fs)]; bc++;
40081c1c:	e0bffb17 	ldw	r2,-20(fp)
40081c20:	10807fcc 	andi	r2,r2,511
40081c24:	e0fffe17 	ldw	r3,-8(fp)
40081c28:	1885883a 	add	r2,r3,r2
40081c2c:	10800c04 	addi	r2,r2,48
40081c30:	10800003 	ldbu	r2,0(r2)
40081c34:	10803fcc 	andi	r2,r2,255
40081c38:	e0bffc15 	stw	r2,-16(fp)
40081c3c:	e0bffb17 	ldw	r2,-20(fp)
40081c40:	10800044 	addi	r2,r2,1
40081c44:	e0bffb15 	stw	r2,-20(fp)
      if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
40081c48:	e0bffe17 	ldw	r2,-8(fp)
40081c4c:	10c00817 	ldw	r3,32(r2)
40081c50:	e0bffb17 	ldw	r2,-20(fp)
40081c54:	1004d27a 	srli	r2,r2,9
40081c58:	1885883a 	add	r2,r3,r2
40081c5c:	e13ffe17 	ldw	r4,-8(fp)
40081c60:	100b883a 	mov	r5,r2
40081c64:	00817940 	call	40081794 <move_window>
40081c68:	10000126 	beq	r2,zero,40081c70 <get_fat+0xf8>
40081c6c:	00005d06 	br	40081de4 <get_fat+0x26c>
      wc |= fs->win[bc % SS(fs)] << 8;
40081c70:	e0bffb17 	ldw	r2,-20(fp)
40081c74:	10807fcc 	andi	r2,r2,511
40081c78:	e0fffe17 	ldw	r3,-8(fp)
40081c7c:	1885883a 	add	r2,r3,r2
40081c80:	10800c04 	addi	r2,r2,48
40081c84:	10800003 	ldbu	r2,0(r2)
40081c88:	10803fcc 	andi	r2,r2,255
40081c8c:	1004923a 	slli	r2,r2,8
40081c90:	1007883a 	mov	r3,r2
40081c94:	e0bffc17 	ldw	r2,-16(fp)
40081c98:	10c4b03a 	or	r2,r2,r3
40081c9c:	e0bffc15 	stw	r2,-16(fp)
      return (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
40081ca0:	e0bfff17 	ldw	r2,-4(fp)
40081ca4:	1080004c 	andi	r2,r2,1
40081ca8:	10000326 	beq	r2,zero,40081cb8 <get_fat+0x140>
40081cac:	e0bffc17 	ldw	r2,-16(fp)
40081cb0:	1004d13a 	srli	r2,r2,4
40081cb4:	00004c06 	br	40081de8 <get_fat+0x270>
40081cb8:	e0bffc17 	ldw	r2,-16(fp)
40081cbc:	1083ffcc 	andi	r2,r2,4095
40081cc0:	00004906 	br	40081de8 <get_fat+0x270>

   case FS_FAT16 :
      if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)))) break;
40081cc4:	e0bffe17 	ldw	r2,-8(fp)
40081cc8:	10c00817 	ldw	r3,32(r2)
40081ccc:	e0bfff17 	ldw	r2,-4(fp)
40081cd0:	1004d23a 	srli	r2,r2,8
40081cd4:	1885883a 	add	r2,r3,r2
40081cd8:	e13ffe17 	ldw	r4,-8(fp)
40081cdc:	100b883a 	mov	r5,r2
40081ce0:	00817940 	call	40081794 <move_window>
40081ce4:	10000126 	beq	r2,zero,40081cec <get_fat+0x174>
40081ce8:	00003e06 	br	40081de4 <get_fat+0x26c>
      p = &fs->win[clst * 2 % SS(fs)];
40081cec:	e0bfff17 	ldw	r2,-4(fp)
40081cf0:	1085883a 	add	r2,r2,r2
40081cf4:	10807f8c 	andi	r2,r2,510
40081cf8:	10800c04 	addi	r2,r2,48
40081cfc:	e0fffe17 	ldw	r3,-8(fp)
40081d00:	1885883a 	add	r2,r3,r2
40081d04:	e0bffd15 	stw	r2,-12(fp)
      return LD_WORD(p);
40081d08:	e0bffd17 	ldw	r2,-12(fp)
40081d0c:	10800044 	addi	r2,r2,1
40081d10:	10800003 	ldbu	r2,0(r2)
40081d14:	10803fcc 	andi	r2,r2,255
40081d18:	1004923a 	slli	r2,r2,8
40081d1c:	1007883a 	mov	r3,r2
40081d20:	e0bffd17 	ldw	r2,-12(fp)
40081d24:	10800003 	ldbu	r2,0(r2)
40081d28:	10803fcc 	andi	r2,r2,255
40081d2c:	1884b03a 	or	r2,r3,r2
40081d30:	10bfffcc 	andi	r2,r2,65535
40081d34:	00002c06 	br	40081de8 <get_fat+0x270>

   case FS_FAT32 :
      if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)))) break;
40081d38:	e0bffe17 	ldw	r2,-8(fp)
40081d3c:	10c00817 	ldw	r3,32(r2)
40081d40:	e0bfff17 	ldw	r2,-4(fp)
40081d44:	1004d1fa 	srli	r2,r2,7
40081d48:	1885883a 	add	r2,r3,r2
40081d4c:	e13ffe17 	ldw	r4,-8(fp)
40081d50:	100b883a 	mov	r5,r2
40081d54:	00817940 	call	40081794 <move_window>
40081d58:	10000126 	beq	r2,zero,40081d60 <get_fat+0x1e8>
40081d5c:	00002106 	br	40081de4 <get_fat+0x26c>
      p = &fs->win[clst * 4 % SS(fs)];
40081d60:	e0bfff17 	ldw	r2,-4(fp)
40081d64:	1085883a 	add	r2,r2,r2
40081d68:	1085883a 	add	r2,r2,r2
40081d6c:	10807f0c 	andi	r2,r2,508
40081d70:	10800c04 	addi	r2,r2,48
40081d74:	e0fffe17 	ldw	r3,-8(fp)
40081d78:	1885883a 	add	r2,r3,r2
40081d7c:	e0bffd15 	stw	r2,-12(fp)
      return LD_DWORD(p) & 0x0FFFFFFF;
40081d80:	e0bffd17 	ldw	r2,-12(fp)
40081d84:	108000c4 	addi	r2,r2,3
40081d88:	10800003 	ldbu	r2,0(r2)
40081d8c:	10803fcc 	andi	r2,r2,255
40081d90:	1006963a 	slli	r3,r2,24
40081d94:	e0bffd17 	ldw	r2,-12(fp)
40081d98:	10800084 	addi	r2,r2,2
40081d9c:	10800003 	ldbu	r2,0(r2)
40081da0:	10803fcc 	andi	r2,r2,255
40081da4:	1004943a 	slli	r2,r2,16
40081da8:	1884b03a 	or	r2,r3,r2
40081dac:	e0fffd17 	ldw	r3,-12(fp)
40081db0:	18c00044 	addi	r3,r3,1
40081db4:	18c00003 	ldbu	r3,0(r3)
40081db8:	18c03fcc 	andi	r3,r3,255
40081dbc:	1806923a 	slli	r3,r3,8
40081dc0:	10c6b03a 	or	r3,r2,r3
40081dc4:	e0bffd17 	ldw	r2,-12(fp)
40081dc8:	10800003 	ldbu	r2,0(r2)
40081dcc:	10803fcc 	andi	r2,r2,255
40081dd0:	1886b03a 	or	r3,r3,r2
40081dd4:	00840034 	movhi	r2,4096
40081dd8:	10bfffc4 	addi	r2,r2,-1
40081ddc:	1884703a 	and	r2,r3,r2
40081de0:	00000106 	br	40081de8 <get_fat+0x270>
   }

   return 0xFFFFFFFF;   /* An error occurred at the disk I/O layer */
40081de4:	00bfffc4 	movi	r2,-1
}
40081de8:	e037883a 	mov	sp,fp
40081dec:	dfc00117 	ldw	ra,4(sp)
40081df0:	df000017 	ldw	fp,0(sp)
40081df4:	dec00204 	addi	sp,sp,8
40081df8:	f800283a 	ret

40081dfc <put_fat>:
FRESULT put_fat (
   FATFS *fs,  /* File system object */
   uint32_t clst, /* Cluster# to be changed in range of 2 to fs->n_fatent - 1 */
   uint32_t val   /* New value to mark the cluster */
)
{
40081dfc:	defff804 	addi	sp,sp,-32
40081e00:	dfc00715 	stw	ra,28(sp)
40081e04:	df000615 	stw	fp,24(sp)
40081e08:	df000604 	addi	fp,sp,24
40081e0c:	e13ffd15 	stw	r4,-12(fp)
40081e10:	e17ffe15 	stw	r5,-8(fp)
40081e14:	e1bfff15 	stw	r6,-4(fp)
   uint32_t bc;
   uint8_t *p;
   FRESULT res;


   if (clst < 2 || clst >= fs->n_fatent) {   /* Check range */
40081e18:	e0bffe17 	ldw	r2,-8(fp)
40081e1c:	108000b0 	cmpltui	r2,r2,2
40081e20:	1000041e 	bne	r2,zero,40081e34 <put_fat+0x38>
40081e24:	e0bffd17 	ldw	r2,-12(fp)
40081e28:	10800617 	ldw	r2,24(r2)
40081e2c:	e0fffe17 	ldw	r3,-8(fp)
40081e30:	18800336 	bltu	r3,r2,40081e40 <put_fat+0x44>
      res = FR_INT_ERR;
40081e34:	00800084 	movi	r2,2
40081e38:	e0bffa15 	stw	r2,-24(fp)
40081e3c:	0000c506 	br	40082154 <put_fat+0x358>

   } else {
      switch (fs->fs_type) {
40081e40:	e0bffd17 	ldw	r2,-12(fp)
40081e44:	10800003 	ldbu	r2,0(r2)
40081e48:	10803fcc 	andi	r2,r2,255
40081e4c:	10c000a0 	cmpeqi	r3,r2,2
40081e50:	18005b1e 	bne	r3,zero,40081fc0 <put_fat+0x1c4>
40081e54:	10c000e0 	cmpeqi	r3,r2,3
40081e58:	1800771e 	bne	r3,zero,40082038 <put_fat+0x23c>
40081e5c:	10800060 	cmpeqi	r2,r2,1
40081e60:	1000b726 	beq	r2,zero,40082140 <put_fat+0x344>
      case FS_FAT12 :
         bc = clst; bc += bc / 2;
40081e64:	e0bffe17 	ldw	r2,-8(fp)
40081e68:	e0bffb15 	stw	r2,-20(fp)
40081e6c:	e0bffb17 	ldw	r2,-20(fp)
40081e70:	1004d07a 	srli	r2,r2,1
40081e74:	e0fffb17 	ldw	r3,-20(fp)
40081e78:	1885883a 	add	r2,r3,r2
40081e7c:	e0bffb15 	stw	r2,-20(fp)
         res = move_window(fs, fs->fatbase + (bc / SS(fs)));
40081e80:	e0bffd17 	ldw	r2,-12(fp)
40081e84:	10c00817 	ldw	r3,32(r2)
40081e88:	e0bffb17 	ldw	r2,-20(fp)
40081e8c:	1004d27a 	srli	r2,r2,9
40081e90:	1885883a 	add	r2,r3,r2
40081e94:	e13ffd17 	ldw	r4,-12(fp)
40081e98:	100b883a 	mov	r5,r2
40081e9c:	00817940 	call	40081794 <move_window>
40081ea0:	e0bffa15 	stw	r2,-24(fp)
         if (res != FR_OK) break;
40081ea4:	e0bffa17 	ldw	r2,-24(fp)
40081ea8:	10000126 	beq	r2,zero,40081eb0 <put_fat+0xb4>
40081eac:	0000a606 	br	40082148 <put_fat+0x34c>
         p = &fs->win[bc % SS(fs)];
40081eb0:	e0bffb17 	ldw	r2,-20(fp)
40081eb4:	10807fcc 	andi	r2,r2,511
40081eb8:	10800c04 	addi	r2,r2,48
40081ebc:	e0fffd17 	ldw	r3,-12(fp)
40081ec0:	1885883a 	add	r2,r3,r2
40081ec4:	e0bffc15 	stw	r2,-16(fp)
         *p = (clst & 1) ? ((*p & 0x0F) | ((uint8_t)val << 4)) : (uint8_t)val;
40081ec8:	e0bffe17 	ldw	r2,-8(fp)
40081ecc:	1080004c 	andi	r2,r2,1
40081ed0:	10000a26 	beq	r2,zero,40081efc <put_fat+0x100>
40081ed4:	e0bffc17 	ldw	r2,-16(fp)
40081ed8:	10800003 	ldbu	r2,0(r2)
40081edc:	108003cc 	andi	r2,r2,15
40081ee0:	1007883a 	mov	r3,r2
40081ee4:	e0bfff17 	ldw	r2,-4(fp)
40081ee8:	10803fcc 	andi	r2,r2,255
40081eec:	1004913a 	slli	r2,r2,4
40081ef0:	1884b03a 	or	r2,r3,r2
40081ef4:	1007883a 	mov	r3,r2
40081ef8:	00000206 	br	40081f04 <put_fat+0x108>
40081efc:	e0bfff17 	ldw	r2,-4(fp)
40081f00:	1007883a 	mov	r3,r2
40081f04:	e0bffc17 	ldw	r2,-16(fp)
40081f08:	10c00005 	stb	r3,0(r2)
         bc++;
40081f0c:	e0bffb17 	ldw	r2,-20(fp)
40081f10:	10800044 	addi	r2,r2,1
40081f14:	e0bffb15 	stw	r2,-20(fp)
         fs->wflag = 1;
40081f18:	e0bffd17 	ldw	r2,-12(fp)
40081f1c:	00c00044 	movi	r3,1
40081f20:	10c00105 	stb	r3,4(r2)
         res = move_window(fs, fs->fatbase + (bc / SS(fs)));
40081f24:	e0bffd17 	ldw	r2,-12(fp)
40081f28:	10c00817 	ldw	r3,32(r2)
40081f2c:	e0bffb17 	ldw	r2,-20(fp)
40081f30:	1004d27a 	srli	r2,r2,9
40081f34:	1885883a 	add	r2,r3,r2
40081f38:	e13ffd17 	ldw	r4,-12(fp)
40081f3c:	100b883a 	mov	r5,r2
40081f40:	00817940 	call	40081794 <move_window>
40081f44:	e0bffa15 	stw	r2,-24(fp)
         if (res != FR_OK) break;
40081f48:	e0bffa17 	ldw	r2,-24(fp)
40081f4c:	10000126 	beq	r2,zero,40081f54 <put_fat+0x158>
40081f50:	00007d06 	br	40082148 <put_fat+0x34c>
         p = &fs->win[bc % SS(fs)];
40081f54:	e0bffb17 	ldw	r2,-20(fp)
40081f58:	10807fcc 	andi	r2,r2,511
40081f5c:	10800c04 	addi	r2,r2,48
40081f60:	e0fffd17 	ldw	r3,-12(fp)
40081f64:	1885883a 	add	r2,r3,r2
40081f68:	e0bffc15 	stw	r2,-16(fp)
         *p = (clst & 1) ? (uint8_t)(val >> 4) : ((*p & 0xF0) | ((uint8_t)(val >> 8) & 0x0F));
40081f6c:	e0bffe17 	ldw	r2,-8(fp)
40081f70:	1080004c 	andi	r2,r2,1
40081f74:	10000426 	beq	r2,zero,40081f88 <put_fat+0x18c>
40081f78:	e0bfff17 	ldw	r2,-4(fp)
40081f7c:	1004d13a 	srli	r2,r2,4
40081f80:	1007883a 	mov	r3,r2
40081f84:	00000b06 	br	40081fb4 <put_fat+0x1b8>
40081f88:	e0bffc17 	ldw	r2,-16(fp)
40081f8c:	10800003 	ldbu	r2,0(r2)
40081f90:	1007883a 	mov	r3,r2
40081f94:	00bffc04 	movi	r2,-16
40081f98:	1884703a 	and	r2,r3,r2
40081f9c:	1007883a 	mov	r3,r2
40081fa0:	e0bfff17 	ldw	r2,-4(fp)
40081fa4:	1004d23a 	srli	r2,r2,8
40081fa8:	108003cc 	andi	r2,r2,15
40081fac:	1884b03a 	or	r2,r3,r2
40081fb0:	1007883a 	mov	r3,r2
40081fb4:	e0bffc17 	ldw	r2,-16(fp)
40081fb8:	10c00005 	stb	r3,0(r2)
         break;
40081fbc:	00006206 	br	40082148 <put_fat+0x34c>

      case FS_FAT16 :
         res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
40081fc0:	e0bffd17 	ldw	r2,-12(fp)
40081fc4:	10c00817 	ldw	r3,32(r2)
40081fc8:	e0bffe17 	ldw	r2,-8(fp)
40081fcc:	1004d23a 	srli	r2,r2,8
40081fd0:	1885883a 	add	r2,r3,r2
40081fd4:	e13ffd17 	ldw	r4,-12(fp)
40081fd8:	100b883a 	mov	r5,r2
40081fdc:	00817940 	call	40081794 <move_window>
40081fe0:	e0bffa15 	stw	r2,-24(fp)
         if (res != FR_OK) break;
40081fe4:	e0bffa17 	ldw	r2,-24(fp)
40081fe8:	10000126 	beq	r2,zero,40081ff0 <put_fat+0x1f4>
40081fec:	00005606 	br	40082148 <put_fat+0x34c>
         p = &fs->win[clst * 2 % SS(fs)];
40081ff0:	e0bffe17 	ldw	r2,-8(fp)
40081ff4:	1085883a 	add	r2,r2,r2
40081ff8:	10807f8c 	andi	r2,r2,510
40081ffc:	10800c04 	addi	r2,r2,48
40082000:	e0fffd17 	ldw	r3,-12(fp)
40082004:	1885883a 	add	r2,r3,r2
40082008:	e0bffc15 	stw	r2,-16(fp)
         ST_WORD(p, (uint16_t)val);
4008200c:	e0bfff17 	ldw	r2,-4(fp)
40082010:	1007883a 	mov	r3,r2
40082014:	e0bffc17 	ldw	r2,-16(fp)
40082018:	10c00005 	stb	r3,0(r2)
4008201c:	e0bffc17 	ldw	r2,-16(fp)
40082020:	10800044 	addi	r2,r2,1
40082024:	e0ffff17 	ldw	r3,-4(fp)
40082028:	18ffffcc 	andi	r3,r3,65535
4008202c:	1806d23a 	srli	r3,r3,8
40082030:	10c00005 	stb	r3,0(r2)
         break;
40082034:	00004406 	br	40082148 <put_fat+0x34c>

      case FS_FAT32 :
         res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
40082038:	e0bffd17 	ldw	r2,-12(fp)
4008203c:	10c00817 	ldw	r3,32(r2)
40082040:	e0bffe17 	ldw	r2,-8(fp)
40082044:	1004d1fa 	srli	r2,r2,7
40082048:	1885883a 	add	r2,r3,r2
4008204c:	e13ffd17 	ldw	r4,-12(fp)
40082050:	100b883a 	mov	r5,r2
40082054:	00817940 	call	40081794 <move_window>
40082058:	e0bffa15 	stw	r2,-24(fp)
         if (res != FR_OK) break;
4008205c:	e0bffa17 	ldw	r2,-24(fp)
40082060:	10000126 	beq	r2,zero,40082068 <put_fat+0x26c>
40082064:	00003806 	br	40082148 <put_fat+0x34c>
         p = &fs->win[clst * 4 % SS(fs)];
40082068:	e0bffe17 	ldw	r2,-8(fp)
4008206c:	1085883a 	add	r2,r2,r2
40082070:	1085883a 	add	r2,r2,r2
40082074:	10807f0c 	andi	r2,r2,508
40082078:	10800c04 	addi	r2,r2,48
4008207c:	e0fffd17 	ldw	r3,-12(fp)
40082080:	1885883a 	add	r2,r3,r2
40082084:	e0bffc15 	stw	r2,-16(fp)
         val |= LD_DWORD(p) & 0xF0000000;
40082088:	e0bffc17 	ldw	r2,-16(fp)
4008208c:	108000c4 	addi	r2,r2,3
40082090:	10800003 	ldbu	r2,0(r2)
40082094:	10803fcc 	andi	r2,r2,255
40082098:	1006963a 	slli	r3,r2,24
4008209c:	e0bffc17 	ldw	r2,-16(fp)
400820a0:	10800084 	addi	r2,r2,2
400820a4:	10800003 	ldbu	r2,0(r2)
400820a8:	10803fcc 	andi	r2,r2,255
400820ac:	1004943a 	slli	r2,r2,16
400820b0:	1884b03a 	or	r2,r3,r2
400820b4:	e0fffc17 	ldw	r3,-16(fp)
400820b8:	18c00044 	addi	r3,r3,1
400820bc:	18c00003 	ldbu	r3,0(r3)
400820c0:	18c03fcc 	andi	r3,r3,255
400820c4:	1806923a 	slli	r3,r3,8
400820c8:	10c6b03a 	or	r3,r2,r3
400820cc:	e0bffc17 	ldw	r2,-16(fp)
400820d0:	10800003 	ldbu	r2,0(r2)
400820d4:	10803fcc 	andi	r2,r2,255
400820d8:	1884b03a 	or	r2,r3,r2
400820dc:	10bc002c 	andhi	r2,r2,61440
400820e0:	e0ffff17 	ldw	r3,-4(fp)
400820e4:	1884b03a 	or	r2,r3,r2
400820e8:	e0bfff15 	stw	r2,-4(fp)
         ST_DWORD(p, val);
400820ec:	e0bfff17 	ldw	r2,-4(fp)
400820f0:	1007883a 	mov	r3,r2
400820f4:	e0bffc17 	ldw	r2,-16(fp)
400820f8:	10c00005 	stb	r3,0(r2)
400820fc:	e0bffc17 	ldw	r2,-16(fp)
40082100:	10800044 	addi	r2,r2,1
40082104:	e0ffff17 	ldw	r3,-4(fp)
40082108:	18ffffcc 	andi	r3,r3,65535
4008210c:	1806d23a 	srli	r3,r3,8
40082110:	10c00005 	stb	r3,0(r2)
40082114:	e0bffc17 	ldw	r2,-16(fp)
40082118:	10800084 	addi	r2,r2,2
4008211c:	e0ffff17 	ldw	r3,-4(fp)
40082120:	1806d43a 	srli	r3,r3,16
40082124:	10c00005 	stb	r3,0(r2)
40082128:	e0bffc17 	ldw	r2,-16(fp)
4008212c:	108000c4 	addi	r2,r2,3
40082130:	e0ffff17 	ldw	r3,-4(fp)
40082134:	1806d63a 	srli	r3,r3,24
40082138:	10c00005 	stb	r3,0(r2)
         break;
4008213c:	00000206 	br	40082148 <put_fat+0x34c>

      default :
         res = FR_INT_ERR;
40082140:	00800084 	movi	r2,2
40082144:	e0bffa15 	stw	r2,-24(fp)
      }
      fs->wflag = 1;
40082148:	e0bffd17 	ldw	r2,-12(fp)
4008214c:	00c00044 	movi	r3,1
40082150:	10c00105 	stb	r3,4(r2)
   }

   return res;
40082154:	e0bffa17 	ldw	r2,-24(fp)
}
40082158:	e037883a 	mov	sp,fp
4008215c:	dfc00117 	ldw	ra,4(sp)
40082160:	df000017 	ldw	fp,0(sp)
40082164:	dec00204 	addi	sp,sp,8
40082168:	f800283a 	ret

4008216c <remove_chain>:
static
FRESULT remove_chain (
   FATFS *fs,        /* File system object */
   uint32_t clst        /* Cluster# to remove a chain from */
)
{
4008216c:	defffa04 	addi	sp,sp,-24
40082170:	dfc00515 	stw	ra,20(sp)
40082174:	df000415 	stw	fp,16(sp)
40082178:	df000404 	addi	fp,sp,16
4008217c:	e13ffe15 	stw	r4,-8(fp)
40082180:	e17fff15 	stw	r5,-4(fp)
   uint32_t nxt;
#if _USE_ERASE
   uint32_t scl = clst, ecl = clst, resion[2];
#endif

   if (clst < 2 || clst >= fs->n_fatent) {   /* Check range */
40082184:	e0bfff17 	ldw	r2,-4(fp)
40082188:	108000b0 	cmpltui	r2,r2,2
4008218c:	1000041e 	bne	r2,zero,400821a0 <remove_chain+0x34>
40082190:	e0bffe17 	ldw	r2,-8(fp)
40082194:	10800617 	ldw	r2,24(r2)
40082198:	e0ffff17 	ldw	r3,-4(fp)
4008219c:	18800336 	bltu	r3,r2,400821ac <remove_chain+0x40>
      res = FR_INT_ERR;
400821a0:	00800084 	movi	r2,2
400821a4:	e0bffc15 	stw	r2,-16(fp)
400821a8:	00002f06 	br	40082268 <remove_chain+0xfc>

   } else {
      res = FR_OK;
400821ac:	e03ffc15 	stw	zero,-16(fp)
      while (clst < fs->n_fatent) {       /* Not a last link? */
400821b0:	00002906 	br	40082258 <remove_chain+0xec>
         nxt = get_fat(fs, clst);         /* Get cluster status */
400821b4:	e13ffe17 	ldw	r4,-8(fp)
400821b8:	e17fff17 	ldw	r5,-4(fp)
400821bc:	0081b780 	call	40081b78 <get_fat>
400821c0:	e0bffd15 	stw	r2,-12(fp)
         if (nxt == 0) break;          /* Empty cluster? */
400821c4:	e0bffd17 	ldw	r2,-12(fp)
400821c8:	1000011e 	bne	r2,zero,400821d0 <remove_chain+0x64>
400821cc:	00002606 	br	40082268 <remove_chain+0xfc>
         if (nxt == 1) { res = FR_INT_ERR; break; }   /* Internal error? */
400821d0:	e0bffd17 	ldw	r2,-12(fp)
400821d4:	10800058 	cmpnei	r2,r2,1
400821d8:	1000031e 	bne	r2,zero,400821e8 <remove_chain+0x7c>
400821dc:	00800084 	movi	r2,2
400821e0:	e0bffc15 	stw	r2,-16(fp)
400821e4:	00002006 	br	40082268 <remove_chain+0xfc>
         if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }  /* Disk error? */
400821e8:	e0bffd17 	ldw	r2,-12(fp)
400821ec:	10bfffd8 	cmpnei	r2,r2,-1
400821f0:	1000031e 	bne	r2,zero,40082200 <remove_chain+0x94>
400821f4:	00800044 	movi	r2,1
400821f8:	e0bffc15 	stw	r2,-16(fp)
400821fc:	00001a06 	br	40082268 <remove_chain+0xfc>
         res = put_fat(fs, clst, 0);         /* Mark the cluster "empty" */
40082200:	e13ffe17 	ldw	r4,-8(fp)
40082204:	e17fff17 	ldw	r5,-4(fp)
40082208:	000d883a 	mov	r6,zero
4008220c:	0081dfc0 	call	40081dfc <put_fat>
40082210:	e0bffc15 	stw	r2,-16(fp)
         if (res != FR_OK) break;
40082214:	e0bffc17 	ldw	r2,-16(fp)
40082218:	10000126 	beq	r2,zero,40082220 <remove_chain+0xb4>
4008221c:	00001206 	br	40082268 <remove_chain+0xfc>
         if (fs->free_clust != 0xFFFFFFFF) { /* Update FSInfo */
40082220:	e0bffe17 	ldw	r2,-8(fp)
40082224:	10800417 	ldw	r2,16(r2)
40082228:	10bfffe0 	cmpeqi	r2,r2,-1
4008222c:	1000081e 	bne	r2,zero,40082250 <remove_chain+0xe4>
            fs->free_clust++;
40082230:	e0bffe17 	ldw	r2,-8(fp)
40082234:	10800417 	ldw	r2,16(r2)
40082238:	10c00044 	addi	r3,r2,1
4008223c:	e0bffe17 	ldw	r2,-8(fp)
40082240:	10c00415 	stw	r3,16(r2)
            fs->fsi_flag = 1;
40082244:	e0bffe17 	ldw	r2,-8(fp)
40082248:	00c00044 	movi	r3,1
4008224c:	10c00145 	stb	r3,5(r2)
            resion[1] = clust2sect(fs, ecl) + fs->csize - 1;   /* End sector */
            disk_ioctl(fs->drv, CTRL_ERASE_SECTOR, resion);    /* Erase the block */
            scl = ecl = nxt;
         }
#endif
         clst = nxt; /* Next cluster */
40082250:	e0bffd17 	ldw	r2,-12(fp)
40082254:	e0bfff15 	stw	r2,-4(fp)
   if (clst < 2 || clst >= fs->n_fatent) {   /* Check range */
      res = FR_INT_ERR;

   } else {
      res = FR_OK;
      while (clst < fs->n_fatent) {       /* Not a last link? */
40082258:	e0bffe17 	ldw	r2,-8(fp)
4008225c:	10800617 	ldw	r2,24(r2)
40082260:	e0ffff17 	ldw	r3,-4(fp)
40082264:	18bfd336 	bltu	r3,r2,400821b4 <__alt_mem_epcs+0xfff411b4>
#endif
         clst = nxt; /* Next cluster */
      }
   }

   return res;
40082268:	e0bffc17 	ldw	r2,-16(fp)
}
4008226c:	e037883a 	mov	sp,fp
40082270:	dfc00117 	ldw	ra,4(sp)
40082274:	df000017 	ldw	fp,0(sp)
40082278:	dec00204 	addi	sp,sp,8
4008227c:	f800283a 	ret

40082280 <create_chain>:
static
uint32_t create_chain ( /* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
   FATFS *fs,        /* File system object */
   uint32_t clst        /* Cluster# to stretch. 0 means create a new chain. */
)
{
40082280:	defff804 	addi	sp,sp,-32
40082284:	dfc00715 	stw	ra,28(sp)
40082288:	df000615 	stw	fp,24(sp)
4008228c:	df000604 	addi	fp,sp,24
40082290:	e13ffe15 	stw	r4,-8(fp)
40082294:	e17fff15 	stw	r5,-4(fp)
   uint32_t cs, ncl, scl;
   FRESULT res;


   if (clst == 0) {     /* Create a new chain */
40082298:	e0bfff17 	ldw	r2,-4(fp)
4008229c:	10000c1e 	bne	r2,zero,400822d0 <create_chain+0x50>
      scl = fs->last_clust;         /* Get suggested start point */
400822a0:	e0bffe17 	ldw	r2,-8(fp)
400822a4:	10800317 	ldw	r2,12(r2)
400822a8:	e0bffb15 	stw	r2,-20(fp)
      if (!scl || scl >= fs->n_fatent) scl = 1;
400822ac:	e0bffb17 	ldw	r2,-20(fp)
400822b0:	10000426 	beq	r2,zero,400822c4 <create_chain+0x44>
400822b4:	e0bffe17 	ldw	r2,-8(fp)
400822b8:	10800617 	ldw	r2,24(r2)
400822bc:	e0fffb17 	ldw	r3,-20(fp)
400822c0:	18801436 	bltu	r3,r2,40082314 <create_chain+0x94>
400822c4:	00800044 	movi	r2,1
400822c8:	e0bffb15 	stw	r2,-20(fp)
400822cc:	00001106 	br	40082314 <create_chain+0x94>
   }
   else {               /* Stretch the current chain */
      cs = get_fat(fs, clst);       /* Check the cluster status */
400822d0:	e13ffe17 	ldw	r4,-8(fp)
400822d4:	e17fff17 	ldw	r5,-4(fp)
400822d8:	0081b780 	call	40081b78 <get_fat>
400822dc:	e0bffd15 	stw	r2,-12(fp)
      if (cs < 2) return 1;         /* It is an invalid cluster */
400822e0:	e0bffd17 	ldw	r2,-12(fp)
400822e4:	108000a8 	cmpgeui	r2,r2,2
400822e8:	1000021e 	bne	r2,zero,400822f4 <create_chain+0x74>
400822ec:	00800044 	movi	r2,1
400822f0:	00005706 	br	40082450 <create_chain+0x1d0>
      if (cs < fs->n_fatent) return cs;   /* It is already followed by next cluster */
400822f4:	e0bffe17 	ldw	r2,-8(fp)
400822f8:	10800617 	ldw	r2,24(r2)
400822fc:	e0fffd17 	ldw	r3,-12(fp)
40082300:	1880022e 	bgeu	r3,r2,4008230c <create_chain+0x8c>
40082304:	e0bffd17 	ldw	r2,-12(fp)
40082308:	00005106 	br	40082450 <create_chain+0x1d0>
      scl = clst;
4008230c:	e0bfff17 	ldw	r2,-4(fp)
40082310:	e0bffb15 	stw	r2,-20(fp)
   }

   ncl = scl;           /* Start cluster */
40082314:	e0bffb17 	ldw	r2,-20(fp)
40082318:	e0bffa15 	stw	r2,-24(fp)
   for (;;) {
      ncl++;                     /* Next cluster */
4008231c:	e0bffa17 	ldw	r2,-24(fp)
40082320:	10800044 	addi	r2,r2,1
40082324:	e0bffa15 	stw	r2,-24(fp)
      if (ncl >= fs->n_fatent) {    /* Wrap around */
40082328:	e0bffe17 	ldw	r2,-8(fp)
4008232c:	10800617 	ldw	r2,24(r2)
40082330:	e0fffa17 	ldw	r3,-24(fp)
40082334:	18800736 	bltu	r3,r2,40082354 <create_chain+0xd4>
         ncl = 2;
40082338:	00800084 	movi	r2,2
4008233c:	e0bffa15 	stw	r2,-24(fp)
         if (ncl > scl) return 0;   /* No free cluster */
40082340:	e0bffa17 	ldw	r2,-24(fp)
40082344:	e0fffb17 	ldw	r3,-20(fp)
40082348:	1880022e 	bgeu	r3,r2,40082354 <create_chain+0xd4>
4008234c:	0005883a 	mov	r2,zero
40082350:	00003f06 	br	40082450 <create_chain+0x1d0>
      }
      cs = get_fat(fs, ncl);        /* Get the cluster status */
40082354:	e13ffe17 	ldw	r4,-8(fp)
40082358:	e17ffa17 	ldw	r5,-24(fp)
4008235c:	0081b780 	call	40081b78 <get_fat>
40082360:	e0bffd15 	stw	r2,-12(fp)
      if (cs == 0) break;           /* Found a free cluster */
40082364:	e0bffd17 	ldw	r2,-12(fp)
40082368:	10000a1e 	bne	r2,zero,40082394 <create_chain+0x114>
4008236c:	0001883a 	nop
      if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
         return cs;
      if (ncl == scl) return 0;     /* No free cluster */
   }

   res = put_fat(fs, ncl, 0x0FFFFFFF); /* Mark the new cluster "last link" */
40082370:	e13ffe17 	ldw	r4,-8(fp)
40082374:	e17ffa17 	ldw	r5,-24(fp)
40082378:	01840034 	movhi	r6,4096
4008237c:	31bfffc4 	addi	r6,r6,-1
40082380:	0081dfc0 	call	40081dfc <put_fat>
40082384:	e0bffc15 	stw	r2,-16(fp)
   if (res == FR_OK && clst != 0) {
40082388:	e0bffc17 	ldw	r2,-16(fp)
4008238c:	1000161e 	bne	r2,zero,400823e8 <create_chain+0x168>
40082390:	00000e06 	br	400823cc <create_chain+0x14c>
         ncl = 2;
         if (ncl > scl) return 0;   /* No free cluster */
      }
      cs = get_fat(fs, ncl);        /* Get the cluster status */
      if (cs == 0) break;           /* Found a free cluster */
      if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
40082394:	e0bffd17 	ldw	r2,-12(fp)
40082398:	10bfffe0 	cmpeqi	r2,r2,-1
4008239c:	1000031e 	bne	r2,zero,400823ac <create_chain+0x12c>
400823a0:	e0bffd17 	ldw	r2,-12(fp)
400823a4:	10800058 	cmpnei	r2,r2,1
400823a8:	1000021e 	bne	r2,zero,400823b4 <create_chain+0x134>
         return cs;
400823ac:	e0bffd17 	ldw	r2,-12(fp)
400823b0:	00002706 	br	40082450 <create_chain+0x1d0>
      if (ncl == scl) return 0;     /* No free cluster */
400823b4:	e0fffa17 	ldw	r3,-24(fp)
400823b8:	e0bffb17 	ldw	r2,-20(fp)
400823bc:	1880021e 	bne	r3,r2,400823c8 <create_chain+0x148>
400823c0:	0005883a 	mov	r2,zero
400823c4:	00002206 	br	40082450 <create_chain+0x1d0>
   }
400823c8:	003fd406 	br	4008231c <__alt_mem_epcs+0xfff4131c>

   res = put_fat(fs, ncl, 0x0FFFFFFF); /* Mark the new cluster "last link" */
   if (res == FR_OK && clst != 0) {
400823cc:	e0bfff17 	ldw	r2,-4(fp)
400823d0:	10000526 	beq	r2,zero,400823e8 <create_chain+0x168>
      res = put_fat(fs, clst, ncl); /* Link it to the previous one if needed */
400823d4:	e13ffe17 	ldw	r4,-8(fp)
400823d8:	e17fff17 	ldw	r5,-4(fp)
400823dc:	e1bffa17 	ldw	r6,-24(fp)
400823e0:	0081dfc0 	call	40081dfc <put_fat>
400823e4:	e0bffc15 	stw	r2,-16(fp)
   }
   if (res == FR_OK) {
400823e8:	e0bffc17 	ldw	r2,-16(fp)
400823ec:	1000101e 	bne	r2,zero,40082430 <create_chain+0x1b0>
      fs->last_clust = ncl;         /* Update FSINFO */
400823f0:	e0bffe17 	ldw	r2,-8(fp)
400823f4:	e0fffa17 	ldw	r3,-24(fp)
400823f8:	10c00315 	stw	r3,12(r2)
      if (fs->free_clust != 0xFFFFFFFF) {
400823fc:	e0bffe17 	ldw	r2,-8(fp)
40082400:	10800417 	ldw	r2,16(r2)
40082404:	10bfffe0 	cmpeqi	r2,r2,-1
40082408:	1000101e 	bne	r2,zero,4008244c <create_chain+0x1cc>
         fs->free_clust--;
4008240c:	e0bffe17 	ldw	r2,-8(fp)
40082410:	10800417 	ldw	r2,16(r2)
40082414:	10ffffc4 	addi	r3,r2,-1
40082418:	e0bffe17 	ldw	r2,-8(fp)
4008241c:	10c00415 	stw	r3,16(r2)
         fs->fsi_flag = 1;
40082420:	e0bffe17 	ldw	r2,-8(fp)
40082424:	00c00044 	movi	r3,1
40082428:	10c00145 	stb	r3,5(r2)
4008242c:	00000706 	br	4008244c <create_chain+0x1cc>
      }
   } else {
      ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
40082430:	e0bffc17 	ldw	r2,-16(fp)
40082434:	10800058 	cmpnei	r2,r2,1
40082438:	1000021e 	bne	r2,zero,40082444 <create_chain+0x1c4>
4008243c:	00bfffc4 	movi	r2,-1
40082440:	00000106 	br	40082448 <create_chain+0x1c8>
40082444:	00800044 	movi	r2,1
40082448:	e0bffa15 	stw	r2,-24(fp)
   }

   return ncl;    /* Return new cluster number or error code */
4008244c:	e0bffa17 	ldw	r2,-24(fp)
}
40082450:	e037883a 	mov	sp,fp
40082454:	dfc00117 	ldw	ra,4(sp)
40082458:	df000017 	ldw	fp,0(sp)
4008245c:	dec00204 	addi	sp,sp,8
40082460:	f800283a 	ret

40082464 <dir_sdi>:
static
FRESULT dir_sdi (
   DIR *dj,    /* Pointer to directory object */
   uint16_t idx    /* Directory index number */
)
{
40082464:	defffa04 	addi	sp,sp,-24
40082468:	dfc00515 	stw	ra,20(sp)
4008246c:	df000415 	stw	fp,16(sp)
40082470:	df000404 	addi	fp,sp,16
40082474:	e13ffe15 	stw	r4,-8(fp)
40082478:	2805883a 	mov	r2,r5
4008247c:	e0bfff0d 	sth	r2,-4(fp)
   uint32_t clst;
   uint16_t ic;


   dj->index = idx;
40082480:	e0bffe17 	ldw	r2,-8(fp)
40082484:	e0ffff0b 	ldhu	r3,-4(fp)
40082488:	10c0018d 	sth	r3,6(r2)
   clst = dj->sclust;
4008248c:	e0bffe17 	ldw	r2,-8(fp)
40082490:	10800217 	ldw	r2,8(r2)
40082494:	e0bffc15 	stw	r2,-16(fp)
   if (clst == 1 || clst >= dj->fs->n_fatent)   /* Check start cluster range */
40082498:	e0bffc17 	ldw	r2,-16(fp)
4008249c:	10800060 	cmpeqi	r2,r2,1
400824a0:	1000051e 	bne	r2,zero,400824b8 <dir_sdi+0x54>
400824a4:	e0bffe17 	ldw	r2,-8(fp)
400824a8:	10800017 	ldw	r2,0(r2)
400824ac:	10800617 	ldw	r2,24(r2)
400824b0:	e0fffc17 	ldw	r3,-16(fp)
400824b4:	18800236 	bltu	r3,r2,400824c0 <dir_sdi+0x5c>
      return FR_INT_ERR;
400824b8:	00800084 	movi	r2,2
400824bc:	00005f06 	br	4008263c <dir_sdi+0x1d8>
   if (!clst && dj->fs->fs_type == FS_FAT32) /* Replace cluster# 0 with root cluster# if in FAT32 */
400824c0:	e0bffc17 	ldw	r2,-16(fp)
400824c4:	10000a1e 	bne	r2,zero,400824f0 <dir_sdi+0x8c>
400824c8:	e0bffe17 	ldw	r2,-8(fp)
400824cc:	10800017 	ldw	r2,0(r2)
400824d0:	10800003 	ldbu	r2,0(r2)
400824d4:	10803fcc 	andi	r2,r2,255
400824d8:	108000d8 	cmpnei	r2,r2,3
400824dc:	1000041e 	bne	r2,zero,400824f0 <dir_sdi+0x8c>
      clst = dj->fs->dirbase;
400824e0:	e0bffe17 	ldw	r2,-8(fp)
400824e4:	10800017 	ldw	r2,0(r2)
400824e8:	10800917 	ldw	r2,36(r2)
400824ec:	e0bffc15 	stw	r2,-16(fp)

   if (clst == 0) {  /* Static table (root-dir in FAT12/16) */
400824f0:	e0bffc17 	ldw	r2,-16(fp)
400824f4:	1000151e 	bne	r2,zero,4008254c <dir_sdi+0xe8>
      dj->clust = clst;
400824f8:	e0bffe17 	ldw	r2,-8(fp)
400824fc:	e0fffc17 	ldw	r3,-16(fp)
40082500:	10c00315 	stw	r3,12(r2)
      if (idx >= dj->fs->n_rootdir)    /* Index is out of range */
40082504:	e0bffe17 	ldw	r2,-8(fp)
40082508:	10800017 	ldw	r2,0(r2)
4008250c:	1080020b 	ldhu	r2,8(r2)
40082510:	10bfffcc 	andi	r2,r2,65535
40082514:	e0ffff0b 	ldhu	r3,-4(fp)
40082518:	18800236 	bltu	r3,r2,40082524 <dir_sdi+0xc0>
         return FR_INT_ERR;
4008251c:	00800084 	movi	r2,2
40082520:	00004606 	br	4008263c <dir_sdi+0x1d8>
      dj->sect = dj->fs->dirbase + idx / (SS(dj->fs) / SZ_DIR);   /* Sector# */
40082524:	e0bffe17 	ldw	r2,-8(fp)
40082528:	10800017 	ldw	r2,0(r2)
4008252c:	10c00917 	ldw	r3,36(r2)
40082530:	e0bfff0b 	ldhu	r2,-4(fp)
40082534:	1004d13a 	srli	r2,r2,4
40082538:	10bfffcc 	andi	r2,r2,65535
4008253c:	1887883a 	add	r3,r3,r2
40082540:	e0bffe17 	ldw	r2,-8(fp)
40082544:	10c00415 	stw	r3,16(r2)
40082548:	00003206 	br	40082614 <dir_sdi+0x1b0>
   }
   else {            /* Dynamic table (sub-dirs or root-dir in FAT32) */
      ic = SS(dj->fs) / SZ_DIR * dj->fs->csize; /* Entries per cluster */
4008254c:	e0bffe17 	ldw	r2,-8(fp)
40082550:	10800017 	ldw	r2,0(r2)
40082554:	10800083 	ldbu	r2,2(r2)
40082558:	10803fcc 	andi	r2,r2,255
4008255c:	1004913a 	slli	r2,r2,4
40082560:	e0bffd0d 	sth	r2,-12(fp)
      while (idx >= ic) {  /* Follow cluster chain */
40082564:	00001906 	br	400825cc <dir_sdi+0x168>
         clst = get_fat(dj->fs, clst);          /* Get next cluster */
40082568:	e0bffe17 	ldw	r2,-8(fp)
4008256c:	10800017 	ldw	r2,0(r2)
40082570:	1009883a 	mov	r4,r2
40082574:	e17ffc17 	ldw	r5,-16(fp)
40082578:	0081b780 	call	40081b78 <get_fat>
4008257c:	e0bffc15 	stw	r2,-16(fp)
         if (clst == 0xFFFFFFFF) return FR_DISK_ERR;  /* Disk error */
40082580:	e0bffc17 	ldw	r2,-16(fp)
40082584:	10bfffd8 	cmpnei	r2,r2,-1
40082588:	1000021e 	bne	r2,zero,40082594 <dir_sdi+0x130>
4008258c:	00800044 	movi	r2,1
40082590:	00002a06 	br	4008263c <dir_sdi+0x1d8>
         if (clst < 2 || clst >= dj->fs->n_fatent) /* Reached to end of table or int error */
40082594:	e0bffc17 	ldw	r2,-16(fp)
40082598:	108000b0 	cmpltui	r2,r2,2
4008259c:	1000051e 	bne	r2,zero,400825b4 <dir_sdi+0x150>
400825a0:	e0bffe17 	ldw	r2,-8(fp)
400825a4:	10800017 	ldw	r2,0(r2)
400825a8:	10800617 	ldw	r2,24(r2)
400825ac:	e0fffc17 	ldw	r3,-16(fp)
400825b0:	18800236 	bltu	r3,r2,400825bc <dir_sdi+0x158>
            return FR_INT_ERR;
400825b4:	00800084 	movi	r2,2
400825b8:	00002006 	br	4008263c <dir_sdi+0x1d8>
         idx -= ic;
400825bc:	e0ffff0b 	ldhu	r3,-4(fp)
400825c0:	e0bffd0b 	ldhu	r2,-12(fp)
400825c4:	1885c83a 	sub	r2,r3,r2
400825c8:	e0bfff0d 	sth	r2,-4(fp)
         return FR_INT_ERR;
      dj->sect = dj->fs->dirbase + idx / (SS(dj->fs) / SZ_DIR);   /* Sector# */
   }
   else {            /* Dynamic table (sub-dirs or root-dir in FAT32) */
      ic = SS(dj->fs) / SZ_DIR * dj->fs->csize; /* Entries per cluster */
      while (idx >= ic) {  /* Follow cluster chain */
400825cc:	e0ffff0b 	ldhu	r3,-4(fp)
400825d0:	e0bffd0b 	ldhu	r2,-12(fp)
400825d4:	18bfe42e 	bgeu	r3,r2,40082568 <__alt_mem_epcs+0xfff41568>
         if (clst == 0xFFFFFFFF) return FR_DISK_ERR;  /* Disk error */
         if (clst < 2 || clst >= dj->fs->n_fatent) /* Reached to end of table or int error */
            return FR_INT_ERR;
         idx -= ic;
      }
      dj->clust = clst;
400825d8:	e0bffe17 	ldw	r2,-8(fp)
400825dc:	e0fffc17 	ldw	r3,-16(fp)
400825e0:	10c00315 	stw	r3,12(r2)
      dj->sect = clust2sect(dj->fs, clst) + idx / (SS(dj->fs) / SZ_DIR);   /* Sector# */
400825e4:	e0bffe17 	ldw	r2,-8(fp)
400825e8:	10800017 	ldw	r2,0(r2)
400825ec:	1009883a 	mov	r4,r2
400825f0:	e17ffc17 	ldw	r5,-16(fp)
400825f4:	0081b0c0 	call	40081b0c <clust2sect>
400825f8:	1007883a 	mov	r3,r2
400825fc:	e0bfff0b 	ldhu	r2,-4(fp)
40082600:	1004d13a 	srli	r2,r2,4
40082604:	10bfffcc 	andi	r2,r2,65535
40082608:	1887883a 	add	r3,r3,r2
4008260c:	e0bffe17 	ldw	r2,-8(fp)
40082610:	10c00415 	stw	r3,16(r2)
   }

   dj->dir = dj->fs->win + (idx % (SS(dj->fs) / SZ_DIR)) * SZ_DIR;   /* Ptr to the entry in the sector */
40082614:	e0bffe17 	ldw	r2,-8(fp)
40082618:	10c00017 	ldw	r3,0(r2)
4008261c:	e0bfff0b 	ldhu	r2,-4(fp)
40082620:	108003cc 	andi	r2,r2,15
40082624:	1004917a 	slli	r2,r2,5
40082628:	10800c04 	addi	r2,r2,48
4008262c:	1887883a 	add	r3,r3,r2
40082630:	e0bffe17 	ldw	r2,-8(fp)
40082634:	10c00515 	stw	r3,20(r2)

   return FR_OK;  /* Seek succeeded */
40082638:	0005883a 	mov	r2,zero
}
4008263c:	e037883a 	mov	sp,fp
40082640:	dfc00117 	ldw	ra,4(sp)
40082644:	df000017 	ldw	fp,0(sp)
40082648:	dec00204 	addi	sp,sp,8
4008264c:	f800283a 	ret

40082650 <dir_next>:
static
FRESULT dir_next (   /* FR_OK:Succeeded, FR_NO_FILE:End of table, FR_DENIED:EOT and could not stretch */
   DIR *dj,    /* Pointer to directory object */
   int stretch    /* 0: Do not stretch table, 1: Stretch table if needed */
)
{
40082650:	defff904 	addi	sp,sp,-28
40082654:	dfc00615 	stw	ra,24(sp)
40082658:	df000515 	stw	fp,20(sp)
4008265c:	dc000415 	stw	r16,16(sp)
40082660:	df000504 	addi	fp,sp,20
40082664:	e13ffd15 	stw	r4,-12(fp)
40082668:	e17ffe15 	stw	r5,-8(fp)
   uint32_t clst;
   uint16_t i;


   stretch = stretch;      /* To suppress warning on read-only cfg. */
   i = dj->index + 1;
4008266c:	e0bffd17 	ldw	r2,-12(fp)
40082670:	1080018b 	ldhu	r2,6(r2)
40082674:	10800044 	addi	r2,r2,1
40082678:	e0bffc8d 	sth	r2,-14(fp)
   if (!i || !dj->sect) /* Report EOT when index has reached 65535 */
4008267c:	e0bffc8b 	ldhu	r2,-14(fp)
40082680:	10000326 	beq	r2,zero,40082690 <dir_next+0x40>
40082684:	e0bffd17 	ldw	r2,-12(fp)
40082688:	10800417 	ldw	r2,16(r2)
4008268c:	1000021e 	bne	r2,zero,40082698 <dir_next+0x48>
      return FR_NO_FILE;
40082690:	00800104 	movi	r2,4
40082694:	0000a206 	br	40082920 <dir_next+0x2d0>

   if (!(i % (SS(dj->fs) / SZ_DIR))) { /* Sector changed? */
40082698:	e0bffc8b 	ldhu	r2,-14(fp)
4008269c:	108003cc 	andi	r2,r2,15
400826a0:	10bfffcc 	andi	r2,r2,65535
400826a4:	1000911e 	bne	r2,zero,400828ec <dir_next+0x29c>
      dj->sect++;             /* Next sector */
400826a8:	e0bffd17 	ldw	r2,-12(fp)
400826ac:	10800417 	ldw	r2,16(r2)
400826b0:	10c00044 	addi	r3,r2,1
400826b4:	e0bffd17 	ldw	r2,-12(fp)
400826b8:	10c00415 	stw	r3,16(r2)

      if (dj->clust == 0) {   /* Static table */
400826bc:	e0bffd17 	ldw	r2,-12(fp)
400826c0:	10800317 	ldw	r2,12(r2)
400826c4:	1000081e 	bne	r2,zero,400826e8 <dir_next+0x98>
         if (i >= dj->fs->n_rootdir)   /* Report EOT when end of table */
400826c8:	e0bffd17 	ldw	r2,-12(fp)
400826cc:	10800017 	ldw	r2,0(r2)
400826d0:	1080020b 	ldhu	r2,8(r2)
400826d4:	10bfffcc 	andi	r2,r2,65535
400826d8:	e0fffc8b 	ldhu	r3,-14(fp)
400826dc:	18808336 	bltu	r3,r2,400828ec <dir_next+0x29c>
            return FR_NO_FILE;
400826e0:	00800104 	movi	r2,4
400826e4:	00008e06 	br	40082920 <dir_next+0x2d0>
      }
      else {               /* Dynamic table */
         if (((i / (SS(dj->fs) / SZ_DIR)) & (dj->fs->csize - 1)) == 0) {   /* Cluster changed? */
400826e8:	e0bffc8b 	ldhu	r2,-14(fp)
400826ec:	1004d13a 	srli	r2,r2,4
400826f0:	10bfffcc 	andi	r2,r2,65535
400826f4:	e0fffd17 	ldw	r3,-12(fp)
400826f8:	18c00017 	ldw	r3,0(r3)
400826fc:	18c00083 	ldbu	r3,2(r3)
40082700:	18c03fcc 	andi	r3,r3,255
40082704:	18ffffc4 	addi	r3,r3,-1
40082708:	10c4703a 	and	r2,r2,r3
4008270c:	1000771e 	bne	r2,zero,400828ec <dir_next+0x29c>
            clst = get_fat(dj->fs, dj->clust);           /* Get next cluster */
40082710:	e0bffd17 	ldw	r2,-12(fp)
40082714:	10c00017 	ldw	r3,0(r2)
40082718:	e0bffd17 	ldw	r2,-12(fp)
4008271c:	10800317 	ldw	r2,12(r2)
40082720:	1809883a 	mov	r4,r3
40082724:	100b883a 	mov	r5,r2
40082728:	0081b780 	call	40081b78 <get_fat>
4008272c:	e0bffb15 	stw	r2,-20(fp)
            if (clst <= 1) return FR_INT_ERR;
40082730:	e0bffb17 	ldw	r2,-20(fp)
40082734:	108000a8 	cmpgeui	r2,r2,2
40082738:	1000021e 	bne	r2,zero,40082744 <dir_next+0xf4>
4008273c:	00800084 	movi	r2,2
40082740:	00007706 	br	40082920 <dir_next+0x2d0>
            if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
40082744:	e0bffb17 	ldw	r2,-20(fp)
40082748:	10bfffd8 	cmpnei	r2,r2,-1
4008274c:	1000021e 	bne	r2,zero,40082758 <dir_next+0x108>
40082750:	00800044 	movi	r2,1
40082754:	00007206 	br	40082920 <dir_next+0x2d0>
            if (clst >= dj->fs->n_fatent) {              /* When it reached end of dynamic table */
40082758:	e0bffd17 	ldw	r2,-12(fp)
4008275c:	10800017 	ldw	r2,0(r2)
40082760:	10800617 	ldw	r2,24(r2)
40082764:	e0fffb17 	ldw	r3,-20(fp)
40082768:	18805536 	bltu	r3,r2,400828c0 <dir_next+0x270>
#if !_FS_READONLY
               uint8_t c;
               if (!stretch) return FR_NO_FILE;       /* When do not stretch, report EOT */
4008276c:	e0bffe17 	ldw	r2,-8(fp)
40082770:	1000021e 	bne	r2,zero,4008277c <dir_next+0x12c>
40082774:	00800104 	movi	r2,4
40082778:	00006906 	br	40082920 <dir_next+0x2d0>
               clst = create_chain(dj->fs, dj->clust);      /* Stretch cluster chain */
4008277c:	e0bffd17 	ldw	r2,-12(fp)
40082780:	10c00017 	ldw	r3,0(r2)
40082784:	e0bffd17 	ldw	r2,-12(fp)
40082788:	10800317 	ldw	r2,12(r2)
4008278c:	1809883a 	mov	r4,r3
40082790:	100b883a 	mov	r5,r2
40082794:	00822800 	call	40082280 <create_chain>
40082798:	e0bffb15 	stw	r2,-20(fp)
               if (clst == 0) return FR_DENIED;       /* No free cluster */
4008279c:	e0bffb17 	ldw	r2,-20(fp)
400827a0:	1000021e 	bne	r2,zero,400827ac <dir_next+0x15c>
400827a4:	008001c4 	movi	r2,7
400827a8:	00005d06 	br	40082920 <dir_next+0x2d0>
               if (clst == 1) return FR_INT_ERR;
400827ac:	e0bffb17 	ldw	r2,-20(fp)
400827b0:	10800058 	cmpnei	r2,r2,1
400827b4:	1000021e 	bne	r2,zero,400827c0 <dir_next+0x170>
400827b8:	00800084 	movi	r2,2
400827bc:	00005806 	br	40082920 <dir_next+0x2d0>
               if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
400827c0:	e0bffb17 	ldw	r2,-20(fp)
400827c4:	10bfffd8 	cmpnei	r2,r2,-1
400827c8:	1000021e 	bne	r2,zero,400827d4 <dir_next+0x184>
400827cc:	00800044 	movi	r2,1
400827d0:	00005306 	br	40082920 <dir_next+0x2d0>
               /* Clean-up stretched table */
               if (move_window(dj->fs, 0)) return FR_DISK_ERR; /* Flush active window */
400827d4:	e0bffd17 	ldw	r2,-12(fp)
400827d8:	10800017 	ldw	r2,0(r2)
400827dc:	1009883a 	mov	r4,r2
400827e0:	000b883a 	mov	r5,zero
400827e4:	00817940 	call	40081794 <move_window>
400827e8:	10000226 	beq	r2,zero,400827f4 <dir_next+0x1a4>
400827ec:	00800044 	movi	r2,1
400827f0:	00004b06 	br	40082920 <dir_next+0x2d0>
               mem_set(dj->fs->win, 0, SS(dj->fs));         /* Clear window buffer */
400827f4:	e0bffd17 	ldw	r2,-12(fp)
400827f8:	10800017 	ldw	r2,0(r2)
400827fc:	10800c04 	addi	r2,r2,48
40082800:	1009883a 	mov	r4,r2
40082804:	000b883a 	mov	r5,zero
40082808:	01808004 	movi	r6,512
4008280c:	00816340 	call	40081634 <mem_set>
               dj->fs->winsect = clust2sect(dj->fs, clst);  /* Cluster start sector */
40082810:	e0bffd17 	ldw	r2,-12(fp)
40082814:	14000017 	ldw	r16,0(r2)
40082818:	e0bffd17 	ldw	r2,-12(fp)
4008281c:	10800017 	ldw	r2,0(r2)
40082820:	1009883a 	mov	r4,r2
40082824:	e17ffb17 	ldw	r5,-20(fp)
40082828:	0081b0c0 	call	40081b0c <clust2sect>
4008282c:	80800b15 	stw	r2,44(r16)
               for (c = 0; c < dj->fs->csize; c++) {     /* Fill the new cluster with 0 */
40082830:	e03ffc05 	stb	zero,-16(fp)
40082834:	00001406 	br	40082888 <dir_next+0x238>
                  dj->fs->wflag = 1;
40082838:	e0bffd17 	ldw	r2,-12(fp)
4008283c:	10800017 	ldw	r2,0(r2)
40082840:	00c00044 	movi	r3,1
40082844:	10c00105 	stb	r3,4(r2)
                  if (move_window(dj->fs, 0)) return FR_DISK_ERR;
40082848:	e0bffd17 	ldw	r2,-12(fp)
4008284c:	10800017 	ldw	r2,0(r2)
40082850:	1009883a 	mov	r4,r2
40082854:	000b883a 	mov	r5,zero
40082858:	00817940 	call	40081794 <move_window>
4008285c:	10000226 	beq	r2,zero,40082868 <dir_next+0x218>
40082860:	00800044 	movi	r2,1
40082864:	00002e06 	br	40082920 <dir_next+0x2d0>
                  dj->fs->winsect++;
40082868:	e0bffd17 	ldw	r2,-12(fp)
4008286c:	10800017 	ldw	r2,0(r2)
40082870:	10c00b17 	ldw	r3,44(r2)
40082874:	18c00044 	addi	r3,r3,1
40082878:	10c00b15 	stw	r3,44(r2)
               if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
               /* Clean-up stretched table */
               if (move_window(dj->fs, 0)) return FR_DISK_ERR; /* Flush active window */
               mem_set(dj->fs->win, 0, SS(dj->fs));         /* Clear window buffer */
               dj->fs->winsect = clust2sect(dj->fs, clst);  /* Cluster start sector */
               for (c = 0; c < dj->fs->csize; c++) {     /* Fill the new cluster with 0 */
4008287c:	e0bffc03 	ldbu	r2,-16(fp)
40082880:	10800044 	addi	r2,r2,1
40082884:	e0bffc05 	stb	r2,-16(fp)
40082888:	e0bffd17 	ldw	r2,-12(fp)
4008288c:	10800017 	ldw	r2,0(r2)
40082890:	10800083 	ldbu	r2,2(r2)
40082894:	10803fcc 	andi	r2,r2,255
40082898:	e0fffc03 	ldbu	r3,-16(fp)
4008289c:	18bfe636 	bltu	r3,r2,40082838 <__alt_mem_epcs+0xfff41838>
                  dj->fs->wflag = 1;
                  if (move_window(dj->fs, 0)) return FR_DISK_ERR;
                  dj->fs->winsect++;
               }
               dj->fs->winsect -= c;                  /* Rewind window address */
400828a0:	e0bffd17 	ldw	r2,-12(fp)
400828a4:	10800017 	ldw	r2,0(r2)
400828a8:	e0fffd17 	ldw	r3,-12(fp)
400828ac:	18c00017 	ldw	r3,0(r3)
400828b0:	19000b17 	ldw	r4,44(r3)
400828b4:	e0fffc03 	ldbu	r3,-16(fp)
400828b8:	20c7c83a 	sub	r3,r4,r3
400828bc:	10c00b15 	stw	r3,44(r2)
#else
               return FR_NO_FILE;         /* Report EOT */
#endif
            }
            dj->clust = clst;          /* Initialize data for new cluster */
400828c0:	e0bffd17 	ldw	r2,-12(fp)
400828c4:	e0fffb17 	ldw	r3,-20(fp)
400828c8:	10c00315 	stw	r3,12(r2)
            dj->sect = clust2sect(dj->fs, clst);
400828cc:	e0bffd17 	ldw	r2,-12(fp)
400828d0:	10800017 	ldw	r2,0(r2)
400828d4:	1009883a 	mov	r4,r2
400828d8:	e17ffb17 	ldw	r5,-20(fp)
400828dc:	0081b0c0 	call	40081b0c <clust2sect>
400828e0:	1007883a 	mov	r3,r2
400828e4:	e0bffd17 	ldw	r2,-12(fp)
400828e8:	10c00415 	stw	r3,16(r2)
         }
      }
   }

   dj->index = i;
400828ec:	e0bffd17 	ldw	r2,-12(fp)
400828f0:	e0fffc8b 	ldhu	r3,-14(fp)
400828f4:	10c0018d 	sth	r3,6(r2)
   dj->dir = dj->fs->win + (i % (SS(dj->fs) / SZ_DIR)) * SZ_DIR;
400828f8:	e0bffd17 	ldw	r2,-12(fp)
400828fc:	10c00017 	ldw	r3,0(r2)
40082900:	e0bffc8b 	ldhu	r2,-14(fp)
40082904:	108003cc 	andi	r2,r2,15
40082908:	1004917a 	slli	r2,r2,5
4008290c:	10800c04 	addi	r2,r2,48
40082910:	1887883a 	add	r3,r3,r2
40082914:	e0bffd17 	ldw	r2,-12(fp)
40082918:	10c00515 	stw	r3,20(r2)

   return FR_OK;
4008291c:	0005883a 	mov	r2,zero
}
40082920:	e6ffff04 	addi	sp,fp,-4
40082924:	dfc00217 	ldw	ra,8(sp)
40082928:	df000117 	ldw	fp,4(sp)
4008292c:	dc000017 	ldw	r16,0(sp)
40082930:	dec00304 	addi	sp,sp,12
40082934:	f800283a 	ret

40082938 <dir_find>:

static
FRESULT dir_find (
   DIR *dj        /* Pointer to the directory object linked to the file name */
)
{
40082938:	defffa04 	addi	sp,sp,-24
4008293c:	dfc00515 	stw	ra,20(sp)
40082940:	df000415 	stw	fp,16(sp)
40082944:	df000404 	addi	fp,sp,16
40082948:	e13fff15 	stw	r4,-4(fp)
   uint8_t c, *dir;
#if _USE_LFN
   uint8_t a, ord, sum;
#endif

   res = dir_sdi(dj, 0);         /* Rewind directory object */
4008294c:	e13fff17 	ldw	r4,-4(fp)
40082950:	000b883a 	mov	r5,zero
40082954:	00824640 	call	40082464 <dir_sdi>
40082958:	e0bffc15 	stw	r2,-16(fp)
   if (res != FR_OK) return res;
4008295c:	e0bffc17 	ldw	r2,-16(fp)
40082960:	10000226 	beq	r2,zero,4008296c <dir_find+0x34>
40082964:	e0bffc17 	ldw	r2,-16(fp)
40082968:	00002b06 	br	40082a18 <dir_find+0xe0>

#if _USE_LFN
   ord = sum = 0xFF;
#endif
   do {
      res = move_window(dj->fs, dj->sect);
4008296c:	e0bfff17 	ldw	r2,-4(fp)
40082970:	10c00017 	ldw	r3,0(r2)
40082974:	e0bfff17 	ldw	r2,-4(fp)
40082978:	10800417 	ldw	r2,16(r2)
4008297c:	1809883a 	mov	r4,r3
40082980:	100b883a 	mov	r5,r2
40082984:	00817940 	call	40081794 <move_window>
40082988:	e0bffc15 	stw	r2,-16(fp)
      if (res != FR_OK) break;
4008298c:	e0bffc17 	ldw	r2,-16(fp)
40082990:	10000126 	beq	r2,zero,40082998 <dir_find+0x60>
40082994:	00001f06 	br	40082a14 <dir_find+0xdc>
      dir = dj->dir;             /* Ptr to the directory entry of current index */
40082998:	e0bfff17 	ldw	r2,-4(fp)
4008299c:	10800517 	ldw	r2,20(r2)
400829a0:	e0bffd15 	stw	r2,-12(fp)
      c = dir[DIR_Name];
400829a4:	e0bffd17 	ldw	r2,-12(fp)
400829a8:	10800003 	ldbu	r2,0(r2)
400829ac:	e0bffe05 	stb	r2,-8(fp)
      if (c == 0) { res = FR_NO_FILE; break; }  /* Reached to end of table */
400829b0:	e0bffe03 	ldbu	r2,-8(fp)
400829b4:	1000031e 	bne	r2,zero,400829c4 <dir_find+0x8c>
400829b8:	00800104 	movi	r2,4
400829bc:	e0bffc15 	stw	r2,-16(fp)
400829c0:	00001406 	br	40082a14 <dir_find+0xdc>
            ord = 0xFF; dj->lfn_idx = 0xFFFF;   /* Reset LFN sequence */
            if (!(dj->fn[NS] & NS_LOSS) && !mem_cmp(dir, dj->fn, 11)) break;  /* SFN matched? */
         }
      }
#else    /* Non LFN configuration */
      if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dj->fn, 11)) /* Is it a valid entry? */
400829c4:	e0bffd17 	ldw	r2,-12(fp)
400829c8:	108002c4 	addi	r2,r2,11
400829cc:	10800003 	ldbu	r2,0(r2)
400829d0:	10803fcc 	andi	r2,r2,255
400829d4:	1080020c 	andi	r2,r2,8
400829d8:	1000081e 	bne	r2,zero,400829fc <dir_find+0xc4>
400829dc:	e0bfff17 	ldw	r2,-4(fp)
400829e0:	10800617 	ldw	r2,24(r2)
400829e4:	e13ffd17 	ldw	r4,-12(fp)
400829e8:	100b883a 	mov	r5,r2
400829ec:	018002c4 	movi	r6,11
400829f0:	008168c0 	call	4008168c <mem_cmp>
400829f4:	1000011e 	bne	r2,zero,400829fc <dir_find+0xc4>
         break;
400829f8:	00000606 	br	40082a14 <dir_find+0xdc>
#endif
      res = dir_next(dj, 0);     /* Next entry */
400829fc:	e13fff17 	ldw	r4,-4(fp)
40082a00:	000b883a 	mov	r5,zero
40082a04:	00826500 	call	40082650 <dir_next>
40082a08:	e0bffc15 	stw	r2,-16(fp)
   } while (res == FR_OK);
40082a0c:	e0bffc17 	ldw	r2,-16(fp)
40082a10:	103fd626 	beq	r2,zero,4008296c <__alt_mem_epcs+0xfff4196c>

   return res;
40082a14:	e0bffc17 	ldw	r2,-16(fp)
}
40082a18:	e037883a 	mov	sp,fp
40082a1c:	dfc00117 	ldw	ra,4(sp)
40082a20:	df000017 	ldw	fp,0(sp)
40082a24:	dec00204 	addi	sp,sp,8
40082a28:	f800283a 	ret

40082a2c <dir_read>:
#if _FS_MINIMIZE <= 1
static
FRESULT dir_read (
   DIR *dj        /* Pointer to the directory object that pointing the entry to be read */
)
{
40082a2c:	defffa04 	addi	sp,sp,-24
40082a30:	dfc00515 	stw	ra,20(sp)
40082a34:	df000415 	stw	fp,16(sp)
40082a38:	df000404 	addi	fp,sp,16
40082a3c:	e13fff15 	stw	r4,-4(fp)
   uint8_t c, *dir;
#if _USE_LFN
   uint8_t a, ord = 0xFF, sum = 0xFF;
#endif

   res = FR_NO_FILE;
40082a40:	00800104 	movi	r2,4
40082a44:	e0bffc15 	stw	r2,-16(fp)
   while (dj->sect) {
40082a48:	00002a06 	br	40082af4 <dir_read+0xc8>
      res = move_window(dj->fs, dj->sect);
40082a4c:	e0bfff17 	ldw	r2,-4(fp)
40082a50:	10c00017 	ldw	r3,0(r2)
40082a54:	e0bfff17 	ldw	r2,-4(fp)
40082a58:	10800417 	ldw	r2,16(r2)
40082a5c:	1809883a 	mov	r4,r3
40082a60:	100b883a 	mov	r5,r2
40082a64:	00817940 	call	40081794 <move_window>
40082a68:	e0bffc15 	stw	r2,-16(fp)
      if (res != FR_OK) break;
40082a6c:	e0bffc17 	ldw	r2,-16(fp)
40082a70:	10000126 	beq	r2,zero,40082a78 <dir_read+0x4c>
40082a74:	00002206 	br	40082b00 <dir_read+0xd4>
      dir = dj->dir;             /* Ptr to the directory entry of current index */
40082a78:	e0bfff17 	ldw	r2,-4(fp)
40082a7c:	10800517 	ldw	r2,20(r2)
40082a80:	e0bffd15 	stw	r2,-12(fp)
      c = dir[DIR_Name];
40082a84:	e0bffd17 	ldw	r2,-12(fp)
40082a88:	10800003 	ldbu	r2,0(r2)
40082a8c:	e0bffe05 	stb	r2,-8(fp)
      if (c == 0) { res = FR_NO_FILE; break; }  /* Reached to end of table */
40082a90:	e0bffe03 	ldbu	r2,-8(fp)
40082a94:	1000031e 	bne	r2,zero,40082aa4 <dir_read+0x78>
40082a98:	00800104 	movi	r2,4
40082a9c:	e0bffc15 	stw	r2,-16(fp)
40082aa0:	00001706 	br	40082b00 <dir_read+0xd4>
               dj->lfn_idx = 0xFFFF;      /* It has no LFN. */
            break;
         }
      }
#else    /* Non LFN configuration */
      if (c != DDE && (_FS_RPATH || c != '.') && !(dir[DIR_Attr] & AM_VOL))   /* Is it a valid entry? */
40082aa4:	e0bffe03 	ldbu	r2,-8(fp)
40082aa8:	10803960 	cmpeqi	r2,r2,229
40082aac:	10000a1e 	bne	r2,zero,40082ad8 <dir_read+0xac>
40082ab0:	e0bffe03 	ldbu	r2,-8(fp)
40082ab4:	10800ba0 	cmpeqi	r2,r2,46
40082ab8:	1000071e 	bne	r2,zero,40082ad8 <dir_read+0xac>
40082abc:	e0bffd17 	ldw	r2,-12(fp)
40082ac0:	108002c4 	addi	r2,r2,11
40082ac4:	10800003 	ldbu	r2,0(r2)
40082ac8:	10803fcc 	andi	r2,r2,255
40082acc:	1080020c 	andi	r2,r2,8
40082ad0:	1000011e 	bne	r2,zero,40082ad8 <dir_read+0xac>
         break;
40082ad4:	00000a06 	br	40082b00 <dir_read+0xd4>
#endif
      res = dir_next(dj, 0);           /* Next entry */
40082ad8:	e13fff17 	ldw	r4,-4(fp)
40082adc:	000b883a 	mov	r5,zero
40082ae0:	00826500 	call	40082650 <dir_next>
40082ae4:	e0bffc15 	stw	r2,-16(fp)
      if (res != FR_OK) break;
40082ae8:	e0bffc17 	ldw	r2,-16(fp)
40082aec:	10000126 	beq	r2,zero,40082af4 <dir_read+0xc8>
40082af0:	00000306 	br	40082b00 <dir_read+0xd4>
#if _USE_LFN
   uint8_t a, ord = 0xFF, sum = 0xFF;
#endif

   res = FR_NO_FILE;
   while (dj->sect) {
40082af4:	e0bfff17 	ldw	r2,-4(fp)
40082af8:	10800417 	ldw	r2,16(r2)
40082afc:	103fd31e 	bne	r2,zero,40082a4c <__alt_mem_epcs+0xfff41a4c>
#endif
      res = dir_next(dj, 0);           /* Next entry */
      if (res != FR_OK) break;
   }

   if (res != FR_OK) dj->sect = 0;
40082b00:	e0bffc17 	ldw	r2,-16(fp)
40082b04:	10000226 	beq	r2,zero,40082b10 <dir_read+0xe4>
40082b08:	e0bfff17 	ldw	r2,-4(fp)
40082b0c:	10000415 	stw	zero,16(r2)

   return res;
40082b10:	e0bffc17 	ldw	r2,-16(fp)
}
40082b14:	e037883a 	mov	sp,fp
40082b18:	dfc00117 	ldw	ra,4(sp)
40082b1c:	df000017 	ldw	fp,0(sp)
40082b20:	dec00204 	addi	sp,sp,8
40082b24:	f800283a 	ret

40082b28 <dir_register>:
#if !_FS_READONLY
static
FRESULT dir_register (  /* FR_OK:Successful, FR_DENIED:No free entry or too many SFN collision, FR_DISK_ERR:Disk error */
   DIR *dj           /* Target directory with object name to be created */
)
{
40082b28:	defffa04 	addi	sp,sp,-24
40082b2c:	dfc00515 	stw	ra,20(sp)
40082b30:	df000415 	stw	fp,16(sp)
40082b34:	df000404 	addi	fp,sp,16
40082b38:	e13fff15 	stw	r4,-4(fp)
         } while (res == FR_OK && --ne);
      }
   }

#else /* Non LFN configuration */
   res = dir_sdi(dj, 0);
40082b3c:	e13fff17 	ldw	r4,-4(fp)
40082b40:	000b883a 	mov	r5,zero
40082b44:	00824640 	call	40082464 <dir_sdi>
40082b48:	e0bffc15 	stw	r2,-16(fp)
   if (res == FR_OK) {
40082b4c:	e0bffc17 	ldw	r2,-16(fp)
40082b50:	10001a1e 	bne	r2,zero,40082bbc <dir_register+0x94>
      do {  /* Find a blank entry for the SFN */
         res = move_window(dj->fs, dj->sect);
40082b54:	e0bfff17 	ldw	r2,-4(fp)
40082b58:	10c00017 	ldw	r3,0(r2)
40082b5c:	e0bfff17 	ldw	r2,-4(fp)
40082b60:	10800417 	ldw	r2,16(r2)
40082b64:	1809883a 	mov	r4,r3
40082b68:	100b883a 	mov	r5,r2
40082b6c:	00817940 	call	40081794 <move_window>
40082b70:	e0bffc15 	stw	r2,-16(fp)
         if (res != FR_OK) break;
40082b74:	e0bffc17 	ldw	r2,-16(fp)
40082b78:	10000126 	beq	r2,zero,40082b80 <dir_register+0x58>
40082b7c:	00000f06 	br	40082bbc <dir_register+0x94>
         c = *dj->dir;
40082b80:	e0bfff17 	ldw	r2,-4(fp)
40082b84:	10800517 	ldw	r2,20(r2)
40082b88:	10800003 	ldbu	r2,0(r2)
40082b8c:	e0bffd05 	stb	r2,-12(fp)
         if (c == DDE || c == 0) break;   /* Is it a blank entry? */
40082b90:	e0bffd03 	ldbu	r2,-12(fp)
40082b94:	10803960 	cmpeqi	r2,r2,229
40082b98:	1000081e 	bne	r2,zero,40082bbc <dir_register+0x94>
40082b9c:	e0bffd03 	ldbu	r2,-12(fp)
40082ba0:	10000626 	beq	r2,zero,40082bbc <dir_register+0x94>
         res = dir_next(dj, 1);        /* Next entry with table stretch */
40082ba4:	e13fff17 	ldw	r4,-4(fp)
40082ba8:	01400044 	movi	r5,1
40082bac:	00826500 	call	40082650 <dir_next>
40082bb0:	e0bffc15 	stw	r2,-16(fp)
      } while (res == FR_OK);
40082bb4:	e0bffc17 	ldw	r2,-16(fp)
40082bb8:	103fe626 	beq	r2,zero,40082b54 <__alt_mem_epcs+0xfff41b54>
   }
#endif

   if (res == FR_OK) {     /* Initialize the SFN entry */
40082bbc:	e0bffc17 	ldw	r2,-16(fp)
40082bc0:	10001b1e 	bne	r2,zero,40082c30 <dir_register+0x108>
      res = move_window(dj->fs, dj->sect);
40082bc4:	e0bfff17 	ldw	r2,-4(fp)
40082bc8:	10c00017 	ldw	r3,0(r2)
40082bcc:	e0bfff17 	ldw	r2,-4(fp)
40082bd0:	10800417 	ldw	r2,16(r2)
40082bd4:	1809883a 	mov	r4,r3
40082bd8:	100b883a 	mov	r5,r2
40082bdc:	00817940 	call	40081794 <move_window>
40082be0:	e0bffc15 	stw	r2,-16(fp)
      if (res == FR_OK) {
40082be4:	e0bffc17 	ldw	r2,-16(fp)
40082be8:	1000111e 	bne	r2,zero,40082c30 <dir_register+0x108>
         dir = dj->dir;
40082bec:	e0bfff17 	ldw	r2,-4(fp)
40082bf0:	10800517 	ldw	r2,20(r2)
40082bf4:	e0bffe15 	stw	r2,-8(fp)
         mem_set(dir, 0, SZ_DIR);   /* Clean the entry */
40082bf8:	e13ffe17 	ldw	r4,-8(fp)
40082bfc:	000b883a 	mov	r5,zero
40082c00:	01800804 	movi	r6,32
40082c04:	00816340 	call	40081634 <mem_set>
         mem_cpy(dir, dj->fn, 11);  /* Put SFN */
40082c08:	e0bfff17 	ldw	r2,-4(fp)
40082c0c:	10800617 	ldw	r2,24(r2)
40082c10:	e13ffe17 	ldw	r4,-8(fp)
40082c14:	100b883a 	mov	r5,r2
40082c18:	018002c4 	movi	r6,11
40082c1c:	00815c80 	call	400815c8 <mem_cpy>
#if _USE_LFN
         dir[DIR_NTres] = *(dj->fn+NS) & (NS_BODY | NS_EXT);   /* Put NT flag */
#endif
         dj->fs->wflag = 1;
40082c20:	e0bfff17 	ldw	r2,-4(fp)
40082c24:	10800017 	ldw	r2,0(r2)
40082c28:	00c00044 	movi	r3,1
40082c2c:	10c00105 	stb	r3,4(r2)
      }
   }

   return res;
40082c30:	e0bffc17 	ldw	r2,-16(fp)
}
40082c34:	e037883a 	mov	sp,fp
40082c38:	dfc00117 	ldw	ra,4(sp)
40082c3c:	df000017 	ldw	fp,0(sp)
40082c40:	dec00204 	addi	sp,sp,8
40082c44:	f800283a 	ret

40082c48 <dir_remove>:
#if !_FS_READONLY && !_FS_MINIMIZE
static
FRESULT dir_remove ( /* FR_OK: Successful, FR_DISK_ERR: A disk error */
   DIR *dj           /* Directory object pointing the entry to be removed */
)
{
40082c48:	defffc04 	addi	sp,sp,-16
40082c4c:	dfc00315 	stw	ra,12(sp)
40082c50:	df000215 	stw	fp,8(sp)
40082c54:	df000204 	addi	fp,sp,8
40082c58:	e13fff15 	stw	r4,-4(fp)
      } while (res == FR_OK);
      if (res == FR_NO_FILE) res = FR_INT_ERR;
   }

#else       /* Non LFN configuration */
   res = dir_sdi(dj, dj->index);
40082c5c:	e0bfff17 	ldw	r2,-4(fp)
40082c60:	1080018b 	ldhu	r2,6(r2)
40082c64:	10bfffcc 	andi	r2,r2,65535
40082c68:	e13fff17 	ldw	r4,-4(fp)
40082c6c:	100b883a 	mov	r5,r2
40082c70:	00824640 	call	40082464 <dir_sdi>
40082c74:	e0bffe15 	stw	r2,-8(fp)
   if (res == FR_OK) {
40082c78:	e0bffe17 	ldw	r2,-8(fp)
40082c7c:	1000121e 	bne	r2,zero,40082cc8 <dir_remove+0x80>
      res = move_window(dj->fs, dj->sect);
40082c80:	e0bfff17 	ldw	r2,-4(fp)
40082c84:	10c00017 	ldw	r3,0(r2)
40082c88:	e0bfff17 	ldw	r2,-4(fp)
40082c8c:	10800417 	ldw	r2,16(r2)
40082c90:	1809883a 	mov	r4,r3
40082c94:	100b883a 	mov	r5,r2
40082c98:	00817940 	call	40081794 <move_window>
40082c9c:	e0bffe15 	stw	r2,-8(fp)
      if (res == FR_OK) {
40082ca0:	e0bffe17 	ldw	r2,-8(fp)
40082ca4:	1000081e 	bne	r2,zero,40082cc8 <dir_remove+0x80>
         *dj->dir = DDE;         /* Mark the entry "deleted" */
40082ca8:	e0bfff17 	ldw	r2,-4(fp)
40082cac:	10800517 	ldw	r2,20(r2)
40082cb0:	00fff944 	movi	r3,-27
40082cb4:	10c00005 	stb	r3,0(r2)
         dj->fs->wflag = 1;
40082cb8:	e0bfff17 	ldw	r2,-4(fp)
40082cbc:	10800017 	ldw	r2,0(r2)
40082cc0:	00c00044 	movi	r3,1
40082cc4:	10c00105 	stb	r3,4(r2)
      }
   }
#endif

   return res;
40082cc8:	e0bffe17 	ldw	r2,-8(fp)
}
40082ccc:	e037883a 	mov	sp,fp
40082cd0:	dfc00117 	ldw	ra,4(sp)
40082cd4:	df000017 	ldw	fp,0(sp)
40082cd8:	dec00204 	addi	sp,sp,8
40082cdc:	f800283a 	ret

40082ce0 <create_name>:
static
FRESULT create_name (
   DIR *dj,       /* Pointer to the directory object */
   const TCHAR **path   /* Pointer to pointer to the segment in the path string */
)
{
40082ce0:	defff604 	addi	sp,sp,-40
40082ce4:	dfc00915 	stw	ra,36(sp)
40082ce8:	df000815 	stw	fp,32(sp)
40082cec:	df000804 	addi	fp,sp,32
40082cf0:	e13ffe15 	stw	r4,-8(fp)
40082cf4:	e17fff15 	stw	r5,-4(fp)
   uint8_t b, c, d, *sfn;
   uint32_t ni, si, i;
   const char *p;

   /* Create file name in directory form */
   for (p = *path; *p == '/' || *p == '\\'; p++) ; /* Strip duplicated separator */
40082cf8:	e0bfff17 	ldw	r2,-4(fp)
40082cfc:	10800017 	ldw	r2,0(r2)
40082d00:	e0bffc15 	stw	r2,-16(fp)
40082d04:	00000306 	br	40082d14 <create_name+0x34>
40082d08:	e0bffc17 	ldw	r2,-16(fp)
40082d0c:	10800044 	addi	r2,r2,1
40082d10:	e0bffc15 	stw	r2,-16(fp)
40082d14:	e0bffc17 	ldw	r2,-16(fp)
40082d18:	10800003 	ldbu	r2,0(r2)
40082d1c:	10803fcc 	andi	r2,r2,255
40082d20:	1080201c 	xori	r2,r2,128
40082d24:	10bfe004 	addi	r2,r2,-128
40082d28:	10800be0 	cmpeqi	r2,r2,47
40082d2c:	103ff61e 	bne	r2,zero,40082d08 <__alt_mem_epcs+0xfff41d08>
40082d30:	e0bffc17 	ldw	r2,-16(fp)
40082d34:	10800003 	ldbu	r2,0(r2)
40082d38:	10803fcc 	andi	r2,r2,255
40082d3c:	1080201c 	xori	r2,r2,128
40082d40:	10bfe004 	addi	r2,r2,-128
40082d44:	10801720 	cmpeqi	r2,r2,92
40082d48:	103fef1e 	bne	r2,zero,40082d08 <__alt_mem_epcs+0xfff41d08>
   sfn = dj->fn;
40082d4c:	e0bffe17 	ldw	r2,-8(fp)
40082d50:	10800617 	ldw	r2,24(r2)
40082d54:	e0bffd15 	stw	r2,-12(fp)
   mem_set(sfn, ' ', 11);
40082d58:	e13ffd17 	ldw	r4,-12(fp)
40082d5c:	01400804 	movi	r5,32
40082d60:	018002c4 	movi	r6,11
40082d64:	00816340 	call	40081634 <mem_set>
   si = i = b = 0; ni = 8;
40082d68:	e03ff805 	stb	zero,-32(fp)
40082d6c:	e03ffb15 	stw	zero,-20(fp)
40082d70:	e0bffb17 	ldw	r2,-20(fp)
40082d74:	e0bffa15 	stw	r2,-24(fp)
40082d78:	00800204 	movi	r2,8
40082d7c:	e0bff915 	stw	r2,-28(fp)
      sfn[NS] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;  /* Set last segment flag if end of path */
      return FR_OK;
   }
#endif
   for (;;) {
      c = (uint8_t)p[si++];
40082d80:	e0bffa17 	ldw	r2,-24(fp)
40082d84:	10c00044 	addi	r3,r2,1
40082d88:	e0fffa15 	stw	r3,-24(fp)
40082d8c:	e0fffc17 	ldw	r3,-16(fp)
40082d90:	1885883a 	add	r2,r3,r2
40082d94:	10800003 	ldbu	r2,0(r2)
40082d98:	e0bff845 	stb	r2,-31(fp)
      if (c <= ' ' || c == '/' || c == '\\') break;   /* Break on end of segment */
40082d9c:	e0bff843 	ldbu	r2,-31(fp)
40082da0:	10800870 	cmpltui	r2,r2,33
40082da4:	1000521e 	bne	r2,zero,40082ef0 <create_name+0x210>
40082da8:	e0bff843 	ldbu	r2,-31(fp)
40082dac:	10800be0 	cmpeqi	r2,r2,47
40082db0:	10004f1e 	bne	r2,zero,40082ef0 <create_name+0x210>
40082db4:	e0bff843 	ldbu	r2,-31(fp)
40082db8:	10801720 	cmpeqi	r2,r2,92
40082dbc:	10004c1e 	bne	r2,zero,40082ef0 <create_name+0x210>
      if (c == '.' || i >= ni) {
40082dc0:	e0bff843 	ldbu	r2,-31(fp)
40082dc4:	10800ba0 	cmpeqi	r2,r2,46
40082dc8:	1000031e 	bne	r2,zero,40082dd8 <create_name+0xf8>
40082dcc:	e0fffb17 	ldw	r3,-20(fp)
40082dd0:	e0bff917 	ldw	r2,-28(fp)
40082dd4:	18801136 	bltu	r3,r2,40082e1c <create_name+0x13c>
         if (ni != 8 || c != '.') return FR_INVALID_NAME;
40082dd8:	e0bff917 	ldw	r2,-28(fp)
40082ddc:	10800218 	cmpnei	r2,r2,8
40082de0:	1000031e 	bne	r2,zero,40082df0 <create_name+0x110>
40082de4:	e0bff843 	ldbu	r2,-31(fp)
40082de8:	10800ba0 	cmpeqi	r2,r2,46
40082dec:	1000021e 	bne	r2,zero,40082df8 <create_name+0x118>
40082df0:	00800184 	movi	r2,6
40082df4:	00007006 	br	40082fb8 <create_name+0x2d8>
         i = 8; ni = 11;
40082df8:	00800204 	movi	r2,8
40082dfc:	e0bffb15 	stw	r2,-20(fp)
40082e00:	008002c4 	movi	r2,11
40082e04:	e0bff915 	stw	r2,-28(fp)
         b <<= 2; continue;
40082e08:	e0bff803 	ldbu	r2,-32(fp)
40082e0c:	1085883a 	add	r2,r2,r2
40082e10:	1085883a 	add	r2,r2,r2
40082e14:	e0bff805 	stb	r2,-32(fp)
40082e18:	00003406 	br	40082eec <create_name+0x20c>
      }
      if (c >= 0x80) {           /* Extended char? */
40082e1c:	e0bff843 	ldbu	r2,-31(fp)
40082e20:	10803fcc 	andi	r2,r2,255
40082e24:	1080201c 	xori	r2,r2,128
40082e28:	10bfe004 	addi	r2,r2,-128
40082e2c:	10000a0e 	bge	r2,zero,40082e58 <create_name+0x178>
         b |= 3;                 /* Eliminate NT flag */
40082e30:	e0bff803 	ldbu	r2,-32(fp)
40082e34:	108000d4 	ori	r2,r2,3
40082e38:	e0bff805 	stb	r2,-32(fp)
#ifdef _EXCVT
         c = excvt[c-0x80];         /* Upper conversion (SBCS) */
40082e3c:	e0bff843 	ldbu	r2,-31(fp)
40082e40:	10ffe004 	addi	r3,r2,-128
40082e44:	009002b4 	movhi	r2,16394
40082e48:	10a79204 	addi	r2,r2,-25016
40082e4c:	10c5883a 	add	r2,r2,r3
40082e50:	10800003 	ldbu	r2,0(r2)
40082e54:	e0bff845 	stb	r2,-31(fp)
         if (!IsDBCS2(d) || i >= ni - 1)  /* Reject invalid DBC */
            return FR_INVALID_NAME;
         sfn[i++] = c;
         sfn[i++] = d;
      } else {                /* Single byte code */
         if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) /* Reject illegal chrs for SFN */
40082e58:	e0bff843 	ldbu	r2,-31(fp)
40082e5c:	011002b4 	movhi	r4,16394
40082e60:	21278104 	addi	r4,r4,-25084
40082e64:	100b883a 	mov	r5,r2
40082e68:	00817180 	call	40081718 <chk_chr>
40082e6c:	10000226 	beq	r2,zero,40082e78 <create_name+0x198>
            return FR_INVALID_NAME;
40082e70:	00800184 	movi	r2,6
40082e74:	00005006 	br	40082fb8 <create_name+0x2d8>
         if (IsUpper(c)) {       /* ASCII large capital? */
40082e78:	e0bff843 	ldbu	r2,-31(fp)
40082e7c:	10801070 	cmpltui	r2,r2,65
40082e80:	1000071e 	bne	r2,zero,40082ea0 <create_name+0x1c0>
40082e84:	e0bff843 	ldbu	r2,-31(fp)
40082e88:	108016e8 	cmpgeui	r2,r2,91
40082e8c:	1000041e 	bne	r2,zero,40082ea0 <create_name+0x1c0>
            b |= 2;
40082e90:	e0bff803 	ldbu	r2,-32(fp)
40082e94:	10800094 	ori	r2,r2,2
40082e98:	e0bff805 	stb	r2,-32(fp)
40082e9c:	00000c06 	br	40082ed0 <create_name+0x1f0>
         } else {
            if (IsLower(c)) {    /* ASCII small capital? */
40082ea0:	e0bff843 	ldbu	r2,-31(fp)
40082ea4:	10801870 	cmpltui	r2,r2,97
40082ea8:	1000091e 	bne	r2,zero,40082ed0 <create_name+0x1f0>
40082eac:	e0bff843 	ldbu	r2,-31(fp)
40082eb0:	10801ee8 	cmpgeui	r2,r2,123
40082eb4:	1000061e 	bne	r2,zero,40082ed0 <create_name+0x1f0>
               b |= 1; c -= 0x20;
40082eb8:	e0bff803 	ldbu	r2,-32(fp)
40082ebc:	10800054 	ori	r2,r2,1
40082ec0:	e0bff805 	stb	r2,-32(fp)
40082ec4:	e0bff843 	ldbu	r2,-31(fp)
40082ec8:	10bff804 	addi	r2,r2,-32
40082ecc:	e0bff845 	stb	r2,-31(fp)
            }
         }
         sfn[i++] = c;
40082ed0:	e0bffb17 	ldw	r2,-20(fp)
40082ed4:	10c00044 	addi	r3,r2,1
40082ed8:	e0fffb15 	stw	r3,-20(fp)
40082edc:	e0fffd17 	ldw	r3,-12(fp)
40082ee0:	1885883a 	add	r2,r3,r2
40082ee4:	e0fff843 	ldbu	r3,-31(fp)
40082ee8:	10c00005 	stb	r3,0(r2)
      }
   }
40082eec:	003fa406 	br	40082d80 <__alt_mem_epcs+0xfff41d80>
   *path = &p[si];                  /* Return pointer to the next segment */
40082ef0:	e0fffc17 	ldw	r3,-16(fp)
40082ef4:	e0bffa17 	ldw	r2,-24(fp)
40082ef8:	1887883a 	add	r3,r3,r2
40082efc:	e0bfff17 	ldw	r2,-4(fp)
40082f00:	10c00015 	stw	r3,0(r2)
   c = (c <= ' ') ? NS_LAST : 0;    /* Set last segment flag if end of path */
40082f04:	e0bff843 	ldbu	r2,-31(fp)
40082f08:	10800868 	cmpgeui	r2,r2,33
40082f0c:	1000021e 	bne	r2,zero,40082f18 <create_name+0x238>
40082f10:	00800104 	movi	r2,4
40082f14:	00000106 	br	40082f1c <create_name+0x23c>
40082f18:	0005883a 	mov	r2,zero
40082f1c:	e0bff845 	stb	r2,-31(fp)

   if (!i) return FR_INVALID_NAME;     /* Reject nul string */
40082f20:	e0bffb17 	ldw	r2,-20(fp)
40082f24:	1000021e 	bne	r2,zero,40082f30 <create_name+0x250>
40082f28:	00800184 	movi	r2,6
40082f2c:	00002206 	br	40082fb8 <create_name+0x2d8>
   if (sfn[0] == DDE) sfn[0] = NDDE;   /* When first char collides with DDE, replace it with 0x05 */
40082f30:	e0bffd17 	ldw	r2,-12(fp)
40082f34:	10800003 	ldbu	r2,0(r2)
40082f38:	10803fcc 	andi	r2,r2,255
40082f3c:	10803958 	cmpnei	r2,r2,229
40082f40:	1000031e 	bne	r2,zero,40082f50 <create_name+0x270>
40082f44:	e0bffd17 	ldw	r2,-12(fp)
40082f48:	00c00144 	movi	r3,5
40082f4c:	10c00005 	stb	r3,0(r2)

   if (ni == 8) b <<= 2;
40082f50:	e0bff917 	ldw	r2,-28(fp)
40082f54:	10800218 	cmpnei	r2,r2,8
40082f58:	1000041e 	bne	r2,zero,40082f6c <create_name+0x28c>
40082f5c:	e0bff803 	ldbu	r2,-32(fp)
40082f60:	1085883a 	add	r2,r2,r2
40082f64:	1085883a 	add	r2,r2,r2
40082f68:	e0bff805 	stb	r2,-32(fp)
   if ((b & 0x03) == 0x01) c |= NS_EXT;   /* NT flag (Name extension has only small capital) */
40082f6c:	e0bff803 	ldbu	r2,-32(fp)
40082f70:	108000cc 	andi	r2,r2,3
40082f74:	10800058 	cmpnei	r2,r2,1
40082f78:	1000031e 	bne	r2,zero,40082f88 <create_name+0x2a8>
40082f7c:	e0bff843 	ldbu	r2,-31(fp)
40082f80:	10800414 	ori	r2,r2,16
40082f84:	e0bff845 	stb	r2,-31(fp)
   if ((b & 0x0C) == 0x04) c |= NS_BODY;  /* NT flag (Name body has only small capital) */
40082f88:	e0bff803 	ldbu	r2,-32(fp)
40082f8c:	1080030c 	andi	r2,r2,12
40082f90:	10800118 	cmpnei	r2,r2,4
40082f94:	1000031e 	bne	r2,zero,40082fa4 <create_name+0x2c4>
40082f98:	e0bff843 	ldbu	r2,-31(fp)
40082f9c:	10800214 	ori	r2,r2,8
40082fa0:	e0bff845 	stb	r2,-31(fp)

   sfn[NS] = c;      /* Store NT flag, File name is created */
40082fa4:	e0bffd17 	ldw	r2,-12(fp)
40082fa8:	108002c4 	addi	r2,r2,11
40082fac:	e0fff843 	ldbu	r3,-31(fp)
40082fb0:	10c00005 	stb	r3,0(r2)

   return FR_OK;
40082fb4:	0005883a 	mov	r2,zero
#endif
}
40082fb8:	e037883a 	mov	sp,fp
40082fbc:	dfc00117 	ldw	ra,4(sp)
40082fc0:	df000017 	ldw	fp,0(sp)
40082fc4:	dec00204 	addi	sp,sp,8
40082fc8:	f800283a 	ret

40082fcc <get_fileinfo>:
static
void get_fileinfo (     /* No return code */
   DIR *dj,       /* Pointer to the directory object */
   FILINFO *fno      /* Pointer to the file information to be filled */
)
{
40082fcc:	defff804 	addi	sp,sp,-32
40082fd0:	df000715 	stw	fp,28(sp)
40082fd4:	df000704 	addi	fp,sp,28
40082fd8:	e13ffe15 	stw	r4,-8(fp)
40082fdc:	e17fff15 	stw	r5,-4(fp)
   uint32_t i;
   uint8_t nt, *dir;
   TCHAR *p, c;


   p = fno->fname;
40082fe0:	e0bfff17 	ldw	r2,-4(fp)
40082fe4:	10800244 	addi	r2,r2,9
40082fe8:	e0bffa15 	stw	r2,-24(fp)
   if (dj->sect) {
40082fec:	e0bffe17 	ldw	r2,-8(fp)
40082ff0:	10800417 	ldw	r2,16(r2)
40082ff4:	10007b26 	beq	r2,zero,400831e4 <get_fileinfo+0x218>
      dir = dj->dir;
40082ff8:	e0bffe17 	ldw	r2,-8(fp)
40082ffc:	10800517 	ldw	r2,20(r2)
40083000:	e0bffc15 	stw	r2,-16(fp)
      nt = dir[DIR_NTres];    /* NT flag */
40083004:	e0bffc17 	ldw	r2,-16(fp)
40083008:	10800303 	ldbu	r2,12(r2)
4008300c:	e0bffd05 	stb	r2,-12(fp)
      for (i = 0; i < 8; i++) {  /* Copy name body */
40083010:	e03ff915 	stw	zero,-28(fp)
40083014:	00001606 	br	40083070 <get_fileinfo+0xa4>
         c = dir[i];
40083018:	e0fffc17 	ldw	r3,-16(fp)
4008301c:	e0bff917 	ldw	r2,-28(fp)
40083020:	1885883a 	add	r2,r3,r2
40083024:	10800003 	ldbu	r2,0(r2)
40083028:	e0bffb05 	stb	r2,-20(fp)
         if (c == ' ') break;
4008302c:	e0bffb07 	ldb	r2,-20(fp)
40083030:	10800818 	cmpnei	r2,r2,32
40083034:	1000011e 	bne	r2,zero,4008303c <get_fileinfo+0x70>
40083038:	00001006 	br	4008307c <get_fileinfo+0xb0>
         if (c == NDDE) c = (TCHAR)DDE;
4008303c:	e0bffb07 	ldb	r2,-20(fp)
40083040:	10800158 	cmpnei	r2,r2,5
40083044:	1000021e 	bne	r2,zero,40083050 <get_fileinfo+0x84>
40083048:	00bff944 	movi	r2,-27
4008304c:	e0bffb05 	stb	r2,-20(fp)
         if (IsDBCS1(c) && i < 7 && IsDBCS2(dir[i+1]))
            c = (c << 8) | dir[++i];
         c = ff_convert(c, 1);
         if (!c) c = '?';
#endif
         *p++ = c;
40083050:	e0bffa17 	ldw	r2,-24(fp)
40083054:	10c00044 	addi	r3,r2,1
40083058:	e0fffa15 	stw	r3,-24(fp)
4008305c:	e0fffb03 	ldbu	r3,-20(fp)
40083060:	10c00005 	stb	r3,0(r2)

   p = fno->fname;
   if (dj->sect) {
      dir = dj->dir;
      nt = dir[DIR_NTres];    /* NT flag */
      for (i = 0; i < 8; i++) {  /* Copy name body */
40083064:	e0bff917 	ldw	r2,-28(fp)
40083068:	10800044 	addi	r2,r2,1
4008306c:	e0bff915 	stw	r2,-28(fp)
40083070:	e0bff917 	ldw	r2,-28(fp)
40083074:	10800230 	cmpltui	r2,r2,8
40083078:	103fe71e 	bne	r2,zero,40083018 <__alt_mem_epcs+0xfff42018>
         c = ff_convert(c, 1);
         if (!c) c = '?';
#endif
         *p++ = c;
      }
      if (dir[8] != ' ') {    /* Copy name extension */
4008307c:	e0bffc17 	ldw	r2,-16(fp)
40083080:	10800204 	addi	r2,r2,8
40083084:	10800003 	ldbu	r2,0(r2)
40083088:	10803fcc 	andi	r2,r2,255
4008308c:	10800820 	cmpeqi	r2,r2,32
40083090:	10001c1e 	bne	r2,zero,40083104 <get_fileinfo+0x138>
         *p++ = '.';
40083094:	e0bffa17 	ldw	r2,-24(fp)
40083098:	10c00044 	addi	r3,r2,1
4008309c:	e0fffa15 	stw	r3,-24(fp)
400830a0:	00c00b84 	movi	r3,46
400830a4:	10c00005 	stb	r3,0(r2)
         for (i = 8; i < 11; i++) {
400830a8:	00800204 	movi	r2,8
400830ac:	e0bff915 	stw	r2,-28(fp)
400830b0:	00001106 	br	400830f8 <get_fileinfo+0x12c>
            c = dir[i];
400830b4:	e0fffc17 	ldw	r3,-16(fp)
400830b8:	e0bff917 	ldw	r2,-28(fp)
400830bc:	1885883a 	add	r2,r3,r2
400830c0:	10800003 	ldbu	r2,0(r2)
400830c4:	e0bffb05 	stb	r2,-20(fp)
            if (c == ' ') break;
400830c8:	e0bffb07 	ldb	r2,-20(fp)
400830cc:	10800818 	cmpnei	r2,r2,32
400830d0:	1000011e 	bne	r2,zero,400830d8 <get_fileinfo+0x10c>
400830d4:	00000b06 	br	40083104 <get_fileinfo+0x138>
            if (IsDBCS1(c) && i < 10 && IsDBCS2(dir[i+1]))
               c = (c << 8) | dir[++i];
            c = ff_convert(c, 1);
            if (!c) c = '?';
#endif
            *p++ = c;
400830d8:	e0bffa17 	ldw	r2,-24(fp)
400830dc:	10c00044 	addi	r3,r2,1
400830e0:	e0fffa15 	stw	r3,-24(fp)
400830e4:	e0fffb03 	ldbu	r3,-20(fp)
400830e8:	10c00005 	stb	r3,0(r2)
#endif
         *p++ = c;
      }
      if (dir[8] != ' ') {    /* Copy name extension */
         *p++ = '.';
         for (i = 8; i < 11; i++) {
400830ec:	e0bff917 	ldw	r2,-28(fp)
400830f0:	10800044 	addi	r2,r2,1
400830f4:	e0bff915 	stw	r2,-28(fp)
400830f8:	e0bff917 	ldw	r2,-28(fp)
400830fc:	108002f0 	cmpltui	r2,r2,11
40083100:	103fec1e 	bne	r2,zero,400830b4 <__alt_mem_epcs+0xfff420b4>
            if (!c) c = '?';
#endif
            *p++ = c;
         }
      }
      fno->fattrib = dir[DIR_Attr];          /* Attribute */
40083104:	e0bffc17 	ldw	r2,-16(fp)
40083108:	10c002c3 	ldbu	r3,11(r2)
4008310c:	e0bfff17 	ldw	r2,-4(fp)
40083110:	10c00205 	stb	r3,8(r2)
      fno->fsize = LD_DWORD(dir+DIR_FileSize);  /* Size */
40083114:	e0bffc17 	ldw	r2,-16(fp)
40083118:	108007c4 	addi	r2,r2,31
4008311c:	10800003 	ldbu	r2,0(r2)
40083120:	10803fcc 	andi	r2,r2,255
40083124:	1006963a 	slli	r3,r2,24
40083128:	e0bffc17 	ldw	r2,-16(fp)
4008312c:	10800784 	addi	r2,r2,30
40083130:	10800003 	ldbu	r2,0(r2)
40083134:	10803fcc 	andi	r2,r2,255
40083138:	1004943a 	slli	r2,r2,16
4008313c:	1884b03a 	or	r2,r3,r2
40083140:	e0fffc17 	ldw	r3,-16(fp)
40083144:	18c00744 	addi	r3,r3,29
40083148:	18c00003 	ldbu	r3,0(r3)
4008314c:	18c03fcc 	andi	r3,r3,255
40083150:	1806923a 	slli	r3,r3,8
40083154:	10c6b03a 	or	r3,r2,r3
40083158:	e0bffc17 	ldw	r2,-16(fp)
4008315c:	10800704 	addi	r2,r2,28
40083160:	10800003 	ldbu	r2,0(r2)
40083164:	10803fcc 	andi	r2,r2,255
40083168:	1886b03a 	or	r3,r3,r2
4008316c:	e0bfff17 	ldw	r2,-4(fp)
40083170:	10c00015 	stw	r3,0(r2)
      fno->fdate = LD_WORD(dir+DIR_WrtDate);    /* Date */
40083174:	e0bffc17 	ldw	r2,-16(fp)
40083178:	10800644 	addi	r2,r2,25
4008317c:	10800003 	ldbu	r2,0(r2)
40083180:	10803fcc 	andi	r2,r2,255
40083184:	1004923a 	slli	r2,r2,8
40083188:	1007883a 	mov	r3,r2
4008318c:	e0bffc17 	ldw	r2,-16(fp)
40083190:	10800604 	addi	r2,r2,24
40083194:	10800003 	ldbu	r2,0(r2)
40083198:	10803fcc 	andi	r2,r2,255
4008319c:	1884b03a 	or	r2,r3,r2
400831a0:	1007883a 	mov	r3,r2
400831a4:	e0bfff17 	ldw	r2,-4(fp)
400831a8:	10c0010d 	sth	r3,4(r2)
      fno->ftime = LD_WORD(dir+DIR_WrtTime);    /* Time */
400831ac:	e0bffc17 	ldw	r2,-16(fp)
400831b0:	108005c4 	addi	r2,r2,23
400831b4:	10800003 	ldbu	r2,0(r2)
400831b8:	10803fcc 	andi	r2,r2,255
400831bc:	1004923a 	slli	r2,r2,8
400831c0:	1007883a 	mov	r3,r2
400831c4:	e0bffc17 	ldw	r2,-16(fp)
400831c8:	10800584 	addi	r2,r2,22
400831cc:	10800003 	ldbu	r2,0(r2)
400831d0:	10803fcc 	andi	r2,r2,255
400831d4:	1884b03a 	or	r2,r3,r2
400831d8:	1007883a 	mov	r3,r2
400831dc:	e0bfff17 	ldw	r2,-4(fp)
400831e0:	10c0018d 	sth	r3,6(r2)
   }
   *p = 0;     /* Terminate SFN str by a \0 */
400831e4:	e0bffa17 	ldw	r2,-24(fp)
400831e8:	10000005 	stb	zero,0(r2)
         }
      }
      tp[i] = 0;  /* Terminate the LFN str by a \0 */
   }
#endif
}
400831ec:	e037883a 	mov	sp,fp
400831f0:	df000017 	ldw	fp,0(sp)
400831f4:	dec00104 	addi	sp,sp,4
400831f8:	f800283a 	ret

400831fc <follow_path>:
static
FRESULT follow_path (   /* FR_OK(0): successful, !=0: error code */
   DIR *dj,       /* Directory object to return last directory and found object */
   const TCHAR *path /* Full-path string to find a file or directory */
)
{
400831fc:	defff904 	addi	sp,sp,-28
40083200:	dfc00615 	stw	ra,24(sp)
40083204:	df000515 	stw	fp,20(sp)
40083208:	df000504 	addi	fp,sp,20
4008320c:	e13ffe15 	stw	r4,-8(fp)
40083210:	e17fff15 	stw	r5,-4(fp)
      path++;  dj->sclust = 0;      /* Strip it and start from the root dir */
   } else {                   /* No heading separator */
      dj->sclust = dj->fs->cdir; /* Start from the current dir */
   }
#else
   if (*path == '/' || *path == '\\')  /* Strip heading separator if exist */
40083214:	e0bfff17 	ldw	r2,-4(fp)
40083218:	10800003 	ldbu	r2,0(r2)
4008321c:	10803fcc 	andi	r2,r2,255
40083220:	1080201c 	xori	r2,r2,128
40083224:	10bfe004 	addi	r2,r2,-128
40083228:	10800be0 	cmpeqi	r2,r2,47
4008322c:	1000071e 	bne	r2,zero,4008324c <follow_path+0x50>
40083230:	e0bfff17 	ldw	r2,-4(fp)
40083234:	10800003 	ldbu	r2,0(r2)
40083238:	10803fcc 	andi	r2,r2,255
4008323c:	1080201c 	xori	r2,r2,128
40083240:	10bfe004 	addi	r2,r2,-128
40083244:	10801718 	cmpnei	r2,r2,92
40083248:	1000031e 	bne	r2,zero,40083258 <follow_path+0x5c>
      path++;
4008324c:	e0bfff17 	ldw	r2,-4(fp)
40083250:	10800044 	addi	r2,r2,1
40083254:	e0bfff15 	stw	r2,-4(fp)
   dj->sclust = 0;                  /* Start from the root dir */
40083258:	e0bffe17 	ldw	r2,-8(fp)
4008325c:	10000215 	stw	zero,8(r2)
#endif

   if ((uint32_t)*path < ' ') {         /* Nul path means the start directory itself */
40083260:	e0bfff17 	ldw	r2,-4(fp)
40083264:	10800003 	ldbu	r2,0(r2)
40083268:	10803fcc 	andi	r2,r2,255
4008326c:	10800828 	cmpgeui	r2,r2,32
40083270:	1000071e 	bne	r2,zero,40083290 <follow_path+0x94>
      res = dir_sdi(dj, 0);
40083274:	e13ffe17 	ldw	r4,-8(fp)
40083278:	000b883a 	mov	r5,zero
4008327c:	00824640 	call	40082464 <dir_sdi>
40083280:	e0bffb15 	stw	r2,-20(fp)
      dj->dir = 0;
40083284:	e0bffe17 	ldw	r2,-8(fp)
40083288:	10000515 	stw	zero,20(r2)
4008328c:	00004906 	br	400833b4 <follow_path+0x1b8>

   } else {                   /* Follow path */
      for (;;) {
         res = create_name(dj, &path); /* Get a segment */
40083290:	e0bfff04 	addi	r2,fp,-4
40083294:	e13ffe17 	ldw	r4,-8(fp)
40083298:	100b883a 	mov	r5,r2
4008329c:	0082ce00 	call	40082ce0 <create_name>
400832a0:	e0bffb15 	stw	r2,-20(fp)
         if (res != FR_OK) break;
400832a4:	e0bffb17 	ldw	r2,-20(fp)
400832a8:	10000126 	beq	r2,zero,400832b0 <follow_path+0xb4>
400832ac:	00004106 	br	400833b4 <follow_path+0x1b8>
         res = dir_find(dj);           /* Find it */
400832b0:	e13ffe17 	ldw	r4,-8(fp)
400832b4:	00829380 	call	40082938 <dir_find>
400832b8:	e0bffb15 	stw	r2,-20(fp)
         ns = *(dj->fn+NS);
400832bc:	e0bffe17 	ldw	r2,-8(fp)
400832c0:	10800617 	ldw	r2,24(r2)
400832c4:	108002c3 	ldbu	r2,11(r2)
400832c8:	e0bffc05 	stb	r2,-16(fp)
         if (res != FR_OK) {           /* Failed to find the object */
400832cc:	e0bffb17 	ldw	r2,-20(fp)
400832d0:	10000b26 	beq	r2,zero,40083300 <follow_path+0x104>
            if (res != FR_NO_FILE) break; /* Abort if any hard error occured */
400832d4:	e0bffb17 	ldw	r2,-20(fp)
400832d8:	10800120 	cmpeqi	r2,r2,4
400832dc:	1000011e 	bne	r2,zero,400832e4 <follow_path+0xe8>
400832e0:	00003406 	br	400833b4 <follow_path+0x1b8>
            if (_FS_RPATH && (ns & NS_DOT)) {   /* If dot entry is not exit */
               dj->sclust = 0; dj->dir = 0;  /* It is the root dir */
               res = FR_OK;
               if (!(ns & NS_LAST)) continue;
            } else {                   /* Could not find the object */
               if (!(ns & NS_LAST)) res = FR_NO_PATH;
400832e4:	e0bffc03 	ldbu	r2,-16(fp)
400832e8:	1080010c 	andi	r2,r2,4
400832ec:	1000031e 	bne	r2,zero,400832fc <follow_path+0x100>
400832f0:	00800144 	movi	r2,5
400832f4:	e0bffb15 	stw	r2,-20(fp)
            }
            break;
400832f8:	00002e06 	br	400833b4 <follow_path+0x1b8>
400832fc:	00002d06 	br	400833b4 <follow_path+0x1b8>
         }
         if (ns & NS_LAST) break;         /* Last segment match. Function completed. */
40083300:	e0bffc03 	ldbu	r2,-16(fp)
40083304:	1080010c 	andi	r2,r2,4
40083308:	10000126 	beq	r2,zero,40083310 <follow_path+0x114>
4008330c:	00002906 	br	400833b4 <follow_path+0x1b8>
         dir = dj->dir;                /* There is next segment. Follow the sub directory */
40083310:	e0bffe17 	ldw	r2,-8(fp)
40083314:	10800517 	ldw	r2,20(r2)
40083318:	e0bffd15 	stw	r2,-12(fp)
         if (!(dir[DIR_Attr] & AM_DIR)) { /* Cannot follow because it is a file */
4008331c:	e0bffd17 	ldw	r2,-12(fp)
40083320:	108002c4 	addi	r2,r2,11
40083324:	10800003 	ldbu	r2,0(r2)
40083328:	10803fcc 	andi	r2,r2,255
4008332c:	1080040c 	andi	r2,r2,16
40083330:	1000031e 	bne	r2,zero,40083340 <follow_path+0x144>
            res = FR_NO_PATH; break;
40083334:	00800144 	movi	r2,5
40083338:	e0bffb15 	stw	r2,-20(fp)
4008333c:	00001d06 	br	400833b4 <follow_path+0x1b8>
         }
         dj->sclust = LD_CLUST(dir);
40083340:	e0bffd17 	ldw	r2,-12(fp)
40083344:	10800544 	addi	r2,r2,21
40083348:	10800003 	ldbu	r2,0(r2)
4008334c:	10803fcc 	andi	r2,r2,255
40083350:	1004923a 	slli	r2,r2,8
40083354:	1007883a 	mov	r3,r2
40083358:	e0bffd17 	ldw	r2,-12(fp)
4008335c:	10800504 	addi	r2,r2,20
40083360:	10800003 	ldbu	r2,0(r2)
40083364:	10803fcc 	andi	r2,r2,255
40083368:	1884b03a 	or	r2,r3,r2
4008336c:	10bfffcc 	andi	r2,r2,65535
40083370:	1006943a 	slli	r3,r2,16
40083374:	e0bffd17 	ldw	r2,-12(fp)
40083378:	108006c4 	addi	r2,r2,27
4008337c:	10800003 	ldbu	r2,0(r2)
40083380:	10803fcc 	andi	r2,r2,255
40083384:	1004923a 	slli	r2,r2,8
40083388:	1009883a 	mov	r4,r2
4008338c:	e0bffd17 	ldw	r2,-12(fp)
40083390:	10800684 	addi	r2,r2,26
40083394:	10800003 	ldbu	r2,0(r2)
40083398:	10803fcc 	andi	r2,r2,255
4008339c:	2084b03a 	or	r2,r4,r2
400833a0:	10bfffcc 	andi	r2,r2,65535
400833a4:	1886b03a 	or	r3,r3,r2
400833a8:	e0bffe17 	ldw	r2,-8(fp)
400833ac:	10c00215 	stw	r3,8(r2)
      }
400833b0:	003fb706 	br	40083290 <__alt_mem_epcs+0xfff42290>
   }

   return res;
400833b4:	e0bffb17 	ldw	r2,-20(fp)
}
400833b8:	e037883a 	mov	sp,fp
400833bc:	dfc00117 	ldw	ra,4(sp)
400833c0:	df000017 	ldw	fp,0(sp)
400833c4:	dec00204 	addi	sp,sp,8
400833c8:	f800283a 	ret

400833cc <check_fs>:
static
uint8_t check_fs (   /* 0:FAT-VBR, 1:Valid BR but not FAT, 2:Not a BR, 3:Disk error */
   FATFS *fs,  /* File system object */
   uint32_t sect  /* Sector# (lba) to check if it is an FAT boot record or not */
)
{
400833cc:	defffc04 	addi	sp,sp,-16
400833d0:	dfc00315 	stw	ra,12(sp)
400833d4:	df000215 	stw	fp,8(sp)
400833d8:	df000204 	addi	fp,sp,8
400833dc:	e13ffe15 	stw	r4,-8(fp)
400833e0:	e17fff15 	stw	r5,-4(fp)
   if (disk_read(fs->drv, fs->win, sect, 1) != RES_OK)   /* Load boot record */
400833e4:	e0bffe17 	ldw	r2,-8(fp)
400833e8:	10800043 	ldbu	r2,1(r2)
400833ec:	10c03fcc 	andi	r3,r2,255
400833f0:	e0bffe17 	ldw	r2,-8(fp)
400833f4:	10800c04 	addi	r2,r2,48
400833f8:	1809883a 	mov	r4,r3
400833fc:	100b883a 	mov	r5,r2
40083400:	e1bfff17 	ldw	r6,-4(fp)
40083404:	01c00044 	movi	r7,1
40083408:	0080e6c0 	call	40080e6c <ffs_DiskIORead>
4008340c:	10000226 	beq	r2,zero,40083418 <check_fs+0x4c>
      return 3;
40083410:	008000c4 	movi	r2,3
40083414:	00004506 	br	4008352c <check_fs+0x160>
   if (LD_WORD(&fs->win[BS_55AA]) != 0xAA55)    /* Check record signature (always placed at offset 510 even if the sector size is >512) */
40083418:	e0bffe17 	ldw	r2,-8(fp)
4008341c:	10808bc3 	ldbu	r2,559(r2)
40083420:	10803fcc 	andi	r2,r2,255
40083424:	1004923a 	slli	r2,r2,8
40083428:	1007883a 	mov	r3,r2
4008342c:	e0bffe17 	ldw	r2,-8(fp)
40083430:	10808b83 	ldbu	r2,558(r2)
40083434:	10803fcc 	andi	r2,r2,255
40083438:	1884b03a 	or	r2,r3,r2
4008343c:	10bfffcc 	andi	r2,r2,65535
40083440:	10a0001c 	xori	r2,r2,32768
40083444:	10a00004 	addi	r2,r2,-32768
40083448:	10aa9560 	cmpeqi	r2,r2,-21931
4008344c:	1000021e 	bne	r2,zero,40083458 <check_fs+0x8c>
      return 2;
40083450:	00800084 	movi	r2,2
40083454:	00003506 	br	4008352c <check_fs+0x160>

   if ((LD_DWORD(&fs->win[BS_FilSysType]) & 0xFFFFFF) == 0x544146)   /* Check "FAT" string */
40083458:	e0bffe17 	ldw	r2,-8(fp)
4008345c:	10801a43 	ldbu	r2,105(r2)
40083460:	10803fcc 	andi	r2,r2,255
40083464:	1006963a 	slli	r3,r2,24
40083468:	e0bffe17 	ldw	r2,-8(fp)
4008346c:	10801a03 	ldbu	r2,104(r2)
40083470:	10803fcc 	andi	r2,r2,255
40083474:	1004943a 	slli	r2,r2,16
40083478:	1884b03a 	or	r2,r3,r2
4008347c:	e0fffe17 	ldw	r3,-8(fp)
40083480:	18c019c3 	ldbu	r3,103(r3)
40083484:	18c03fcc 	andi	r3,r3,255
40083488:	1806923a 	slli	r3,r3,8
4008348c:	10c6b03a 	or	r3,r2,r3
40083490:	e0bffe17 	ldw	r2,-8(fp)
40083494:	10801983 	ldbu	r2,102(r2)
40083498:	10803fcc 	andi	r2,r2,255
4008349c:	1886b03a 	or	r3,r3,r2
400834a0:	00804034 	movhi	r2,256
400834a4:	10bfffc4 	addi	r2,r2,-1
400834a8:	1886703a 	and	r3,r3,r2
400834ac:	00801534 	movhi	r2,84
400834b0:	10905184 	addi	r2,r2,16710
400834b4:	1880021e 	bne	r3,r2,400834c0 <check_fs+0xf4>
      return 0;
400834b8:	0005883a 	mov	r2,zero
400834bc:	00001b06 	br	4008352c <check_fs+0x160>
   if ((LD_DWORD(&fs->win[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)
400834c0:	e0bffe17 	ldw	r2,-8(fp)
400834c4:	10802143 	ldbu	r2,133(r2)
400834c8:	10803fcc 	andi	r2,r2,255
400834cc:	1006963a 	slli	r3,r2,24
400834d0:	e0bffe17 	ldw	r2,-8(fp)
400834d4:	10802103 	ldbu	r2,132(r2)
400834d8:	10803fcc 	andi	r2,r2,255
400834dc:	1004943a 	slli	r2,r2,16
400834e0:	1884b03a 	or	r2,r3,r2
400834e4:	e0fffe17 	ldw	r3,-8(fp)
400834e8:	18c020c3 	ldbu	r3,131(r3)
400834ec:	18c03fcc 	andi	r3,r3,255
400834f0:	1806923a 	slli	r3,r3,8
400834f4:	10c6b03a 	or	r3,r2,r3
400834f8:	e0bffe17 	ldw	r2,-8(fp)
400834fc:	10802083 	ldbu	r2,130(r2)
40083500:	10803fcc 	andi	r2,r2,255
40083504:	1886b03a 	or	r3,r3,r2
40083508:	00804034 	movhi	r2,256
4008350c:	10bfffc4 	addi	r2,r2,-1
40083510:	1886703a 	and	r3,r3,r2
40083514:	00801534 	movhi	r2,84
40083518:	10905184 	addi	r2,r2,16710
4008351c:	1880021e 	bne	r3,r2,40083528 <check_fs+0x15c>
      return 0;
40083520:	0005883a 	mov	r2,zero
40083524:	00000106 	br	4008352c <check_fs+0x160>

   return 1;
40083528:	00800044 	movi	r2,1
}
4008352c:	e037883a 	mov	sp,fp
40083530:	dfc00117 	ldw	ra,4(sp)
40083534:	df000017 	ldw	fp,0(sp)
40083538:	dec00204 	addi	sp,sp,8
4008353c:	f800283a 	ret

40083540 <chk_mounted>:
FRESULT chk_mounted (   /* FR_OK(0): successful, !=0: any error occurred */
   const TCHAR **path,  /* Pointer to pointer to the path name (drive number) */
   FATFS **rfs,      /* Pointer to pointer to the found file system object */
   uint8_t chk_wp       /* !=0: Check media write protection for write access */
)
{
40083540:	deffee04 	addi	sp,sp,-72
40083544:	dfc01115 	stw	ra,68(sp)
40083548:	df001015 	stw	fp,64(sp)
4008354c:	df001004 	addi	fp,sp,64
40083550:	e13ffd15 	stw	r4,-12(fp)
40083554:	e17ffe15 	stw	r5,-8(fp)
40083558:	3005883a 	mov	r2,r6
4008355c:	e0bfff05 	stb	r2,-4(fp)
   uint8_t fmt, b, pi, *tbl;
   uint32_t vol;
   DSTATUS stat;
   uint32_t bsect, fasize, tsect, sysect, nclst, szbfat;
   uint16_t nrsv;
   const TCHAR *p = *path;
40083560:	e0bffd17 	ldw	r2,-12(fp)
40083564:	10800017 	ldw	r2,0(r2)
40083568:	e0bff615 	stw	r2,-40(fp)
   FATFS *fs;

   /* Get logical drive number from the path name */
   vol = p[0] - '0';             /* Is there a drive number? */
4008356c:	e0bff617 	ldw	r2,-40(fp)
40083570:	10800003 	ldbu	r2,0(r2)
40083574:	10803fcc 	andi	r2,r2,255
40083578:	1080201c 	xori	r2,r2,128
4008357c:	10bfe004 	addi	r2,r2,-128
40083580:	10bff404 	addi	r2,r2,-48
40083584:	e0bff115 	stw	r2,-60(fp)
   if (vol <= 9 && p[1] == ':') {      /* Found a drive number, get and strip it */
40083588:	e0bff117 	ldw	r2,-60(fp)
4008358c:	108002a8 	cmpgeui	r2,r2,10
40083590:	10000f1e 	bne	r2,zero,400835d0 <chk_mounted+0x90>
40083594:	e0bff617 	ldw	r2,-40(fp)
40083598:	10800044 	addi	r2,r2,1
4008359c:	10800003 	ldbu	r2,0(r2)
400835a0:	10803fcc 	andi	r2,r2,255
400835a4:	1080201c 	xori	r2,r2,128
400835a8:	10bfe004 	addi	r2,r2,-128
400835ac:	10800e98 	cmpnei	r2,r2,58
400835b0:	1000071e 	bne	r2,zero,400835d0 <chk_mounted+0x90>
      p += 2; *path = p;            /* Return pointer to the path name */
400835b4:	e0bff617 	ldw	r2,-40(fp)
400835b8:	10800084 	addi	r2,r2,2
400835bc:	e0bff615 	stw	r2,-40(fp)
400835c0:	e0bffd17 	ldw	r2,-12(fp)
400835c4:	e0fff617 	ldw	r3,-40(fp)
400835c8:	10c00015 	stw	r3,0(r2)
400835cc:	00000106 	br	400835d4 <chk_mounted+0x94>
   } else {                   /* No drive number is given */
#if _FS_RPATH
      vol = CurrVol;             /* Use current drive */
#else
      vol = 0;                /* Use drive 0 */
400835d0:	e03ff115 	stw	zero,-60(fp)
#endif
   }

   /* Check if the file system object is valid or not */
   if (vol >= _VOLUMES)             /* Is the drive number valid? */
400835d4:	e0bff117 	ldw	r2,-60(fp)
400835d8:	10000226 	beq	r2,zero,400835e4 <chk_mounted+0xa4>
      return FR_INVALID_DRIVE;
400835dc:	008002c4 	movi	r2,11
400835e0:	00021f06 	br	40083e60 <chk_mounted+0x920>
   *rfs = fs = FatFs[vol];          /* Return pointer to the corresponding file system object */
400835e4:	e0bff117 	ldw	r2,-60(fp)
400835e8:	1085883a 	add	r2,r2,r2
400835ec:	1087883a 	add	r3,r2,r2
400835f0:	d0a73904 	addi	r2,gp,-25372
400835f4:	1885883a 	add	r2,r3,r2
400835f8:	10800017 	ldw	r2,0(r2)
400835fc:	e0bff715 	stw	r2,-36(fp)
40083600:	e0bffe17 	ldw	r2,-8(fp)
40083604:	e0fff717 	ldw	r3,-36(fp)
40083608:	10c00015 	stw	r3,0(r2)
   if (!fs) return FR_NOT_ENABLED;     /* Is the file system object available? */
4008360c:	e0bff717 	ldw	r2,-36(fp)
40083610:	1000021e 	bne	r2,zero,4008361c <chk_mounted+0xdc>
40083614:	00800304 	movi	r2,12
40083618:	00021106 	br	40083e60 <chk_mounted+0x920>

   ENTER_FF(fs);                 /* Lock file system */

   if (fs->fs_type) {               /* If the logical drive has been mounted */
4008361c:	e0bff717 	ldw	r2,-36(fp)
40083620:	10800003 	ldbu	r2,0(r2)
40083624:	10803fcc 	andi	r2,r2,255
40083628:	10001226 	beq	r2,zero,40083674 <chk_mounted+0x134>
      stat = disk_status(fs->drv);
4008362c:	e0bff717 	ldw	r2,-36(fp)
40083630:	10800043 	ldbu	r2,1(r2)
40083634:	10803fcc 	andi	r2,r2,255
40083638:	1009883a 	mov	r4,r2
4008363c:	0080e440 	call	40080e44 <ffs_DiskIOStatus>
40083640:	e0bff805 	stb	r2,-32(fp)
      if (!(stat & STA_NOINIT)) {      /* and the physical drive is kept initialized (has not been changed), */
40083644:	e0bff803 	ldbu	r2,-32(fp)
40083648:	1080004c 	andi	r2,r2,1
4008364c:	1000091e 	bne	r2,zero,40083674 <chk_mounted+0x134>
         if (!_FS_READONLY && chk_wp && (stat & STA_PROTECT))  /* Check write protection if needed */
40083650:	e0bfff03 	ldbu	r2,-4(fp)
40083654:	10000526 	beq	r2,zero,4008366c <chk_mounted+0x12c>
40083658:	e0bff803 	ldbu	r2,-32(fp)
4008365c:	1080010c 	andi	r2,r2,4
40083660:	10000226 	beq	r2,zero,4008366c <chk_mounted+0x12c>
            return FR_WRITE_PROTECTED;
40083664:	00800284 	movi	r2,10
40083668:	0001fd06 	br	40083e60 <chk_mounted+0x920>
         return FR_OK;           /* The file system object is valid */
4008366c:	0005883a 	mov	r2,zero
40083670:	0001fb06 	br	40083e60 <chk_mounted+0x920>
   }

   /* The file system object is not valid. */
   /* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

   fs->fs_type = 0;              /* Clear the file system object */
40083674:	e0bff717 	ldw	r2,-36(fp)
40083678:	10000005 	stb	zero,0(r2)
   fs->drv = LD2PD(vol);            /* Bind the logical drive and a physical drive */
4008367c:	e0bff117 	ldw	r2,-60(fp)
40083680:	1007883a 	mov	r3,r2
40083684:	e0bff717 	ldw	r2,-36(fp)
40083688:	10c00045 	stb	r3,1(r2)
   stat = disk_initialize(fs->drv); /* Initialize low level disk I/O layer */
4008368c:	e0bff717 	ldw	r2,-36(fp)
40083690:	10800043 	ldbu	r2,1(r2)
40083694:	10803fcc 	andi	r2,r2,255
40083698:	1009883a 	mov	r4,r2
4008369c:	0080be80 	call	40080be8 <ffs_DiskIOInitialize>
400836a0:	e0bff805 	stb	r2,-32(fp)
   if (stat & STA_NOINIT)           /* Check if the initialization succeeded */
400836a4:	e0bff803 	ldbu	r2,-32(fp)
400836a8:	1080004c 	andi	r2,r2,1
400836ac:	10000226 	beq	r2,zero,400836b8 <chk_mounted+0x178>
      return FR_NOT_READY;       /* Failed to initialize due to no media or hard error */
400836b0:	008000c4 	movi	r2,3
400836b4:	0001ea06 	br	40083e60 <chk_mounted+0x920>
   if (!_FS_READONLY && chk_wp && (stat & STA_PROTECT))  /* Check disk write protection if needed */
400836b8:	e0bfff03 	ldbu	r2,-4(fp)
400836bc:	10000526 	beq	r2,zero,400836d4 <chk_mounted+0x194>
400836c0:	e0bff803 	ldbu	r2,-32(fp)
400836c4:	1080010c 	andi	r2,r2,4
400836c8:	10000226 	beq	r2,zero,400836d4 <chk_mounted+0x194>
      return FR_WRITE_PROTECTED;
400836cc:	00800284 	movi	r2,10
400836d0:	0001e306 	br	40083e60 <chk_mounted+0x920>
#if _MAX_SS != 512                  /* Get disk sector size (variable sector size cfg only) */
   if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &fs->ssize) != RES_OK)
      return FR_DISK_ERR;
#endif
   /* Search FAT partition on the drive. Supports only generic partitionings, FDISK and SFD. */
   fmt = check_fs(fs, bsect = 0);      /* Load sector 0 and check if it is an FAT-VBR (in SFD) */
400836d4:	e03ff215 	stw	zero,-56(fp)
400836d8:	e13ff717 	ldw	r4,-36(fp)
400836dc:	e17ff217 	ldw	r5,-56(fp)
400836e0:	00833cc0 	call	400833cc <check_fs>
400836e4:	e0bff005 	stb	r2,-64(fp)
   if (LD2PT(vol) && !fmt) fmt = 1; /* Force non-SFD if the volume is forced partition */
   if (fmt == 1) {                  /* Not an FAT-VBR, the physical drive can be partitioned */
400836e8:	e0bff003 	ldbu	r2,-64(fp)
400836ec:	10800058 	cmpnei	r2,r2,1
400836f0:	10002d1e 	bne	r2,zero,400837a8 <chk_mounted+0x268>
      /* Check the partition listed in the partition table */
      pi = LD2PT(vol);
400836f4:	e03ff045 	stb	zero,-63(fp)
      if (pi) pi--;
400836f8:	e0bff043 	ldbu	r2,-63(fp)
400836fc:	10000326 	beq	r2,zero,4008370c <chk_mounted+0x1cc>
40083700:	e0bff043 	ldbu	r2,-63(fp)
40083704:	10bfffc4 	addi	r2,r2,-1
40083708:	e0bff045 	stb	r2,-63(fp)
      tbl = &fs->win[MBR_Table + pi * SZ_PTE];/* Partition table */
4008370c:	e0bff043 	ldbu	r2,-63(fp)
40083710:	1004913a 	slli	r2,r2,4
40083714:	10806f84 	addi	r2,r2,446
40083718:	10800c04 	addi	r2,r2,48
4008371c:	e0fff717 	ldw	r3,-36(fp)
40083720:	1885883a 	add	r2,r3,r2
40083724:	e0bff915 	stw	r2,-28(fp)
      if (tbl[4]) {                 /* Is the partition existing? */
40083728:	e0bff917 	ldw	r2,-28(fp)
4008372c:	10800104 	addi	r2,r2,4
40083730:	10800003 	ldbu	r2,0(r2)
40083734:	10803fcc 	andi	r2,r2,255
40083738:	10001b26 	beq	r2,zero,400837a8 <chk_mounted+0x268>
         bsect = LD_DWORD(&tbl[8]);    /* Partition offset in LBA */
4008373c:	e0bff917 	ldw	r2,-28(fp)
40083740:	108002c4 	addi	r2,r2,11
40083744:	10800003 	ldbu	r2,0(r2)
40083748:	10803fcc 	andi	r2,r2,255
4008374c:	1006963a 	slli	r3,r2,24
40083750:	e0bff917 	ldw	r2,-28(fp)
40083754:	10800284 	addi	r2,r2,10
40083758:	10800003 	ldbu	r2,0(r2)
4008375c:	10803fcc 	andi	r2,r2,255
40083760:	1004943a 	slli	r2,r2,16
40083764:	1884b03a 	or	r2,r3,r2
40083768:	e0fff917 	ldw	r3,-28(fp)
4008376c:	18c00244 	addi	r3,r3,9
40083770:	18c00003 	ldbu	r3,0(r3)
40083774:	18c03fcc 	andi	r3,r3,255
40083778:	1806923a 	slli	r3,r3,8
4008377c:	10c6b03a 	or	r3,r2,r3
40083780:	e0bff917 	ldw	r2,-28(fp)
40083784:	10800204 	addi	r2,r2,8
40083788:	10800003 	ldbu	r2,0(r2)
4008378c:	10803fcc 	andi	r2,r2,255
40083790:	1884b03a 	or	r2,r3,r2
40083794:	e0bff215 	stw	r2,-56(fp)
         fmt = check_fs(fs, bsect);    /* Check the partition */
40083798:	e13ff717 	ldw	r4,-36(fp)
4008379c:	e17ff217 	ldw	r5,-56(fp)
400837a0:	00833cc0 	call	400833cc <check_fs>
400837a4:	e0bff005 	stb	r2,-64(fp)
      }
   }
   if (fmt == 3) return FR_DISK_ERR;
400837a8:	e0bff003 	ldbu	r2,-64(fp)
400837ac:	108000d8 	cmpnei	r2,r2,3
400837b0:	1000021e 	bne	r2,zero,400837bc <chk_mounted+0x27c>
400837b4:	00800044 	movi	r2,1
400837b8:	0001a906 	br	40083e60 <chk_mounted+0x920>
   if (fmt) return FR_NO_FILESYSTEM;      /* No FAT volume is found */
400837bc:	e0bff003 	ldbu	r2,-64(fp)
400837c0:	10000226 	beq	r2,zero,400837cc <chk_mounted+0x28c>
400837c4:	00800344 	movi	r2,13
400837c8:	0001a506 	br	40083e60 <chk_mounted+0x920>

   /* An FAT volume is found. Following code initializes the file system object */

   if (LD_WORD(fs->win+BPB_BytsPerSec) != SS(fs))     /* (BPB_BytsPerSec must be equal to the physical sector size) */
400837cc:	e0bff717 	ldw	r2,-36(fp)
400837d0:	10800f03 	ldbu	r2,60(r2)
400837d4:	10803fcc 	andi	r2,r2,255
400837d8:	1004923a 	slli	r2,r2,8
400837dc:	1007883a 	mov	r3,r2
400837e0:	e0bff717 	ldw	r2,-36(fp)
400837e4:	10800ec3 	ldbu	r2,59(r2)
400837e8:	10803fcc 	andi	r2,r2,255
400837ec:	1884b03a 	or	r2,r3,r2
400837f0:	10bfffcc 	andi	r2,r2,65535
400837f4:	10a0001c 	xori	r2,r2,32768
400837f8:	10a00004 	addi	r2,r2,-32768
400837fc:	10808020 	cmpeqi	r2,r2,512
40083800:	1000021e 	bne	r2,zero,4008380c <chk_mounted+0x2cc>
      return FR_NO_FILESYSTEM;
40083804:	00800344 	movi	r2,13
40083808:	00019506 	br	40083e60 <chk_mounted+0x920>

   fasize = LD_WORD(fs->win+BPB_FATSz16);          /* Number of sectors per FAT */
4008380c:	e0bff717 	ldw	r2,-36(fp)
40083810:	108011c3 	ldbu	r2,71(r2)
40083814:	10803fcc 	andi	r2,r2,255
40083818:	1004923a 	slli	r2,r2,8
4008381c:	1007883a 	mov	r3,r2
40083820:	e0bff717 	ldw	r2,-36(fp)
40083824:	10801183 	ldbu	r2,70(r2)
40083828:	10803fcc 	andi	r2,r2,255
4008382c:	1884b03a 	or	r2,r3,r2
40083830:	10bfffcc 	andi	r2,r2,65535
40083834:	e0bff315 	stw	r2,-52(fp)
   if (!fasize) fasize = LD_DWORD(fs->win+BPB_FATSz32);
40083838:	e0bff317 	ldw	r2,-52(fp)
4008383c:	1000131e 	bne	r2,zero,4008388c <chk_mounted+0x34c>
40083840:	e0bff717 	ldw	r2,-36(fp)
40083844:	108015c3 	ldbu	r2,87(r2)
40083848:	10803fcc 	andi	r2,r2,255
4008384c:	1006963a 	slli	r3,r2,24
40083850:	e0bff717 	ldw	r2,-36(fp)
40083854:	10801583 	ldbu	r2,86(r2)
40083858:	10803fcc 	andi	r2,r2,255
4008385c:	1004943a 	slli	r2,r2,16
40083860:	1884b03a 	or	r2,r3,r2
40083864:	e0fff717 	ldw	r3,-36(fp)
40083868:	18c01543 	ldbu	r3,85(r3)
4008386c:	18c03fcc 	andi	r3,r3,255
40083870:	1806923a 	slli	r3,r3,8
40083874:	10c6b03a 	or	r3,r2,r3
40083878:	e0bff717 	ldw	r2,-36(fp)
4008387c:	10801503 	ldbu	r2,84(r2)
40083880:	10803fcc 	andi	r2,r2,255
40083884:	1884b03a 	or	r2,r3,r2
40083888:	e0bff315 	stw	r2,-52(fp)
   fs->fsize = fasize;
4008388c:	e0bff717 	ldw	r2,-36(fp)
40083890:	e0fff317 	ldw	r3,-52(fp)
40083894:	10c00715 	stw	r3,28(r2)

   fs->n_fats = b = fs->win[BPB_NumFATs];          /* Number of FAT copies */
40083898:	e0bff717 	ldw	r2,-36(fp)
4008389c:	10801003 	ldbu	r2,64(r2)
400838a0:	e0bffa05 	stb	r2,-24(fp)
400838a4:	e0bff717 	ldw	r2,-36(fp)
400838a8:	e0fffa03 	ldbu	r3,-24(fp)
400838ac:	10c000c5 	stb	r3,3(r2)
   if (b != 1 && b != 2) return FR_NO_FILESYSTEM;     /* (Must be 1 or 2) */
400838b0:	e0bffa03 	ldbu	r2,-24(fp)
400838b4:	10800060 	cmpeqi	r2,r2,1
400838b8:	1000051e 	bne	r2,zero,400838d0 <chk_mounted+0x390>
400838bc:	e0bffa03 	ldbu	r2,-24(fp)
400838c0:	108000a0 	cmpeqi	r2,r2,2
400838c4:	1000021e 	bne	r2,zero,400838d0 <chk_mounted+0x390>
400838c8:	00800344 	movi	r2,13
400838cc:	00016406 	br	40083e60 <chk_mounted+0x920>
   fasize *= b;                              /* Number of sectors for FAT area */
400838d0:	e0bffa03 	ldbu	r2,-24(fp)
400838d4:	e0fff317 	ldw	r3,-52(fp)
400838d8:	1885383a 	mul	r2,r3,r2
400838dc:	e0bff315 	stw	r2,-52(fp)

   fs->csize = b = fs->win[BPB_SecPerClus];        /* Number of sectors per cluster */
400838e0:	e0bff717 	ldw	r2,-36(fp)
400838e4:	10800f43 	ldbu	r2,61(r2)
400838e8:	e0bffa05 	stb	r2,-24(fp)
400838ec:	e0bff717 	ldw	r2,-36(fp)
400838f0:	e0fffa03 	ldbu	r3,-24(fp)
400838f4:	10c00085 	stb	r3,2(r2)
   if (!b || (b & (b - 1))) return FR_NO_FILESYSTEM;  /* (Must be power of 2) */
400838f8:	e0bffa03 	ldbu	r2,-24(fp)
400838fc:	10000526 	beq	r2,zero,40083914 <chk_mounted+0x3d4>
40083900:	e0fffa03 	ldbu	r3,-24(fp)
40083904:	e0bffa03 	ldbu	r2,-24(fp)
40083908:	10bfffc4 	addi	r2,r2,-1
4008390c:	1884703a 	and	r2,r3,r2
40083910:	10000226 	beq	r2,zero,4008391c <chk_mounted+0x3dc>
40083914:	00800344 	movi	r2,13
40083918:	00015106 	br	40083e60 <chk_mounted+0x920>

   fs->n_rootdir = LD_WORD(fs->win+BPB_RootEntCnt);   /* Number of root directory entries */
4008391c:	e0bff717 	ldw	r2,-36(fp)
40083920:	10801083 	ldbu	r2,66(r2)
40083924:	10803fcc 	andi	r2,r2,255
40083928:	1004923a 	slli	r2,r2,8
4008392c:	1007883a 	mov	r3,r2
40083930:	e0bff717 	ldw	r2,-36(fp)
40083934:	10801043 	ldbu	r2,65(r2)
40083938:	10803fcc 	andi	r2,r2,255
4008393c:	1884b03a 	or	r2,r3,r2
40083940:	1007883a 	mov	r3,r2
40083944:	e0bff717 	ldw	r2,-36(fp)
40083948:	10c0020d 	sth	r3,8(r2)
   if (fs->n_rootdir % (SS(fs) / SZ_DIR)) return FR_NO_FILESYSTEM;   /* (BPB_RootEntCnt must be sector aligned) */
4008394c:	e0bff717 	ldw	r2,-36(fp)
40083950:	1080020b 	ldhu	r2,8(r2)
40083954:	108003cc 	andi	r2,r2,15
40083958:	10bfffcc 	andi	r2,r2,65535
4008395c:	10000226 	beq	r2,zero,40083968 <chk_mounted+0x428>
40083960:	00800344 	movi	r2,13
40083964:	00013e06 	br	40083e60 <chk_mounted+0x920>

   tsect = LD_WORD(fs->win+BPB_TotSec16);          /* Number of sectors on the volume */
40083968:	e0bff717 	ldw	r2,-36(fp)
4008396c:	10801103 	ldbu	r2,68(r2)
40083970:	10803fcc 	andi	r2,r2,255
40083974:	1004923a 	slli	r2,r2,8
40083978:	1007883a 	mov	r3,r2
4008397c:	e0bff717 	ldw	r2,-36(fp)
40083980:	108010c3 	ldbu	r2,67(r2)
40083984:	10803fcc 	andi	r2,r2,255
40083988:	1884b03a 	or	r2,r3,r2
4008398c:	10bfffcc 	andi	r2,r2,65535
40083990:	e0bff415 	stw	r2,-48(fp)
   if (!tsect) tsect = LD_DWORD(fs->win+BPB_TotSec32);
40083994:	e0bff417 	ldw	r2,-48(fp)
40083998:	1000131e 	bne	r2,zero,400839e8 <chk_mounted+0x4a8>
4008399c:	e0bff717 	ldw	r2,-36(fp)
400839a0:	108014c3 	ldbu	r2,83(r2)
400839a4:	10803fcc 	andi	r2,r2,255
400839a8:	1006963a 	slli	r3,r2,24
400839ac:	e0bff717 	ldw	r2,-36(fp)
400839b0:	10801483 	ldbu	r2,82(r2)
400839b4:	10803fcc 	andi	r2,r2,255
400839b8:	1004943a 	slli	r2,r2,16
400839bc:	1884b03a 	or	r2,r3,r2
400839c0:	e0fff717 	ldw	r3,-36(fp)
400839c4:	18c01443 	ldbu	r3,81(r3)
400839c8:	18c03fcc 	andi	r3,r3,255
400839cc:	1806923a 	slli	r3,r3,8
400839d0:	10c6b03a 	or	r3,r2,r3
400839d4:	e0bff717 	ldw	r2,-36(fp)
400839d8:	10801403 	ldbu	r2,80(r2)
400839dc:	10803fcc 	andi	r2,r2,255
400839e0:	1884b03a 	or	r2,r3,r2
400839e4:	e0bff415 	stw	r2,-48(fp)

   nrsv = LD_WORD(fs->win+BPB_RsvdSecCnt);            /* Number of reserved sectors */
400839e8:	e0bff717 	ldw	r2,-36(fp)
400839ec:	10800fc3 	ldbu	r2,63(r2)
400839f0:	10803fcc 	andi	r2,r2,255
400839f4:	1004923a 	slli	r2,r2,8
400839f8:	1007883a 	mov	r3,r2
400839fc:	e0bff717 	ldw	r2,-36(fp)
40083a00:	10800f83 	ldbu	r2,62(r2)
40083a04:	10803fcc 	andi	r2,r2,255
40083a08:	1884b03a 	or	r2,r3,r2
40083a0c:	e0bffa8d 	sth	r2,-22(fp)
   if (!nrsv) return FR_NO_FILESYSTEM;             /* (BPB_RsvdSecCnt must not be 0) */
40083a10:	e0bffa8b 	ldhu	r2,-22(fp)
40083a14:	1000021e 	bne	r2,zero,40083a20 <chk_mounted+0x4e0>
40083a18:	00800344 	movi	r2,13
40083a1c:	00011006 	br	40083e60 <chk_mounted+0x920>

   /* Determine the FAT sub type */
   sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIR); /* RSV+FAT+DIR */
40083a20:	e0fffa8b 	ldhu	r3,-22(fp)
40083a24:	e0bff317 	ldw	r2,-52(fp)
40083a28:	1887883a 	add	r3,r3,r2
40083a2c:	e0bff717 	ldw	r2,-36(fp)
40083a30:	1080020b 	ldhu	r2,8(r2)
40083a34:	10bfffcc 	andi	r2,r2,65535
40083a38:	1004d13a 	srli	r2,r2,4
40083a3c:	10bfffcc 	andi	r2,r2,65535
40083a40:	1885883a 	add	r2,r3,r2
40083a44:	e0bffb15 	stw	r2,-20(fp)
   if (tsect < sysect) return FR_NO_FILESYSTEM;    /* (Invalid volume size) */
40083a48:	e0fff417 	ldw	r3,-48(fp)
40083a4c:	e0bffb17 	ldw	r2,-20(fp)
40083a50:	1880022e 	bgeu	r3,r2,40083a5c <chk_mounted+0x51c>
40083a54:	00800344 	movi	r2,13
40083a58:	00010106 	br	40083e60 <chk_mounted+0x920>
   nclst = (tsect - sysect) / fs->csize;           /* Number of clusters */
40083a5c:	e0fff417 	ldw	r3,-48(fp)
40083a60:	e0bffb17 	ldw	r2,-20(fp)
40083a64:	1887c83a 	sub	r3,r3,r2
40083a68:	e0bff717 	ldw	r2,-36(fp)
40083a6c:	10800083 	ldbu	r2,2(r2)
40083a70:	10803fcc 	andi	r2,r2,255
40083a74:	1885203a 	divu	r2,r3,r2
40083a78:	e0bffc15 	stw	r2,-16(fp)
   if (!nclst) return FR_NO_FILESYSTEM;            /* (Invalid volume size) */
40083a7c:	e0bffc17 	ldw	r2,-16(fp)
40083a80:	1000021e 	bne	r2,zero,40083a8c <chk_mounted+0x54c>
40083a84:	00800344 	movi	r2,13
40083a88:	0000f506 	br	40083e60 <chk_mounted+0x920>
   fmt = FS_FAT12;
40083a8c:	00800044 	movi	r2,1
40083a90:	e0bff005 	stb	r2,-64(fp)
   if (nclst >= MIN_FAT16) fmt = FS_FAT16;
40083a94:	e0bffc17 	ldw	r2,-16(fp)
40083a98:	1083fdb0 	cmpltui	r2,r2,4086
40083a9c:	1000021e 	bne	r2,zero,40083aa8 <chk_mounted+0x568>
40083aa0:	00800084 	movi	r2,2
40083aa4:	e0bff005 	stb	r2,-64(fp)
   if (nclst >= MIN_FAT32) fmt = FS_FAT32;
40083aa8:	e0bffc17 	ldw	r2,-16(fp)
40083aac:	10bffdb0 	cmpltui	r2,r2,65526
40083ab0:	1000021e 	bne	r2,zero,40083abc <chk_mounted+0x57c>
40083ab4:	008000c4 	movi	r2,3
40083ab8:	e0bff005 	stb	r2,-64(fp)

   /* Boundaries and Limits */
   fs->n_fatent = nclst + 2;                    /* Number of FAT entries */
40083abc:	e0bffc17 	ldw	r2,-16(fp)
40083ac0:	10c00084 	addi	r3,r2,2
40083ac4:	e0bff717 	ldw	r2,-36(fp)
40083ac8:	10c00615 	stw	r3,24(r2)
   fs->database = bsect + sysect;                  /* Data start sector */
40083acc:	e0fff217 	ldw	r3,-56(fp)
40083ad0:	e0bffb17 	ldw	r2,-20(fp)
40083ad4:	1887883a 	add	r3,r3,r2
40083ad8:	e0bff717 	ldw	r2,-36(fp)
40083adc:	10c00a15 	stw	r3,40(r2)
   fs->fatbase = bsect + nrsv;                  /* FAT start sector */
40083ae0:	e0fffa8b 	ldhu	r3,-22(fp)
40083ae4:	e0bff217 	ldw	r2,-56(fp)
40083ae8:	1887883a 	add	r3,r3,r2
40083aec:	e0bff717 	ldw	r2,-36(fp)
40083af0:	10c00815 	stw	r3,32(r2)
   if (fmt == FS_FAT32) {
40083af4:	e0bff003 	ldbu	r2,-64(fp)
40083af8:	108000d8 	cmpnei	r2,r2,3
40083afc:	1000201e 	bne	r2,zero,40083b80 <chk_mounted+0x640>
      if (fs->n_rootdir) return FR_NO_FILESYSTEM;     /* (BPB_RootEntCnt must be 0) */
40083b00:	e0bff717 	ldw	r2,-36(fp)
40083b04:	1080020b 	ldhu	r2,8(r2)
40083b08:	10bfffcc 	andi	r2,r2,65535
40083b0c:	10000226 	beq	r2,zero,40083b18 <chk_mounted+0x5d8>
40083b10:	00800344 	movi	r2,13
40083b14:	0000d206 	br	40083e60 <chk_mounted+0x920>
      fs->dirbase = LD_DWORD(fs->win+BPB_RootClus);   /* Root directory start cluster */
40083b18:	e0bff717 	ldw	r2,-36(fp)
40083b1c:	108017c3 	ldbu	r2,95(r2)
40083b20:	10803fcc 	andi	r2,r2,255
40083b24:	1006963a 	slli	r3,r2,24
40083b28:	e0bff717 	ldw	r2,-36(fp)
40083b2c:	10801783 	ldbu	r2,94(r2)
40083b30:	10803fcc 	andi	r2,r2,255
40083b34:	1004943a 	slli	r2,r2,16
40083b38:	1884b03a 	or	r2,r3,r2
40083b3c:	e0fff717 	ldw	r3,-36(fp)
40083b40:	18c01743 	ldbu	r3,93(r3)
40083b44:	18c03fcc 	andi	r3,r3,255
40083b48:	1806923a 	slli	r3,r3,8
40083b4c:	10c6b03a 	or	r3,r2,r3
40083b50:	e0bff717 	ldw	r2,-36(fp)
40083b54:	10801703 	ldbu	r2,92(r2)
40083b58:	10803fcc 	andi	r2,r2,255
40083b5c:	1886b03a 	or	r3,r3,r2
40083b60:	e0bff717 	ldw	r2,-36(fp)
40083b64:	10c00915 	stw	r3,36(r2)
      szbfat = fs->n_fatent * 4;                /* (Required FAT size) */
40083b68:	e0bff717 	ldw	r2,-36(fp)
40083b6c:	10800617 	ldw	r2,24(r2)
40083b70:	1085883a 	add	r2,r2,r2
40083b74:	1085883a 	add	r2,r2,r2
40083b78:	e0bff515 	stw	r2,-44(fp)
40083b7c:	00001e06 	br	40083bf8 <chk_mounted+0x6b8>
   } else {
      if (!fs->n_rootdir)  return FR_NO_FILESYSTEM;   /* (BPB_RootEntCnt must not be 0) */
40083b80:	e0bff717 	ldw	r2,-36(fp)
40083b84:	1080020b 	ldhu	r2,8(r2)
40083b88:	10bfffcc 	andi	r2,r2,65535
40083b8c:	1000021e 	bne	r2,zero,40083b98 <chk_mounted+0x658>
40083b90:	00800344 	movi	r2,13
40083b94:	0000b206 	br	40083e60 <chk_mounted+0x920>
      fs->dirbase = fs->fatbase + fasize;          /* Root directory start sector */
40083b98:	e0bff717 	ldw	r2,-36(fp)
40083b9c:	10c00817 	ldw	r3,32(r2)
40083ba0:	e0bff317 	ldw	r2,-52(fp)
40083ba4:	1887883a 	add	r3,r3,r2
40083ba8:	e0bff717 	ldw	r2,-36(fp)
40083bac:	10c00915 	stw	r3,36(r2)
      szbfat = (fmt == FS_FAT16) ?              /* (Required FAT size) */
         fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
40083bb0:	e0bff003 	ldbu	r2,-64(fp)
40083bb4:	10800098 	cmpnei	r2,r2,2
40083bb8:	1000041e 	bne	r2,zero,40083bcc <chk_mounted+0x68c>
40083bbc:	e0bff717 	ldw	r2,-36(fp)
40083bc0:	10800617 	ldw	r2,24(r2)
40083bc4:	1085883a 	add	r2,r2,r2
40083bc8:	00000a06 	br	40083bf4 <chk_mounted+0x6b4>
40083bcc:	e0bff717 	ldw	r2,-36(fp)
40083bd0:	10c00617 	ldw	r3,24(r2)
40083bd4:	1805883a 	mov	r2,r3
40083bd8:	1085883a 	add	r2,r2,r2
40083bdc:	10c5883a 	add	r2,r2,r3
40083be0:	1006d07a 	srli	r3,r2,1
40083be4:	e0bff717 	ldw	r2,-36(fp)
40083be8:	10800617 	ldw	r2,24(r2)
40083bec:	1080004c 	andi	r2,r2,1
40083bf0:	1885883a 	add	r2,r3,r2
      fs->dirbase = LD_DWORD(fs->win+BPB_RootClus);   /* Root directory start cluster */
      szbfat = fs->n_fatent * 4;                /* (Required FAT size) */
   } else {
      if (!fs->n_rootdir)  return FR_NO_FILESYSTEM;   /* (BPB_RootEntCnt must not be 0) */
      fs->dirbase = fs->fatbase + fasize;          /* Root directory start sector */
      szbfat = (fmt == FS_FAT16) ?              /* (Required FAT size) */
40083bf4:	e0bff515 	stw	r2,-44(fp)
         fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
   }
   if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))  /* (BPB_FATSz must not be less than required) */
40083bf8:	e0bff717 	ldw	r2,-36(fp)
40083bfc:	10c00717 	ldw	r3,28(r2)
40083c00:	e0bff517 	ldw	r2,-44(fp)
40083c04:	10807fc4 	addi	r2,r2,511
40083c08:	1004d27a 	srli	r2,r2,9
40083c0c:	1880022e 	bgeu	r3,r2,40083c18 <chk_mounted+0x6d8>
      return FR_NO_FILESYSTEM;
40083c10:	00800344 	movi	r2,13
40083c14:	00009206 	br	40083e60 <chk_mounted+0x920>

#if !_FS_READONLY
   /* Initialize cluster allocation information */
   fs->free_clust = 0xFFFFFFFF;
40083c18:	e0bff717 	ldw	r2,-36(fp)
40083c1c:	00ffffc4 	movi	r3,-1
40083c20:	10c00415 	stw	r3,16(r2)
   fs->last_clust = 0;
40083c24:	e0bff717 	ldw	r2,-36(fp)
40083c28:	10000315 	stw	zero,12(r2)

   /* Get fsinfo if available */
   if (fmt == FS_FAT32) {
40083c2c:	e0bff003 	ldbu	r2,-64(fp)
40083c30:	108000d8 	cmpnei	r2,r2,3
40083c34:	10007c1e 	bne	r2,zero,40083e28 <chk_mounted+0x8e8>
      fs->fsi_flag = 0;
40083c38:	e0bff717 	ldw	r2,-36(fp)
40083c3c:	10000145 	stb	zero,5(r2)
      fs->fsi_sector = bsect + LD_WORD(fs->win+BPB_FSInfo);
40083c40:	e0bff717 	ldw	r2,-36(fp)
40083c44:	10801843 	ldbu	r2,97(r2)
40083c48:	10803fcc 	andi	r2,r2,255
40083c4c:	1004923a 	slli	r2,r2,8
40083c50:	1007883a 	mov	r3,r2
40083c54:	e0bff717 	ldw	r2,-36(fp)
40083c58:	10801803 	ldbu	r2,96(r2)
40083c5c:	10803fcc 	andi	r2,r2,255
40083c60:	1884b03a 	or	r2,r3,r2
40083c64:	10ffffcc 	andi	r3,r2,65535
40083c68:	e0bff217 	ldw	r2,-56(fp)
40083c6c:	1887883a 	add	r3,r3,r2
40083c70:	e0bff717 	ldw	r2,-36(fp)
40083c74:	10c00515 	stw	r3,20(r2)
      if (disk_read(fs->drv, fs->win, fs->fsi_sector, 1) == RES_OK &&
40083c78:	e0bff717 	ldw	r2,-36(fp)
40083c7c:	10800043 	ldbu	r2,1(r2)
40083c80:	11003fcc 	andi	r4,r2,255
40083c84:	e0bff717 	ldw	r2,-36(fp)
40083c88:	10c00c04 	addi	r3,r2,48
40083c8c:	e0bff717 	ldw	r2,-36(fp)
40083c90:	10800517 	ldw	r2,20(r2)
40083c94:	180b883a 	mov	r5,r3
40083c98:	100d883a 	mov	r6,r2
40083c9c:	01c00044 	movi	r7,1
40083ca0:	0080e6c0 	call	40080e6c <ffs_DiskIORead>
40083ca4:	1000601e 	bne	r2,zero,40083e28 <chk_mounted+0x8e8>
         LD_WORD(fs->win+BS_55AA) == 0xAA55 &&
40083ca8:	e0bff717 	ldw	r2,-36(fp)
40083cac:	10808bc3 	ldbu	r2,559(r2)
40083cb0:	10803fcc 	andi	r2,r2,255
40083cb4:	1004923a 	slli	r2,r2,8
40083cb8:	1007883a 	mov	r3,r2
40083cbc:	e0bff717 	ldw	r2,-36(fp)
40083cc0:	10808b83 	ldbu	r2,558(r2)
40083cc4:	10803fcc 	andi	r2,r2,255
40083cc8:	1884b03a 	or	r2,r3,r2

   /* Get fsinfo if available */
   if (fmt == FS_FAT32) {
      fs->fsi_flag = 0;
      fs->fsi_sector = bsect + LD_WORD(fs->win+BPB_FSInfo);
      if (disk_read(fs->drv, fs->win, fs->fsi_sector, 1) == RES_OK &&
40083ccc:	10bfffcc 	andi	r2,r2,65535
40083cd0:	10a0001c 	xori	r2,r2,32768
40083cd4:	10a00004 	addi	r2,r2,-32768
40083cd8:	10aa9558 	cmpnei	r2,r2,-21931
40083cdc:	1000521e 	bne	r2,zero,40083e28 <chk_mounted+0x8e8>
         LD_WORD(fs->win+BS_55AA) == 0xAA55 &&
         LD_DWORD(fs->win+FSI_LeadSig) == 0x41615252 &&
40083ce0:	e0bff717 	ldw	r2,-36(fp)
40083ce4:	10800cc3 	ldbu	r2,51(r2)
40083ce8:	10803fcc 	andi	r2,r2,255
40083cec:	1006963a 	slli	r3,r2,24
40083cf0:	e0bff717 	ldw	r2,-36(fp)
40083cf4:	10800c83 	ldbu	r2,50(r2)
40083cf8:	10803fcc 	andi	r2,r2,255
40083cfc:	1004943a 	slli	r2,r2,16
40083d00:	1884b03a 	or	r2,r3,r2
40083d04:	e0fff717 	ldw	r3,-36(fp)
40083d08:	18c00c43 	ldbu	r3,49(r3)
40083d0c:	18c03fcc 	andi	r3,r3,255
40083d10:	1806923a 	slli	r3,r3,8
40083d14:	10c6b03a 	or	r3,r2,r3
40083d18:	e0bff717 	ldw	r2,-36(fp)
40083d1c:	10800c03 	ldbu	r2,48(r2)
40083d20:	10803fcc 	andi	r2,r2,255
40083d24:	1886b03a 	or	r3,r3,r2
   /* Get fsinfo if available */
   if (fmt == FS_FAT32) {
      fs->fsi_flag = 0;
      fs->fsi_sector = bsect + LD_WORD(fs->win+BPB_FSInfo);
      if (disk_read(fs->drv, fs->win, fs->fsi_sector, 1) == RES_OK &&
         LD_WORD(fs->win+BS_55AA) == 0xAA55 &&
40083d28:	00905874 	movhi	r2,16737
40083d2c:	10949484 	addi	r2,r2,21074
40083d30:	18803d1e 	bne	r3,r2,40083e28 <chk_mounted+0x8e8>
         LD_DWORD(fs->win+FSI_LeadSig) == 0x41615252 &&
         LD_DWORD(fs->win+FSI_StrucSig) == 0x61417272) {
40083d34:	e0bff717 	ldw	r2,-36(fp)
40083d38:	108085c3 	ldbu	r2,535(r2)
40083d3c:	10803fcc 	andi	r2,r2,255
40083d40:	1006963a 	slli	r3,r2,24
40083d44:	e0bff717 	ldw	r2,-36(fp)
40083d48:	10808583 	ldbu	r2,534(r2)
40083d4c:	10803fcc 	andi	r2,r2,255
40083d50:	1004943a 	slli	r2,r2,16
40083d54:	1884b03a 	or	r2,r3,r2
40083d58:	e0fff717 	ldw	r3,-36(fp)
40083d5c:	18c08543 	ldbu	r3,533(r3)
40083d60:	18c03fcc 	andi	r3,r3,255
40083d64:	1806923a 	slli	r3,r3,8
40083d68:	10c6b03a 	or	r3,r2,r3
40083d6c:	e0bff717 	ldw	r2,-36(fp)
40083d70:	10808503 	ldbu	r2,532(r2)
40083d74:	10803fcc 	andi	r2,r2,255
40083d78:	1886b03a 	or	r3,r3,r2
   if (fmt == FS_FAT32) {
      fs->fsi_flag = 0;
      fs->fsi_sector = bsect + LD_WORD(fs->win+BPB_FSInfo);
      if (disk_read(fs->drv, fs->win, fs->fsi_sector, 1) == RES_OK &&
         LD_WORD(fs->win+BS_55AA) == 0xAA55 &&
         LD_DWORD(fs->win+FSI_LeadSig) == 0x41615252 &&
40083d7c:	00985074 	movhi	r2,24897
40083d80:	109c9c84 	addi	r2,r2,29298
40083d84:	1880281e 	bne	r3,r2,40083e28 <chk_mounted+0x8e8>
         LD_DWORD(fs->win+FSI_StrucSig) == 0x61417272) {
            fs->last_clust = LD_DWORD(fs->win+FSI_Nxt_Free);
40083d88:	e0bff717 	ldw	r2,-36(fp)
40083d8c:	108087c3 	ldbu	r2,543(r2)
40083d90:	10803fcc 	andi	r2,r2,255
40083d94:	1006963a 	slli	r3,r2,24
40083d98:	e0bff717 	ldw	r2,-36(fp)
40083d9c:	10808783 	ldbu	r2,542(r2)
40083da0:	10803fcc 	andi	r2,r2,255
40083da4:	1004943a 	slli	r2,r2,16
40083da8:	1884b03a 	or	r2,r3,r2
40083dac:	e0fff717 	ldw	r3,-36(fp)
40083db0:	18c08743 	ldbu	r3,541(r3)
40083db4:	18c03fcc 	andi	r3,r3,255
40083db8:	1806923a 	slli	r3,r3,8
40083dbc:	10c6b03a 	or	r3,r2,r3
40083dc0:	e0bff717 	ldw	r2,-36(fp)
40083dc4:	10808703 	ldbu	r2,540(r2)
40083dc8:	10803fcc 	andi	r2,r2,255
40083dcc:	1886b03a 	or	r3,r3,r2
40083dd0:	e0bff717 	ldw	r2,-36(fp)
40083dd4:	10c00315 	stw	r3,12(r2)
            fs->free_clust = LD_DWORD(fs->win+FSI_Free_Count);
40083dd8:	e0bff717 	ldw	r2,-36(fp)
40083ddc:	108086c3 	ldbu	r2,539(r2)
40083de0:	10803fcc 	andi	r2,r2,255
40083de4:	1006963a 	slli	r3,r2,24
40083de8:	e0bff717 	ldw	r2,-36(fp)
40083dec:	10808683 	ldbu	r2,538(r2)
40083df0:	10803fcc 	andi	r2,r2,255
40083df4:	1004943a 	slli	r2,r2,16
40083df8:	1884b03a 	or	r2,r3,r2
40083dfc:	e0fff717 	ldw	r3,-36(fp)
40083e00:	18c08643 	ldbu	r3,537(r3)
40083e04:	18c03fcc 	andi	r3,r3,255
40083e08:	1806923a 	slli	r3,r3,8
40083e0c:	10c6b03a 	or	r3,r2,r3
40083e10:	e0bff717 	ldw	r2,-36(fp)
40083e14:	10808603 	ldbu	r2,536(r2)
40083e18:	10803fcc 	andi	r2,r2,255
40083e1c:	1886b03a 	or	r3,r3,r2
40083e20:	e0bff717 	ldw	r2,-36(fp)
40083e24:	10c00415 	stw	r3,16(r2)
      }
   }
#endif
   fs->fs_type = fmt;      /* FAT sub-type */
40083e28:	e0bff717 	ldw	r2,-36(fp)
40083e2c:	e0fff003 	ldbu	r3,-64(fp)
40083e30:	10c00005 	stb	r3,0(r2)
   fs->id = ++Fsid;     /* File system mount ID */
40083e34:	d0a73a0b 	ldhu	r2,-25368(gp)
40083e38:	10800044 	addi	r2,r2,1
40083e3c:	d0a73a0d 	sth	r2,-25368(gp)
40083e40:	d0e73a0b 	ldhu	r3,-25368(gp)
40083e44:	e0bff717 	ldw	r2,-36(fp)
40083e48:	10c0018d 	sth	r3,6(r2)
   fs->winsect = 0;     /* Invalidate sector cache */
40083e4c:	e0bff717 	ldw	r2,-36(fp)
40083e50:	10000b15 	stw	zero,44(r2)
   fs->wflag = 0;
40083e54:	e0bff717 	ldw	r2,-36(fp)
40083e58:	10000105 	stb	zero,4(r2)
#endif
#if _FS_SHARE           /* Clear file lock semaphores */
   clear_lock(fs);
#endif

   return FR_OK;
40083e5c:	0005883a 	mov	r2,zero
}
40083e60:	e037883a 	mov	sp,fp
40083e64:	dfc00117 	ldw	ra,4(sp)
40083e68:	df000017 	ldw	fp,0(sp)
40083e6c:	dec00204 	addi	sp,sp,8
40083e70:	f800283a 	ret

40083e74 <validate>:
static
FRESULT validate (   /* FR_OK(0): The object is valid, !=0: Invalid */
   FATFS *fs,     /* Pointer to the file system object */
   uint16_t id        /* Member id of the target object to be checked */
)
{
40083e74:	defffc04 	addi	sp,sp,-16
40083e78:	dfc00315 	stw	ra,12(sp)
40083e7c:	df000215 	stw	fp,8(sp)
40083e80:	df000204 	addi	fp,sp,8
40083e84:	e13ffe15 	stw	r4,-8(fp)
40083e88:	2805883a 	mov	r2,r5
40083e8c:	e0bfff0d 	sth	r2,-4(fp)
   if (!fs || !fs->fs_type || fs->id != id)
40083e90:	e0bffe17 	ldw	r2,-8(fp)
40083e94:	10000926 	beq	r2,zero,40083ebc <validate+0x48>
40083e98:	e0bffe17 	ldw	r2,-8(fp)
40083e9c:	10800003 	ldbu	r2,0(r2)
40083ea0:	10803fcc 	andi	r2,r2,255
40083ea4:	10000526 	beq	r2,zero,40083ebc <validate+0x48>
40083ea8:	e0bffe17 	ldw	r2,-8(fp)
40083eac:	1080018b 	ldhu	r2,6(r2)
40083eb0:	10ffffcc 	andi	r3,r2,65535
40083eb4:	e0bfff0b 	ldhu	r2,-4(fp)
40083eb8:	18800226 	beq	r3,r2,40083ec4 <validate+0x50>
      return FR_INVALID_OBJECT;
40083ebc:	00800244 	movi	r2,9
40083ec0:	00000b06 	br	40083ef0 <validate+0x7c>

   ENTER_FF(fs);     /* Lock file system */

   if (disk_status(fs->drv) & STA_NOINIT)
40083ec4:	e0bffe17 	ldw	r2,-8(fp)
40083ec8:	10800043 	ldbu	r2,1(r2)
40083ecc:	10803fcc 	andi	r2,r2,255
40083ed0:	1009883a 	mov	r4,r2
40083ed4:	0080e440 	call	40080e44 <ffs_DiskIOStatus>
40083ed8:	10803fcc 	andi	r2,r2,255
40083edc:	1080004c 	andi	r2,r2,1
40083ee0:	10000226 	beq	r2,zero,40083eec <validate+0x78>
      return FR_NOT_READY;
40083ee4:	008000c4 	movi	r2,3
40083ee8:	00000106 	br	40083ef0 <validate+0x7c>

   return FR_OK;
40083eec:	0005883a 	mov	r2,zero
}
40083ef0:	e037883a 	mov	sp,fp
40083ef4:	dfc00117 	ldw	ra,4(sp)
40083ef8:	df000017 	ldw	fp,0(sp)
40083efc:	dec00204 	addi	sp,sp,8
40083f00:	f800283a 	ret

40083f04 <f_mount>:

FRESULT f_mount (
   uint8_t vol,      /* Logical drive number to be mounted/unmounted */
   FATFS *fs      /* Pointer to new file system object (NULL for unmount)*/
)
{
40083f04:	defffc04 	addi	sp,sp,-16
40083f08:	df000315 	stw	fp,12(sp)
40083f0c:	df000304 	addi	fp,sp,12
40083f10:	2005883a 	mov	r2,r4
40083f14:	e17fff15 	stw	r5,-4(fp)
40083f18:	e0bffe05 	stb	r2,-8(fp)
   FATFS *rfs;


   if (vol >= _VOLUMES)    /* Check if the drive number is valid */
40083f1c:	e0bffe03 	ldbu	r2,-8(fp)
40083f20:	10000226 	beq	r2,zero,40083f2c <f_mount+0x28>
      return FR_INVALID_DRIVE;
40083f24:	008002c4 	movi	r2,11
40083f28:	00001706 	br	40083f88 <f_mount+0x84>
   rfs = FatFs[vol];       /* Get current fs object */
40083f2c:	e0bffe03 	ldbu	r2,-8(fp)
40083f30:	1085883a 	add	r2,r2,r2
40083f34:	1087883a 	add	r3,r2,r2
40083f38:	d0a73904 	addi	r2,gp,-25372
40083f3c:	1885883a 	add	r2,r3,r2
40083f40:	10800017 	ldw	r2,0(r2)
40083f44:	e0bffd15 	stw	r2,-12(fp)

   if (rfs) {
40083f48:	e0bffd17 	ldw	r2,-12(fp)
40083f4c:	10000226 	beq	r2,zero,40083f58 <f_mount+0x54>
      clear_lock(rfs);
#endif
#if _FS_REENTRANT          /* Discard sync object of the current volume */
      if (!ff_del_syncobj(rfs->sobj)) return FR_INT_ERR;
#endif
      rfs->fs_type = 0;    /* Clear old fs object */
40083f50:	e0bffd17 	ldw	r2,-12(fp)
40083f54:	10000005 	stb	zero,0(r2)
   }

   if (fs) {
40083f58:	e0bfff17 	ldw	r2,-4(fp)
40083f5c:	10000226 	beq	r2,zero,40083f68 <f_mount+0x64>
      fs->fs_type = 0;     /* Clear new fs object */
40083f60:	e0bfff17 	ldw	r2,-4(fp)
40083f64:	10000005 	stb	zero,0(r2)
#if _FS_REENTRANT          /* Create sync object for the new volume */
      if (!ff_cre_syncobj(vol, &fs->sobj)) return FR_INT_ERR;
#endif
   }
   FatFs[vol] = fs;        /* Register new fs object */
40083f68:	e0bffe03 	ldbu	r2,-8(fp)
40083f6c:	1085883a 	add	r2,r2,r2
40083f70:	1087883a 	add	r3,r2,r2
40083f74:	d0a73904 	addi	r2,gp,-25372
40083f78:	1885883a 	add	r2,r3,r2
40083f7c:	e0ffff17 	ldw	r3,-4(fp)
40083f80:	10c00015 	stw	r3,0(r2)

   return FR_OK;
40083f84:	0005883a 	mov	r2,zero
}
40083f88:	e037883a 	mov	sp,fp
40083f8c:	df000017 	ldw	fp,0(sp)
40083f90:	dec00104 	addi	sp,sp,4
40083f94:	f800283a 	ret

40083f98 <f_open>:
FRESULT f_open (
   FIL *fp,       /* Pointer to the blank file object */
   const TCHAR *path,   /* Pointer to the file name */
   uint8_t mode         /* Access mode and file open mode flags */
)
{
40083f98:	deffed04 	addi	sp,sp,-76
40083f9c:	dfc01215 	stw	ra,72(sp)
40083fa0:	df001115 	stw	fp,68(sp)
40083fa4:	df001104 	addi	fp,sp,68
40083fa8:	e13ffd15 	stw	r4,-12(fp)
40083fac:	e17ffe15 	stw	r5,-8(fp)
40083fb0:	3005883a 	mov	r2,r6
40083fb4:	e0bfff05 	stb	r2,-4(fp)
   DIR dj;
   uint8_t *dir;
   DEF_NAMEBUF;


   fp->fs = 0;       /* Clear file object */
40083fb8:	e0bffd17 	ldw	r2,-12(fp)
40083fbc:	10000015 	stw	zero,0(r2)

#if !_FS_READONLY
   mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
40083fc0:	e0bfff03 	ldbu	r2,-4(fp)
40083fc4:	108007cc 	andi	r2,r2,31
40083fc8:	e0bfff05 	stb	r2,-4(fp)
   res = chk_mounted(&path, &dj.fs, (uint8_t)(mode & ~FA_READ));
40083fcc:	e0bfff03 	ldbu	r2,-4(fp)
40083fd0:	10803f8c 	andi	r2,r2,254
40083fd4:	e13ffe04 	addi	r4,fp,-8
40083fd8:	e0fff304 	addi	r3,fp,-52
40083fdc:	180b883a 	mov	r5,r3
40083fe0:	100d883a 	mov	r6,r2
40083fe4:	00835400 	call	40083540 <chk_mounted>
40083fe8:	e0bfef15 	stw	r2,-68(fp)
#else
   mode &= FA_READ;
   res = chk_mounted(&path, &dj.fs, 0);
#endif
   INIT_BUF(dj);
40083fec:	e0bffa04 	addi	r2,fp,-24
40083ff0:	e0bff915 	stw	r2,-28(fp)
   if (res == FR_OK)
40083ff4:	e0bfef17 	ldw	r2,-68(fp)
40083ff8:	1000061e 	bne	r2,zero,40084014 <f_open+0x7c>
      res = follow_path(&dj, path); /* Follow the file path */
40083ffc:	e0bffe17 	ldw	r2,-8(fp)
40084000:	e0fff304 	addi	r3,fp,-52
40084004:	1809883a 	mov	r4,r3
40084008:	100b883a 	mov	r5,r2
4008400c:	00831fc0 	call	400831fc <follow_path>
40084010:	e0bfef15 	stw	r2,-68(fp)
   dir = dj.dir;
40084014:	e0bff817 	ldw	r2,-32(fp)
40084018:	e0bff015 	stw	r2,-64(fp)

#if !_FS_READONLY /* R/W configuration */
   if (res == FR_OK) {
4008401c:	e0bfef17 	ldw	r2,-68(fp)
40084020:	1000041e 	bne	r2,zero,40084034 <f_open+0x9c>
      if (!dir)   /* Current dir itself */
40084024:	e0bff017 	ldw	r2,-64(fp)
40084028:	1000021e 	bne	r2,zero,40084034 <f_open+0x9c>
         res = FR_INVALID_NAME;
4008402c:	00800184 	movi	r2,6
40084030:	e0bfef15 	stw	r2,-68(fp)
      else
         res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
#endif
   }
   /* Create or Open a file */
   if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
40084034:	e0bfff03 	ldbu	r2,-4(fp)
40084038:	1080070c 	andi	r2,r2,28
4008403c:	10008826 	beq	r2,zero,40084260 <f_open+0x2c8>
      uint32_t dw, cl;

      if (res != FR_OK) {              /* No file, create new */
40084040:	e0bfef17 	ldw	r2,-68(fp)
40084044:	10000d26 	beq	r2,zero,4008407c <f_open+0xe4>
         if (res == FR_NO_FILE)        /* There is no file to open, create a new entry */
40084048:	e0bfef17 	ldw	r2,-68(fp)
4008404c:	10800118 	cmpnei	r2,r2,4
40084050:	1000041e 	bne	r2,zero,40084064 <f_open+0xcc>
#if _FS_SHARE
            res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
#else
            res = dir_register(&dj);
40084054:	e0bff304 	addi	r2,fp,-52
40084058:	1009883a 	mov	r4,r2
4008405c:	0082b280 	call	40082b28 <dir_register>
40084060:	e0bfef15 	stw	r2,-68(fp)
#endif
         mode |= FA_CREATE_ALWAYS;     /* File is created */
40084064:	e0bfff03 	ldbu	r2,-4(fp)
40084068:	10800214 	ori	r2,r2,8
4008406c:	e0bfff05 	stb	r2,-4(fp)
         dir = dj.dir;              /* New entry */
40084070:	e0bff817 	ldw	r2,-32(fp)
40084074:	e0bff015 	stw	r2,-64(fp)
40084078:	00000e06 	br	400840b4 <f_open+0x11c>
      }
      else {                        /* Any object is already existing */
         if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {  /* Cannot overwrite it (R/O or DIR) */
4008407c:	e0bff017 	ldw	r2,-64(fp)
40084080:	108002c4 	addi	r2,r2,11
40084084:	10800003 	ldbu	r2,0(r2)
40084088:	10803fcc 	andi	r2,r2,255
4008408c:	1080044c 	andi	r2,r2,17
40084090:	10000326 	beq	r2,zero,400840a0 <f_open+0x108>
            res = FR_DENIED;
40084094:	008001c4 	movi	r2,7
40084098:	e0bfef15 	stw	r2,-68(fp)
4008409c:	00000506 	br	400840b4 <f_open+0x11c>
         } else {
            if (mode & FA_CREATE_NEW)  /* Cannot create as new file */
400840a0:	e0bfff03 	ldbu	r2,-4(fp)
400840a4:	1080010c 	andi	r2,r2,4
400840a8:	10000226 	beq	r2,zero,400840b4 <f_open+0x11c>
               res = FR_EXIST;
400840ac:	00800204 	movi	r2,8
400840b0:	e0bfef15 	stw	r2,-68(fp)
         }
      }
      if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {   /* Truncate it if overwrite mode */
400840b4:	e0bfef17 	ldw	r2,-68(fp)
400840b8:	1000681e 	bne	r2,zero,4008425c <f_open+0x2c4>
400840bc:	e0bfff03 	ldbu	r2,-4(fp)
400840c0:	1080020c 	andi	r2,r2,8
400840c4:	10006526 	beq	r2,zero,4008425c <f_open+0x2c4>
         dw = get_fattime();              /* Created time */
400840c8:	008159c0 	call	4008159c <get_fattime>
400840cc:	e0bff115 	stw	r2,-60(fp)
         ST_DWORD(dir+DIR_CrtTime, dw);
400840d0:	e0bff017 	ldw	r2,-64(fp)
400840d4:	10800384 	addi	r2,r2,14
400840d8:	e0fff117 	ldw	r3,-60(fp)
400840dc:	10c00005 	stb	r3,0(r2)
400840e0:	e0bff017 	ldw	r2,-64(fp)
400840e4:	108003c4 	addi	r2,r2,15
400840e8:	e0fff117 	ldw	r3,-60(fp)
400840ec:	18ffffcc 	andi	r3,r3,65535
400840f0:	1806d23a 	srli	r3,r3,8
400840f4:	10c00005 	stb	r3,0(r2)
400840f8:	e0bff017 	ldw	r2,-64(fp)
400840fc:	10800404 	addi	r2,r2,16
40084100:	e0fff117 	ldw	r3,-60(fp)
40084104:	1806d43a 	srli	r3,r3,16
40084108:	10c00005 	stb	r3,0(r2)
4008410c:	e0bff017 	ldw	r2,-64(fp)
40084110:	10800444 	addi	r2,r2,17
40084114:	e0fff117 	ldw	r3,-60(fp)
40084118:	1806d63a 	srli	r3,r3,24
4008411c:	10c00005 	stb	r3,0(r2)
         dir[DIR_Attr] = 0;               /* Reset attribute */
40084120:	e0bff017 	ldw	r2,-64(fp)
40084124:	108002c4 	addi	r2,r2,11
40084128:	10000005 	stb	zero,0(r2)
         ST_DWORD(dir+DIR_FileSize, 0);      /* size = 0 */
4008412c:	e0bff017 	ldw	r2,-64(fp)
40084130:	10800704 	addi	r2,r2,28
40084134:	10000005 	stb	zero,0(r2)
40084138:	e0bff017 	ldw	r2,-64(fp)
4008413c:	10800744 	addi	r2,r2,29
40084140:	10000005 	stb	zero,0(r2)
40084144:	e0bff017 	ldw	r2,-64(fp)
40084148:	10800784 	addi	r2,r2,30
4008414c:	10000005 	stb	zero,0(r2)
40084150:	e0bff017 	ldw	r2,-64(fp)
40084154:	108007c4 	addi	r2,r2,31
40084158:	10000005 	stb	zero,0(r2)
         cl = LD_CLUST(dir);              /* Get start cluster */
4008415c:	e0bff017 	ldw	r2,-64(fp)
40084160:	10800544 	addi	r2,r2,21
40084164:	10800003 	ldbu	r2,0(r2)
40084168:	10803fcc 	andi	r2,r2,255
4008416c:	1004923a 	slli	r2,r2,8
40084170:	1007883a 	mov	r3,r2
40084174:	e0bff017 	ldw	r2,-64(fp)
40084178:	10800504 	addi	r2,r2,20
4008417c:	10800003 	ldbu	r2,0(r2)
40084180:	10803fcc 	andi	r2,r2,255
40084184:	1884b03a 	or	r2,r3,r2
40084188:	10bfffcc 	andi	r2,r2,65535
4008418c:	1006943a 	slli	r3,r2,16
40084190:	e0bff017 	ldw	r2,-64(fp)
40084194:	108006c4 	addi	r2,r2,27
40084198:	10800003 	ldbu	r2,0(r2)
4008419c:	10803fcc 	andi	r2,r2,255
400841a0:	1004923a 	slli	r2,r2,8
400841a4:	1009883a 	mov	r4,r2
400841a8:	e0bff017 	ldw	r2,-64(fp)
400841ac:	10800684 	addi	r2,r2,26
400841b0:	10800003 	ldbu	r2,0(r2)
400841b4:	10803fcc 	andi	r2,r2,255
400841b8:	2084b03a 	or	r2,r4,r2
400841bc:	10bfffcc 	andi	r2,r2,65535
400841c0:	1884b03a 	or	r2,r3,r2
400841c4:	e0bff215 	stw	r2,-56(fp)
         ST_CLUST(dir, 0);             /* cluster = 0 */
400841c8:	e0bff017 	ldw	r2,-64(fp)
400841cc:	10800684 	addi	r2,r2,26
400841d0:	10000005 	stb	zero,0(r2)
400841d4:	e0bff017 	ldw	r2,-64(fp)
400841d8:	108006c4 	addi	r2,r2,27
400841dc:	10000005 	stb	zero,0(r2)
400841e0:	e0bff017 	ldw	r2,-64(fp)
400841e4:	10800504 	addi	r2,r2,20
400841e8:	10000005 	stb	zero,0(r2)
400841ec:	e0bff017 	ldw	r2,-64(fp)
400841f0:	10800544 	addi	r2,r2,21
400841f4:	10000005 	stb	zero,0(r2)
         dj.fs->wflag = 1;
400841f8:	e0bff317 	ldw	r2,-52(fp)
400841fc:	00c00044 	movi	r3,1
40084200:	10c00105 	stb	r3,4(r2)
         if (cl) {                     /* Remove the cluster chain if exist */
40084204:	e0bff217 	ldw	r2,-56(fp)
40084208:	10001426 	beq	r2,zero,4008425c <f_open+0x2c4>
            dw = dj.fs->winsect;
4008420c:	e0bff317 	ldw	r2,-52(fp)
40084210:	10800b17 	ldw	r2,44(r2)
40084214:	e0bff115 	stw	r2,-60(fp)
            res = remove_chain(dj.fs, cl);
40084218:	e0bff317 	ldw	r2,-52(fp)
4008421c:	1009883a 	mov	r4,r2
40084220:	e17ff217 	ldw	r5,-56(fp)
40084224:	008216c0 	call	4008216c <remove_chain>
40084228:	e0bfef15 	stw	r2,-68(fp)
            if (res == FR_OK) {
4008422c:	e0bfef17 	ldw	r2,-68(fp)
40084230:	10000a1e 	bne	r2,zero,4008425c <f_open+0x2c4>
               dj.fs->last_clust = cl - 1;   /* Reuse the cluster hole */
40084234:	e0bff317 	ldw	r2,-52(fp)
40084238:	e0fff217 	ldw	r3,-56(fp)
4008423c:	18ffffc4 	addi	r3,r3,-1
40084240:	10c00315 	stw	r3,12(r2)
               res = move_window(dj.fs, dw);
40084244:	e0bff317 	ldw	r2,-52(fp)
40084248:	1009883a 	mov	r4,r2
4008424c:	e17ff117 	ldw	r5,-60(fp)
40084250:	00817940 	call	40081794 <move_window>
40084254:	e0bfef15 	stw	r2,-68(fp)
40084258:	00001706 	br	400842b8 <f_open+0x320>
4008425c:	00001606 	br	400842b8 <f_open+0x320>
            }
         }
      }
   }
   else {   /* Open an existing file */
      if (res == FR_OK) {                 /* Follow succeeded */
40084260:	e0bfef17 	ldw	r2,-68(fp)
40084264:	1000141e 	bne	r2,zero,400842b8 <f_open+0x320>
         if (dir[DIR_Attr] & AM_DIR) {    /* It is a directory */
40084268:	e0bff017 	ldw	r2,-64(fp)
4008426c:	108002c4 	addi	r2,r2,11
40084270:	10800003 	ldbu	r2,0(r2)
40084274:	10803fcc 	andi	r2,r2,255
40084278:	1080040c 	andi	r2,r2,16
4008427c:	10000326 	beq	r2,zero,4008428c <f_open+0x2f4>
            res = FR_NO_FILE;
40084280:	00800104 	movi	r2,4
40084284:	e0bfef15 	stw	r2,-68(fp)
40084288:	00000b06 	br	400842b8 <f_open+0x320>
         } else {
            if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
4008428c:	e0bfff03 	ldbu	r2,-4(fp)
40084290:	1080008c 	andi	r2,r2,2
40084294:	10000826 	beq	r2,zero,400842b8 <f_open+0x320>
40084298:	e0bff017 	ldw	r2,-64(fp)
4008429c:	108002c4 	addi	r2,r2,11
400842a0:	10800003 	ldbu	r2,0(r2)
400842a4:	10803fcc 	andi	r2,r2,255
400842a8:	1080004c 	andi	r2,r2,1
400842ac:	10000226 	beq	r2,zero,400842b8 <f_open+0x320>
               res = FR_DENIED;
400842b0:	008001c4 	movi	r2,7
400842b4:	e0bfef15 	stw	r2,-68(fp)
         }
      }
   }
   if (res == FR_OK) {
400842b8:	e0bfef17 	ldw	r2,-68(fp)
400842bc:	10000d1e 	bne	r2,zero,400842f4 <f_open+0x35c>
      if (mode & FA_CREATE_ALWAYS)        /* Set file change flag if created or overwritten */
400842c0:	e0bfff03 	ldbu	r2,-4(fp)
400842c4:	1080020c 	andi	r2,r2,8
400842c8:	10000326 	beq	r2,zero,400842d8 <f_open+0x340>
         mode |= FA__WRITTEN;
400842cc:	e0bfff03 	ldbu	r2,-4(fp)
400842d0:	10800814 	ori	r2,r2,32
400842d4:	e0bfff05 	stb	r2,-4(fp)
      fp->dir_sect = dj.fs->winsect;         /* Pointer to the directory entry */
400842d8:	e0bff317 	ldw	r2,-52(fp)
400842dc:	10c00b17 	ldw	r3,44(r2)
400842e0:	e0bffd17 	ldw	r2,-12(fp)
400842e4:	10c00715 	stw	r3,28(r2)
      fp->dir_ptr = dir;
400842e8:	e0bffd17 	ldw	r2,-12(fp)
400842ec:	e0fff017 	ldw	r3,-64(fp)
400842f0:	10c00815 	stw	r3,32(r2)
      }
   }
#endif
   FREE_BUF();

   if (res == FR_OK) {
400842f4:	e0bfef17 	ldw	r2,-68(fp)
400842f8:	1000421e 	bne	r2,zero,40084404 <f_open+0x46c>
      fp->flag = mode;              /* File access mode */
400842fc:	e0bffd17 	ldw	r2,-12(fp)
40084300:	e0ffff03 	ldbu	r3,-4(fp)
40084304:	10c00185 	stb	r3,6(r2)
      fp->sclust = LD_CLUST(dir);         /* File start cluster */
40084308:	e0bff017 	ldw	r2,-64(fp)
4008430c:	10800544 	addi	r2,r2,21
40084310:	10800003 	ldbu	r2,0(r2)
40084314:	10803fcc 	andi	r2,r2,255
40084318:	1004923a 	slli	r2,r2,8
4008431c:	1007883a 	mov	r3,r2
40084320:	e0bff017 	ldw	r2,-64(fp)
40084324:	10800504 	addi	r2,r2,20
40084328:	10800003 	ldbu	r2,0(r2)
4008432c:	10803fcc 	andi	r2,r2,255
40084330:	1884b03a 	or	r2,r3,r2
40084334:	10bfffcc 	andi	r2,r2,65535
40084338:	1006943a 	slli	r3,r2,16
4008433c:	e0bff017 	ldw	r2,-64(fp)
40084340:	108006c4 	addi	r2,r2,27
40084344:	10800003 	ldbu	r2,0(r2)
40084348:	10803fcc 	andi	r2,r2,255
4008434c:	1004923a 	slli	r2,r2,8
40084350:	1009883a 	mov	r4,r2
40084354:	e0bff017 	ldw	r2,-64(fp)
40084358:	10800684 	addi	r2,r2,26
4008435c:	10800003 	ldbu	r2,0(r2)
40084360:	10803fcc 	andi	r2,r2,255
40084364:	2084b03a 	or	r2,r4,r2
40084368:	10bfffcc 	andi	r2,r2,65535
4008436c:	1886b03a 	or	r3,r3,r2
40084370:	e0bffd17 	ldw	r2,-12(fp)
40084374:	10c00415 	stw	r3,16(r2)
      fp->fsize = LD_DWORD(dir+DIR_FileSize);   /* File size */
40084378:	e0bff017 	ldw	r2,-64(fp)
4008437c:	108007c4 	addi	r2,r2,31
40084380:	10800003 	ldbu	r2,0(r2)
40084384:	10803fcc 	andi	r2,r2,255
40084388:	1006963a 	slli	r3,r2,24
4008438c:	e0bff017 	ldw	r2,-64(fp)
40084390:	10800784 	addi	r2,r2,30
40084394:	10800003 	ldbu	r2,0(r2)
40084398:	10803fcc 	andi	r2,r2,255
4008439c:	1004943a 	slli	r2,r2,16
400843a0:	1884b03a 	or	r2,r3,r2
400843a4:	e0fff017 	ldw	r3,-64(fp)
400843a8:	18c00744 	addi	r3,r3,29
400843ac:	18c00003 	ldbu	r3,0(r3)
400843b0:	18c03fcc 	andi	r3,r3,255
400843b4:	1806923a 	slli	r3,r3,8
400843b8:	10c6b03a 	or	r3,r2,r3
400843bc:	e0bff017 	ldw	r2,-64(fp)
400843c0:	10800704 	addi	r2,r2,28
400843c4:	10800003 	ldbu	r2,0(r2)
400843c8:	10803fcc 	andi	r2,r2,255
400843cc:	1886b03a 	or	r3,r3,r2
400843d0:	e0bffd17 	ldw	r2,-12(fp)
400843d4:	10c00315 	stw	r3,12(r2)
      fp->fptr = 0;                 /* File pointer */
400843d8:	e0bffd17 	ldw	r2,-12(fp)
400843dc:	10000215 	stw	zero,8(r2)
      fp->dsect = 0;
400843e0:	e0bffd17 	ldw	r2,-12(fp)
400843e4:	10000615 	stw	zero,24(r2)
#if _USE_FASTSEEK
      fp->cltbl = 0;                /* Normal seek mode */
#endif
      fp->fs = dj.fs; fp->id = dj.fs->id; /* Validate file object */
400843e8:	e0fff317 	ldw	r3,-52(fp)
400843ec:	e0bffd17 	ldw	r2,-12(fp)
400843f0:	10c00015 	stw	r3,0(r2)
400843f4:	e0bff317 	ldw	r2,-52(fp)
400843f8:	10c0018b 	ldhu	r3,6(r2)
400843fc:	e0bffd17 	ldw	r2,-12(fp)
40084400:	10c0010d 	sth	r3,4(r2)
   }

   LEAVE_FF(dj.fs, res);
40084404:	e0bfef17 	ldw	r2,-68(fp)
}
40084408:	e037883a 	mov	sp,fp
4008440c:	dfc00117 	ldw	ra,4(sp)
40084410:	df000017 	ldw	fp,0(sp)
40084414:	dec00204 	addi	sp,sp,8
40084418:	f800283a 	ret

4008441c <f_read>:
   FIL *fp,       /* Pointer to the file object */
   void *buff,    /* Pointer to data buffer */
   uint32_t btr,      /* Number of bytes to read */
   uint32_t *br    /* Pointer to number of bytes read */
)
{
4008441c:	defff204 	addi	sp,sp,-56
40084420:	dfc00d15 	stw	ra,52(sp)
40084424:	df000c15 	stw	fp,48(sp)
40084428:	df000c04 	addi	fp,sp,48
4008442c:	e13ffc15 	stw	r4,-16(fp)
40084430:	e17ffd15 	stw	r5,-12(fp)
40084434:	e1bffe15 	stw	r6,-8(fp)
40084438:	e1ffff15 	stw	r7,-4(fp)
   FRESULT res;
   uint32_t clst, sect, remain;
   uint32_t rcnt, cc;
   uint8_t csect, *rbuff = buff;
4008443c:	e0bffd17 	ldw	r2,-12(fp)
40084440:	e0bff715 	stw	r2,-36(fp)


   *br = 0; /* Initialize byte counter */
40084444:	e0bfff17 	ldw	r2,-4(fp)
40084448:	10000015 	stw	zero,0(r2)

   res = validate(fp->fs, fp->id);           /* Check validity */
4008444c:	e0bffc17 	ldw	r2,-16(fp)
40084450:	10c00017 	ldw	r3,0(r2)
40084454:	e0bffc17 	ldw	r2,-16(fp)
40084458:	1080010b 	ldhu	r2,4(r2)
4008445c:	10bfffcc 	andi	r2,r2,65535
40084460:	1809883a 	mov	r4,r3
40084464:	100b883a 	mov	r5,r2
40084468:	0083e740 	call	40083e74 <validate>
4008446c:	e0bff815 	stw	r2,-32(fp)
   if (res != FR_OK) LEAVE_FF(fp->fs, res);
40084470:	e0bff817 	ldw	r2,-32(fp)
40084474:	10000226 	beq	r2,zero,40084480 <f_read+0x64>
40084478:	e0bff817 	ldw	r2,-32(fp)
4008447c:	00011b06 	br	400848ec <f_read+0x4d0>
   if (fp->flag & FA__ERROR)              /* Aborted file? */
40084480:	e0bffc17 	ldw	r2,-16(fp)
40084484:	10800183 	ldbu	r2,6(r2)
40084488:	10803fcc 	andi	r2,r2,255
4008448c:	1080201c 	xori	r2,r2,128
40084490:	10bfe004 	addi	r2,r2,-128
40084494:	1000020e 	bge	r2,zero,400844a0 <f_read+0x84>
      LEAVE_FF(fp->fs, FR_INT_ERR);
40084498:	00800084 	movi	r2,2
4008449c:	00011306 	br	400848ec <f_read+0x4d0>
   if (!(fp->flag & FA_READ))                /* Check access mode */
400844a0:	e0bffc17 	ldw	r2,-16(fp)
400844a4:	10800183 	ldbu	r2,6(r2)
400844a8:	10803fcc 	andi	r2,r2,255
400844ac:	1080004c 	andi	r2,r2,1
400844b0:	1000021e 	bne	r2,zero,400844bc <f_read+0xa0>
      LEAVE_FF(fp->fs, FR_DENIED);
400844b4:	008001c4 	movi	r2,7
400844b8:	00010c06 	br	400848ec <f_read+0x4d0>
   remain = fp->fsize - fp->fptr;
400844bc:	e0bffc17 	ldw	r2,-16(fp)
400844c0:	10c00317 	ldw	r3,12(r2)
400844c4:	e0bffc17 	ldw	r2,-16(fp)
400844c8:	10800217 	ldw	r2,8(r2)
400844cc:	1885c83a 	sub	r2,r3,r2
400844d0:	e0bff915 	stw	r2,-28(fp)
   if (btr > remain) btr = (uint32_t)remain;     /* Truncate btr by remaining bytes */
400844d4:	e0bffe17 	ldw	r2,-8(fp)
400844d8:	e0fff917 	ldw	r3,-28(fp)
400844dc:	1880022e 	bgeu	r3,r2,400844e8 <f_read+0xcc>
400844e0:	e0bff917 	ldw	r2,-28(fp)
400844e4:	e0bffe15 	stw	r2,-8(fp)

   for ( ;  btr;                       /* Repeat until all data read */
400844e8:	0000fd06 	br	400848e0 <f_read+0x4c4>
      rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
      if ((fp->fptr % SS(fp->fs)) == 0) {    /* On the sector boundary? */
400844ec:	e0bffc17 	ldw	r2,-16(fp)
400844f0:	10800217 	ldw	r2,8(r2)
400844f4:	10807fcc 	andi	r2,r2,511
400844f8:	1000d01e 	bne	r2,zero,4008483c <f_read+0x420>
         csect = (uint8_t)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));   /* Sector offset in the cluster */
400844fc:	e0bffc17 	ldw	r2,-16(fp)
40084500:	10800217 	ldw	r2,8(r2)
40084504:	1004d27a 	srli	r2,r2,9
40084508:	1007883a 	mov	r3,r2
4008450c:	e0bffc17 	ldw	r2,-16(fp)
40084510:	10800017 	ldw	r2,0(r2)
40084514:	10800083 	ldbu	r2,2(r2)
40084518:	10bfffc4 	addi	r2,r2,-1
4008451c:	1884703a 	and	r2,r3,r2
40084520:	e0bffa05 	stb	r2,-24(fp)
         if (!csect) {                 /* On the cluster boundary? */
40084524:	e0bffa03 	ldbu	r2,-24(fp)
40084528:	10002a1e 	bne	r2,zero,400845d4 <f_read+0x1b8>
            if (fp->fptr == 0) {       /* On the top of the file? */
4008452c:	e0bffc17 	ldw	r2,-16(fp)
40084530:	10800217 	ldw	r2,8(r2)
40084534:	1000041e 	bne	r2,zero,40084548 <f_read+0x12c>
               clst = fp->sclust;         /* Follow from the origin */
40084538:	e0bffc17 	ldw	r2,-16(fp)
4008453c:	10800417 	ldw	r2,16(r2)
40084540:	e0bff415 	stw	r2,-48(fp)
40084544:	00000806 	br	40084568 <f_read+0x14c>
#if _USE_FASTSEEK
               if (fp->cltbl)
                  clst = clmt_clust(fp, fp->fptr); /* Get cluster# from the CLMT */
               else
#endif
                  clst = get_fat(fp->fs, fp->clust);  /* Follow cluster chain on the FAT */
40084548:	e0bffc17 	ldw	r2,-16(fp)
4008454c:	10c00017 	ldw	r3,0(r2)
40084550:	e0bffc17 	ldw	r2,-16(fp)
40084554:	10800517 	ldw	r2,20(r2)
40084558:	1809883a 	mov	r4,r3
4008455c:	100b883a 	mov	r5,r2
40084560:	0081b780 	call	40081b78 <get_fat>
40084564:	e0bff415 	stw	r2,-48(fp)
            }
            if (clst < 2) ABORT(fp->fs, FR_INT_ERR);
40084568:	e0bff417 	ldw	r2,-48(fp)
4008456c:	108000a8 	cmpgeui	r2,r2,2
40084570:	1000091e 	bne	r2,zero,40084598 <f_read+0x17c>
40084574:	e0bffc17 	ldw	r2,-16(fp)
40084578:	10c00183 	ldbu	r3,6(r2)
4008457c:	00bfe004 	movi	r2,-128
40084580:	1884b03a 	or	r2,r3,r2
40084584:	1007883a 	mov	r3,r2
40084588:	e0bffc17 	ldw	r2,-16(fp)
4008458c:	10c00185 	stb	r3,6(r2)
40084590:	00800084 	movi	r2,2
40084594:	0000d506 	br	400848ec <f_read+0x4d0>
            if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
40084598:	e0bff417 	ldw	r2,-48(fp)
4008459c:	10bfffd8 	cmpnei	r2,r2,-1
400845a0:	1000091e 	bne	r2,zero,400845c8 <f_read+0x1ac>
400845a4:	e0bffc17 	ldw	r2,-16(fp)
400845a8:	10c00183 	ldbu	r3,6(r2)
400845ac:	00bfe004 	movi	r2,-128
400845b0:	1884b03a 	or	r2,r3,r2
400845b4:	1007883a 	mov	r3,r2
400845b8:	e0bffc17 	ldw	r2,-16(fp)
400845bc:	10c00185 	stb	r3,6(r2)
400845c0:	00800044 	movi	r2,1
400845c4:	0000c906 	br	400848ec <f_read+0x4d0>
            fp->clust = clst;          /* Update current cluster */
400845c8:	e0bffc17 	ldw	r2,-16(fp)
400845cc:	e0fff417 	ldw	r3,-48(fp)
400845d0:	10c00515 	stw	r3,20(r2)
         }
         sect = clust2sect(fp->fs, fp->clust);  /* Get current sector */
400845d4:	e0bffc17 	ldw	r2,-16(fp)
400845d8:	10c00017 	ldw	r3,0(r2)
400845dc:	e0bffc17 	ldw	r2,-16(fp)
400845e0:	10800517 	ldw	r2,20(r2)
400845e4:	1809883a 	mov	r4,r3
400845e8:	100b883a 	mov	r5,r2
400845ec:	0081b0c0 	call	40081b0c <clust2sect>
400845f0:	e0bffb15 	stw	r2,-20(fp)
         if (!sect) ABORT(fp->fs, FR_INT_ERR);
400845f4:	e0bffb17 	ldw	r2,-20(fp)
400845f8:	1000091e 	bne	r2,zero,40084620 <f_read+0x204>
400845fc:	e0bffc17 	ldw	r2,-16(fp)
40084600:	10c00183 	ldbu	r3,6(r2)
40084604:	00bfe004 	movi	r2,-128
40084608:	1884b03a 	or	r2,r3,r2
4008460c:	1007883a 	mov	r3,r2
40084610:	e0bffc17 	ldw	r2,-16(fp)
40084614:	10c00185 	stb	r3,6(r2)
40084618:	00800084 	movi	r2,2
4008461c:	0000b306 	br	400848ec <f_read+0x4d0>
         sect += csect;
40084620:	e0bffa03 	ldbu	r2,-24(fp)
40084624:	e0fffb17 	ldw	r3,-20(fp)
40084628:	1885883a 	add	r2,r3,r2
4008462c:	e0bffb15 	stw	r2,-20(fp)
         cc = btr / SS(fp->fs);           /* When remaining bytes >= sector size, */
40084630:	e0bffe17 	ldw	r2,-8(fp)
40084634:	1004d27a 	srli	r2,r2,9
40084638:	e0bff615 	stw	r2,-40(fp)
         if (cc) {                     /* Read maximum contiguous sectors directly */
4008463c:	e0bff617 	ldw	r2,-40(fp)
40084640:	10004026 	beq	r2,zero,40084744 <f_read+0x328>
            if (csect + cc > fp->fs->csize)  /* Clip at cluster boundary */
40084644:	e0fffa03 	ldbu	r3,-24(fp)
40084648:	e0bff617 	ldw	r2,-40(fp)
4008464c:	1885883a 	add	r2,r3,r2
40084650:	e0fffc17 	ldw	r3,-16(fp)
40084654:	18c00017 	ldw	r3,0(r3)
40084658:	18c00083 	ldbu	r3,2(r3)
4008465c:	18c03fcc 	andi	r3,r3,255
40084660:	1880072e 	bgeu	r3,r2,40084680 <f_read+0x264>
               cc = fp->fs->csize - csect;
40084664:	e0bffc17 	ldw	r2,-16(fp)
40084668:	10800017 	ldw	r2,0(r2)
4008466c:	10800083 	ldbu	r2,2(r2)
40084670:	10c03fcc 	andi	r3,r2,255
40084674:	e0bffa03 	ldbu	r2,-24(fp)
40084678:	1885c83a 	sub	r2,r3,r2
4008467c:	e0bff615 	stw	r2,-40(fp)
            if (disk_read(fp->fs->drv, rbuff, sect, (uint8_t)cc) != RES_OK)
40084680:	e0bffc17 	ldw	r2,-16(fp)
40084684:	10800017 	ldw	r2,0(r2)
40084688:	10800043 	ldbu	r2,1(r2)
4008468c:	10c03fcc 	andi	r3,r2,255
40084690:	e0bff617 	ldw	r2,-40(fp)
40084694:	10803fcc 	andi	r2,r2,255
40084698:	1809883a 	mov	r4,r3
4008469c:	e17ff717 	ldw	r5,-36(fp)
400846a0:	e1bffb17 	ldw	r6,-20(fp)
400846a4:	100f883a 	mov	r7,r2
400846a8:	0080e6c0 	call	40080e6c <ffs_DiskIORead>
400846ac:	10000926 	beq	r2,zero,400846d4 <f_read+0x2b8>
               ABORT(fp->fs, FR_DISK_ERR);
400846b0:	e0bffc17 	ldw	r2,-16(fp)
400846b4:	10c00183 	ldbu	r3,6(r2)
400846b8:	00bfe004 	movi	r2,-128
400846bc:	1884b03a 	or	r2,r3,r2
400846c0:	1007883a 	mov	r3,r2
400846c4:	e0bffc17 	ldw	r2,-16(fp)
400846c8:	10c00185 	stb	r3,6(r2)
400846cc:	00800044 	movi	r2,1
400846d0:	00008606 	br	400848ec <f_read+0x4d0>
#if !_FS_READONLY && _FS_MINIMIZE <= 2       /* Replace one of the read sectors with cached data if it contains a dirty sector */
#if _FS_TINY
            if (fp->fs->wflag && fp->fs->winsect - sect < cc)
               mem_cpy(rbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), fp->fs->win, SS(fp->fs));
#else
            if ((fp->flag & FA__DIRTY) && fp->dsect - sect < cc)
400846d4:	e0bffc17 	ldw	r2,-16(fp)
400846d8:	10800183 	ldbu	r2,6(r2)
400846dc:	10803fcc 	andi	r2,r2,255
400846e0:	1080100c 	andi	r2,r2,64
400846e4:	10001326 	beq	r2,zero,40084734 <f_read+0x318>
400846e8:	e0bffc17 	ldw	r2,-16(fp)
400846ec:	10c00617 	ldw	r3,24(r2)
400846f0:	e0bffb17 	ldw	r2,-20(fp)
400846f4:	1887c83a 	sub	r3,r3,r2
400846f8:	e0bff617 	ldw	r2,-40(fp)
400846fc:	18800d2e 	bgeu	r3,r2,40084734 <f_read+0x318>
               mem_cpy(rbuff + ((fp->dsect - sect) * SS(fp->fs)), fp->buf, SS(fp->fs));
40084700:	e0bffc17 	ldw	r2,-16(fp)
40084704:	10c00617 	ldw	r3,24(r2)
40084708:	e0bffb17 	ldw	r2,-20(fp)
4008470c:	1885c83a 	sub	r2,r3,r2
40084710:	1004927a 	slli	r2,r2,9
40084714:	e0fff717 	ldw	r3,-36(fp)
40084718:	1887883a 	add	r3,r3,r2
4008471c:	e0bffc17 	ldw	r2,-16(fp)
40084720:	10800904 	addi	r2,r2,36
40084724:	1809883a 	mov	r4,r3
40084728:	100b883a 	mov	r5,r2
4008472c:	01808004 	movi	r6,512
40084730:	00815c80 	call	400815c8 <mem_cpy>
#endif
#endif
            rcnt = SS(fp->fs) * cc;       /* Number of bytes transferred */
40084734:	e0bff617 	ldw	r2,-40(fp)
40084738:	1004927a 	slli	r2,r2,9
4008473c:	e0bff515 	stw	r2,-44(fp)
            continue;
40084740:	00005306 	br	40084890 <f_read+0x474>
         }
#if !_FS_TINY
         if (fp->dsect != sect) {         /* Load data sector if not in cache */
40084744:	e0bffc17 	ldw	r2,-16(fp)
40084748:	10c00617 	ldw	r3,24(r2)
4008474c:	e0bffb17 	ldw	r2,-20(fp)
40084750:	18803726 	beq	r3,r2,40084830 <f_read+0x414>
#if !_FS_READONLY
            if (fp->flag & FA__DIRTY) {      /* Write-back dirty sector cache */
40084754:	e0bffc17 	ldw	r2,-16(fp)
40084758:	10800183 	ldbu	r2,6(r2)
4008475c:	10803fcc 	andi	r2,r2,255
40084760:	1080100c 	andi	r2,r2,64
40084764:	10001d26 	beq	r2,zero,400847dc <f_read+0x3c0>
               if (disk_write(fp->fs->drv, fp->buf, fp->dsect, 1) != RES_OK)
40084768:	e0bffc17 	ldw	r2,-16(fp)
4008476c:	10800017 	ldw	r2,0(r2)
40084770:	10800043 	ldbu	r2,1(r2)
40084774:	11003fcc 	andi	r4,r2,255
40084778:	e0bffc17 	ldw	r2,-16(fp)
4008477c:	10c00904 	addi	r3,r2,36
40084780:	e0bffc17 	ldw	r2,-16(fp)
40084784:	10800617 	ldw	r2,24(r2)
40084788:	180b883a 	mov	r5,r3
4008478c:	100d883a 	mov	r6,r2
40084790:	01c00044 	movi	r7,1
40084794:	0080f880 	call	40080f88 <ffs_DiskIOWrite>
40084798:	10000926 	beq	r2,zero,400847c0 <f_read+0x3a4>
                  ABORT(fp->fs, FR_DISK_ERR);
4008479c:	e0bffc17 	ldw	r2,-16(fp)
400847a0:	10c00183 	ldbu	r3,6(r2)
400847a4:	00bfe004 	movi	r2,-128
400847a8:	1884b03a 	or	r2,r3,r2
400847ac:	1007883a 	mov	r3,r2
400847b0:	e0bffc17 	ldw	r2,-16(fp)
400847b4:	10c00185 	stb	r3,6(r2)
400847b8:	00800044 	movi	r2,1
400847bc:	00004b06 	br	400848ec <f_read+0x4d0>
               fp->flag &= ~FA__DIRTY;
400847c0:	e0bffc17 	ldw	r2,-16(fp)
400847c4:	10c00183 	ldbu	r3,6(r2)
400847c8:	00bfefc4 	movi	r2,-65
400847cc:	1884703a 	and	r2,r3,r2
400847d0:	1007883a 	mov	r3,r2
400847d4:	e0bffc17 	ldw	r2,-16(fp)
400847d8:	10c00185 	stb	r3,6(r2)
            }
#endif
            if (disk_read(fp->fs->drv, fp->buf, sect, 1) != RES_OK)  /* Fill sector cache */
400847dc:	e0bffc17 	ldw	r2,-16(fp)
400847e0:	10800017 	ldw	r2,0(r2)
400847e4:	10800043 	ldbu	r2,1(r2)
400847e8:	10c03fcc 	andi	r3,r2,255
400847ec:	e0bffc17 	ldw	r2,-16(fp)
400847f0:	10800904 	addi	r2,r2,36
400847f4:	1809883a 	mov	r4,r3
400847f8:	100b883a 	mov	r5,r2
400847fc:	e1bffb17 	ldw	r6,-20(fp)
40084800:	01c00044 	movi	r7,1
40084804:	0080e6c0 	call	40080e6c <ffs_DiskIORead>
40084808:	10000926 	beq	r2,zero,40084830 <f_read+0x414>
               ABORT(fp->fs, FR_DISK_ERR);
4008480c:	e0bffc17 	ldw	r2,-16(fp)
40084810:	10c00183 	ldbu	r3,6(r2)
40084814:	00bfe004 	movi	r2,-128
40084818:	1884b03a 	or	r2,r3,r2
4008481c:	1007883a 	mov	r3,r2
40084820:	e0bffc17 	ldw	r2,-16(fp)
40084824:	10c00185 	stb	r3,6(r2)
40084828:	00800044 	movi	r2,1
4008482c:	00002f06 	br	400848ec <f_read+0x4d0>
         }
#endif
         fp->dsect = sect;
40084830:	e0bffc17 	ldw	r2,-16(fp)
40084834:	e0fffb17 	ldw	r3,-20(fp)
40084838:	10c00615 	stw	r3,24(r2)
      }
      rcnt = SS(fp->fs) - (fp->fptr % SS(fp->fs)); /* Get partial sector data from sector buffer */
4008483c:	e0bffc17 	ldw	r2,-16(fp)
40084840:	10800217 	ldw	r2,8(r2)
40084844:	10807fcc 	andi	r2,r2,511
40084848:	00c08004 	movi	r3,512
4008484c:	1885c83a 	sub	r2,r3,r2
40084850:	e0bff515 	stw	r2,-44(fp)
      if (rcnt > btr) rcnt = btr;
40084854:	e0bff517 	ldw	r2,-44(fp)
40084858:	e0fffe17 	ldw	r3,-8(fp)
4008485c:	1880022e 	bgeu	r3,r2,40084868 <f_read+0x44c>
40084860:	e0bffe17 	ldw	r2,-8(fp)
40084864:	e0bff515 	stw	r2,-44(fp)
#if _FS_TINY
      if (move_window(fp->fs, fp->dsect))    /* Move sector window */
         ABORT(fp->fs, FR_DISK_ERR);
      mem_cpy(rbuff, &fp->fs->win[fp->fptr % SS(fp->fs)], rcnt);  /* Pick partial sector */
#else
      mem_cpy(rbuff, &fp->buf[fp->fptr % SS(fp->fs)], rcnt);   /* Pick partial sector */
40084868:	e0bffc17 	ldw	r2,-16(fp)
4008486c:	10800217 	ldw	r2,8(r2)
40084870:	10807fcc 	andi	r2,r2,511
40084874:	10800904 	addi	r2,r2,36
40084878:	e0fffc17 	ldw	r3,-16(fp)
4008487c:	1885883a 	add	r2,r3,r2
40084880:	e13ff717 	ldw	r4,-36(fp)
40084884:	100b883a 	mov	r5,r2
40084888:	e1bff517 	ldw	r6,-44(fp)
4008488c:	00815c80 	call	400815c8 <mem_cpy>
      LEAVE_FF(fp->fs, FR_DENIED);
   remain = fp->fsize - fp->fptr;
   if (btr > remain) btr = (uint32_t)remain;     /* Truncate btr by remaining bytes */

   for ( ;  btr;                       /* Repeat until all data read */
      rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
40084890:	e0fff717 	ldw	r3,-36(fp)
40084894:	e0bff517 	ldw	r2,-44(fp)
40084898:	1885883a 	add	r2,r3,r2
4008489c:	e0bff715 	stw	r2,-36(fp)
400848a0:	e0bffc17 	ldw	r2,-16(fp)
400848a4:	10c00217 	ldw	r3,8(r2)
400848a8:	e0bff517 	ldw	r2,-44(fp)
400848ac:	1887883a 	add	r3,r3,r2
400848b0:	e0bffc17 	ldw	r2,-16(fp)
400848b4:	10c00215 	stw	r3,8(r2)
400848b8:	e0bfff17 	ldw	r2,-4(fp)
400848bc:	10c00017 	ldw	r3,0(r2)
400848c0:	e0bff517 	ldw	r2,-44(fp)
400848c4:	1887883a 	add	r3,r3,r2
400848c8:	e0bfff17 	ldw	r2,-4(fp)
400848cc:	10c00015 	stw	r3,0(r2)
400848d0:	e0fffe17 	ldw	r3,-8(fp)
400848d4:	e0bff517 	ldw	r2,-44(fp)
400848d8:	1885c83a 	sub	r2,r3,r2
400848dc:	e0bffe15 	stw	r2,-8(fp)
   if (!(fp->flag & FA_READ))                /* Check access mode */
      LEAVE_FF(fp->fs, FR_DENIED);
   remain = fp->fsize - fp->fptr;
   if (btr > remain) btr = (uint32_t)remain;     /* Truncate btr by remaining bytes */

   for ( ;  btr;                       /* Repeat until all data read */
400848e0:	e0bffe17 	ldw	r2,-8(fp)
400848e4:	103f011e 	bne	r2,zero,400844ec <__alt_mem_epcs+0xfff434ec>
#else
      mem_cpy(rbuff, &fp->buf[fp->fptr % SS(fp->fs)], rcnt);   /* Pick partial sector */
#endif
   }

   LEAVE_FF(fp->fs, FR_OK);
400848e8:	0005883a 	mov	r2,zero
}
400848ec:	e037883a 	mov	sp,fp
400848f0:	dfc00117 	ldw	ra,4(sp)
400848f4:	df000017 	ldw	fp,0(sp)
400848f8:	dec00204 	addi	sp,sp,8
400848fc:	f800283a 	ret

40084900 <f_write>:
   FIL *fp,       /* Pointer to the file object */
   const void *buff, /* Pointer to the data to be written */
   uint32_t btw,         /* Number of bytes to write */
   uint32_t *bw       /* Pointer to number of bytes written */
)
{
40084900:	defff304 	addi	sp,sp,-52
40084904:	dfc00c15 	stw	ra,48(sp)
40084908:	df000b15 	stw	fp,44(sp)
4008490c:	df000b04 	addi	fp,sp,44
40084910:	e13ffc15 	stw	r4,-16(fp)
40084914:	e17ffd15 	stw	r5,-12(fp)
40084918:	e1bffe15 	stw	r6,-8(fp)
4008491c:	e1ffff15 	stw	r7,-4(fp)
   FRESULT res;
   uint32_t clst, sect;
   uint32_t wcnt, cc;
   const uint8_t *wbuff = buff;
40084920:	e0bffd17 	ldw	r2,-12(fp)
40084924:	e0bff815 	stw	r2,-32(fp)
   uint8_t csect;


   *bw = 0; /* Initialize byte counter */
40084928:	e0bfff17 	ldw	r2,-4(fp)
4008492c:	10000015 	stw	zero,0(r2)

   res = validate(fp->fs, fp->id);        /* Check validity */
40084930:	e0bffc17 	ldw	r2,-16(fp)
40084934:	10c00017 	ldw	r3,0(r2)
40084938:	e0bffc17 	ldw	r2,-16(fp)
4008493c:	1080010b 	ldhu	r2,4(r2)
40084940:	10bfffcc 	andi	r2,r2,65535
40084944:	1809883a 	mov	r4,r3
40084948:	100b883a 	mov	r5,r2
4008494c:	0083e740 	call	40083e74 <validate>
40084950:	e0bff915 	stw	r2,-28(fp)
   if (res != FR_OK) LEAVE_FF(fp->fs, res);
40084954:	e0bff917 	ldw	r2,-28(fp)
40084958:	10000226 	beq	r2,zero,40084964 <f_write+0x64>
4008495c:	e0bff917 	ldw	r2,-28(fp)
40084960:	00014106 	br	40084e68 <f_write+0x568>
   if (fp->flag & FA__ERROR)           /* Aborted file? */
40084964:	e0bffc17 	ldw	r2,-16(fp)
40084968:	10800183 	ldbu	r2,6(r2)
4008496c:	10803fcc 	andi	r2,r2,255
40084970:	1080201c 	xori	r2,r2,128
40084974:	10bfe004 	addi	r2,r2,-128
40084978:	1000020e 	bge	r2,zero,40084984 <f_write+0x84>
      LEAVE_FF(fp->fs, FR_INT_ERR);
4008497c:	00800084 	movi	r2,2
40084980:	00013906 	br	40084e68 <f_write+0x568>
   if (!(fp->flag & FA_WRITE))            /* Check access mode */
40084984:	e0bffc17 	ldw	r2,-16(fp)
40084988:	10800183 	ldbu	r2,6(r2)
4008498c:	10803fcc 	andi	r2,r2,255
40084990:	1080008c 	andi	r2,r2,2
40084994:	1000021e 	bne	r2,zero,400849a0 <f_write+0xa0>
      LEAVE_FF(fp->fs, FR_DENIED);
40084998:	008001c4 	movi	r2,7
4008499c:	00013206 	br	40084e68 <f_write+0x568>
   if ((uint32_t)(fp->fsize + btw) < fp->fsize) btw = 0; /* File size cannot reach 4GB */
400849a0:	e0bffc17 	ldw	r2,-16(fp)
400849a4:	10c00317 	ldw	r3,12(r2)
400849a8:	e0bffe17 	ldw	r2,-8(fp)
400849ac:	1887883a 	add	r3,r3,r2
400849b0:	e0bffc17 	ldw	r2,-16(fp)
400849b4:	10800317 	ldw	r2,12(r2)
400849b8:	1880012e 	bgeu	r3,r2,400849c0 <f_write+0xc0>
400849bc:	e03ffe15 	stw	zero,-8(fp)

   for ( ;  btw;                    /* Repeat until all data written */
400849c0:	00011706 	br	40084e20 <f_write+0x520>
      wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
      if ((fp->fptr % SS(fp->fs)) == 0) { /* On the sector boundary? */
400849c4:	e0bffc17 	ldw	r2,-16(fp)
400849c8:	10800217 	ldw	r2,8(r2)
400849cc:	10807fcc 	andi	r2,r2,511
400849d0:	1000e41e 	bne	r2,zero,40084d64 <f_write+0x464>
         csect = (uint8_t)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));   /* Sector offset in the cluster */
400849d4:	e0bffc17 	ldw	r2,-16(fp)
400849d8:	10800217 	ldw	r2,8(r2)
400849dc:	1004d27a 	srli	r2,r2,9
400849e0:	1007883a 	mov	r3,r2
400849e4:	e0bffc17 	ldw	r2,-16(fp)
400849e8:	10800017 	ldw	r2,0(r2)
400849ec:	10800083 	ldbu	r2,2(r2)
400849f0:	10bfffc4 	addi	r2,r2,-1
400849f4:	1884703a 	and	r2,r3,r2
400849f8:	e0bffa05 	stb	r2,-24(fp)
         if (!csect) {              /* On the cluster boundary? */
400849fc:	e0bffa03 	ldbu	r2,-24(fp)
40084a00:	1000381e 	bne	r2,zero,40084ae4 <f_write+0x1e4>
            if (fp->fptr == 0) {    /* On the top of the file? */
40084a04:	e0bffc17 	ldw	r2,-16(fp)
40084a08:	10800217 	ldw	r2,8(r2)
40084a0c:	10000f1e 	bne	r2,zero,40084a4c <f_write+0x14c>
               clst = fp->sclust;      /* Follow from the origin */
40084a10:	e0bffc17 	ldw	r2,-16(fp)
40084a14:	10800417 	ldw	r2,16(r2)
40084a18:	e0bff515 	stw	r2,-44(fp)
               if (clst == 0)       /* When no cluster is allocated, */
40084a1c:	e0bff517 	ldw	r2,-44(fp)
40084a20:	1000121e 	bne	r2,zero,40084a6c <f_write+0x16c>
                  fp->sclust = clst = create_chain(fp->fs, 0); /* Create a new cluster chain */
40084a24:	e0bffc17 	ldw	r2,-16(fp)
40084a28:	10800017 	ldw	r2,0(r2)
40084a2c:	1009883a 	mov	r4,r2
40084a30:	000b883a 	mov	r5,zero
40084a34:	00822800 	call	40082280 <create_chain>
40084a38:	e0bff515 	stw	r2,-44(fp)
40084a3c:	e0bffc17 	ldw	r2,-16(fp)
40084a40:	e0fff517 	ldw	r3,-44(fp)
40084a44:	10c00415 	stw	r3,16(r2)
40084a48:	00000806 	br	40084a6c <f_write+0x16c>
#if _USE_FASTSEEK
               if (fp->cltbl)
                  clst = clmt_clust(fp, fp->fptr); /* Get cluster# from the CLMT */
               else
#endif
                  clst = create_chain(fp->fs, fp->clust);   /* Follow or stretch cluster chain on the FAT */
40084a4c:	e0bffc17 	ldw	r2,-16(fp)
40084a50:	10c00017 	ldw	r3,0(r2)
40084a54:	e0bffc17 	ldw	r2,-16(fp)
40084a58:	10800517 	ldw	r2,20(r2)
40084a5c:	1809883a 	mov	r4,r3
40084a60:	100b883a 	mov	r5,r2
40084a64:	00822800 	call	40082280 <create_chain>
40084a68:	e0bff515 	stw	r2,-44(fp)
            }
            if (clst == 0) break;      /* Could not allocate a new cluster (disk full) */
40084a6c:	e0bff517 	ldw	r2,-44(fp)
40084a70:	1000011e 	bne	r2,zero,40084a78 <f_write+0x178>
40084a74:	0000ec06 	br	40084e28 <f_write+0x528>
            if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
40084a78:	e0bff517 	ldw	r2,-44(fp)
40084a7c:	10800058 	cmpnei	r2,r2,1
40084a80:	1000091e 	bne	r2,zero,40084aa8 <f_write+0x1a8>
40084a84:	e0bffc17 	ldw	r2,-16(fp)
40084a88:	10c00183 	ldbu	r3,6(r2)
40084a8c:	00bfe004 	movi	r2,-128
40084a90:	1884b03a 	or	r2,r3,r2
40084a94:	1007883a 	mov	r3,r2
40084a98:	e0bffc17 	ldw	r2,-16(fp)
40084a9c:	10c00185 	stb	r3,6(r2)
40084aa0:	00800084 	movi	r2,2
40084aa4:	0000f006 	br	40084e68 <f_write+0x568>
            if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
40084aa8:	e0bff517 	ldw	r2,-44(fp)
40084aac:	10bfffd8 	cmpnei	r2,r2,-1
40084ab0:	1000091e 	bne	r2,zero,40084ad8 <f_write+0x1d8>
40084ab4:	e0bffc17 	ldw	r2,-16(fp)
40084ab8:	10c00183 	ldbu	r3,6(r2)
40084abc:	00bfe004 	movi	r2,-128
40084ac0:	1884b03a 	or	r2,r3,r2
40084ac4:	1007883a 	mov	r3,r2
40084ac8:	e0bffc17 	ldw	r2,-16(fp)
40084acc:	10c00185 	stb	r3,6(r2)
40084ad0:	00800044 	movi	r2,1
40084ad4:	0000e406 	br	40084e68 <f_write+0x568>
            fp->clust = clst;       /* Update current cluster */
40084ad8:	e0bffc17 	ldw	r2,-16(fp)
40084adc:	e0fff517 	ldw	r3,-44(fp)
40084ae0:	10c00515 	stw	r3,20(r2)
         }
#if _FS_TINY
         if (fp->fs->winsect == fp->dsect && move_window(fp->fs, 0)) /* Write-back sector cache */
            ABORT(fp->fs, FR_DISK_ERR);
#else
         if (fp->flag & FA__DIRTY) {      /* Write-back sector cache */
40084ae4:	e0bffc17 	ldw	r2,-16(fp)
40084ae8:	10800183 	ldbu	r2,6(r2)
40084aec:	10803fcc 	andi	r2,r2,255
40084af0:	1080100c 	andi	r2,r2,64
40084af4:	10001d26 	beq	r2,zero,40084b6c <f_write+0x26c>
            if (disk_write(fp->fs->drv, fp->buf, fp->dsect, 1) != RES_OK)
40084af8:	e0bffc17 	ldw	r2,-16(fp)
40084afc:	10800017 	ldw	r2,0(r2)
40084b00:	10800043 	ldbu	r2,1(r2)
40084b04:	11003fcc 	andi	r4,r2,255
40084b08:	e0bffc17 	ldw	r2,-16(fp)
40084b0c:	10c00904 	addi	r3,r2,36
40084b10:	e0bffc17 	ldw	r2,-16(fp)
40084b14:	10800617 	ldw	r2,24(r2)
40084b18:	180b883a 	mov	r5,r3
40084b1c:	100d883a 	mov	r6,r2
40084b20:	01c00044 	movi	r7,1
40084b24:	0080f880 	call	40080f88 <ffs_DiskIOWrite>
40084b28:	10000926 	beq	r2,zero,40084b50 <f_write+0x250>
               ABORT(fp->fs, FR_DISK_ERR);
40084b2c:	e0bffc17 	ldw	r2,-16(fp)
40084b30:	10c00183 	ldbu	r3,6(r2)
40084b34:	00bfe004 	movi	r2,-128
40084b38:	1884b03a 	or	r2,r3,r2
40084b3c:	1007883a 	mov	r3,r2
40084b40:	e0bffc17 	ldw	r2,-16(fp)
40084b44:	10c00185 	stb	r3,6(r2)
40084b48:	00800044 	movi	r2,1
40084b4c:	0000c606 	br	40084e68 <f_write+0x568>
            fp->flag &= ~FA__DIRTY;
40084b50:	e0bffc17 	ldw	r2,-16(fp)
40084b54:	10c00183 	ldbu	r3,6(r2)
40084b58:	00bfefc4 	movi	r2,-65
40084b5c:	1884703a 	and	r2,r3,r2
40084b60:	1007883a 	mov	r3,r2
40084b64:	e0bffc17 	ldw	r2,-16(fp)
40084b68:	10c00185 	stb	r3,6(r2)
         }
#endif
         sect = clust2sect(fp->fs, fp->clust);  /* Get current sector */
40084b6c:	e0bffc17 	ldw	r2,-16(fp)
40084b70:	10c00017 	ldw	r3,0(r2)
40084b74:	e0bffc17 	ldw	r2,-16(fp)
40084b78:	10800517 	ldw	r2,20(r2)
40084b7c:	1809883a 	mov	r4,r3
40084b80:	100b883a 	mov	r5,r2
40084b84:	0081b0c0 	call	40081b0c <clust2sect>
40084b88:	e0bffb15 	stw	r2,-20(fp)
         if (!sect) ABORT(fp->fs, FR_INT_ERR);
40084b8c:	e0bffb17 	ldw	r2,-20(fp)
40084b90:	1000091e 	bne	r2,zero,40084bb8 <f_write+0x2b8>
40084b94:	e0bffc17 	ldw	r2,-16(fp)
40084b98:	10c00183 	ldbu	r3,6(r2)
40084b9c:	00bfe004 	movi	r2,-128
40084ba0:	1884b03a 	or	r2,r3,r2
40084ba4:	1007883a 	mov	r3,r2
40084ba8:	e0bffc17 	ldw	r2,-16(fp)
40084bac:	10c00185 	stb	r3,6(r2)
40084bb0:	00800084 	movi	r2,2
40084bb4:	0000ac06 	br	40084e68 <f_write+0x568>
         sect += csect;
40084bb8:	e0bffa03 	ldbu	r2,-24(fp)
40084bbc:	e0fffb17 	ldw	r3,-20(fp)
40084bc0:	1885883a 	add	r2,r3,r2
40084bc4:	e0bffb15 	stw	r2,-20(fp)
         cc = btw / SS(fp->fs);        /* When remaining bytes >= sector size, */
40084bc8:	e0bffe17 	ldw	r2,-8(fp)
40084bcc:	1004d27a 	srli	r2,r2,9
40084bd0:	e0bff715 	stw	r2,-36(fp)
         if (cc) {                  /* Write maximum contiguous sectors directly */
40084bd4:	e0bff717 	ldw	r2,-36(fp)
40084bd8:	10004126 	beq	r2,zero,40084ce0 <f_write+0x3e0>
            if (csect + cc > fp->fs->csize)  /* Clip at cluster boundary */
40084bdc:	e0fffa03 	ldbu	r3,-24(fp)
40084be0:	e0bff717 	ldw	r2,-36(fp)
40084be4:	1885883a 	add	r2,r3,r2
40084be8:	e0fffc17 	ldw	r3,-16(fp)
40084bec:	18c00017 	ldw	r3,0(r3)
40084bf0:	18c00083 	ldbu	r3,2(r3)
40084bf4:	18c03fcc 	andi	r3,r3,255
40084bf8:	1880072e 	bgeu	r3,r2,40084c18 <f_write+0x318>
               cc = fp->fs->csize - csect;
40084bfc:	e0bffc17 	ldw	r2,-16(fp)
40084c00:	10800017 	ldw	r2,0(r2)
40084c04:	10800083 	ldbu	r2,2(r2)
40084c08:	10c03fcc 	andi	r3,r2,255
40084c0c:	e0bffa03 	ldbu	r2,-24(fp)
40084c10:	1885c83a 	sub	r2,r3,r2
40084c14:	e0bff715 	stw	r2,-36(fp)
            if (disk_write(fp->fs->drv, wbuff, sect, (uint8_t)cc) != RES_OK)
40084c18:	e0bffc17 	ldw	r2,-16(fp)
40084c1c:	10800017 	ldw	r2,0(r2)
40084c20:	10800043 	ldbu	r2,1(r2)
40084c24:	10c03fcc 	andi	r3,r2,255
40084c28:	e0bff717 	ldw	r2,-36(fp)
40084c2c:	10803fcc 	andi	r2,r2,255
40084c30:	1809883a 	mov	r4,r3
40084c34:	e17ff817 	ldw	r5,-32(fp)
40084c38:	e1bffb17 	ldw	r6,-20(fp)
40084c3c:	100f883a 	mov	r7,r2
40084c40:	0080f880 	call	40080f88 <ffs_DiskIOWrite>
40084c44:	10000926 	beq	r2,zero,40084c6c <f_write+0x36c>
               ABORT(fp->fs, FR_DISK_ERR);
40084c48:	e0bffc17 	ldw	r2,-16(fp)
40084c4c:	10c00183 	ldbu	r3,6(r2)
40084c50:	00bfe004 	movi	r2,-128
40084c54:	1884b03a 	or	r2,r3,r2
40084c58:	1007883a 	mov	r3,r2
40084c5c:	e0bffc17 	ldw	r2,-16(fp)
40084c60:	10c00185 	stb	r3,6(r2)
40084c64:	00800044 	movi	r2,1
40084c68:	00007f06 	br	40084e68 <f_write+0x568>
            if (fp->fs->winsect - sect < cc) {  /* Refill sector cache if it gets invalidated by the direct write */
               mem_cpy(fp->fs->win, wbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), SS(fp->fs));
               fp->fs->wflag = 0;
            }
#else
            if (fp->dsect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
40084c6c:	e0bffc17 	ldw	r2,-16(fp)
40084c70:	10c00617 	ldw	r3,24(r2)
40084c74:	e0bffb17 	ldw	r2,-20(fp)
40084c78:	1887c83a 	sub	r3,r3,r2
40084c7c:	e0bff717 	ldw	r2,-36(fp)
40084c80:	1880132e 	bgeu	r3,r2,40084cd0 <f_write+0x3d0>
               mem_cpy(fp->buf, wbuff + ((fp->dsect - sect) * SS(fp->fs)), SS(fp->fs));
40084c84:	e0bffc17 	ldw	r2,-16(fp)
40084c88:	11000904 	addi	r4,r2,36
40084c8c:	e0bffc17 	ldw	r2,-16(fp)
40084c90:	10c00617 	ldw	r3,24(r2)
40084c94:	e0bffb17 	ldw	r2,-20(fp)
40084c98:	1885c83a 	sub	r2,r3,r2
40084c9c:	1004927a 	slli	r2,r2,9
40084ca0:	e0fff817 	ldw	r3,-32(fp)
40084ca4:	1885883a 	add	r2,r3,r2
40084ca8:	100b883a 	mov	r5,r2
40084cac:	01808004 	movi	r6,512
40084cb0:	00815c80 	call	400815c8 <mem_cpy>
               fp->flag &= ~FA__DIRTY;
40084cb4:	e0bffc17 	ldw	r2,-16(fp)
40084cb8:	10c00183 	ldbu	r3,6(r2)
40084cbc:	00bfefc4 	movi	r2,-65
40084cc0:	1884703a 	and	r2,r3,r2
40084cc4:	1007883a 	mov	r3,r2
40084cc8:	e0bffc17 	ldw	r2,-16(fp)
40084ccc:	10c00185 	stb	r3,6(r2)
            }
#endif
            wcnt = SS(fp->fs) * cc;    /* Number of bytes transferred */
40084cd0:	e0bff717 	ldw	r2,-36(fp)
40084cd4:	1004927a 	slli	r2,r2,9
40084cd8:	e0bff615 	stw	r2,-40(fp)
            continue;
40084cdc:	00003c06 	br	40084dd0 <f_write+0x4d0>
         if (fp->fptr >= fp->fsize) {  /* Avoid silly cache filling at growing edge */
            if (move_window(fp->fs, 0)) ABORT(fp->fs, FR_DISK_ERR);
            fp->fs->winsect = sect;
         }
#else
         if (fp->dsect != sect) {      /* Fill sector cache with file data */
40084ce0:	e0bffc17 	ldw	r2,-16(fp)
40084ce4:	10c00617 	ldw	r3,24(r2)
40084ce8:	e0bffb17 	ldw	r2,-20(fp)
40084cec:	18801a26 	beq	r3,r2,40084d58 <f_write+0x458>
            if (fp->fptr < fp->fsize &&
40084cf0:	e0bffc17 	ldw	r2,-16(fp)
40084cf4:	10c00217 	ldw	r3,8(r2)
40084cf8:	e0bffc17 	ldw	r2,-16(fp)
40084cfc:	10800317 	ldw	r2,12(r2)
40084d00:	1880152e 	bgeu	r3,r2,40084d58 <f_write+0x458>
               disk_read(fp->fs->drv, fp->buf, sect, 1) != RES_OK)
40084d04:	e0bffc17 	ldw	r2,-16(fp)
40084d08:	10800017 	ldw	r2,0(r2)
40084d0c:	10800043 	ldbu	r2,1(r2)
40084d10:	10c03fcc 	andi	r3,r2,255
40084d14:	e0bffc17 	ldw	r2,-16(fp)
40084d18:	10800904 	addi	r2,r2,36
40084d1c:	1809883a 	mov	r4,r3
40084d20:	100b883a 	mov	r5,r2
40084d24:	e1bffb17 	ldw	r6,-20(fp)
40084d28:	01c00044 	movi	r7,1
40084d2c:	0080e6c0 	call	40080e6c <ffs_DiskIORead>
            if (move_window(fp->fs, 0)) ABORT(fp->fs, FR_DISK_ERR);
            fp->fs->winsect = sect;
         }
#else
         if (fp->dsect != sect) {      /* Fill sector cache with file data */
            if (fp->fptr < fp->fsize &&
40084d30:	10000926 	beq	r2,zero,40084d58 <f_write+0x458>
               disk_read(fp->fs->drv, fp->buf, sect, 1) != RES_OK)
                  ABORT(fp->fs, FR_DISK_ERR);
40084d34:	e0bffc17 	ldw	r2,-16(fp)
40084d38:	10c00183 	ldbu	r3,6(r2)
40084d3c:	00bfe004 	movi	r2,-128
40084d40:	1884b03a 	or	r2,r3,r2
40084d44:	1007883a 	mov	r3,r2
40084d48:	e0bffc17 	ldw	r2,-16(fp)
40084d4c:	10c00185 	stb	r3,6(r2)
40084d50:	00800044 	movi	r2,1
40084d54:	00004406 	br	40084e68 <f_write+0x568>
         }
#endif
         fp->dsect = sect;
40084d58:	e0bffc17 	ldw	r2,-16(fp)
40084d5c:	e0fffb17 	ldw	r3,-20(fp)
40084d60:	10c00615 	stw	r3,24(r2)
      }
      wcnt = SS(fp->fs) - (fp->fptr % SS(fp->fs));/* Put partial sector into file I/O buffer */
40084d64:	e0bffc17 	ldw	r2,-16(fp)
40084d68:	10800217 	ldw	r2,8(r2)
40084d6c:	10807fcc 	andi	r2,r2,511
40084d70:	00c08004 	movi	r3,512
40084d74:	1885c83a 	sub	r2,r3,r2
40084d78:	e0bff615 	stw	r2,-40(fp)
      if (wcnt > btw) wcnt = btw;
40084d7c:	e0bff617 	ldw	r2,-40(fp)
40084d80:	e0fffe17 	ldw	r3,-8(fp)
40084d84:	1880022e 	bgeu	r3,r2,40084d90 <f_write+0x490>
40084d88:	e0bffe17 	ldw	r2,-8(fp)
40084d8c:	e0bff615 	stw	r2,-40(fp)
      if (move_window(fp->fs, fp->dsect)) /* Move sector window */
         ABORT(fp->fs, FR_DISK_ERR);
      mem_cpy(&fp->fs->win[fp->fptr % SS(fp->fs)], wbuff, wcnt);  /* Fit partial sector */
      fp->fs->wflag = 1;
#else
      mem_cpy(&fp->buf[fp->fptr % SS(fp->fs)], wbuff, wcnt);   /* Fit partial sector */
40084d90:	e0bffc17 	ldw	r2,-16(fp)
40084d94:	10800217 	ldw	r2,8(r2)
40084d98:	10807fcc 	andi	r2,r2,511
40084d9c:	10800904 	addi	r2,r2,36
40084da0:	e0fffc17 	ldw	r3,-16(fp)
40084da4:	1885883a 	add	r2,r3,r2
40084da8:	1009883a 	mov	r4,r2
40084dac:	e17ff817 	ldw	r5,-32(fp)
40084db0:	e1bff617 	ldw	r6,-40(fp)
40084db4:	00815c80 	call	400815c8 <mem_cpy>
      fp->flag |= FA__DIRTY;
40084db8:	e0bffc17 	ldw	r2,-16(fp)
40084dbc:	10800183 	ldbu	r2,6(r2)
40084dc0:	10801014 	ori	r2,r2,64
40084dc4:	1007883a 	mov	r3,r2
40084dc8:	e0bffc17 	ldw	r2,-16(fp)
40084dcc:	10c00185 	stb	r3,6(r2)
   if (!(fp->flag & FA_WRITE))            /* Check access mode */
      LEAVE_FF(fp->fs, FR_DENIED);
   if ((uint32_t)(fp->fsize + btw) < fp->fsize) btw = 0; /* File size cannot reach 4GB */

   for ( ;  btw;                    /* Repeat until all data written */
      wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
40084dd0:	e0fff817 	ldw	r3,-32(fp)
40084dd4:	e0bff617 	ldw	r2,-40(fp)
40084dd8:	1885883a 	add	r2,r3,r2
40084ddc:	e0bff815 	stw	r2,-32(fp)
40084de0:	e0bffc17 	ldw	r2,-16(fp)
40084de4:	10c00217 	ldw	r3,8(r2)
40084de8:	e0bff617 	ldw	r2,-40(fp)
40084dec:	1887883a 	add	r3,r3,r2
40084df0:	e0bffc17 	ldw	r2,-16(fp)
40084df4:	10c00215 	stw	r3,8(r2)
40084df8:	e0bfff17 	ldw	r2,-4(fp)
40084dfc:	10c00017 	ldw	r3,0(r2)
40084e00:	e0bff617 	ldw	r2,-40(fp)
40084e04:	1887883a 	add	r3,r3,r2
40084e08:	e0bfff17 	ldw	r2,-4(fp)
40084e0c:	10c00015 	stw	r3,0(r2)
40084e10:	e0fffe17 	ldw	r3,-8(fp)
40084e14:	e0bff617 	ldw	r2,-40(fp)
40084e18:	1885c83a 	sub	r2,r3,r2
40084e1c:	e0bffe15 	stw	r2,-8(fp)
      LEAVE_FF(fp->fs, FR_INT_ERR);
   if (!(fp->flag & FA_WRITE))            /* Check access mode */
      LEAVE_FF(fp->fs, FR_DENIED);
   if ((uint32_t)(fp->fsize + btw) < fp->fsize) btw = 0; /* File size cannot reach 4GB */

   for ( ;  btw;                    /* Repeat until all data written */
40084e20:	e0bffe17 	ldw	r2,-8(fp)
40084e24:	103ee71e 	bne	r2,zero,400849c4 <__alt_mem_epcs+0xfff439c4>
      mem_cpy(&fp->buf[fp->fptr % SS(fp->fs)], wbuff, wcnt);   /* Fit partial sector */
      fp->flag |= FA__DIRTY;
#endif
   }

   if (fp->fptr > fp->fsize) fp->fsize = fp->fptr; /* Update file size if needed */
40084e28:	e0bffc17 	ldw	r2,-16(fp)
40084e2c:	10800217 	ldw	r2,8(r2)
40084e30:	e0fffc17 	ldw	r3,-16(fp)
40084e34:	18c00317 	ldw	r3,12(r3)
40084e38:	1880042e 	bgeu	r3,r2,40084e4c <f_write+0x54c>
40084e3c:	e0bffc17 	ldw	r2,-16(fp)
40084e40:	10c00217 	ldw	r3,8(r2)
40084e44:	e0bffc17 	ldw	r2,-16(fp)
40084e48:	10c00315 	stw	r3,12(r2)
   fp->flag |= FA__WRITTEN;                  /* Set file change flag */
40084e4c:	e0bffc17 	ldw	r2,-16(fp)
40084e50:	10800183 	ldbu	r2,6(r2)
40084e54:	10800814 	ori	r2,r2,32
40084e58:	1007883a 	mov	r3,r2
40084e5c:	e0bffc17 	ldw	r2,-16(fp)
40084e60:	10c00185 	stb	r3,6(r2)

   LEAVE_FF(fp->fs, FR_OK);
40084e64:	0005883a 	mov	r2,zero
}
40084e68:	e037883a 	mov	sp,fp
40084e6c:	dfc00117 	ldw	ra,4(sp)
40084e70:	df000017 	ldw	fp,0(sp)
40084e74:	dec00204 	addi	sp,sp,8
40084e78:	f800283a 	ret

40084e7c <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
   FIL *fp     /* Pointer to the file object */
)
{
40084e7c:	defffa04 	addi	sp,sp,-24
40084e80:	dfc00515 	stw	ra,20(sp)
40084e84:	df000415 	stw	fp,16(sp)
40084e88:	df000404 	addi	fp,sp,16
40084e8c:	e13fff15 	stw	r4,-4(fp)
   FRESULT res;
   uint32_t tim;
   uint8_t *dir;


   res = validate(fp->fs, fp->id);     /* Check validity of the object */
40084e90:	e0bfff17 	ldw	r2,-4(fp)
40084e94:	10c00017 	ldw	r3,0(r2)
40084e98:	e0bfff17 	ldw	r2,-4(fp)
40084e9c:	1080010b 	ldhu	r2,4(r2)
40084ea0:	10bfffcc 	andi	r2,r2,65535
40084ea4:	1809883a 	mov	r4,r3
40084ea8:	100b883a 	mov	r5,r2
40084eac:	0083e740 	call	40083e74 <validate>
40084eb0:	e0bffc15 	stw	r2,-16(fp)
   if (res == FR_OK) {
40084eb4:	e0bffc17 	ldw	r2,-16(fp)
40084eb8:	10008c1e 	bne	r2,zero,400850ec <f_sync+0x270>
      if (fp->flag & FA__WRITTEN) { /* Has the file been written? */
40084ebc:	e0bfff17 	ldw	r2,-4(fp)
40084ec0:	10800183 	ldbu	r2,6(r2)
40084ec4:	10803fcc 	andi	r2,r2,255
40084ec8:	1080080c 	andi	r2,r2,32
40084ecc:	10008726 	beq	r2,zero,400850ec <f_sync+0x270>
#if !_FS_TINY  /* Write-back dirty buffer */
         if (fp->flag & FA__DIRTY) {
40084ed0:	e0bfff17 	ldw	r2,-4(fp)
40084ed4:	10800183 	ldbu	r2,6(r2)
40084ed8:	10803fcc 	andi	r2,r2,255
40084edc:	1080100c 	andi	r2,r2,64
40084ee0:	10001626 	beq	r2,zero,40084f3c <f_sync+0xc0>
            if (disk_write(fp->fs->drv, fp->buf, fp->dsect, 1) != RES_OK)
40084ee4:	e0bfff17 	ldw	r2,-4(fp)
40084ee8:	10800017 	ldw	r2,0(r2)
40084eec:	10800043 	ldbu	r2,1(r2)
40084ef0:	11003fcc 	andi	r4,r2,255
40084ef4:	e0bfff17 	ldw	r2,-4(fp)
40084ef8:	10c00904 	addi	r3,r2,36
40084efc:	e0bfff17 	ldw	r2,-4(fp)
40084f00:	10800617 	ldw	r2,24(r2)
40084f04:	180b883a 	mov	r5,r3
40084f08:	100d883a 	mov	r6,r2
40084f0c:	01c00044 	movi	r7,1
40084f10:	0080f880 	call	40080f88 <ffs_DiskIOWrite>
40084f14:	10000226 	beq	r2,zero,40084f20 <f_sync+0xa4>
               LEAVE_FF(fp->fs, FR_DISK_ERR);
40084f18:	00800044 	movi	r2,1
40084f1c:	00007406 	br	400850f0 <f_sync+0x274>
            fp->flag &= ~FA__DIRTY;
40084f20:	e0bfff17 	ldw	r2,-4(fp)
40084f24:	10c00183 	ldbu	r3,6(r2)
40084f28:	00bfefc4 	movi	r2,-65
40084f2c:	1884703a 	and	r2,r3,r2
40084f30:	1007883a 	mov	r3,r2
40084f34:	e0bfff17 	ldw	r2,-4(fp)
40084f38:	10c00185 	stb	r3,6(r2)
         }
#endif
         /* Update the directory entry */
         res = move_window(fp->fs, fp->dir_sect);
40084f3c:	e0bfff17 	ldw	r2,-4(fp)
40084f40:	10c00017 	ldw	r3,0(r2)
40084f44:	e0bfff17 	ldw	r2,-4(fp)
40084f48:	10800717 	ldw	r2,28(r2)
40084f4c:	1809883a 	mov	r4,r3
40084f50:	100b883a 	mov	r5,r2
40084f54:	00817940 	call	40081794 <move_window>
40084f58:	e0bffc15 	stw	r2,-16(fp)
         if (res == FR_OK) {
40084f5c:	e0bffc17 	ldw	r2,-16(fp)
40084f60:	1000621e 	bne	r2,zero,400850ec <f_sync+0x270>
            dir = fp->dir_ptr;
40084f64:	e0bfff17 	ldw	r2,-4(fp)
40084f68:	10800817 	ldw	r2,32(r2)
40084f6c:	e0bffd15 	stw	r2,-12(fp)
            dir[DIR_Attr] |= AM_ARC;               /* Set archive bit */
40084f70:	e0bffd17 	ldw	r2,-12(fp)
40084f74:	108002c4 	addi	r2,r2,11
40084f78:	e0fffd17 	ldw	r3,-12(fp)
40084f7c:	18c002c4 	addi	r3,r3,11
40084f80:	18c00003 	ldbu	r3,0(r3)
40084f84:	18c00814 	ori	r3,r3,32
40084f88:	10c00005 	stb	r3,0(r2)
            ST_DWORD(dir+DIR_FileSize, fp->fsize);    /* Update file size */
40084f8c:	e0bffd17 	ldw	r2,-12(fp)
40084f90:	10800704 	addi	r2,r2,28
40084f94:	e0ffff17 	ldw	r3,-4(fp)
40084f98:	18c00317 	ldw	r3,12(r3)
40084f9c:	10c00005 	stb	r3,0(r2)
40084fa0:	e0bffd17 	ldw	r2,-12(fp)
40084fa4:	10800744 	addi	r2,r2,29
40084fa8:	e0ffff17 	ldw	r3,-4(fp)
40084fac:	18c00317 	ldw	r3,12(r3)
40084fb0:	18ffffcc 	andi	r3,r3,65535
40084fb4:	1806d23a 	srli	r3,r3,8
40084fb8:	10c00005 	stb	r3,0(r2)
40084fbc:	e0bffd17 	ldw	r2,-12(fp)
40084fc0:	10800784 	addi	r2,r2,30
40084fc4:	e0ffff17 	ldw	r3,-4(fp)
40084fc8:	18c00317 	ldw	r3,12(r3)
40084fcc:	1806d43a 	srli	r3,r3,16
40084fd0:	10c00005 	stb	r3,0(r2)
40084fd4:	e0bffd17 	ldw	r2,-12(fp)
40084fd8:	108007c4 	addi	r2,r2,31
40084fdc:	e0ffff17 	ldw	r3,-4(fp)
40084fe0:	18c00317 	ldw	r3,12(r3)
40084fe4:	1806d63a 	srli	r3,r3,24
40084fe8:	10c00005 	stb	r3,0(r2)
            ST_CLUST(dir, fp->sclust);             /* Update start cluster */
40084fec:	e0bffd17 	ldw	r2,-12(fp)
40084ff0:	10800684 	addi	r2,r2,26
40084ff4:	e0ffff17 	ldw	r3,-4(fp)
40084ff8:	18c00417 	ldw	r3,16(r3)
40084ffc:	10c00005 	stb	r3,0(r2)
40085000:	e0bffd17 	ldw	r2,-12(fp)
40085004:	108006c4 	addi	r2,r2,27
40085008:	e0ffff17 	ldw	r3,-4(fp)
4008500c:	18c00417 	ldw	r3,16(r3)
40085010:	18ffffcc 	andi	r3,r3,65535
40085014:	1806d23a 	srli	r3,r3,8
40085018:	10c00005 	stb	r3,0(r2)
4008501c:	e0bffd17 	ldw	r2,-12(fp)
40085020:	10800504 	addi	r2,r2,20
40085024:	e0ffff17 	ldw	r3,-4(fp)
40085028:	18c00417 	ldw	r3,16(r3)
4008502c:	1806d43a 	srli	r3,r3,16
40085030:	10c00005 	stb	r3,0(r2)
40085034:	e0bffd17 	ldw	r2,-12(fp)
40085038:	10800544 	addi	r2,r2,21
4008503c:	e0ffff17 	ldw	r3,-4(fp)
40085040:	18c00417 	ldw	r3,16(r3)
40085044:	1806d43a 	srli	r3,r3,16
40085048:	18ffffcc 	andi	r3,r3,65535
4008504c:	1806d23a 	srli	r3,r3,8
40085050:	10c00005 	stb	r3,0(r2)
            tim = get_fattime();                /* Update updated time */
40085054:	008159c0 	call	4008159c <get_fattime>
40085058:	e0bffe15 	stw	r2,-8(fp)
            ST_DWORD(dir+DIR_WrtTime, tim);
4008505c:	e0bffd17 	ldw	r2,-12(fp)
40085060:	10800584 	addi	r2,r2,22
40085064:	e0fffe17 	ldw	r3,-8(fp)
40085068:	10c00005 	stb	r3,0(r2)
4008506c:	e0bffd17 	ldw	r2,-12(fp)
40085070:	108005c4 	addi	r2,r2,23
40085074:	e0fffe17 	ldw	r3,-8(fp)
40085078:	18ffffcc 	andi	r3,r3,65535
4008507c:	1806d23a 	srli	r3,r3,8
40085080:	10c00005 	stb	r3,0(r2)
40085084:	e0bffd17 	ldw	r2,-12(fp)
40085088:	10800604 	addi	r2,r2,24
4008508c:	e0fffe17 	ldw	r3,-8(fp)
40085090:	1806d43a 	srli	r3,r3,16
40085094:	10c00005 	stb	r3,0(r2)
40085098:	e0bffd17 	ldw	r2,-12(fp)
4008509c:	10800644 	addi	r2,r2,25
400850a0:	e0fffe17 	ldw	r3,-8(fp)
400850a4:	1806d63a 	srli	r3,r3,24
400850a8:	10c00005 	stb	r3,0(r2)
            fp->flag &= ~FA__WRITTEN;
400850ac:	e0bfff17 	ldw	r2,-4(fp)
400850b0:	10c00183 	ldbu	r3,6(r2)
400850b4:	00bff7c4 	movi	r2,-33
400850b8:	1884703a 	and	r2,r3,r2
400850bc:	1007883a 	mov	r3,r2
400850c0:	e0bfff17 	ldw	r2,-4(fp)
400850c4:	10c00185 	stb	r3,6(r2)
            fp->fs->wflag = 1;
400850c8:	e0bfff17 	ldw	r2,-4(fp)
400850cc:	10800017 	ldw	r2,0(r2)
400850d0:	00c00044 	movi	r3,1
400850d4:	10c00105 	stb	r3,4(r2)
            res = sync(fp->fs);
400850d8:	e0bfff17 	ldw	r2,-4(fp)
400850dc:	10800017 	ldw	r2,0(r2)
400850e0:	1009883a 	mov	r4,r2
400850e4:	00818f00 	call	400818f0 <sync>
400850e8:	e0bffc15 	stw	r2,-16(fp)
         }
      }
   }

   LEAVE_FF(fp->fs, res);
400850ec:	e0bffc17 	ldw	r2,-16(fp)
}
400850f0:	e037883a 	mov	sp,fp
400850f4:	dfc00117 	ldw	ra,4(sp)
400850f8:	df000017 	ldw	fp,0(sp)
400850fc:	dec00204 	addi	sp,sp,8
40085100:	f800283a 	ret

40085104 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
   FIL *fp     /* Pointer to the file object to be closed */
)
{
40085104:	defffc04 	addi	sp,sp,-16
40085108:	dfc00315 	stw	ra,12(sp)
4008510c:	df000215 	stw	fp,8(sp)
40085110:	df000204 	addi	fp,sp,8
40085114:	e13fff15 	stw	r4,-4(fp)
   res = validate(fs, fp->id);
   if (res == FR_OK) fp->fs = 0; /* Discard file object */
   LEAVE_FF(fs, res);

#else
   res = f_sync(fp);    /* Flush cached data */
40085118:	e13fff17 	ldw	r4,-4(fp)
4008511c:	0084e7c0 	call	40084e7c <f_sync>
40085120:	e0bffe15 	stw	r2,-8(fp)
#else
      res = dec_lock(fp->lockid);
#endif
   }
#endif
   if (res == FR_OK) fp->fs = 0; /* Discard file object */
40085124:	e0bffe17 	ldw	r2,-8(fp)
40085128:	1000021e 	bne	r2,zero,40085134 <f_close+0x30>
4008512c:	e0bfff17 	ldw	r2,-4(fp)
40085130:	10000015 	stw	zero,0(r2)
   return res;
40085134:	e0bffe17 	ldw	r2,-8(fp)
#endif
}
40085138:	e037883a 	mov	sp,fp
4008513c:	dfc00117 	ldw	ra,4(sp)
40085140:	df000017 	ldw	fp,0(sp)
40085144:	dec00204 	addi	sp,sp,8
40085148:	f800283a 	ret

4008514c <f_lseek>:

FRESULT f_lseek (
   FIL *fp,          /* Pointer to the file object */
   uint32_t ofs      /* File pointer from top of file */
)
{
4008514c:	defff704 	addi	sp,sp,-36
40085150:	dfc00815 	stw	ra,32(sp)
40085154:	df000715 	stw	fp,28(sp)
40085158:	df000704 	addi	fp,sp,28
4008515c:	e13ffe15 	stw	r4,-8(fp)
40085160:	e17fff15 	stw	r5,-4(fp)
   FRESULT res;


   res = validate(fp->fs, fp->id);     /* Check validity of the object */
40085164:	e0bffe17 	ldw	r2,-8(fp)
40085168:	10c00017 	ldw	r3,0(r2)
4008516c:	e0bffe17 	ldw	r2,-8(fp)
40085170:	1080010b 	ldhu	r2,4(r2)
40085174:	10bfffcc 	andi	r2,r2,65535
40085178:	1809883a 	mov	r4,r3
4008517c:	100b883a 	mov	r5,r2
40085180:	0083e740 	call	40083e74 <validate>
40085184:	e0bffb15 	stw	r2,-20(fp)
   if (res != FR_OK) LEAVE_FF(fp->fs, res);
40085188:	e0bffb17 	ldw	r2,-20(fp)
4008518c:	10000226 	beq	r2,zero,40085198 <f_lseek+0x4c>
40085190:	e0bffb17 	ldw	r2,-20(fp)
40085194:	00011e06 	br	40085610 <f_lseek+0x4c4>
   if (fp->flag & FA__ERROR)        /* Check abort flag */
40085198:	e0bffe17 	ldw	r2,-8(fp)
4008519c:	10800183 	ldbu	r2,6(r2)
400851a0:	10803fcc 	andi	r2,r2,255
400851a4:	1080201c 	xori	r2,r2,128
400851a8:	10bfe004 	addi	r2,r2,-128
400851ac:	1000020e 	bge	r2,zero,400851b8 <f_lseek+0x6c>
      LEAVE_FF(fp->fs, FR_INT_ERR);
400851b0:	00800084 	movi	r2,2
400851b4:	00011606 	br	40085610 <f_lseek+0x4c4>

   /* Normal Seek */
   {
      uint32_t clst, bcs, nsect, ifptr;

      if (ofs > fp->fsize              /* In read-only mode, clip offset with the file size */
400851b8:	e0bffe17 	ldw	r2,-8(fp)
400851bc:	10c00317 	ldw	r3,12(r2)
400851c0:	e0bfff17 	ldw	r2,-4(fp)
400851c4:	1880082e 	bgeu	r3,r2,400851e8 <f_lseek+0x9c>
#if !_FS_READONLY
          && !(fp->flag & FA_WRITE)
400851c8:	e0bffe17 	ldw	r2,-8(fp)
400851cc:	10800183 	ldbu	r2,6(r2)
400851d0:	10803fcc 	andi	r2,r2,255
400851d4:	1080008c 	andi	r2,r2,2
400851d8:	1000031e 	bne	r2,zero,400851e8 <f_lseek+0x9c>
#endif
         ) ofs = fp->fsize;
400851dc:	e0bffe17 	ldw	r2,-8(fp)
400851e0:	10800317 	ldw	r2,12(r2)
400851e4:	e0bfff15 	stw	r2,-4(fp)

      ifptr = fp->fptr;
400851e8:	e0bffe17 	ldw	r2,-8(fp)
400851ec:	10800217 	ldw	r2,8(r2)
400851f0:	e0bffc15 	stw	r2,-16(fp)
      fp->fptr = nsect = 0;
400851f4:	e03ffa15 	stw	zero,-24(fp)
400851f8:	e0bffe17 	ldw	r2,-8(fp)
400851fc:	e0fffa17 	ldw	r3,-24(fp)
40085200:	10c00215 	stw	r3,8(r2)
      if (ofs) {
40085204:	e0bfff17 	ldw	r2,-4(fp)
40085208:	1000af26 	beq	r2,zero,400854c8 <f_lseek+0x37c>
         bcs = (uint32_t)fp->fs->csize * SS(fp->fs);  /* Cluster size (byte) */
4008520c:	e0bffe17 	ldw	r2,-8(fp)
40085210:	10800017 	ldw	r2,0(r2)
40085214:	10800083 	ldbu	r2,2(r2)
40085218:	10803fcc 	andi	r2,r2,255
4008521c:	1004927a 	slli	r2,r2,9
40085220:	e0bffd15 	stw	r2,-12(fp)
         if (ifptr > 0 &&
40085224:	e0bffc17 	ldw	r2,-16(fp)
40085228:	10001926 	beq	r2,zero,40085290 <f_lseek+0x144>
            (ofs - 1) / bcs >= (ifptr - 1) / bcs) {   /* When seek to same or following cluster, */
4008522c:	e0bfff17 	ldw	r2,-4(fp)
40085230:	10ffffc4 	addi	r3,r2,-1
40085234:	e0bffd17 	ldw	r2,-12(fp)
40085238:	1887203a 	divu	r3,r3,r2
4008523c:	e0bffc17 	ldw	r2,-16(fp)
40085240:	113fffc4 	addi	r4,r2,-1
40085244:	e0bffd17 	ldw	r2,-12(fp)
40085248:	2085203a 	divu	r2,r4,r2

      ifptr = fp->fptr;
      fp->fptr = nsect = 0;
      if (ofs) {
         bcs = (uint32_t)fp->fs->csize * SS(fp->fs);  /* Cluster size (byte) */
         if (ifptr > 0 &&
4008524c:	18801036 	bltu	r3,r2,40085290 <f_lseek+0x144>
            (ofs - 1) / bcs >= (ifptr - 1) / bcs) {   /* When seek to same or following cluster, */
            fp->fptr = (ifptr - 1) & ~(bcs - 1);   /* start from the current cluster */
40085250:	e0bffc17 	ldw	r2,-16(fp)
40085254:	10ffffc4 	addi	r3,r2,-1
40085258:	e0bffd17 	ldw	r2,-12(fp)
4008525c:	0085c83a 	sub	r2,zero,r2
40085260:	1886703a 	and	r3,r3,r2
40085264:	e0bffe17 	ldw	r2,-8(fp)
40085268:	10c00215 	stw	r3,8(r2)
            ofs -= fp->fptr;
4008526c:	e0bffe17 	ldw	r2,-8(fp)
40085270:	10800217 	ldw	r2,8(r2)
40085274:	e0ffff17 	ldw	r3,-4(fp)
40085278:	1885c83a 	sub	r2,r3,r2
4008527c:	e0bfff15 	stw	r2,-4(fp)
            clst = fp->clust;
40085280:	e0bffe17 	ldw	r2,-8(fp)
40085284:	10800517 	ldw	r2,20(r2)
40085288:	e0bff915 	stw	r2,-28(fp)
4008528c:	00002906 	br	40085334 <f_lseek+0x1e8>
         } else {                         /* When seek to back cluster, */
            clst = fp->sclust;                  /* start from the first cluster */
40085290:	e0bffe17 	ldw	r2,-8(fp)
40085294:	10800417 	ldw	r2,16(r2)
40085298:	e0bff915 	stw	r2,-28(fp)
#if !_FS_READONLY
            if (clst == 0) {                 /* If no cluster chain, create a new chain */
4008529c:	e0bff917 	ldw	r2,-28(fp)
400852a0:	1000211e 	bne	r2,zero,40085328 <f_lseek+0x1dc>
               clst = create_chain(fp->fs, 0);
400852a4:	e0bffe17 	ldw	r2,-8(fp)
400852a8:	10800017 	ldw	r2,0(r2)
400852ac:	1009883a 	mov	r4,r2
400852b0:	000b883a 	mov	r5,zero
400852b4:	00822800 	call	40082280 <create_chain>
400852b8:	e0bff915 	stw	r2,-28(fp)
               if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
400852bc:	e0bff917 	ldw	r2,-28(fp)
400852c0:	10800058 	cmpnei	r2,r2,1
400852c4:	1000091e 	bne	r2,zero,400852ec <f_lseek+0x1a0>
400852c8:	e0bffe17 	ldw	r2,-8(fp)
400852cc:	10c00183 	ldbu	r3,6(r2)
400852d0:	00bfe004 	movi	r2,-128
400852d4:	1884b03a 	or	r2,r3,r2
400852d8:	1007883a 	mov	r3,r2
400852dc:	e0bffe17 	ldw	r2,-8(fp)
400852e0:	10c00185 	stb	r3,6(r2)
400852e4:	00800084 	movi	r2,2
400852e8:	0000c906 	br	40085610 <f_lseek+0x4c4>
               if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
400852ec:	e0bff917 	ldw	r2,-28(fp)
400852f0:	10bfffd8 	cmpnei	r2,r2,-1
400852f4:	1000091e 	bne	r2,zero,4008531c <f_lseek+0x1d0>
400852f8:	e0bffe17 	ldw	r2,-8(fp)
400852fc:	10c00183 	ldbu	r3,6(r2)
40085300:	00bfe004 	movi	r2,-128
40085304:	1884b03a 	or	r2,r3,r2
40085308:	1007883a 	mov	r3,r2
4008530c:	e0bffe17 	ldw	r2,-8(fp)
40085310:	10c00185 	stb	r3,6(r2)
40085314:	00800044 	movi	r2,1
40085318:	0000bd06 	br	40085610 <f_lseek+0x4c4>
               fp->sclust = clst;
4008531c:	e0bffe17 	ldw	r2,-8(fp)
40085320:	e0fff917 	ldw	r3,-28(fp)
40085324:	10c00415 	stw	r3,16(r2)
            }
#endif
            fp->clust = clst;
40085328:	e0bffe17 	ldw	r2,-8(fp)
4008532c:	e0fff917 	ldw	r3,-28(fp)
40085330:	10c00515 	stw	r3,20(r2)
         }
         if (clst != 0) {
40085334:	e0bff917 	ldw	r2,-28(fp)
40085338:	10006326 	beq	r2,zero,400854c8 <f_lseek+0x37c>
            while (ofs > bcs) {                 /* Cluster following loop */
4008533c:	00004006 	br	40085440 <f_lseek+0x2f4>
#if !_FS_READONLY
               if (fp->flag & FA_WRITE) {       /* Check if in write mode or not */
40085340:	e0bffe17 	ldw	r2,-8(fp)
40085344:	10800183 	ldbu	r2,6(r2)
40085348:	10803fcc 	andi	r2,r2,255
4008534c:	1080008c 	andi	r2,r2,2
40085350:	10000b26 	beq	r2,zero,40085380 <f_lseek+0x234>
                  clst = create_chain(fp->fs, clst);  /* Force stretch if in write mode */
40085354:	e0bffe17 	ldw	r2,-8(fp)
40085358:	10800017 	ldw	r2,0(r2)
4008535c:	1009883a 	mov	r4,r2
40085360:	e17ff917 	ldw	r5,-28(fp)
40085364:	00822800 	call	40082280 <create_chain>
40085368:	e0bff915 	stw	r2,-28(fp)
                  if (clst == 0) {           /* When disk gets full, clip file size */
4008536c:	e0bff917 	ldw	r2,-28(fp)
40085370:	1000091e 	bne	r2,zero,40085398 <f_lseek+0x24c>
                     ofs = bcs; break;
40085374:	e0bffd17 	ldw	r2,-12(fp)
40085378:	e0bfff15 	stw	r2,-4(fp)
4008537c:	00003306 	br	4008544c <f_lseek+0x300>
                  }
               } else
#endif
                  clst = get_fat(fp->fs, clst); /* Follow cluster chain if not in write mode */
40085380:	e0bffe17 	ldw	r2,-8(fp)
40085384:	10800017 	ldw	r2,0(r2)
40085388:	1009883a 	mov	r4,r2
4008538c:	e17ff917 	ldw	r5,-28(fp)
40085390:	0081b780 	call	40081b78 <get_fat>
40085394:	e0bff915 	stw	r2,-28(fp)
               if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
40085398:	e0bff917 	ldw	r2,-28(fp)
4008539c:	10bfffd8 	cmpnei	r2,r2,-1
400853a0:	1000091e 	bne	r2,zero,400853c8 <f_lseek+0x27c>
400853a4:	e0bffe17 	ldw	r2,-8(fp)
400853a8:	10c00183 	ldbu	r3,6(r2)
400853ac:	00bfe004 	movi	r2,-128
400853b0:	1884b03a 	or	r2,r3,r2
400853b4:	1007883a 	mov	r3,r2
400853b8:	e0bffe17 	ldw	r2,-8(fp)
400853bc:	10c00185 	stb	r3,6(r2)
400853c0:	00800044 	movi	r2,1
400853c4:	00009206 	br	40085610 <f_lseek+0x4c4>
               if (clst <= 1 || clst >= fp->fs->n_fatent) ABORT(fp->fs, FR_INT_ERR);
400853c8:	e0bff917 	ldw	r2,-28(fp)
400853cc:	108000b0 	cmpltui	r2,r2,2
400853d0:	1000051e 	bne	r2,zero,400853e8 <f_lseek+0x29c>
400853d4:	e0bffe17 	ldw	r2,-8(fp)
400853d8:	10800017 	ldw	r2,0(r2)
400853dc:	10800617 	ldw	r2,24(r2)
400853e0:	e0fff917 	ldw	r3,-28(fp)
400853e4:	18800936 	bltu	r3,r2,4008540c <f_lseek+0x2c0>
400853e8:	e0bffe17 	ldw	r2,-8(fp)
400853ec:	10c00183 	ldbu	r3,6(r2)
400853f0:	00bfe004 	movi	r2,-128
400853f4:	1884b03a 	or	r2,r3,r2
400853f8:	1007883a 	mov	r3,r2
400853fc:	e0bffe17 	ldw	r2,-8(fp)
40085400:	10c00185 	stb	r3,6(r2)
40085404:	00800084 	movi	r2,2
40085408:	00008106 	br	40085610 <f_lseek+0x4c4>
               fp->clust = clst;
4008540c:	e0bffe17 	ldw	r2,-8(fp)
40085410:	e0fff917 	ldw	r3,-28(fp)
40085414:	10c00515 	stw	r3,20(r2)
               fp->fptr += bcs;
40085418:	e0bffe17 	ldw	r2,-8(fp)
4008541c:	10c00217 	ldw	r3,8(r2)
40085420:	e0bffd17 	ldw	r2,-12(fp)
40085424:	1887883a 	add	r3,r3,r2
40085428:	e0bffe17 	ldw	r2,-8(fp)
4008542c:	10c00215 	stw	r3,8(r2)
               ofs -= bcs;
40085430:	e0ffff17 	ldw	r3,-4(fp)
40085434:	e0bffd17 	ldw	r2,-12(fp)
40085438:	1885c83a 	sub	r2,r3,r2
4008543c:	e0bfff15 	stw	r2,-4(fp)
            }
#endif
            fp->clust = clst;
         }
         if (clst != 0) {
            while (ofs > bcs) {                 /* Cluster following loop */
40085440:	e0bfff17 	ldw	r2,-4(fp)
40085444:	e0fffd17 	ldw	r3,-12(fp)
40085448:	18bfbd36 	bltu	r3,r2,40085340 <__alt_mem_epcs+0xfff44340>
               if (clst <= 1 || clst >= fp->fs->n_fatent) ABORT(fp->fs, FR_INT_ERR);
               fp->clust = clst;
               fp->fptr += bcs;
               ofs -= bcs;
            }
            fp->fptr += ofs;
4008544c:	e0bffe17 	ldw	r2,-8(fp)
40085450:	10c00217 	ldw	r3,8(r2)
40085454:	e0bfff17 	ldw	r2,-4(fp)
40085458:	1887883a 	add	r3,r3,r2
4008545c:	e0bffe17 	ldw	r2,-8(fp)
40085460:	10c00215 	stw	r3,8(r2)
            if (ofs % SS(fp->fs)) {
40085464:	e0bfff17 	ldw	r2,-4(fp)
40085468:	10807fcc 	andi	r2,r2,511
4008546c:	10001626 	beq	r2,zero,400854c8 <f_lseek+0x37c>
               nsect = clust2sect(fp->fs, clst);   /* Current sector */
40085470:	e0bffe17 	ldw	r2,-8(fp)
40085474:	10800017 	ldw	r2,0(r2)
40085478:	1009883a 	mov	r4,r2
4008547c:	e17ff917 	ldw	r5,-28(fp)
40085480:	0081b0c0 	call	40081b0c <clust2sect>
40085484:	e0bffa15 	stw	r2,-24(fp)
               if (!nsect) ABORT(fp->fs, FR_INT_ERR);
40085488:	e0bffa17 	ldw	r2,-24(fp)
4008548c:	1000091e 	bne	r2,zero,400854b4 <f_lseek+0x368>
40085490:	e0bffe17 	ldw	r2,-8(fp)
40085494:	10c00183 	ldbu	r3,6(r2)
40085498:	00bfe004 	movi	r2,-128
4008549c:	1884b03a 	or	r2,r3,r2
400854a0:	1007883a 	mov	r3,r2
400854a4:	e0bffe17 	ldw	r2,-8(fp)
400854a8:	10c00185 	stb	r3,6(r2)
400854ac:	00800084 	movi	r2,2
400854b0:	00005706 	br	40085610 <f_lseek+0x4c4>
               nsect += ofs / SS(fp->fs);
400854b4:	e0bfff17 	ldw	r2,-4(fp)
400854b8:	1004d27a 	srli	r2,r2,9
400854bc:	e0fffa17 	ldw	r3,-24(fp)
400854c0:	1885883a 	add	r2,r3,r2
400854c4:	e0bffa15 	stw	r2,-24(fp)
            }
         }
      }
      if (fp->fptr % SS(fp->fs) && nsect != fp->dsect) { /* Fill sector cache if needed */
400854c8:	e0bffe17 	ldw	r2,-8(fp)
400854cc:	10800217 	ldw	r2,8(r2)
400854d0:	10807fcc 	andi	r2,r2,511
400854d4:	10003e26 	beq	r2,zero,400855d0 <f_lseek+0x484>
400854d8:	e0bffe17 	ldw	r2,-8(fp)
400854dc:	10c00617 	ldw	r3,24(r2)
400854e0:	e0bffa17 	ldw	r2,-24(fp)
400854e4:	18803a26 	beq	r3,r2,400855d0 <f_lseek+0x484>
#if !_FS_TINY
#if !_FS_READONLY
         if (fp->flag & FA__DIRTY) {         /* Write-back dirty sector cache */
400854e8:	e0bffe17 	ldw	r2,-8(fp)
400854ec:	10800183 	ldbu	r2,6(r2)
400854f0:	10803fcc 	andi	r2,r2,255
400854f4:	1080100c 	andi	r2,r2,64
400854f8:	10001d26 	beq	r2,zero,40085570 <f_lseek+0x424>
            if (disk_write(fp->fs->drv, fp->buf, fp->dsect, 1) != RES_OK)
400854fc:	e0bffe17 	ldw	r2,-8(fp)
40085500:	10800017 	ldw	r2,0(r2)
40085504:	10800043 	ldbu	r2,1(r2)
40085508:	11003fcc 	andi	r4,r2,255
4008550c:	e0bffe17 	ldw	r2,-8(fp)
40085510:	10c00904 	addi	r3,r2,36
40085514:	e0bffe17 	ldw	r2,-8(fp)
40085518:	10800617 	ldw	r2,24(r2)
4008551c:	180b883a 	mov	r5,r3
40085520:	100d883a 	mov	r6,r2
40085524:	01c00044 	movi	r7,1
40085528:	0080f880 	call	40080f88 <ffs_DiskIOWrite>
4008552c:	10000926 	beq	r2,zero,40085554 <f_lseek+0x408>
               ABORT(fp->fs, FR_DISK_ERR);
40085530:	e0bffe17 	ldw	r2,-8(fp)
40085534:	10c00183 	ldbu	r3,6(r2)
40085538:	00bfe004 	movi	r2,-128
4008553c:	1884b03a 	or	r2,r3,r2
40085540:	1007883a 	mov	r3,r2
40085544:	e0bffe17 	ldw	r2,-8(fp)
40085548:	10c00185 	stb	r3,6(r2)
4008554c:	00800044 	movi	r2,1
40085550:	00002f06 	br	40085610 <f_lseek+0x4c4>
            fp->flag &= ~FA__DIRTY;
40085554:	e0bffe17 	ldw	r2,-8(fp)
40085558:	10c00183 	ldbu	r3,6(r2)
4008555c:	00bfefc4 	movi	r2,-65
40085560:	1884703a 	and	r2,r3,r2
40085564:	1007883a 	mov	r3,r2
40085568:	e0bffe17 	ldw	r2,-8(fp)
4008556c:	10c00185 	stb	r3,6(r2)
         }
#endif
         if (disk_read(fp->fs->drv, fp->buf, nsect, 1) != RES_OK) /* Fill sector cache */
40085570:	e0bffe17 	ldw	r2,-8(fp)
40085574:	10800017 	ldw	r2,0(r2)
40085578:	10800043 	ldbu	r2,1(r2)
4008557c:	10c03fcc 	andi	r3,r2,255
40085580:	e0bffe17 	ldw	r2,-8(fp)
40085584:	10800904 	addi	r2,r2,36
40085588:	1809883a 	mov	r4,r3
4008558c:	100b883a 	mov	r5,r2
40085590:	e1bffa17 	ldw	r6,-24(fp)
40085594:	01c00044 	movi	r7,1
40085598:	0080e6c0 	call	40080e6c <ffs_DiskIORead>
4008559c:	10000926 	beq	r2,zero,400855c4 <f_lseek+0x478>
            ABORT(fp->fs, FR_DISK_ERR);
400855a0:	e0bffe17 	ldw	r2,-8(fp)
400855a4:	10c00183 	ldbu	r3,6(r2)
400855a8:	00bfe004 	movi	r2,-128
400855ac:	1884b03a 	or	r2,r3,r2
400855b0:	1007883a 	mov	r3,r2
400855b4:	e0bffe17 	ldw	r2,-8(fp)
400855b8:	10c00185 	stb	r3,6(r2)
400855bc:	00800044 	movi	r2,1
400855c0:	00001306 	br	40085610 <f_lseek+0x4c4>
#endif
         fp->dsect = nsect;
400855c4:	e0bffe17 	ldw	r2,-8(fp)
400855c8:	e0fffa17 	ldw	r3,-24(fp)
400855cc:	10c00615 	stw	r3,24(r2)
      }
#if !_FS_READONLY
      if (fp->fptr > fp->fsize) {         /* Set file change flag if the file size is extended */
400855d0:	e0bffe17 	ldw	r2,-8(fp)
400855d4:	10800217 	ldw	r2,8(r2)
400855d8:	e0fffe17 	ldw	r3,-8(fp)
400855dc:	18c00317 	ldw	r3,12(r3)
400855e0:	18800a2e 	bgeu	r3,r2,4008560c <f_lseek+0x4c0>
         fp->fsize = fp->fptr;
400855e4:	e0bffe17 	ldw	r2,-8(fp)
400855e8:	10c00217 	ldw	r3,8(r2)
400855ec:	e0bffe17 	ldw	r2,-8(fp)
400855f0:	10c00315 	stw	r3,12(r2)
         fp->flag |= FA__WRITTEN;
400855f4:	e0bffe17 	ldw	r2,-8(fp)
400855f8:	10800183 	ldbu	r2,6(r2)
400855fc:	10800814 	ori	r2,r2,32
40085600:	1007883a 	mov	r3,r2
40085604:	e0bffe17 	ldw	r2,-8(fp)
40085608:	10c00185 	stb	r3,6(r2)
      }
#endif
   }

   LEAVE_FF(fp->fs, res);
4008560c:	e0bffb17 	ldw	r2,-20(fp)
}
40085610:	e037883a 	mov	sp,fp
40085614:	dfc00117 	ldw	ra,4(sp)
40085618:	df000017 	ldw	fp,0(sp)
4008561c:	dec00204 	addi	sp,sp,8
40085620:	f800283a 	ret

40085624 <f_opendir>:

FRESULT f_opendir (
   DIR *dj,       /* Pointer to directory object to create */
   const TCHAR *path /* Pointer to the directory path */
)
{
40085624:	defff804 	addi	sp,sp,-32
40085628:	dfc00715 	stw	ra,28(sp)
4008562c:	df000615 	stw	fp,24(sp)
40085630:	df000604 	addi	fp,sp,24
40085634:	e13ffe15 	stw	r4,-8(fp)
40085638:	e17fff15 	stw	r5,-4(fp)
   FRESULT res;
   DEF_NAMEBUF;


   res = chk_mounted(&path, &dj->fs, 0);
4008563c:	e0bffe17 	ldw	r2,-8(fp)
40085640:	e0ffff04 	addi	r3,fp,-4
40085644:	1809883a 	mov	r4,r3
40085648:	100b883a 	mov	r5,r2
4008564c:	000d883a 	mov	r6,zero
40085650:	00835400 	call	40083540 <chk_mounted>
40085654:	e0bffa15 	stw	r2,-24(fp)
   if (res == FR_OK) {
40085658:	e0bffa17 	ldw	r2,-24(fp)
4008565c:	1000471e 	bne	r2,zero,4008577c <f_opendir+0x158>
      INIT_BUF(*dj);
40085660:	e0bffe17 	ldw	r2,-8(fp)
40085664:	e0fffb04 	addi	r3,fp,-20
40085668:	10c00615 	stw	r3,24(r2)
      res = follow_path(dj, path);        /* Follow the path to the directory */
4008566c:	e0bfff17 	ldw	r2,-4(fp)
40085670:	e13ffe17 	ldw	r4,-8(fp)
40085674:	100b883a 	mov	r5,r2
40085678:	00831fc0 	call	400831fc <follow_path>
4008567c:	e0bffa15 	stw	r2,-24(fp)
      FREE_BUF();
      if (res == FR_OK) {                 /* Follow completed */
40085680:	e0bffa17 	ldw	r2,-24(fp)
40085684:	1000381e 	bne	r2,zero,40085768 <f_opendir+0x144>
         if (dj->dir) {                /* It is not the root dir */
40085688:	e0bffe17 	ldw	r2,-8(fp)
4008568c:	10800517 	ldw	r2,20(r2)
40085690:	10002a26 	beq	r2,zero,4008573c <f_opendir+0x118>
            if (dj->dir[DIR_Attr] & AM_DIR) {   /* The object is a directory */
40085694:	e0bffe17 	ldw	r2,-8(fp)
40085698:	10800517 	ldw	r2,20(r2)
4008569c:	108002c4 	addi	r2,r2,11
400856a0:	10800003 	ldbu	r2,0(r2)
400856a4:	10803fcc 	andi	r2,r2,255
400856a8:	1080040c 	andi	r2,r2,16
400856ac:	10002126 	beq	r2,zero,40085734 <f_opendir+0x110>
               dj->sclust = LD_CLUST(dj->dir);
400856b0:	e0bffe17 	ldw	r2,-8(fp)
400856b4:	10800517 	ldw	r2,20(r2)
400856b8:	10800544 	addi	r2,r2,21
400856bc:	10800003 	ldbu	r2,0(r2)
400856c0:	10803fcc 	andi	r2,r2,255
400856c4:	1004923a 	slli	r2,r2,8
400856c8:	1007883a 	mov	r3,r2
400856cc:	e0bffe17 	ldw	r2,-8(fp)
400856d0:	10800517 	ldw	r2,20(r2)
400856d4:	10800504 	addi	r2,r2,20
400856d8:	10800003 	ldbu	r2,0(r2)
400856dc:	10803fcc 	andi	r2,r2,255
400856e0:	1884b03a 	or	r2,r3,r2
400856e4:	10bfffcc 	andi	r2,r2,65535
400856e8:	1006943a 	slli	r3,r2,16
400856ec:	e0bffe17 	ldw	r2,-8(fp)
400856f0:	10800517 	ldw	r2,20(r2)
400856f4:	108006c4 	addi	r2,r2,27
400856f8:	10800003 	ldbu	r2,0(r2)
400856fc:	10803fcc 	andi	r2,r2,255
40085700:	1004923a 	slli	r2,r2,8
40085704:	1009883a 	mov	r4,r2
40085708:	e0bffe17 	ldw	r2,-8(fp)
4008570c:	10800517 	ldw	r2,20(r2)
40085710:	10800684 	addi	r2,r2,26
40085714:	10800003 	ldbu	r2,0(r2)
40085718:	10803fcc 	andi	r2,r2,255
4008571c:	2084b03a 	or	r2,r4,r2
40085720:	10bfffcc 	andi	r2,r2,65535
40085724:	1886b03a 	or	r3,r3,r2
40085728:	e0bffe17 	ldw	r2,-8(fp)
4008572c:	10c00215 	stw	r3,8(r2)
40085730:	00000206 	br	4008573c <f_opendir+0x118>
            } else {                /* The object is not a directory */
               res = FR_NO_PATH;
40085734:	00800144 	movi	r2,5
40085738:	e0bffa15 	stw	r2,-24(fp)
            }
         }
         if (res == FR_OK) {
4008573c:	e0bffa17 	ldw	r2,-24(fp)
40085740:	1000091e 	bne	r2,zero,40085768 <f_opendir+0x144>
            dj->id = dj->fs->id;
40085744:	e0bffe17 	ldw	r2,-8(fp)
40085748:	10800017 	ldw	r2,0(r2)
4008574c:	10c0018b 	ldhu	r3,6(r2)
40085750:	e0bffe17 	ldw	r2,-8(fp)
40085754:	10c0010d 	sth	r3,4(r2)
            res = dir_sdi(dj, 0);         /* Rewind dir */
40085758:	e13ffe17 	ldw	r4,-8(fp)
4008575c:	000b883a 	mov	r5,zero
40085760:	00824640 	call	40082464 <dir_sdi>
40085764:	e0bffa15 	stw	r2,-24(fp)
         }
      }
      if (res == FR_NO_FILE) res = FR_NO_PATH;
40085768:	e0bffa17 	ldw	r2,-24(fp)
4008576c:	10800118 	cmpnei	r2,r2,4
40085770:	1000021e 	bne	r2,zero,4008577c <f_opendir+0x158>
40085774:	00800144 	movi	r2,5
40085778:	e0bffa15 	stw	r2,-24(fp)
   }

   LEAVE_FF(dj->fs, res);
4008577c:	e0bffa17 	ldw	r2,-24(fp)
}
40085780:	e037883a 	mov	sp,fp
40085784:	dfc00117 	ldw	ra,4(sp)
40085788:	df000017 	ldw	fp,0(sp)
4008578c:	dec00204 	addi	sp,sp,8
40085790:	f800283a 	ret

40085794 <f_readdir>:

FRESULT f_readdir (
   DIR *dj,       /* Pointer to the open directory object */
   FILINFO *fno      /* Pointer to file information to return */
)
{
40085794:	defff804 	addi	sp,sp,-32
40085798:	dfc00715 	stw	ra,28(sp)
4008579c:	df000615 	stw	fp,24(sp)
400857a0:	df000604 	addi	fp,sp,24
400857a4:	e13ffe15 	stw	r4,-8(fp)
400857a8:	e17fff15 	stw	r5,-4(fp)
   FRESULT res;
   DEF_NAMEBUF;


   res = validate(dj->fs, dj->id);        /* Check validity of the object */
400857ac:	e0bffe17 	ldw	r2,-8(fp)
400857b0:	10c00017 	ldw	r3,0(r2)
400857b4:	e0bffe17 	ldw	r2,-8(fp)
400857b8:	1080010b 	ldhu	r2,4(r2)
400857bc:	10bfffcc 	andi	r2,r2,65535
400857c0:	1809883a 	mov	r4,r3
400857c4:	100b883a 	mov	r5,r2
400857c8:	0083e740 	call	40083e74 <validate>
400857cc:	e0bffa15 	stw	r2,-24(fp)
   if (res == FR_OK) {
400857d0:	e0bffa17 	ldw	r2,-24(fp)
400857d4:	1000221e 	bne	r2,zero,40085860 <f_readdir+0xcc>
      if (!fno) {
400857d8:	e0bfff17 	ldw	r2,-4(fp)
400857dc:	1000051e 	bne	r2,zero,400857f4 <f_readdir+0x60>
         res = dir_sdi(dj, 0);         /* Rewind the directory object */
400857e0:	e13ffe17 	ldw	r4,-8(fp)
400857e4:	000b883a 	mov	r5,zero
400857e8:	00824640 	call	40082464 <dir_sdi>
400857ec:	e0bffa15 	stw	r2,-24(fp)
400857f0:	00001b06 	br	40085860 <f_readdir+0xcc>
      } else {
         INIT_BUF(*dj);
400857f4:	e0bffe17 	ldw	r2,-8(fp)
400857f8:	e0fffb04 	addi	r3,fp,-20
400857fc:	10c00615 	stw	r3,24(r2)
         res = dir_read(dj);           /* Read an directory item */
40085800:	e13ffe17 	ldw	r4,-8(fp)
40085804:	0082a2c0 	call	40082a2c <dir_read>
40085808:	e0bffa15 	stw	r2,-24(fp)
         if (res == FR_NO_FILE) {      /* Reached end of dir */
4008580c:	e0bffa17 	ldw	r2,-24(fp)
40085810:	10800118 	cmpnei	r2,r2,4
40085814:	1000031e 	bne	r2,zero,40085824 <f_readdir+0x90>
            dj->sect = 0;
40085818:	e0bffe17 	ldw	r2,-8(fp)
4008581c:	10000415 	stw	zero,16(r2)
            res = FR_OK;
40085820:	e03ffa15 	stw	zero,-24(fp)
         }
         if (res == FR_OK) {           /* A valid entry is found */
40085824:	e0bffa17 	ldw	r2,-24(fp)
40085828:	10000d1e 	bne	r2,zero,40085860 <f_readdir+0xcc>
            get_fileinfo(dj, fno);     /* Get the object information */
4008582c:	e13ffe17 	ldw	r4,-8(fp)
40085830:	e17fff17 	ldw	r5,-4(fp)
40085834:	0082fcc0 	call	40082fcc <get_fileinfo>
            res = dir_next(dj, 0);     /* Increment index for next */
40085838:	e13ffe17 	ldw	r4,-8(fp)
4008583c:	000b883a 	mov	r5,zero
40085840:	00826500 	call	40082650 <dir_next>
40085844:	e0bffa15 	stw	r2,-24(fp)
            if (res == FR_NO_FILE) {
40085848:	e0bffa17 	ldw	r2,-24(fp)
4008584c:	10800118 	cmpnei	r2,r2,4
40085850:	1000031e 	bne	r2,zero,40085860 <f_readdir+0xcc>
               dj->sect = 0;
40085854:	e0bffe17 	ldw	r2,-8(fp)
40085858:	10000415 	stw	zero,16(r2)
               res = FR_OK;
4008585c:	e03ffa15 	stw	zero,-24(fp)
         }
         FREE_BUF();
      }
   }

   LEAVE_FF(dj->fs, res);
40085860:	e0bffa17 	ldw	r2,-24(fp)
}
40085864:	e037883a 	mov	sp,fp
40085868:	dfc00117 	ldw	ra,4(sp)
4008586c:	df000017 	ldw	fp,0(sp)
40085870:	dec00204 	addi	sp,sp,8
40085874:	f800283a 	ret

40085878 <f_stat>:

FRESULT f_stat (
   const TCHAR *path,   /* Pointer to the file path */
   FILINFO *fno      /* Pointer to file information to return */
)
{
40085878:	defff104 	addi	sp,sp,-60
4008587c:	dfc00e15 	stw	ra,56(sp)
40085880:	df000d15 	stw	fp,52(sp)
40085884:	df000d04 	addi	fp,sp,52
40085888:	e13ffe15 	stw	r4,-8(fp)
4008588c:	e17fff15 	stw	r5,-4(fp)
   FRESULT res;
   DIR dj;
   DEF_NAMEBUF;


   res = chk_mounted(&path, &dj.fs, 0);
40085890:	e0fffe04 	addi	r3,fp,-8
40085894:	e0bff404 	addi	r2,fp,-48
40085898:	1809883a 	mov	r4,r3
4008589c:	100b883a 	mov	r5,r2
400858a0:	000d883a 	mov	r6,zero
400858a4:	00835400 	call	40083540 <chk_mounted>
400858a8:	e0bff315 	stw	r2,-52(fp)
   if (res == FR_OK) {
400858ac:	e0bff317 	ldw	r2,-52(fp)
400858b0:	1000131e 	bne	r2,zero,40085900 <f_stat+0x88>
      INIT_BUF(dj);
400858b4:	e0bffb04 	addi	r2,fp,-20
400858b8:	e0bffa15 	stw	r2,-24(fp)
      res = follow_path(&dj, path); /* Follow the file path */
400858bc:	e0bffe17 	ldw	r2,-8(fp)
400858c0:	e0fff404 	addi	r3,fp,-48
400858c4:	1809883a 	mov	r4,r3
400858c8:	100b883a 	mov	r5,r2
400858cc:	00831fc0 	call	400831fc <follow_path>
400858d0:	e0bff315 	stw	r2,-52(fp)
      if (res == FR_OK) {           /* Follow completed */
400858d4:	e0bff317 	ldw	r2,-52(fp)
400858d8:	1000091e 	bne	r2,zero,40085900 <f_stat+0x88>
         if (dj.dir)    /* Found an object */
400858dc:	e0bff917 	ldw	r2,-28(fp)
400858e0:	10000526 	beq	r2,zero,400858f8 <f_stat+0x80>
            get_fileinfo(&dj, fno);
400858e4:	e0bff404 	addi	r2,fp,-48
400858e8:	1009883a 	mov	r4,r2
400858ec:	e17fff17 	ldw	r5,-4(fp)
400858f0:	0082fcc0 	call	40082fcc <get_fileinfo>
400858f4:	00000206 	br	40085900 <f_stat+0x88>
         else        /* It is root dir */
            res = FR_INVALID_NAME;
400858f8:	00800184 	movi	r2,6
400858fc:	e0bff315 	stw	r2,-52(fp)
      }
      FREE_BUF();
   }

   LEAVE_FF(dj.fs, res);
40085900:	e0bff317 	ldw	r2,-52(fp)
}
40085904:	e037883a 	mov	sp,fp
40085908:	dfc00117 	ldw	ra,4(sp)
4008590c:	df000017 	ldw	fp,0(sp)
40085910:	dec00204 	addi	sp,sp,8
40085914:	f800283a 	ret

40085918 <f_getfree>:
FRESULT f_getfree (
   const TCHAR *path,   /* Pointer to the logical drive number (root dir) */
   uint32_t *nclst,     /* Pointer to the variable to return number of free clusters */
   FATFS **fatfs     /* Pointer to pointer to corresponding file system object to return */
)
{
40085918:	defff304 	addi	sp,sp,-52
4008591c:	dfc00c15 	stw	ra,48(sp)
40085920:	df000b15 	stw	fp,44(sp)
40085924:	df000b04 	addi	fp,sp,44
40085928:	e13ffd15 	stw	r4,-12(fp)
4008592c:	e17ffe15 	stw	r5,-8(fp)
40085930:	e1bfff15 	stw	r6,-4(fp)
   uint32_t i;
   uint8_t fat, *p;


   /* Get drive number */
   res = chk_mounted(&path, fatfs, 0);
40085934:	e0bffd04 	addi	r2,fp,-12
40085938:	1009883a 	mov	r4,r2
4008593c:	e17fff17 	ldw	r5,-4(fp)
40085940:	000d883a 	mov	r6,zero
40085944:	00835400 	call	40083540 <chk_mounted>
40085948:	e0bff515 	stw	r2,-44(fp)
   if (res == FR_OK) {
4008594c:	e0bff517 	ldw	r2,-44(fp)
40085950:	1000a61e 	bne	r2,zero,40085bec <f_getfree+0x2d4>
      /* If free_clust is valid, return it without full cluster scan */
      if ((*fatfs)->free_clust <= (*fatfs)->n_fatent - 2) {
40085954:	e0bfff17 	ldw	r2,-4(fp)
40085958:	10800017 	ldw	r2,0(r2)
4008595c:	10800417 	ldw	r2,16(r2)
40085960:	e0ffff17 	ldw	r3,-4(fp)
40085964:	18c00017 	ldw	r3,0(r3)
40085968:	18c00617 	ldw	r3,24(r3)
4008596c:	18ffff84 	addi	r3,r3,-2
40085970:	18800636 	bltu	r3,r2,4008598c <f_getfree+0x74>
         *nclst = (*fatfs)->free_clust;
40085974:	e0bfff17 	ldw	r2,-4(fp)
40085978:	10800017 	ldw	r2,0(r2)
4008597c:	10c00417 	ldw	r3,16(r2)
40085980:	e0bffe17 	ldw	r2,-8(fp)
40085984:	10c00015 	stw	r3,0(r2)
40085988:	00009806 	br	40085bec <f_getfree+0x2d4>
      } else {
         /* Get number of free clusters */
         fat = (*fatfs)->fs_type;
4008598c:	e0bfff17 	ldw	r2,-4(fp)
40085990:	10800017 	ldw	r2,0(r2)
40085994:	10800003 	ldbu	r2,0(r2)
40085998:	e0bffb05 	stb	r2,-20(fp)
         n = 0;
4008599c:	e03ff615 	stw	zero,-40(fp)
         if (fat == FS_FAT12) {
400859a0:	e0bffb03 	ldbu	r2,-20(fp)
400859a4:	10800058 	cmpnei	r2,r2,1
400859a8:	1000231e 	bne	r2,zero,40085a38 <f_getfree+0x120>
            clst = 2;
400859ac:	00800084 	movi	r2,2
400859b0:	e0bff715 	stw	r2,-36(fp)
            do {
               stat = get_fat(*fatfs, clst);
400859b4:	e0bfff17 	ldw	r2,-4(fp)
400859b8:	10800017 	ldw	r2,0(r2)
400859bc:	1009883a 	mov	r4,r2
400859c0:	e17ff717 	ldw	r5,-36(fp)
400859c4:	0081b780 	call	40081b78 <get_fat>
400859c8:	e0bffc15 	stw	r2,-16(fp)
               if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
400859cc:	e0bffc17 	ldw	r2,-16(fp)
400859d0:	10bfffd8 	cmpnei	r2,r2,-1
400859d4:	1000031e 	bne	r2,zero,400859e4 <f_getfree+0xcc>
400859d8:	00800044 	movi	r2,1
400859dc:	e0bff515 	stw	r2,-44(fp)
400859e0:	00001406 	br	40085a34 <f_getfree+0x11c>
               if (stat == 1) { res = FR_INT_ERR; break; }
400859e4:	e0bffc17 	ldw	r2,-16(fp)
400859e8:	10800058 	cmpnei	r2,r2,1
400859ec:	1000031e 	bne	r2,zero,400859fc <f_getfree+0xe4>
400859f0:	00800084 	movi	r2,2
400859f4:	e0bff515 	stw	r2,-44(fp)
400859f8:	00000e06 	br	40085a34 <f_getfree+0x11c>
               if (stat == 0) n++;
400859fc:	e0bffc17 	ldw	r2,-16(fp)
40085a00:	1000031e 	bne	r2,zero,40085a10 <f_getfree+0xf8>
40085a04:	e0bff617 	ldw	r2,-40(fp)
40085a08:	10800044 	addi	r2,r2,1
40085a0c:	e0bff615 	stw	r2,-40(fp)
            } while (++clst < (*fatfs)->n_fatent);
40085a10:	e0bff717 	ldw	r2,-36(fp)
40085a14:	10800044 	addi	r2,r2,1
40085a18:	e0bff715 	stw	r2,-36(fp)
40085a1c:	e0bfff17 	ldw	r2,-4(fp)
40085a20:	10800017 	ldw	r2,0(r2)
40085a24:	10800617 	ldw	r2,24(r2)
40085a28:	e0fff717 	ldw	r3,-36(fp)
40085a2c:	18bfe136 	bltu	r3,r2,400859b4 <__alt_mem_epcs+0xfff449b4>
40085a30:	00006006 	br	40085bb4 <f_getfree+0x29c>
40085a34:	00005f06 	br	40085bb4 <f_getfree+0x29c>
         } else {
            clst = (*fatfs)->n_fatent;
40085a38:	e0bfff17 	ldw	r2,-4(fp)
40085a3c:	10800017 	ldw	r2,0(r2)
40085a40:	10800617 	ldw	r2,24(r2)
40085a44:	e0bff715 	stw	r2,-36(fp)
            sect = (*fatfs)->fatbase;
40085a48:	e0bfff17 	ldw	r2,-4(fp)
40085a4c:	10800017 	ldw	r2,0(r2)
40085a50:	10800817 	ldw	r2,32(r2)
40085a54:	e0bff815 	stw	r2,-32(fp)
            i = 0; p = 0;
40085a58:	e03ff915 	stw	zero,-28(fp)
40085a5c:	e03ffa15 	stw	zero,-24(fp)
            do {
               if (!i) {
40085a60:	e0bff917 	ldw	r2,-28(fp)
40085a64:	1000111e 	bne	r2,zero,40085aac <f_getfree+0x194>
                  res = move_window(*fatfs, sect++);
40085a68:	e0bfff17 	ldw	r2,-4(fp)
40085a6c:	11000017 	ldw	r4,0(r2)
40085a70:	e0bff817 	ldw	r2,-32(fp)
40085a74:	10c00044 	addi	r3,r2,1
40085a78:	e0fff815 	stw	r3,-32(fp)
40085a7c:	100b883a 	mov	r5,r2
40085a80:	00817940 	call	40081794 <move_window>
40085a84:	e0bff515 	stw	r2,-44(fp)
                  if (res != FR_OK) break;
40085a88:	e0bff517 	ldw	r2,-44(fp)
40085a8c:	10000126 	beq	r2,zero,40085a94 <f_getfree+0x17c>
40085a90:	00004806 	br	40085bb4 <f_getfree+0x29c>
                  p = (*fatfs)->win;
40085a94:	e0bfff17 	ldw	r2,-4(fp)
40085a98:	10800017 	ldw	r2,0(r2)
40085a9c:	10800c04 	addi	r2,r2,48
40085aa0:	e0bffa15 	stw	r2,-24(fp)
                  i = SS(*fatfs);
40085aa4:	00808004 	movi	r2,512
40085aa8:	e0bff915 	stw	r2,-28(fp)
               }
               if (fat == FS_FAT16) {
40085aac:	e0bffb03 	ldbu	r2,-20(fp)
40085ab0:	10800098 	cmpnei	r2,r2,2
40085ab4:	1000181e 	bne	r2,zero,40085b18 <f_getfree+0x200>
                  if (LD_WORD(p) == 0) n++;
40085ab8:	e0bffa17 	ldw	r2,-24(fp)
40085abc:	10800044 	addi	r2,r2,1
40085ac0:	10800003 	ldbu	r2,0(r2)
40085ac4:	10803fcc 	andi	r2,r2,255
40085ac8:	1004923a 	slli	r2,r2,8
40085acc:	1007883a 	mov	r3,r2
40085ad0:	e0bffa17 	ldw	r2,-24(fp)
40085ad4:	10800003 	ldbu	r2,0(r2)
40085ad8:	10803fcc 	andi	r2,r2,255
40085adc:	1884b03a 	or	r2,r3,r2
40085ae0:	10bfffcc 	andi	r2,r2,65535
40085ae4:	10a0001c 	xori	r2,r2,32768
40085ae8:	10a00004 	addi	r2,r2,-32768
40085aec:	1000031e 	bne	r2,zero,40085afc <f_getfree+0x1e4>
40085af0:	e0bff617 	ldw	r2,-40(fp)
40085af4:	10800044 	addi	r2,r2,1
40085af8:	e0bff615 	stw	r2,-40(fp)
                  p += 2; i -= 2;
40085afc:	e0bffa17 	ldw	r2,-24(fp)
40085b00:	10800084 	addi	r2,r2,2
40085b04:	e0bffa15 	stw	r2,-24(fp)
40085b08:	e0bff917 	ldw	r2,-28(fp)
40085b0c:	10bfff84 	addi	r2,r2,-2
40085b10:	e0bff915 	stw	r2,-28(fp)
40085b14:	00002206 	br	40085ba0 <f_getfree+0x288>
               } else {
                  if ((LD_DWORD(p) & 0x0FFFFFFF) == 0) n++;
40085b18:	e0bffa17 	ldw	r2,-24(fp)
40085b1c:	108000c4 	addi	r2,r2,3
40085b20:	10800003 	ldbu	r2,0(r2)
40085b24:	10803fcc 	andi	r2,r2,255
40085b28:	1006963a 	slli	r3,r2,24
40085b2c:	e0bffa17 	ldw	r2,-24(fp)
40085b30:	10800084 	addi	r2,r2,2
40085b34:	10800003 	ldbu	r2,0(r2)
40085b38:	10803fcc 	andi	r2,r2,255
40085b3c:	1004943a 	slli	r2,r2,16
40085b40:	1884b03a 	or	r2,r3,r2
40085b44:	e0fffa17 	ldw	r3,-24(fp)
40085b48:	18c00044 	addi	r3,r3,1
40085b4c:	18c00003 	ldbu	r3,0(r3)
40085b50:	18c03fcc 	andi	r3,r3,255
40085b54:	1806923a 	slli	r3,r3,8
40085b58:	10c6b03a 	or	r3,r2,r3
40085b5c:	e0bffa17 	ldw	r2,-24(fp)
40085b60:	10800003 	ldbu	r2,0(r2)
40085b64:	10803fcc 	andi	r2,r2,255
40085b68:	1886b03a 	or	r3,r3,r2
40085b6c:	00840034 	movhi	r2,4096
40085b70:	10bfffc4 	addi	r2,r2,-1
40085b74:	1884703a 	and	r2,r3,r2
40085b78:	1000031e 	bne	r2,zero,40085b88 <f_getfree+0x270>
40085b7c:	e0bff617 	ldw	r2,-40(fp)
40085b80:	10800044 	addi	r2,r2,1
40085b84:	e0bff615 	stw	r2,-40(fp)
                  p += 4; i -= 4;
40085b88:	e0bffa17 	ldw	r2,-24(fp)
40085b8c:	10800104 	addi	r2,r2,4
40085b90:	e0bffa15 	stw	r2,-24(fp)
40085b94:	e0bff917 	ldw	r2,-28(fp)
40085b98:	10bfff04 	addi	r2,r2,-4
40085b9c:	e0bff915 	stw	r2,-28(fp)
               }
            } while (--clst);
40085ba0:	e0bff717 	ldw	r2,-36(fp)
40085ba4:	10bfffc4 	addi	r2,r2,-1
40085ba8:	e0bff715 	stw	r2,-36(fp)
40085bac:	e0bff717 	ldw	r2,-36(fp)
40085bb0:	103fab1e 	bne	r2,zero,40085a60 <__alt_mem_epcs+0xfff44a60>
         }
         (*fatfs)->free_clust = n;
40085bb4:	e0bfff17 	ldw	r2,-4(fp)
40085bb8:	10800017 	ldw	r2,0(r2)
40085bbc:	e0fff617 	ldw	r3,-40(fp)
40085bc0:	10c00415 	stw	r3,16(r2)
         if (fat == FS_FAT32) (*fatfs)->fsi_flag = 1;
40085bc4:	e0bffb03 	ldbu	r2,-20(fp)
40085bc8:	108000d8 	cmpnei	r2,r2,3
40085bcc:	1000041e 	bne	r2,zero,40085be0 <f_getfree+0x2c8>
40085bd0:	e0bfff17 	ldw	r2,-4(fp)
40085bd4:	10800017 	ldw	r2,0(r2)
40085bd8:	00c00044 	movi	r3,1
40085bdc:	10c00145 	stb	r3,5(r2)
         *nclst = n;
40085be0:	e0bffe17 	ldw	r2,-8(fp)
40085be4:	e0fff617 	ldw	r3,-40(fp)
40085be8:	10c00015 	stw	r3,0(r2)
      }
   }
   LEAVE_FF(*fatfs, res);
40085bec:	e0bff517 	ldw	r2,-44(fp)
}
40085bf0:	e037883a 	mov	sp,fp
40085bf4:	dfc00117 	ldw	ra,4(sp)
40085bf8:	df000017 	ldw	fp,0(sp)
40085bfc:	dec00204 	addi	sp,sp,8
40085c00:	f800283a 	ret

40085c04 <f_truncate>:
/*-----------------------------------------------------------------------*/

FRESULT f_truncate (
   FIL *fp     /* Pointer to the file object */
)
{
40085c04:	defffb04 	addi	sp,sp,-20
40085c08:	dfc00415 	stw	ra,16(sp)
40085c0c:	df000315 	stw	fp,12(sp)
40085c10:	df000304 	addi	fp,sp,12
40085c14:	e13fff15 	stw	r4,-4(fp)
   FRESULT res;
   uint32_t ncl;


   res = validate(fp->fs, fp->id);     /* Check validity of the object */
40085c18:	e0bfff17 	ldw	r2,-4(fp)
40085c1c:	10c00017 	ldw	r3,0(r2)
40085c20:	e0bfff17 	ldw	r2,-4(fp)
40085c24:	1080010b 	ldhu	r2,4(r2)
40085c28:	10bfffcc 	andi	r2,r2,65535
40085c2c:	1809883a 	mov	r4,r3
40085c30:	100b883a 	mov	r5,r2
40085c34:	0083e740 	call	40083e74 <validate>
40085c38:	e0bffd15 	stw	r2,-12(fp)
   if (res == FR_OK) {
40085c3c:	e0bffd17 	ldw	r2,-12(fp)
40085c40:	1000101e 	bne	r2,zero,40085c84 <f_truncate+0x80>
      if (fp->flag & FA__ERROR) {         /* Check abort flag */
40085c44:	e0bfff17 	ldw	r2,-4(fp)
40085c48:	10800183 	ldbu	r2,6(r2)
40085c4c:	10803fcc 	andi	r2,r2,255
40085c50:	1080201c 	xori	r2,r2,128
40085c54:	10bfe004 	addi	r2,r2,-128
40085c58:	1000030e 	bge	r2,zero,40085c68 <f_truncate+0x64>
         res = FR_INT_ERR;
40085c5c:	00800084 	movi	r2,2
40085c60:	e0bffd15 	stw	r2,-12(fp)
40085c64:	00000706 	br	40085c84 <f_truncate+0x80>
      } else {
         if (!(fp->flag & FA_WRITE))      /* Check access mode */
40085c68:	e0bfff17 	ldw	r2,-4(fp)
40085c6c:	10800183 	ldbu	r2,6(r2)
40085c70:	10803fcc 	andi	r2,r2,255
40085c74:	1080008c 	andi	r2,r2,2
40085c78:	1000021e 	bne	r2,zero,40085c84 <f_truncate+0x80>
            res = FR_DENIED;
40085c7c:	008001c4 	movi	r2,7
40085c80:	e0bffd15 	stw	r2,-12(fp)
      }
   }
   if (res == FR_OK) {
40085c84:	e0bffd17 	ldw	r2,-12(fp)
40085c88:	1000521e 	bne	r2,zero,40085dd4 <f_truncate+0x1d0>
      if (fp->fsize > fp->fptr) {
40085c8c:	e0bfff17 	ldw	r2,-4(fp)
40085c90:	10800317 	ldw	r2,12(r2)
40085c94:	e0ffff17 	ldw	r3,-4(fp)
40085c98:	18c00217 	ldw	r3,8(r3)
40085c9c:	1880442e 	bgeu	r3,r2,40085db0 <f_truncate+0x1ac>
         fp->fsize = fp->fptr;   /* Set file size to current R/W point */
40085ca0:	e0bfff17 	ldw	r2,-4(fp)
40085ca4:	10c00217 	ldw	r3,8(r2)
40085ca8:	e0bfff17 	ldw	r2,-4(fp)
40085cac:	10c00315 	stw	r3,12(r2)
         fp->flag |= FA__WRITTEN;
40085cb0:	e0bfff17 	ldw	r2,-4(fp)
40085cb4:	10800183 	ldbu	r2,6(r2)
40085cb8:	10800814 	ori	r2,r2,32
40085cbc:	1007883a 	mov	r3,r2
40085cc0:	e0bfff17 	ldw	r2,-4(fp)
40085cc4:	10c00185 	stb	r3,6(r2)
         if (fp->fptr == 0) { /* When set file size to zero, remove entire cluster chain */
40085cc8:	e0bfff17 	ldw	r2,-4(fp)
40085ccc:	10800217 	ldw	r2,8(r2)
40085cd0:	10000b1e 	bne	r2,zero,40085d00 <f_truncate+0xfc>
            res = remove_chain(fp->fs, fp->sclust);
40085cd4:	e0bfff17 	ldw	r2,-4(fp)
40085cd8:	10c00017 	ldw	r3,0(r2)
40085cdc:	e0bfff17 	ldw	r2,-4(fp)
40085ce0:	10800417 	ldw	r2,16(r2)
40085ce4:	1809883a 	mov	r4,r3
40085ce8:	100b883a 	mov	r5,r2
40085cec:	008216c0 	call	4008216c <remove_chain>
40085cf0:	e0bffd15 	stw	r2,-12(fp)
            fp->sclust = 0;
40085cf4:	e0bfff17 	ldw	r2,-4(fp)
40085cf8:	10000415 	stw	zero,16(r2)
40085cfc:	00002c06 	br	40085db0 <f_truncate+0x1ac>
         } else {          /* When truncate a part of the file, remove remaining clusters */
            ncl = get_fat(fp->fs, fp->clust);
40085d00:	e0bfff17 	ldw	r2,-4(fp)
40085d04:	10c00017 	ldw	r3,0(r2)
40085d08:	e0bfff17 	ldw	r2,-4(fp)
40085d0c:	10800517 	ldw	r2,20(r2)
40085d10:	1809883a 	mov	r4,r3
40085d14:	100b883a 	mov	r5,r2
40085d18:	0081b780 	call	40081b78 <get_fat>
40085d1c:	e0bffe15 	stw	r2,-8(fp)
            res = FR_OK;
40085d20:	e03ffd15 	stw	zero,-12(fp)
            if (ncl == 0xFFFFFFFF) res = FR_DISK_ERR;
40085d24:	e0bffe17 	ldw	r2,-8(fp)
40085d28:	10bfffd8 	cmpnei	r2,r2,-1
40085d2c:	1000021e 	bne	r2,zero,40085d38 <f_truncate+0x134>
40085d30:	00800044 	movi	r2,1
40085d34:	e0bffd15 	stw	r2,-12(fp)
            if (ncl == 1) res = FR_INT_ERR;
40085d38:	e0bffe17 	ldw	r2,-8(fp)
40085d3c:	10800058 	cmpnei	r2,r2,1
40085d40:	1000021e 	bne	r2,zero,40085d4c <f_truncate+0x148>
40085d44:	00800084 	movi	r2,2
40085d48:	e0bffd15 	stw	r2,-12(fp)
            if (res == FR_OK && ncl < fp->fs->n_fatent) {
40085d4c:	e0bffd17 	ldw	r2,-12(fp)
40085d50:	1000171e 	bne	r2,zero,40085db0 <f_truncate+0x1ac>
40085d54:	e0bfff17 	ldw	r2,-4(fp)
40085d58:	10800017 	ldw	r2,0(r2)
40085d5c:	10800617 	ldw	r2,24(r2)
40085d60:	e0fffe17 	ldw	r3,-8(fp)
40085d64:	1880122e 	bgeu	r3,r2,40085db0 <f_truncate+0x1ac>
               res = put_fat(fp->fs, fp->clust, 0x0FFFFFFF);
40085d68:	e0bfff17 	ldw	r2,-4(fp)
40085d6c:	10c00017 	ldw	r3,0(r2)
40085d70:	e0bfff17 	ldw	r2,-4(fp)
40085d74:	10800517 	ldw	r2,20(r2)
40085d78:	1809883a 	mov	r4,r3
40085d7c:	100b883a 	mov	r5,r2
40085d80:	01840034 	movhi	r6,4096
40085d84:	31bfffc4 	addi	r6,r6,-1
40085d88:	0081dfc0 	call	40081dfc <put_fat>
40085d8c:	e0bffd15 	stw	r2,-12(fp)
               if (res == FR_OK) res = remove_chain(fp->fs, ncl);
40085d90:	e0bffd17 	ldw	r2,-12(fp)
40085d94:	1000061e 	bne	r2,zero,40085db0 <f_truncate+0x1ac>
40085d98:	e0bfff17 	ldw	r2,-4(fp)
40085d9c:	10800017 	ldw	r2,0(r2)
40085da0:	1009883a 	mov	r4,r2
40085da4:	e17ffe17 	ldw	r5,-8(fp)
40085da8:	008216c0 	call	4008216c <remove_chain>
40085dac:	e0bffd15 	stw	r2,-12(fp)
            }
         }
      }
      if (res != FR_OK) fp->flag |= FA__ERROR;
40085db0:	e0bffd17 	ldw	r2,-12(fp)
40085db4:	10000726 	beq	r2,zero,40085dd4 <f_truncate+0x1d0>
40085db8:	e0bfff17 	ldw	r2,-4(fp)
40085dbc:	10c00183 	ldbu	r3,6(r2)
40085dc0:	00bfe004 	movi	r2,-128
40085dc4:	1884b03a 	or	r2,r3,r2
40085dc8:	1007883a 	mov	r3,r2
40085dcc:	e0bfff17 	ldw	r2,-4(fp)
40085dd0:	10c00185 	stb	r3,6(r2)
   }

   LEAVE_FF(fp->fs, res);
40085dd4:	e0bffd17 	ldw	r2,-12(fp)
}
40085dd8:	e037883a 	mov	sp,fp
40085ddc:	dfc00117 	ldw	ra,4(sp)
40085de0:	df000017 	ldw	fp,0(sp)
40085de4:	dec00204 	addi	sp,sp,8
40085de8:	f800283a 	ret

40085dec <f_unlink>:
/*-----------------------------------------------------------------------*/

FRESULT f_unlink (
   const TCHAR *path    /* Pointer to the file or directory path */
)
{
40085dec:	deffe904 	addi	sp,sp,-92
40085df0:	dfc01615 	stw	ra,88(sp)
40085df4:	df001515 	stw	fp,84(sp)
40085df8:	df001504 	addi	fp,sp,84
40085dfc:	e13fff15 	stw	r4,-4(fp)
   uint8_t *dir;
   uint32_t dclst;
   DEF_NAMEBUF;


   res = chk_mounted(&path, &dj.fs, 1);
40085e00:	e0ffff04 	addi	r3,fp,-4
40085e04:	e0bfee04 	addi	r2,fp,-72
40085e08:	1809883a 	mov	r4,r3
40085e0c:	100b883a 	mov	r5,r2
40085e10:	01800044 	movi	r6,1
40085e14:	00835400 	call	40083540 <chk_mounted>
40085e18:	e0bfeb15 	stw	r2,-84(fp)
   if (res == FR_OK) {
40085e1c:	e0bfeb17 	ldw	r2,-84(fp)
40085e20:	1000721e 	bne	r2,zero,40085fec <f_unlink+0x200>
      INIT_BUF(dj);
40085e24:	e0bffc04 	addi	r2,fp,-16
40085e28:	e0bff415 	stw	r2,-48(fp)
      res = follow_path(&dj, path);    /* Follow the file path */
40085e2c:	e0bfff17 	ldw	r2,-4(fp)
40085e30:	e0ffee04 	addi	r3,fp,-72
40085e34:	1809883a 	mov	r4,r3
40085e38:	100b883a 	mov	r5,r2
40085e3c:	00831fc0 	call	400831fc <follow_path>
40085e40:	e0bfeb15 	stw	r2,-84(fp)
      if (_FS_RPATH && res == FR_OK && (dj.fn[NS] & NS_DOT))
         res = FR_INVALID_NAME;        /* Cannot remove dot entry */
#if _FS_SHARE
      if (res == FR_OK) res = chk_lock(&dj, 2); /* Cannot remove open file */
#endif
      if (res == FR_OK) {              /* The object is accessible */
40085e44:	e0bfeb17 	ldw	r2,-84(fp)
40085e48:	1000681e 	bne	r2,zero,40085fec <f_unlink+0x200>
         dir = dj.dir;
40085e4c:	e0bff317 	ldw	r2,-52(fp)
40085e50:	e0bfec15 	stw	r2,-80(fp)
         if (!dir) {
40085e54:	e0bfec17 	ldw	r2,-80(fp)
40085e58:	1000031e 	bne	r2,zero,40085e68 <f_unlink+0x7c>
            res = FR_INVALID_NAME;     /* Cannot remove the start directory */
40085e5c:	00800184 	movi	r2,6
40085e60:	e0bfeb15 	stw	r2,-84(fp)
40085e64:	00000806 	br	40085e88 <f_unlink+0x9c>
         } else {
            if (dir[DIR_Attr] & AM_RDO)
40085e68:	e0bfec17 	ldw	r2,-80(fp)
40085e6c:	108002c4 	addi	r2,r2,11
40085e70:	10800003 	ldbu	r2,0(r2)
40085e74:	10803fcc 	andi	r2,r2,255
40085e78:	1080004c 	andi	r2,r2,1
40085e7c:	10000226 	beq	r2,zero,40085e88 <f_unlink+0x9c>
               res = FR_DENIED;     /* Cannot remove R/O object */
40085e80:	008001c4 	movi	r2,7
40085e84:	e0bfeb15 	stw	r2,-84(fp)
         }
         dclst = LD_CLUST(dir);
40085e88:	e0bfec17 	ldw	r2,-80(fp)
40085e8c:	10800544 	addi	r2,r2,21
40085e90:	10800003 	ldbu	r2,0(r2)
40085e94:	10803fcc 	andi	r2,r2,255
40085e98:	1004923a 	slli	r2,r2,8
40085e9c:	1007883a 	mov	r3,r2
40085ea0:	e0bfec17 	ldw	r2,-80(fp)
40085ea4:	10800504 	addi	r2,r2,20
40085ea8:	10800003 	ldbu	r2,0(r2)
40085eac:	10803fcc 	andi	r2,r2,255
40085eb0:	1884b03a 	or	r2,r3,r2
40085eb4:	10bfffcc 	andi	r2,r2,65535
40085eb8:	1006943a 	slli	r3,r2,16
40085ebc:	e0bfec17 	ldw	r2,-80(fp)
40085ec0:	108006c4 	addi	r2,r2,27
40085ec4:	10800003 	ldbu	r2,0(r2)
40085ec8:	10803fcc 	andi	r2,r2,255
40085ecc:	1004923a 	slli	r2,r2,8
40085ed0:	1009883a 	mov	r4,r2
40085ed4:	e0bfec17 	ldw	r2,-80(fp)
40085ed8:	10800684 	addi	r2,r2,26
40085edc:	10800003 	ldbu	r2,0(r2)
40085ee0:	10803fcc 	andi	r2,r2,255
40085ee4:	2084b03a 	or	r2,r4,r2
40085ee8:	10bfffcc 	andi	r2,r2,65535
40085eec:	1884b03a 	or	r2,r3,r2
40085ef0:	e0bfed15 	stw	r2,-76(fp)
         if (res == FR_OK && (dir[DIR_Attr] & AM_DIR)) { /* Is it a sub-dir? */
40085ef4:	e0bfeb17 	ldw	r2,-84(fp)
40085ef8:	1000271e 	bne	r2,zero,40085f98 <f_unlink+0x1ac>
40085efc:	e0bfec17 	ldw	r2,-80(fp)
40085f00:	108002c4 	addi	r2,r2,11
40085f04:	10800003 	ldbu	r2,0(r2)
40085f08:	10803fcc 	andi	r2,r2,255
40085f0c:	1080040c 	andi	r2,r2,16
40085f10:	10002126 	beq	r2,zero,40085f98 <f_unlink+0x1ac>
            if (dclst < 2) {
40085f14:	e0bfed17 	ldw	r2,-76(fp)
40085f18:	108000a8 	cmpgeui	r2,r2,2
40085f1c:	1000031e 	bne	r2,zero,40085f2c <f_unlink+0x140>
               res = FR_INT_ERR;
40085f20:	00800084 	movi	r2,2
40085f24:	e0bfeb15 	stw	r2,-84(fp)
40085f28:	00001b06 	br	40085f98 <f_unlink+0x1ac>
            } else {
               mem_cpy(&sdj, &dj, sizeof(DIR)); /* Check if the sub-dir is empty or not */
40085f2c:	e0fff504 	addi	r3,fp,-44
40085f30:	e0bfee04 	addi	r2,fp,-72
40085f34:	1809883a 	mov	r4,r3
40085f38:	100b883a 	mov	r5,r2
40085f3c:	01800704 	movi	r6,28
40085f40:	00815c80 	call	400815c8 <mem_cpy>
               sdj.sclust = dclst;
40085f44:	e0bfed17 	ldw	r2,-76(fp)
40085f48:	e0bff715 	stw	r2,-36(fp)
               res = dir_sdi(&sdj, 2);    /* Exclude dot entries */
40085f4c:	e0bff504 	addi	r2,fp,-44
40085f50:	1009883a 	mov	r4,r2
40085f54:	01400084 	movi	r5,2
40085f58:	00824640 	call	40082464 <dir_sdi>
40085f5c:	e0bfeb15 	stw	r2,-84(fp)
               if (res == FR_OK) {
40085f60:	e0bfeb17 	ldw	r2,-84(fp)
40085f64:	10000c1e 	bne	r2,zero,40085f98 <f_unlink+0x1ac>
                  res = dir_read(&sdj);
40085f68:	e0bff504 	addi	r2,fp,-44
40085f6c:	1009883a 	mov	r4,r2
40085f70:	0082a2c0 	call	40082a2c <dir_read>
40085f74:	e0bfeb15 	stw	r2,-84(fp)
                  if (res == FR_OK        /* Not empty dir */
40085f78:	e0bfeb17 	ldw	r2,-84(fp)
40085f7c:	1000021e 	bne	r2,zero,40085f88 <f_unlink+0x19c>
#if _FS_RPATH
                  || dclst == sdj.fs->cdir   /* Current dir */
#endif
                  ) res = FR_DENIED;
40085f80:	008001c4 	movi	r2,7
40085f84:	e0bfeb15 	stw	r2,-84(fp)
                  if (res == FR_NO_FILE) res = FR_OK; /* Empty */
40085f88:	e0bfeb17 	ldw	r2,-84(fp)
40085f8c:	10800118 	cmpnei	r2,r2,4
40085f90:	1000011e 	bne	r2,zero,40085f98 <f_unlink+0x1ac>
40085f94:	e03feb15 	stw	zero,-84(fp)
               }
            }
         }
         if (res == FR_OK) {
40085f98:	e0bfeb17 	ldw	r2,-84(fp)
40085f9c:	1000131e 	bne	r2,zero,40085fec <f_unlink+0x200>
            res = dir_remove(&dj);     /* Remove the directory entry */
40085fa0:	e0bfee04 	addi	r2,fp,-72
40085fa4:	1009883a 	mov	r4,r2
40085fa8:	0082c480 	call	40082c48 <dir_remove>
40085fac:	e0bfeb15 	stw	r2,-84(fp)
            if (res == FR_OK) {
40085fb0:	e0bfeb17 	ldw	r2,-84(fp)
40085fb4:	10000d1e 	bne	r2,zero,40085fec <f_unlink+0x200>
               if (dclst)           /* Remove the cluster chain if exist */
40085fb8:	e0bfed17 	ldw	r2,-76(fp)
40085fbc:	10000526 	beq	r2,zero,40085fd4 <f_unlink+0x1e8>
                  res = remove_chain(dj.fs, dclst);
40085fc0:	e0bfee17 	ldw	r2,-72(fp)
40085fc4:	1009883a 	mov	r4,r2
40085fc8:	e17fed17 	ldw	r5,-76(fp)
40085fcc:	008216c0 	call	4008216c <remove_chain>
40085fd0:	e0bfeb15 	stw	r2,-84(fp)
               if (res == FR_OK) res = sync(dj.fs);
40085fd4:	e0bfeb17 	ldw	r2,-84(fp)
40085fd8:	1000041e 	bne	r2,zero,40085fec <f_unlink+0x200>
40085fdc:	e0bfee17 	ldw	r2,-72(fp)
40085fe0:	1009883a 	mov	r4,r2
40085fe4:	00818f00 	call	400818f0 <sync>
40085fe8:	e0bfeb15 	stw	r2,-84(fp)
            }
         }
      }
      FREE_BUF();
   }
   LEAVE_FF(dj.fs, res);
40085fec:	e0bfeb17 	ldw	r2,-84(fp)
}
40085ff0:	e037883a 	mov	sp,fp
40085ff4:	dfc00117 	ldw	ra,4(sp)
40085ff8:	df000017 	ldw	fp,0(sp)
40085ffc:	dec00204 	addi	sp,sp,8
40086000:	f800283a 	ret

40086004 <f_mkdir>:
/*-----------------------------------------------------------------------*/

FRESULT f_mkdir (
   const TCHAR *path    /* Pointer to the directory path */
)
{
40086004:	deffec04 	addi	sp,sp,-80
40086008:	dfc01315 	stw	ra,76(sp)
4008600c:	df001215 	stw	fp,72(sp)
40086010:	df001204 	addi	fp,sp,72
40086014:	e13fff15 	stw	r4,-4(fp)
   FRESULT res;
   DIR dj;
   uint8_t *dir, n;
   uint32_t dsc, dcl, pcl, tim = get_fattime();
40086018:	008159c0 	call	4008159c <get_fattime>
4008601c:	e0bff215 	stw	r2,-56(fp)
   DEF_NAMEBUF;


   res = chk_mounted(&path, &dj.fs, 1);
40086020:	e0ffff04 	addi	r3,fp,-4
40086024:	e0bff504 	addi	r2,fp,-44
40086028:	1809883a 	mov	r4,r3
4008602c:	100b883a 	mov	r5,r2
40086030:	01800044 	movi	r6,1
40086034:	00835400 	call	40083540 <chk_mounted>
40086038:	e0bfee15 	stw	r2,-72(fp)
   if (res == FR_OK) {
4008603c:	e0bfee17 	ldw	r2,-72(fp)
40086040:	1000fa1e 	bne	r2,zero,4008642c <f_mkdir+0x428>
      INIT_BUF(dj);
40086044:	e0bffc04 	addi	r2,fp,-16
40086048:	e0bffb15 	stw	r2,-20(fp)
      res = follow_path(&dj, path);       /* Follow the file path */
4008604c:	e0bfff17 	ldw	r2,-4(fp)
40086050:	e0fff504 	addi	r3,fp,-44
40086054:	1809883a 	mov	r4,r3
40086058:	100b883a 	mov	r5,r2
4008605c:	00831fc0 	call	400831fc <follow_path>
40086060:	e0bfee15 	stw	r2,-72(fp)
      if (res == FR_OK) res = FR_EXIST;      /* Any object with same name is already existing */
40086064:	e0bfee17 	ldw	r2,-72(fp)
40086068:	1000021e 	bne	r2,zero,40086074 <f_mkdir+0x70>
4008606c:	00800204 	movi	r2,8
40086070:	e0bfee15 	stw	r2,-72(fp)
      if (_FS_RPATH && res == FR_NO_FILE && (dj.fn[NS] & NS_DOT))
         res = FR_INVALID_NAME;
      if (res == FR_NO_FILE) {            /* Can create a new directory */
40086074:	e0bfee17 	ldw	r2,-72(fp)
40086078:	10800118 	cmpnei	r2,r2,4
4008607c:	1000eb1e 	bne	r2,zero,4008642c <f_mkdir+0x428>
         dcl = create_chain(dj.fs, 0);    /* Allocate a cluster for the new directory table */
40086080:	e0bff517 	ldw	r2,-44(fp)
40086084:	1009883a 	mov	r4,r2
40086088:	000b883a 	mov	r5,zero
4008608c:	00822800 	call	40082280 <create_chain>
40086090:	e0bff315 	stw	r2,-52(fp)
         res = FR_OK;
40086094:	e03fee15 	stw	zero,-72(fp)
         if (dcl == 0) res = FR_DENIED;      /* No space to allocate a new cluster */
40086098:	e0bff317 	ldw	r2,-52(fp)
4008609c:	1000021e 	bne	r2,zero,400860a8 <f_mkdir+0xa4>
400860a0:	008001c4 	movi	r2,7
400860a4:	e0bfee15 	stw	r2,-72(fp)
         if (dcl == 1) res = FR_INT_ERR;
400860a8:	e0bff317 	ldw	r2,-52(fp)
400860ac:	10800058 	cmpnei	r2,r2,1
400860b0:	1000021e 	bne	r2,zero,400860bc <f_mkdir+0xb8>
400860b4:	00800084 	movi	r2,2
400860b8:	e0bfee15 	stw	r2,-72(fp)
         if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;
400860bc:	e0bff317 	ldw	r2,-52(fp)
400860c0:	10bfffd8 	cmpnei	r2,r2,-1
400860c4:	1000021e 	bne	r2,zero,400860d0 <f_mkdir+0xcc>
400860c8:	00800044 	movi	r2,1
400860cc:	e0bfee15 	stw	r2,-72(fp)
         if (res == FR_OK)             /* Flush FAT */
400860d0:	e0bfee17 	ldw	r2,-72(fp)
400860d4:	1000051e 	bne	r2,zero,400860ec <f_mkdir+0xe8>
            res = move_window(dj.fs, 0);
400860d8:	e0bff517 	ldw	r2,-44(fp)
400860dc:	1009883a 	mov	r4,r2
400860e0:	000b883a 	mov	r5,zero
400860e4:	00817940 	call	40081794 <move_window>
400860e8:	e0bfee15 	stw	r2,-72(fp)
         if (res == FR_OK) {              /* Initialize the new directory table */
400860ec:	e0bfee17 	ldw	r2,-72(fp)
400860f0:	10008a1e 	bne	r2,zero,4008631c <f_mkdir+0x318>
            dsc = clust2sect(dj.fs, dcl);
400860f4:	e0bff517 	ldw	r2,-44(fp)
400860f8:	1009883a 	mov	r4,r2
400860fc:	e17ff317 	ldw	r5,-52(fp)
40086100:	0081b0c0 	call	40081b0c <clust2sect>
40086104:	e0bff015 	stw	r2,-64(fp)
            dir = dj.fs->win;
40086108:	e0bff517 	ldw	r2,-44(fp)
4008610c:	10800c04 	addi	r2,r2,48
40086110:	e0bff415 	stw	r2,-48(fp)
            mem_set(dir, 0, SS(dj.fs));
40086114:	e13ff417 	ldw	r4,-48(fp)
40086118:	000b883a 	mov	r5,zero
4008611c:	01808004 	movi	r6,512
40086120:	00816340 	call	40081634 <mem_set>
            mem_set(dir+DIR_Name, ' ', 8+3); /* Create "." entry */
40086124:	e13ff417 	ldw	r4,-48(fp)
40086128:	01400804 	movi	r5,32
4008612c:	018002c4 	movi	r6,11
40086130:	00816340 	call	40081634 <mem_set>
            dir[DIR_Name] = '.';
40086134:	e0bff417 	ldw	r2,-48(fp)
40086138:	00c00b84 	movi	r3,46
4008613c:	10c00005 	stb	r3,0(r2)
            dir[DIR_Attr] = AM_DIR;
40086140:	e0bff417 	ldw	r2,-48(fp)
40086144:	108002c4 	addi	r2,r2,11
40086148:	00c00404 	movi	r3,16
4008614c:	10c00005 	stb	r3,0(r2)
            ST_DWORD(dir+DIR_WrtTime, tim);
40086150:	e0bff417 	ldw	r2,-48(fp)
40086154:	10800584 	addi	r2,r2,22
40086158:	e0fff217 	ldw	r3,-56(fp)
4008615c:	10c00005 	stb	r3,0(r2)
40086160:	e0bff417 	ldw	r2,-48(fp)
40086164:	108005c4 	addi	r2,r2,23
40086168:	e0fff217 	ldw	r3,-56(fp)
4008616c:	18ffffcc 	andi	r3,r3,65535
40086170:	1806d23a 	srli	r3,r3,8
40086174:	10c00005 	stb	r3,0(r2)
40086178:	e0bff417 	ldw	r2,-48(fp)
4008617c:	10800604 	addi	r2,r2,24
40086180:	e0fff217 	ldw	r3,-56(fp)
40086184:	1806d43a 	srli	r3,r3,16
40086188:	10c00005 	stb	r3,0(r2)
4008618c:	e0bff417 	ldw	r2,-48(fp)
40086190:	10800644 	addi	r2,r2,25
40086194:	e0fff217 	ldw	r3,-56(fp)
40086198:	1806d63a 	srli	r3,r3,24
4008619c:	10c00005 	stb	r3,0(r2)
            ST_CLUST(dir, dcl);
400861a0:	e0bff417 	ldw	r2,-48(fp)
400861a4:	10800684 	addi	r2,r2,26
400861a8:	e0fff317 	ldw	r3,-52(fp)
400861ac:	10c00005 	stb	r3,0(r2)
400861b0:	e0bff417 	ldw	r2,-48(fp)
400861b4:	108006c4 	addi	r2,r2,27
400861b8:	e0fff317 	ldw	r3,-52(fp)
400861bc:	18ffffcc 	andi	r3,r3,65535
400861c0:	1806d23a 	srli	r3,r3,8
400861c4:	10c00005 	stb	r3,0(r2)
400861c8:	e0bff417 	ldw	r2,-48(fp)
400861cc:	10800504 	addi	r2,r2,20
400861d0:	e0fff317 	ldw	r3,-52(fp)
400861d4:	1806d43a 	srli	r3,r3,16
400861d8:	10c00005 	stb	r3,0(r2)
400861dc:	e0bff417 	ldw	r2,-48(fp)
400861e0:	10800544 	addi	r2,r2,21
400861e4:	e0fff317 	ldw	r3,-52(fp)
400861e8:	1806d43a 	srli	r3,r3,16
400861ec:	18ffffcc 	andi	r3,r3,65535
400861f0:	1806d23a 	srli	r3,r3,8
400861f4:	10c00005 	stb	r3,0(r2)
            mem_cpy(dir+SZ_DIR, dir, SZ_DIR);   /* Create ".." entry */
400861f8:	e0bff417 	ldw	r2,-48(fp)
400861fc:	10800804 	addi	r2,r2,32
40086200:	1009883a 	mov	r4,r2
40086204:	e17ff417 	ldw	r5,-48(fp)
40086208:	01800804 	movi	r6,32
4008620c:	00815c80 	call	400815c8 <mem_cpy>
            dir[33] = '.'; pcl = dj.sclust;
40086210:	e0bff417 	ldw	r2,-48(fp)
40086214:	10800844 	addi	r2,r2,33
40086218:	00c00b84 	movi	r3,46
4008621c:	10c00005 	stb	r3,0(r2)
40086220:	e0bff717 	ldw	r2,-36(fp)
40086224:	e0bff115 	stw	r2,-60(fp)
            if (dj.fs->fs_type == FS_FAT32 && pcl == dj.fs->dirbase)
40086228:	e0bff517 	ldw	r2,-44(fp)
4008622c:	10800003 	ldbu	r2,0(r2)
40086230:	10803fcc 	andi	r2,r2,255
40086234:	108000d8 	cmpnei	r2,r2,3
40086238:	1000051e 	bne	r2,zero,40086250 <f_mkdir+0x24c>
4008623c:	e0bff517 	ldw	r2,-44(fp)
40086240:	10c00917 	ldw	r3,36(r2)
40086244:	e0bff117 	ldw	r2,-60(fp)
40086248:	1880011e 	bne	r3,r2,40086250 <f_mkdir+0x24c>
               pcl = 0;
4008624c:	e03ff115 	stw	zero,-60(fp)
            ST_CLUST(dir+SZ_DIR, pcl);
40086250:	e0bff417 	ldw	r2,-48(fp)
40086254:	10800e84 	addi	r2,r2,58
40086258:	e0fff117 	ldw	r3,-60(fp)
4008625c:	10c00005 	stb	r3,0(r2)
40086260:	e0bff417 	ldw	r2,-48(fp)
40086264:	10800ec4 	addi	r2,r2,59
40086268:	e0fff117 	ldw	r3,-60(fp)
4008626c:	18ffffcc 	andi	r3,r3,65535
40086270:	1806d23a 	srli	r3,r3,8
40086274:	10c00005 	stb	r3,0(r2)
40086278:	e0bff417 	ldw	r2,-48(fp)
4008627c:	10800d04 	addi	r2,r2,52
40086280:	e0fff117 	ldw	r3,-60(fp)
40086284:	1806d43a 	srli	r3,r3,16
40086288:	10c00005 	stb	r3,0(r2)
4008628c:	e0bff417 	ldw	r2,-48(fp)
40086290:	10800d44 	addi	r2,r2,53
40086294:	e0fff117 	ldw	r3,-60(fp)
40086298:	1806d43a 	srli	r3,r3,16
4008629c:	18ffffcc 	andi	r3,r3,65535
400862a0:	1806d23a 	srli	r3,r3,8
400862a4:	10c00005 	stb	r3,0(r2)
            for (n = dj.fs->csize; n; n--) { /* Write dot entries and clear following sectors */
400862a8:	e0bff517 	ldw	r2,-44(fp)
400862ac:	10800083 	ldbu	r2,2(r2)
400862b0:	e0bfef05 	stb	r2,-68(fp)
400862b4:	00001706 	br	40086314 <f_mkdir+0x310>
               dj.fs->winsect = dsc++;
400862b8:	e0fff517 	ldw	r3,-44(fp)
400862bc:	e0bff017 	ldw	r2,-64(fp)
400862c0:	11000044 	addi	r4,r2,1
400862c4:	e13ff015 	stw	r4,-64(fp)
400862c8:	18800b15 	stw	r2,44(r3)
               dj.fs->wflag = 1;
400862cc:	e0bff517 	ldw	r2,-44(fp)
400862d0:	00c00044 	movi	r3,1
400862d4:	10c00105 	stb	r3,4(r2)
               res = move_window(dj.fs, 0);
400862d8:	e0bff517 	ldw	r2,-44(fp)
400862dc:	1009883a 	mov	r4,r2
400862e0:	000b883a 	mov	r5,zero
400862e4:	00817940 	call	40081794 <move_window>
400862e8:	e0bfee15 	stw	r2,-72(fp)
               if (res != FR_OK) break;
400862ec:	e0bfee17 	ldw	r2,-72(fp)
400862f0:	10000126 	beq	r2,zero,400862f8 <f_mkdir+0x2f4>
400862f4:	00000906 	br	4008631c <f_mkdir+0x318>
               mem_set(dir, 0, SS(dj.fs));
400862f8:	e13ff417 	ldw	r4,-48(fp)
400862fc:	000b883a 	mov	r5,zero
40086300:	01808004 	movi	r6,512
40086304:	00816340 	call	40081634 <mem_set>
            mem_cpy(dir+SZ_DIR, dir, SZ_DIR);   /* Create ".." entry */
            dir[33] = '.'; pcl = dj.sclust;
            if (dj.fs->fs_type == FS_FAT32 && pcl == dj.fs->dirbase)
               pcl = 0;
            ST_CLUST(dir+SZ_DIR, pcl);
            for (n = dj.fs->csize; n; n--) { /* Write dot entries and clear following sectors */
40086308:	e0bfef03 	ldbu	r2,-68(fp)
4008630c:	10bfffc4 	addi	r2,r2,-1
40086310:	e0bfef05 	stb	r2,-68(fp)
40086314:	e0bfef03 	ldbu	r2,-68(fp)
40086318:	103fe71e 	bne	r2,zero,400862b8 <__alt_mem_epcs+0xfff452b8>
               res = move_window(dj.fs, 0);
               if (res != FR_OK) break;
               mem_set(dir, 0, SS(dj.fs));
            }
         }
         if (res == FR_OK) res = dir_register(&dj);   /* Register the object to the directoy */
4008631c:	e0bfee17 	ldw	r2,-72(fp)
40086320:	1000041e 	bne	r2,zero,40086334 <f_mkdir+0x330>
40086324:	e0bff504 	addi	r2,fp,-44
40086328:	1009883a 	mov	r4,r2
4008632c:	0082b280 	call	40082b28 <dir_register>
40086330:	e0bfee15 	stw	r2,-72(fp)
         if (res != FR_OK) {
40086334:	e0bfee17 	ldw	r2,-72(fp)
40086338:	10000526 	beq	r2,zero,40086350 <f_mkdir+0x34c>
            remove_chain(dj.fs, dcl);        /* Could not register, remove cluster chain */
4008633c:	e0bff517 	ldw	r2,-44(fp)
40086340:	1009883a 	mov	r4,r2
40086344:	e17ff317 	ldw	r5,-52(fp)
40086348:	008216c0 	call	4008216c <remove_chain>
4008634c:	00003706 	br	4008642c <f_mkdir+0x428>
         } else {
            dir = dj.dir;
40086350:	e0bffa17 	ldw	r2,-24(fp)
40086354:	e0bff415 	stw	r2,-48(fp)
            dir[DIR_Attr] = AM_DIR;          /* Attribute */
40086358:	e0bff417 	ldw	r2,-48(fp)
4008635c:	108002c4 	addi	r2,r2,11
40086360:	00c00404 	movi	r3,16
40086364:	10c00005 	stb	r3,0(r2)
            ST_DWORD(dir+DIR_WrtTime, tim);     /* Created time */
40086368:	e0bff417 	ldw	r2,-48(fp)
4008636c:	10800584 	addi	r2,r2,22
40086370:	e0fff217 	ldw	r3,-56(fp)
40086374:	10c00005 	stb	r3,0(r2)
40086378:	e0bff417 	ldw	r2,-48(fp)
4008637c:	108005c4 	addi	r2,r2,23
40086380:	e0fff217 	ldw	r3,-56(fp)
40086384:	18ffffcc 	andi	r3,r3,65535
40086388:	1806d23a 	srli	r3,r3,8
4008638c:	10c00005 	stb	r3,0(r2)
40086390:	e0bff417 	ldw	r2,-48(fp)
40086394:	10800604 	addi	r2,r2,24
40086398:	e0fff217 	ldw	r3,-56(fp)
4008639c:	1806d43a 	srli	r3,r3,16
400863a0:	10c00005 	stb	r3,0(r2)
400863a4:	e0bff417 	ldw	r2,-48(fp)
400863a8:	10800644 	addi	r2,r2,25
400863ac:	e0fff217 	ldw	r3,-56(fp)
400863b0:	1806d63a 	srli	r3,r3,24
400863b4:	10c00005 	stb	r3,0(r2)
            ST_CLUST(dir, dcl);              /* Table start cluster */
400863b8:	e0bff417 	ldw	r2,-48(fp)
400863bc:	10800684 	addi	r2,r2,26
400863c0:	e0fff317 	ldw	r3,-52(fp)
400863c4:	10c00005 	stb	r3,0(r2)
400863c8:	e0bff417 	ldw	r2,-48(fp)
400863cc:	108006c4 	addi	r2,r2,27
400863d0:	e0fff317 	ldw	r3,-52(fp)
400863d4:	18ffffcc 	andi	r3,r3,65535
400863d8:	1806d23a 	srli	r3,r3,8
400863dc:	10c00005 	stb	r3,0(r2)
400863e0:	e0bff417 	ldw	r2,-48(fp)
400863e4:	10800504 	addi	r2,r2,20
400863e8:	e0fff317 	ldw	r3,-52(fp)
400863ec:	1806d43a 	srli	r3,r3,16
400863f0:	10c00005 	stb	r3,0(r2)
400863f4:	e0bff417 	ldw	r2,-48(fp)
400863f8:	10800544 	addi	r2,r2,21
400863fc:	e0fff317 	ldw	r3,-52(fp)
40086400:	1806d43a 	srli	r3,r3,16
40086404:	18ffffcc 	andi	r3,r3,65535
40086408:	1806d23a 	srli	r3,r3,8
4008640c:	10c00005 	stb	r3,0(r2)
            dj.fs->wflag = 1;
40086410:	e0bff517 	ldw	r2,-44(fp)
40086414:	00c00044 	movi	r3,1
40086418:	10c00105 	stb	r3,4(r2)
            res = sync(dj.fs);
4008641c:	e0bff517 	ldw	r2,-44(fp)
40086420:	1009883a 	mov	r4,r2
40086424:	00818f00 	call	400818f0 <sync>
40086428:	e0bfee15 	stw	r2,-72(fp)
         }
      }
      FREE_BUF();
   }

   LEAVE_FF(dj.fs, res);
4008642c:	e0bfee17 	ldw	r2,-72(fp)
}
40086430:	e037883a 	mov	sp,fp
40086434:	dfc00117 	ldw	ra,4(sp)
40086438:	df000017 	ldw	fp,0(sp)
4008643c:	dec00204 	addi	sp,sp,8
40086440:	f800283a 	ret

40086444 <f_chmod>:
FRESULT f_chmod (
   const TCHAR *path,   /* Pointer to the file path */
   uint8_t value,       /* Attribute bits */
   uint8_t mask         /* Attribute mask to change */
)
{
40086444:	deffef04 	addi	sp,sp,-68
40086448:	dfc01015 	stw	ra,64(sp)
4008644c:	df000f15 	stw	fp,60(sp)
40086450:	df000f04 	addi	fp,sp,60
40086454:	e13ffd15 	stw	r4,-12(fp)
40086458:	2807883a 	mov	r3,r5
4008645c:	3005883a 	mov	r2,r6
40086460:	e0fffe05 	stb	r3,-8(fp)
40086464:	e0bfff05 	stb	r2,-4(fp)
   DIR dj;
   uint8_t *dir;
   DEF_NAMEBUF;


   res = chk_mounted(&path, &dj.fs, 1);
40086468:	e0fffd04 	addi	r3,fp,-12
4008646c:	e0bff304 	addi	r2,fp,-52
40086470:	1809883a 	mov	r4,r3
40086474:	100b883a 	mov	r5,r2
40086478:	01800044 	movi	r6,1
4008647c:	00835400 	call	40083540 <chk_mounted>
40086480:	e0bff115 	stw	r2,-60(fp)
   if (res == FR_OK) {
40086484:	e0bff117 	ldw	r2,-60(fp)
40086488:	1000291e 	bne	r2,zero,40086530 <f_chmod+0xec>
      INIT_BUF(dj);
4008648c:	e0bffa04 	addi	r2,fp,-24
40086490:	e0bff915 	stw	r2,-28(fp)
      res = follow_path(&dj, path);    /* Follow the file path */
40086494:	e0bffd17 	ldw	r2,-12(fp)
40086498:	e0fff304 	addi	r3,fp,-52
4008649c:	1809883a 	mov	r4,r3
400864a0:	100b883a 	mov	r5,r2
400864a4:	00831fc0 	call	400831fc <follow_path>
400864a8:	e0bff115 	stw	r2,-60(fp)
      FREE_BUF();
      if (_FS_RPATH && res == FR_OK && (dj.fn[NS] & NS_DOT))
         res = FR_INVALID_NAME;
      if (res == FR_OK) {
400864ac:	e0bff117 	ldw	r2,-60(fp)
400864b0:	10001f1e 	bne	r2,zero,40086530 <f_chmod+0xec>
         dir = dj.dir;
400864b4:	e0bff817 	ldw	r2,-32(fp)
400864b8:	e0bff215 	stw	r2,-56(fp)
         if (!dir) {                /* Is it a root directory? */
400864bc:	e0bff217 	ldw	r2,-56(fp)
400864c0:	1000031e 	bne	r2,zero,400864d0 <f_chmod+0x8c>
            res = FR_INVALID_NAME;
400864c4:	00800184 	movi	r2,6
400864c8:	e0bff115 	stw	r2,-60(fp)
400864cc:	00001806 	br	40086530 <f_chmod+0xec>
         } else {                /* File or sub directory */
            mask &= AM_RDO|AM_HID|AM_SYS|AM_ARC;   /* Valid attribute mask */
400864d0:	e0bfff03 	ldbu	r2,-4(fp)
400864d4:	108009cc 	andi	r2,r2,39
400864d8:	e0bfff05 	stb	r2,-4(fp)
            dir[DIR_Attr] = (value & mask) | (dir[DIR_Attr] & (uint8_t)~mask);   /* Apply attribute change */
400864dc:	e0bff217 	ldw	r2,-56(fp)
400864e0:	108002c4 	addi	r2,r2,11
400864e4:	e13ffe03 	ldbu	r4,-8(fp)
400864e8:	e0ffff03 	ldbu	r3,-4(fp)
400864ec:	20c6703a 	and	r3,r4,r3
400864f0:	180b883a 	mov	r5,r3
400864f4:	e0fff217 	ldw	r3,-56(fp)
400864f8:	18c002c4 	addi	r3,r3,11
400864fc:	18c00003 	ldbu	r3,0(r3)
40086500:	e13fff03 	ldbu	r4,-4(fp)
40086504:	0108303a 	nor	r4,zero,r4
40086508:	1906703a 	and	r3,r3,r4
4008650c:	28c6b03a 	or	r3,r5,r3
40086510:	10c00005 	stb	r3,0(r2)
            dj.fs->wflag = 1;
40086514:	e0bff317 	ldw	r2,-52(fp)
40086518:	00c00044 	movi	r3,1
4008651c:	10c00105 	stb	r3,4(r2)
            res = sync(dj.fs);
40086520:	e0bff317 	ldw	r2,-52(fp)
40086524:	1009883a 	mov	r4,r2
40086528:	00818f00 	call	400818f0 <sync>
4008652c:	e0bff115 	stw	r2,-60(fp)
         }
      }
   }

   LEAVE_FF(dj.fs, res);
40086530:	e0bff117 	ldw	r2,-60(fp)
}
40086534:	e037883a 	mov	sp,fp
40086538:	dfc00117 	ldw	ra,4(sp)
4008653c:	df000017 	ldw	fp,0(sp)
40086540:	dec00204 	addi	sp,sp,8
40086544:	f800283a 	ret

40086548 <f_utime>:

FRESULT f_utime (
   const TCHAR *path,   /* Pointer to the file/directory name */
   const FILINFO *fno   /* Pointer to the time stamp to be set */
)
{
40086548:	defff004 	addi	sp,sp,-64
4008654c:	dfc00f15 	stw	ra,60(sp)
40086550:	df000e15 	stw	fp,56(sp)
40086554:	df000e04 	addi	fp,sp,56
40086558:	e13ffe15 	stw	r4,-8(fp)
4008655c:	e17fff15 	stw	r5,-4(fp)
   DIR dj;
   uint8_t *dir;
   DEF_NAMEBUF;


   res = chk_mounted(&path, &dj.fs, 1);
40086560:	e0fffe04 	addi	r3,fp,-8
40086564:	e0bff404 	addi	r2,fp,-48
40086568:	1809883a 	mov	r4,r3
4008656c:	100b883a 	mov	r5,r2
40086570:	01800044 	movi	r6,1
40086574:	00835400 	call	40083540 <chk_mounted>
40086578:	e0bff215 	stw	r2,-56(fp)
   if (res == FR_OK) {
4008657c:	e0bff217 	ldw	r2,-56(fp)
40086580:	1000301e 	bne	r2,zero,40086644 <f_utime+0xfc>
      INIT_BUF(dj);
40086584:	e0bffb04 	addi	r2,fp,-20
40086588:	e0bffa15 	stw	r2,-24(fp)
      res = follow_path(&dj, path); /* Follow the file path */
4008658c:	e0bffe17 	ldw	r2,-8(fp)
40086590:	e0fff404 	addi	r3,fp,-48
40086594:	1809883a 	mov	r4,r3
40086598:	100b883a 	mov	r5,r2
4008659c:	00831fc0 	call	400831fc <follow_path>
400865a0:	e0bff215 	stw	r2,-56(fp)
      FREE_BUF();
      if (_FS_RPATH && res == FR_OK && (dj.fn[NS] & NS_DOT))
         res = FR_INVALID_NAME;
      if (res == FR_OK) {
400865a4:	e0bff217 	ldw	r2,-56(fp)
400865a8:	1000261e 	bne	r2,zero,40086644 <f_utime+0xfc>
         dir = dj.dir;
400865ac:	e0bff917 	ldw	r2,-28(fp)
400865b0:	e0bff315 	stw	r2,-52(fp)
         if (!dir) {             /* Root directory */
400865b4:	e0bff317 	ldw	r2,-52(fp)
400865b8:	1000031e 	bne	r2,zero,400865c8 <f_utime+0x80>
            res = FR_INVALID_NAME;
400865bc:	00800184 	movi	r2,6
400865c0:	e0bff215 	stw	r2,-56(fp)
400865c4:	00001f06 	br	40086644 <f_utime+0xfc>
         } else {             /* File or sub-directory */
            ST_WORD(dir+DIR_WrtTime, fno->ftime);
400865c8:	e0bff317 	ldw	r2,-52(fp)
400865cc:	10800584 	addi	r2,r2,22
400865d0:	e0ffff17 	ldw	r3,-4(fp)
400865d4:	18c0018b 	ldhu	r3,6(r3)
400865d8:	10c00005 	stb	r3,0(r2)
400865dc:	e0bff317 	ldw	r2,-52(fp)
400865e0:	108005c4 	addi	r2,r2,23
400865e4:	e0ffff17 	ldw	r3,-4(fp)
400865e8:	18c0018b 	ldhu	r3,6(r3)
400865ec:	18ffffcc 	andi	r3,r3,65535
400865f0:	1806d23a 	srli	r3,r3,8
400865f4:	10c00005 	stb	r3,0(r2)
            ST_WORD(dir+DIR_WrtDate, fno->fdate);
400865f8:	e0bff317 	ldw	r2,-52(fp)
400865fc:	10800604 	addi	r2,r2,24
40086600:	e0ffff17 	ldw	r3,-4(fp)
40086604:	18c0010b 	ldhu	r3,4(r3)
40086608:	10c00005 	stb	r3,0(r2)
4008660c:	e0bff317 	ldw	r2,-52(fp)
40086610:	10800644 	addi	r2,r2,25
40086614:	e0ffff17 	ldw	r3,-4(fp)
40086618:	18c0010b 	ldhu	r3,4(r3)
4008661c:	18ffffcc 	andi	r3,r3,65535
40086620:	1806d23a 	srli	r3,r3,8
40086624:	10c00005 	stb	r3,0(r2)
            dj.fs->wflag = 1;
40086628:	e0bff417 	ldw	r2,-48(fp)
4008662c:	00c00044 	movi	r3,1
40086630:	10c00105 	stb	r3,4(r2)
            res = sync(dj.fs);
40086634:	e0bff417 	ldw	r2,-48(fp)
40086638:	1009883a 	mov	r4,r2
4008663c:	00818f00 	call	400818f0 <sync>
40086640:	e0bff215 	stw	r2,-56(fp)
         }
      }
   }

   LEAVE_FF(dj.fs, res);
40086644:	e0bff217 	ldw	r2,-56(fp)
}
40086648:	e037883a 	mov	sp,fp
4008664c:	dfc00117 	ldw	ra,4(sp)
40086650:	df000017 	ldw	fp,0(sp)
40086654:	dec00204 	addi	sp,sp,8
40086658:	f800283a 	ret

4008665c <f_rename>:

FRESULT f_rename (
   const TCHAR *path_old,  /* Pointer to the old name */
   const TCHAR *path_new   /* Pointer to the new name */
)
{
4008665c:	deffe204 	addi	sp,sp,-120
40086660:	dfc01d15 	stw	ra,116(sp)
40086664:	df001c15 	stw	fp,112(sp)
40086668:	df001c04 	addi	fp,sp,112
4008666c:	e13ffe15 	stw	r4,-8(fp)
40086670:	e17fff15 	stw	r5,-4(fp)
   uint8_t buf[21], *dir;
   uint32_t dw;
   DEF_NAMEBUF;


   res = chk_mounted(&path_old, &djo.fs, 1);
40086674:	e0fffe04 	addi	r3,fp,-8
40086678:	e0bfe704 	addi	r2,fp,-100
4008667c:	1809883a 	mov	r4,r3
40086680:	100b883a 	mov	r5,r2
40086684:	01800044 	movi	r6,1
40086688:	00835400 	call	40083540 <chk_mounted>
4008668c:	e0bfe415 	stw	r2,-112(fp)
   if (res == FR_OK) {
40086690:	e0bfe417 	ldw	r2,-112(fp)
40086694:	1000b01e 	bne	r2,zero,40086958 <f_rename+0x2fc>
      djn.fs = djo.fs;
40086698:	e0bfe717 	ldw	r2,-100(fp)
4008669c:	e0bfee15 	stw	r2,-72(fp)
      INIT_BUF(djo);
400866a0:	e0bffa44 	addi	r2,fp,-23
400866a4:	e0bfed15 	stw	r2,-76(fp)
      res = follow_path(&djo, path_old);     /* Check old object */
400866a8:	e0bffe17 	ldw	r2,-8(fp)
400866ac:	e0ffe704 	addi	r3,fp,-100
400866b0:	1809883a 	mov	r4,r3
400866b4:	100b883a 	mov	r5,r2
400866b8:	00831fc0 	call	400831fc <follow_path>
400866bc:	e0bfe415 	stw	r2,-112(fp)
      if (_FS_RPATH && res == FR_OK && (djo.fn[NS] & NS_DOT))
         res = FR_INVALID_NAME;
#if _FS_SHARE
      if (res == FR_OK) res = chk_lock(&djo, 2);
#endif
      if (res == FR_OK) {                 /* Old object is found */
400866c0:	e0bfe417 	ldw	r2,-112(fp)
400866c4:	1000a41e 	bne	r2,zero,40086958 <f_rename+0x2fc>
         if (!djo.dir) {                  /* Is root dir? */
400866c8:	e0bfec17 	ldw	r2,-80(fp)
400866cc:	1000031e 	bne	r2,zero,400866dc <f_rename+0x80>
            res = FR_NO_FILE;
400866d0:	00800104 	movi	r2,4
400866d4:	e0bfe415 	stw	r2,-112(fp)
400866d8:	00009f06 	br	40086958 <f_rename+0x2fc>
         } else {
            mem_cpy(buf, djo.dir+DIR_Attr, 21);    /* Save the object information except for name */
400866dc:	e0bfec17 	ldw	r2,-80(fp)
400866e0:	108002c4 	addi	r2,r2,11
400866e4:	e0fff504 	addi	r3,fp,-44
400866e8:	1809883a 	mov	r4,r3
400866ec:	100b883a 	mov	r5,r2
400866f0:	01800544 	movi	r6,21
400866f4:	00815c80 	call	400815c8 <mem_cpy>
            mem_cpy(&djn, &djo, sizeof(DIR));      /* Check new object */
400866f8:	e0ffee04 	addi	r3,fp,-72
400866fc:	e0bfe704 	addi	r2,fp,-100
40086700:	1809883a 	mov	r4,r3
40086704:	100b883a 	mov	r5,r2
40086708:	01800704 	movi	r6,28
4008670c:	00815c80 	call	400815c8 <mem_cpy>
            res = follow_path(&djn, path_new);
40086710:	e0bfee04 	addi	r2,fp,-72
40086714:	1009883a 	mov	r4,r2
40086718:	e17fff17 	ldw	r5,-4(fp)
4008671c:	00831fc0 	call	400831fc <follow_path>
40086720:	e0bfe415 	stw	r2,-112(fp)
            if (res == FR_OK) res = FR_EXIST;      /* The new object name is already existing */
40086724:	e0bfe417 	ldw	r2,-112(fp)
40086728:	1000021e 	bne	r2,zero,40086734 <f_rename+0xd8>
4008672c:	00800204 	movi	r2,8
40086730:	e0bfe415 	stw	r2,-112(fp)
            if (res == FR_NO_FILE) {            /* Is it a valid path and no name collision? */
40086734:	e0bfe417 	ldw	r2,-112(fp)
40086738:	10800118 	cmpnei	r2,r2,4
4008673c:	1000861e 	bne	r2,zero,40086958 <f_rename+0x2fc>
/* Start critical section that any interruption or error can cause cross-link */
               res = dir_register(&djn);        /* Register the new entry */
40086740:	e0bfee04 	addi	r2,fp,-72
40086744:	1009883a 	mov	r4,r2
40086748:	0082b280 	call	40082b28 <dir_register>
4008674c:	e0bfe415 	stw	r2,-112(fp)
               if (res == FR_OK) {
40086750:	e0bfe417 	ldw	r2,-112(fp)
40086754:	1000801e 	bne	r2,zero,40086958 <f_rename+0x2fc>
                  dir = djn.dir;             /* Copy object information except for name */
40086758:	e0bff317 	ldw	r2,-52(fp)
4008675c:	e0bfe515 	stw	r2,-108(fp)
                  mem_cpy(dir+13, buf+2, 19);
40086760:	e0bfe517 	ldw	r2,-108(fp)
40086764:	10c00344 	addi	r3,r2,13
40086768:	e0bff504 	addi	r2,fp,-44
4008676c:	10800084 	addi	r2,r2,2
40086770:	1809883a 	mov	r4,r3
40086774:	100b883a 	mov	r5,r2
40086778:	018004c4 	movi	r6,19
4008677c:	00815c80 	call	400815c8 <mem_cpy>
                  dir[DIR_Attr] = buf[0] | AM_ARC;
40086780:	e0bfe517 	ldw	r2,-108(fp)
40086784:	108002c4 	addi	r2,r2,11
40086788:	e0fff503 	ldbu	r3,-44(fp)
4008678c:	18c00814 	ori	r3,r3,32
40086790:	10c00005 	stb	r3,0(r2)
                  djo.fs->wflag = 1;
40086794:	e0bfe717 	ldw	r2,-100(fp)
40086798:	00c00044 	movi	r3,1
4008679c:	10c00105 	stb	r3,4(r2)
                  if (djo.sclust != djn.sclust && (dir[DIR_Attr] & AM_DIR)) {    /* Update .. entry in the directory if needed */
400867a0:	e0ffe917 	ldw	r3,-92(fp)
400867a4:	e0bff017 	ldw	r2,-64(fp)
400867a8:	18805f26 	beq	r3,r2,40086928 <f_rename+0x2cc>
400867ac:	e0bfe517 	ldw	r2,-108(fp)
400867b0:	108002c4 	addi	r2,r2,11
400867b4:	10800003 	ldbu	r2,0(r2)
400867b8:	10803fcc 	andi	r2,r2,255
400867bc:	1080040c 	andi	r2,r2,16
400867c0:	10005926 	beq	r2,zero,40086928 <f_rename+0x2cc>
                     dw = clust2sect(djn.fs, LD_CLUST(dir));
400867c4:	e13fee17 	ldw	r4,-72(fp)
400867c8:	e0bfe517 	ldw	r2,-108(fp)
400867cc:	10800544 	addi	r2,r2,21
400867d0:	10800003 	ldbu	r2,0(r2)
400867d4:	10803fcc 	andi	r2,r2,255
400867d8:	1004923a 	slli	r2,r2,8
400867dc:	1007883a 	mov	r3,r2
400867e0:	e0bfe517 	ldw	r2,-108(fp)
400867e4:	10800504 	addi	r2,r2,20
400867e8:	10800003 	ldbu	r2,0(r2)
400867ec:	10803fcc 	andi	r2,r2,255
400867f0:	1884b03a 	or	r2,r3,r2
400867f4:	10bfffcc 	andi	r2,r2,65535
400867f8:	1006943a 	slli	r3,r2,16
400867fc:	e0bfe517 	ldw	r2,-108(fp)
40086800:	108006c4 	addi	r2,r2,27
40086804:	10800003 	ldbu	r2,0(r2)
40086808:	10803fcc 	andi	r2,r2,255
4008680c:	1004923a 	slli	r2,r2,8
40086810:	100b883a 	mov	r5,r2
40086814:	e0bfe517 	ldw	r2,-108(fp)
40086818:	10800684 	addi	r2,r2,26
4008681c:	10800003 	ldbu	r2,0(r2)
40086820:	10803fcc 	andi	r2,r2,255
40086824:	2884b03a 	or	r2,r5,r2
40086828:	10bfffcc 	andi	r2,r2,65535
4008682c:	1884b03a 	or	r2,r3,r2
40086830:	100b883a 	mov	r5,r2
40086834:	0081b0c0 	call	40081b0c <clust2sect>
40086838:	e0bfe615 	stw	r2,-104(fp)
                     if (!dw) {
4008683c:	e0bfe617 	ldw	r2,-104(fp)
40086840:	1000031e 	bne	r2,zero,40086850 <f_rename+0x1f4>
                        res = FR_INT_ERR;
40086844:	00800084 	movi	r2,2
40086848:	e0bfe415 	stw	r2,-112(fp)
4008684c:	00003606 	br	40086928 <f_rename+0x2cc>
                     } else {
                        res = move_window(djn.fs, dw);
40086850:	e0bfee17 	ldw	r2,-72(fp)
40086854:	1009883a 	mov	r4,r2
40086858:	e17fe617 	ldw	r5,-104(fp)
4008685c:	00817940 	call	40081794 <move_window>
40086860:	e0bfe415 	stw	r2,-112(fp)
                        dir = djn.fs->win+SZ_DIR;  /* .. entry */
40086864:	e0bfee17 	ldw	r2,-72(fp)
40086868:	10801404 	addi	r2,r2,80
4008686c:	e0bfe515 	stw	r2,-108(fp)
                        if (res == FR_OK && dir[1] == '.') {
40086870:	e0bfe417 	ldw	r2,-112(fp)
40086874:	10002c1e 	bne	r2,zero,40086928 <f_rename+0x2cc>
40086878:	e0bfe517 	ldw	r2,-108(fp)
4008687c:	10800044 	addi	r2,r2,1
40086880:	10800003 	ldbu	r2,0(r2)
40086884:	10803fcc 	andi	r2,r2,255
40086888:	10800b98 	cmpnei	r2,r2,46
4008688c:	1000261e 	bne	r2,zero,40086928 <f_rename+0x2cc>
                           dw = (djn.fs->fs_type == FS_FAT32 && djn.sclust == djn.fs->dirbase) ? 0 : djn.sclust;
40086890:	e0bfee17 	ldw	r2,-72(fp)
40086894:	10800003 	ldbu	r2,0(r2)
40086898:	10803fcc 	andi	r2,r2,255
4008689c:	108000d8 	cmpnei	r2,r2,3
400868a0:	1000041e 	bne	r2,zero,400868b4 <f_rename+0x258>
400868a4:	e0fff017 	ldw	r3,-64(fp)
400868a8:	e0bfee17 	ldw	r2,-72(fp)
400868ac:	10800917 	ldw	r2,36(r2)
400868b0:	18800226 	beq	r3,r2,400868bc <f_rename+0x260>
400868b4:	e0bff017 	ldw	r2,-64(fp)
400868b8:	00000106 	br	400868c0 <f_rename+0x264>
400868bc:	0005883a 	mov	r2,zero
400868c0:	e0bfe615 	stw	r2,-104(fp)
                           ST_CLUST(dir, dw);
400868c4:	e0bfe517 	ldw	r2,-108(fp)
400868c8:	10800684 	addi	r2,r2,26
400868cc:	e0ffe617 	ldw	r3,-104(fp)
400868d0:	10c00005 	stb	r3,0(r2)
400868d4:	e0bfe517 	ldw	r2,-108(fp)
400868d8:	108006c4 	addi	r2,r2,27
400868dc:	e0ffe617 	ldw	r3,-104(fp)
400868e0:	18ffffcc 	andi	r3,r3,65535
400868e4:	1806d23a 	srli	r3,r3,8
400868e8:	10c00005 	stb	r3,0(r2)
400868ec:	e0bfe517 	ldw	r2,-108(fp)
400868f0:	10800504 	addi	r2,r2,20
400868f4:	e0ffe617 	ldw	r3,-104(fp)
400868f8:	1806d43a 	srli	r3,r3,16
400868fc:	10c00005 	stb	r3,0(r2)
40086900:	e0bfe517 	ldw	r2,-108(fp)
40086904:	10800544 	addi	r2,r2,21
40086908:	e0ffe617 	ldw	r3,-104(fp)
4008690c:	1806d43a 	srli	r3,r3,16
40086910:	18ffffcc 	andi	r3,r3,65535
40086914:	1806d23a 	srli	r3,r3,8
40086918:	10c00005 	stb	r3,0(r2)
                           djn.fs->wflag = 1;
4008691c:	e0bfee17 	ldw	r2,-72(fp)
40086920:	00c00044 	movi	r3,1
40086924:	10c00105 	stb	r3,4(r2)
                        }
                     }
                  }
                  if (res == FR_OK) {
40086928:	e0bfe417 	ldw	r2,-112(fp)
4008692c:	10000a1e 	bne	r2,zero,40086958 <f_rename+0x2fc>
                     res = dir_remove(&djo);    /* Remove old entry */
40086930:	e0bfe704 	addi	r2,fp,-100
40086934:	1009883a 	mov	r4,r2
40086938:	0082c480 	call	40082c48 <dir_remove>
4008693c:	e0bfe415 	stw	r2,-112(fp)
                     if (res == FR_OK)
40086940:	e0bfe417 	ldw	r2,-112(fp)
40086944:	1000041e 	bne	r2,zero,40086958 <f_rename+0x2fc>
                        res = sync(djo.fs);
40086948:	e0bfe717 	ldw	r2,-100(fp)
4008694c:	1009883a 	mov	r4,r2
40086950:	00818f00 	call	400818f0 <sync>
40086954:	e0bfe415 	stw	r2,-112(fp)
            }
         }
      }
      FREE_BUF();
   }
   LEAVE_FF(djo.fs, res);
40086958:	e0bfe417 	ldw	r2,-112(fp)
}
4008695c:	e037883a 	mov	sp,fp
40086960:	dfc00117 	ldw	ra,4(sp)
40086964:	df000017 	ldw	fp,0(sp)
40086968:	dec00204 	addi	sp,sp,8
4008696c:	f800283a 	ret

40086970 <f_mkfs>:
FRESULT f_mkfs (
   uint8_t drv,      /* Logical drive number */
   uint8_t sfd,      /* Partitioning rule 0:FDISK, 1:SFD */
   uint32_t au        /* Allocation unit size [bytes] */
)
{
40086970:	deffea04 	addi	sp,sp,-88
40086974:	dfc01515 	stw	ra,84(sp)
40086978:	df001415 	stw	fp,80(sp)
4008697c:	df001404 	addi	fp,sp,80
40086980:	2007883a 	mov	r3,r4
40086984:	2805883a 	mov	r2,r5
40086988:	e1bfff15 	stw	r6,-4(fp)
4008698c:	e0fffd05 	stb	r3,-12(fp)
40086990:	e0bffe05 	stb	r2,-8(fp)
   FATFS *fs;
   DSTATUS stat;


   /* Check mounted drive and clear work area */
   if (drv >= _VOLUMES) return FR_INVALID_DRIVE;
40086994:	e0bffd03 	ldbu	r2,-12(fp)
40086998:	10000226 	beq	r2,zero,400869a4 <f_mkfs+0x34>
4008699c:	008002c4 	movi	r2,11
400869a0:	00039906 	br	40087808 <f_mkfs+0xe98>
   if (sfd > 1) return FR_INVALID_PARAMETER;
400869a4:	e0bffe03 	ldbu	r2,-8(fp)
400869a8:	108000b0 	cmpltui	r2,r2,2
400869ac:	1000021e 	bne	r2,zero,400869b8 <f_mkfs+0x48>
400869b0:	008004c4 	movi	r2,19
400869b4:	00039406 	br	40087808 <f_mkfs+0xe98>
   if (au & (au - 1)) return FR_INVALID_PARAMETER;
400869b8:	e0bfff17 	ldw	r2,-4(fp)
400869bc:	10ffffc4 	addi	r3,r2,-1
400869c0:	e0bfff17 	ldw	r2,-4(fp)
400869c4:	1884703a 	and	r2,r3,r2
400869c8:	10000226 	beq	r2,zero,400869d4 <f_mkfs+0x64>
400869cc:	008004c4 	movi	r2,19
400869d0:	00038d06 	br	40087808 <f_mkfs+0xe98>
   fs = FatFs[drv];
400869d4:	e0bffd03 	ldbu	r2,-12(fp)
400869d8:	1085883a 	add	r2,r2,r2
400869dc:	1087883a 	add	r3,r2,r2
400869e0:	d0a73904 	addi	r2,gp,-25372
400869e4:	1885883a 	add	r2,r3,r2
400869e8:	10800017 	ldw	r2,0(r2)
400869ec:	e0bff315 	stw	r2,-52(fp)
   if (!fs) return FR_NOT_ENABLED;
400869f0:	e0bff317 	ldw	r2,-52(fp)
400869f4:	1000021e 	bne	r2,zero,40086a00 <f_mkfs+0x90>
400869f8:	00800304 	movi	r2,12
400869fc:	00038206 	br	40087808 <f_mkfs+0xe98>
   fs->fs_type = 0;
40086a00:	e0bff317 	ldw	r2,-52(fp)
40086a04:	10000005 	stb	zero,0(r2)
   pdrv = LD2PD(drv);   /* Physical drive */
40086a08:	e0bffd03 	ldbu	r2,-12(fp)
40086a0c:	e0bff405 	stb	r2,-48(fp)
   part = LD2PT(drv);   /* Partition (0:auto detect, 1-4:get from partition table)*/
40086a10:	e03ff445 	stb	zero,-47(fp)

   /* Get disk statics */
   stat = disk_initialize(pdrv);
40086a14:	e0bff403 	ldbu	r2,-48(fp)
40086a18:	1009883a 	mov	r4,r2
40086a1c:	0080be80 	call	40080be8 <ffs_DiskIOInitialize>
40086a20:	e0bff485 	stb	r2,-46(fp)
   if (stat & STA_NOINIT) return FR_NOT_READY;
40086a24:	e0bff483 	ldbu	r2,-46(fp)
40086a28:	1080004c 	andi	r2,r2,1
40086a2c:	10000226 	beq	r2,zero,40086a38 <f_mkfs+0xc8>
40086a30:	008000c4 	movi	r2,3
40086a34:	00037406 	br	40087808 <f_mkfs+0xe98>
   if (stat & STA_PROTECT) return FR_WRITE_PROTECTED;
40086a38:	e0bff483 	ldbu	r2,-46(fp)
40086a3c:	1080010c 	andi	r2,r2,4
40086a40:	10000226 	beq	r2,zero,40086a4c <f_mkfs+0xdc>
40086a44:	00800284 	movi	r2,10
40086a48:	00036f06 	br	40087808 <f_mkfs+0xe98>
      if (!tbl[4]) return FR_MKFS_ABORTED;   /* No partition? */
      b_vol = LD_DWORD(tbl+8);   /* Volume start sector */
      n_vol = LD_DWORD(tbl+12);  /* Volume size */
   } else {
      /* Create a partition in this function */
      if (disk_ioctl(pdrv, GET_SECTOR_COUNT, &n_vol) != RES_OK || n_vol < 128)
40086a4c:	e0fff403 	ldbu	r3,-48(fp)
40086a50:	e0bffc04 	addi	r2,fp,-16
40086a54:	1809883a 	mov	r4,r3
40086a58:	01400044 	movi	r5,1
40086a5c:	100d883a 	mov	r6,r2
40086a60:	00810f40 	call	400810f4 <ffs_DiskIOIoctl>
40086a64:	1000031e 	bne	r2,zero,40086a74 <f_mkfs+0x104>
40086a68:	e0bffc17 	ldw	r2,-16(fp)
40086a6c:	10802028 	cmpgeui	r2,r2,128
40086a70:	1000021e 	bne	r2,zero,40086a7c <f_mkfs+0x10c>
         return FR_DISK_ERR;
40086a74:	00800044 	movi	r2,1
40086a78:	00036306 	br	40087808 <f_mkfs+0xe98>
      b_vol = (sfd) ? 0 : 63;    /* Volume start sector */
40086a7c:	e0bffe03 	ldbu	r2,-8(fp)
40086a80:	10000226 	beq	r2,zero,40086a8c <f_mkfs+0x11c>
40086a84:	0005883a 	mov	r2,zero
40086a88:	00000106 	br	40086a90 <f_mkfs+0x120>
40086a8c:	00800fc4 	movi	r2,63
40086a90:	e0bff515 	stw	r2,-44(fp)
      n_vol -= b_vol;            /* Volume size */
40086a94:	e0fffc17 	ldw	r3,-16(fp)
40086a98:	e0bff517 	ldw	r2,-44(fp)
40086a9c:	1885c83a 	sub	r2,r3,r2
40086aa0:	e0bffc15 	stw	r2,-16(fp)
   }

   if (!au) {           /* AU auto selection */
40086aa4:	e0bfff17 	ldw	r2,-4(fp)
40086aa8:	10001a1e 	bne	r2,zero,40086b14 <f_mkfs+0x1a4>
      vs = n_vol / (2000 / (SS(fs) / 512));
40086aac:	e0fffc17 	ldw	r3,-16(fp)
40086ab0:	0081f404 	movi	r2,2000
40086ab4:	1885203a 	divu	r2,r3,r2
40086ab8:	e0bff615 	stw	r2,-40(fp)
      for (i = 0; vs < vst[i]; i++) ;
40086abc:	e03fee15 	stw	zero,-72(fp)
40086ac0:	00000306 	br	40086ad0 <f_mkfs+0x160>
40086ac4:	e0bfee17 	ldw	r2,-72(fp)
40086ac8:	10800044 	addi	r2,r2,1
40086acc:	e0bfee15 	stw	r2,-72(fp)
40086ad0:	009002b4 	movhi	r2,16394
40086ad4:	10a7b204 	addi	r2,r2,-24888
40086ad8:	e0ffee17 	ldw	r3,-72(fp)
40086adc:	18c7883a 	add	r3,r3,r3
40086ae0:	10c5883a 	add	r2,r2,r3
40086ae4:	1080000b 	ldhu	r2,0(r2)
40086ae8:	10bfffcc 	andi	r2,r2,65535
40086aec:	e0fff617 	ldw	r3,-40(fp)
40086af0:	18bff436 	bltu	r3,r2,40086ac4 <__alt_mem_epcs+0xfff45ac4>
      au = cst[i];
40086af4:	009002b4 	movhi	r2,16394
40086af8:	10a7b784 	addi	r2,r2,-24866
40086afc:	e0ffee17 	ldw	r3,-72(fp)
40086b00:	18c7883a 	add	r3,r3,r3
40086b04:	10c5883a 	add	r2,r2,r3
40086b08:	1080000b 	ldhu	r2,0(r2)
40086b0c:	10bfffcc 	andi	r2,r2,65535
40086b10:	e0bfff15 	stw	r2,-4(fp)
   }
   au /= SS(fs);     /* Number of sectors per cluster */
40086b14:	e0bfff17 	ldw	r2,-4(fp)
40086b18:	1004d27a 	srli	r2,r2,9
40086b1c:	e0bfff15 	stw	r2,-4(fp)
   if (au == 0) au = 1;
40086b20:	e0bfff17 	ldw	r2,-4(fp)
40086b24:	1000021e 	bne	r2,zero,40086b30 <f_mkfs+0x1c0>
40086b28:	00800044 	movi	r2,1
40086b2c:	e0bfff15 	stw	r2,-4(fp)
   if (au > 128) au = 128;
40086b30:	e0bfff17 	ldw	r2,-4(fp)
40086b34:	10802070 	cmpltui	r2,r2,129
40086b38:	1000021e 	bne	r2,zero,40086b44 <f_mkfs+0x1d4>
40086b3c:	00802004 	movi	r2,128
40086b40:	e0bfff15 	stw	r2,-4(fp)

   /* Pre-compute number of clusters and FAT syb-type */
   n_clst = n_vol / au;
40086b44:	e0fffc17 	ldw	r3,-16(fp)
40086b48:	e0bfff17 	ldw	r2,-4(fp)
40086b4c:	1885203a 	divu	r2,r3,r2
40086b50:	e0bff715 	stw	r2,-36(fp)
   fmt = FS_FAT12;
40086b54:	00800044 	movi	r2,1
40086b58:	e0bfec05 	stb	r2,-80(fp)
   if (n_clst >= MIN_FAT16) fmt = FS_FAT16;
40086b5c:	e0bff717 	ldw	r2,-36(fp)
40086b60:	1083fdb0 	cmpltui	r2,r2,4086
40086b64:	1000021e 	bne	r2,zero,40086b70 <f_mkfs+0x200>
40086b68:	00800084 	movi	r2,2
40086b6c:	e0bfec05 	stb	r2,-80(fp)
   if (n_clst >= MIN_FAT32) fmt = FS_FAT32;
40086b70:	e0bff717 	ldw	r2,-36(fp)
40086b74:	10bffdb0 	cmpltui	r2,r2,65526
40086b78:	1000021e 	bne	r2,zero,40086b84 <f_mkfs+0x214>
40086b7c:	008000c4 	movi	r2,3
40086b80:	e0bfec05 	stb	r2,-80(fp)

   /* Determine offset and size of FAT structure */
   if (fmt == FS_FAT32) {
40086b84:	e0bfec03 	ldbu	r2,-80(fp)
40086b88:	108000d8 	cmpnei	r2,r2,3
40086b8c:	10000b1e 	bne	r2,zero,40086bbc <f_mkfs+0x24c>
      n_fat = ((n_clst * 4) + 8 + SS(fs) - 1) / SS(fs);
40086b90:	e0bff717 	ldw	r2,-36(fp)
40086b94:	10802084 	addi	r2,r2,130
40086b98:	1085883a 	add	r2,r2,r2
40086b9c:	1085883a 	add	r2,r2,r2
40086ba0:	10bfffc4 	addi	r2,r2,-1
40086ba4:	1004d27a 	srli	r2,r2,9
40086ba8:	e0bff115 	stw	r2,-60(fp)
      n_rsv = 32;
40086bac:	00800804 	movi	r2,32
40086bb0:	e0bff015 	stw	r2,-64(fp)
      n_dir = 0;
40086bb4:	e03ff215 	stw	zero,-56(fp)
40086bb8:	00001706 	br	40086c18 <f_mkfs+0x2a8>
   } else {
      n_fat = (fmt == FS_FAT12) ? (n_clst * 3 + 1) / 2 + 3 : (n_clst * 2) + 4;
40086bbc:	e0bfec03 	ldbu	r2,-80(fp)
40086bc0:	10800058 	cmpnei	r2,r2,1
40086bc4:	1000081e 	bne	r2,zero,40086be8 <f_mkfs+0x278>
40086bc8:	e0fff717 	ldw	r3,-36(fp)
40086bcc:	1805883a 	mov	r2,r3
40086bd0:	1085883a 	add	r2,r2,r2
40086bd4:	10c5883a 	add	r2,r2,r3
40086bd8:	10800044 	addi	r2,r2,1
40086bdc:	1004d07a 	srli	r2,r2,1
40086be0:	108000c4 	addi	r2,r2,3
40086be4:	00000306 	br	40086bf4 <f_mkfs+0x284>
40086be8:	e0bff717 	ldw	r2,-36(fp)
40086bec:	10800084 	addi	r2,r2,2
40086bf0:	1085883a 	add	r2,r2,r2
40086bf4:	e0bff115 	stw	r2,-60(fp)
      n_fat = (n_fat + SS(fs) - 1) / SS(fs);
40086bf8:	e0bff117 	ldw	r2,-60(fp)
40086bfc:	10807fc4 	addi	r2,r2,511
40086c00:	1004d27a 	srli	r2,r2,9
40086c04:	e0bff115 	stw	r2,-60(fp)
      n_rsv = 1;
40086c08:	00800044 	movi	r2,1
40086c0c:	e0bff015 	stw	r2,-64(fp)
      n_dir = (uint32_t)N_ROOTDIR * SZ_DIR / SS(fs);
40086c10:	00800804 	movi	r2,32
40086c14:	e0bff215 	stw	r2,-56(fp)
   }
   b_fat = b_vol + n_rsv;           /* FAT area start sector */
40086c18:	e0fff517 	ldw	r3,-44(fp)
40086c1c:	e0bff017 	ldw	r2,-64(fp)
40086c20:	1885883a 	add	r2,r3,r2
40086c24:	e0bfef15 	stw	r2,-68(fp)
   b_dir = b_fat + n_fat * N_FATS;     /* Directory area start sector */
40086c28:	e0ffef17 	ldw	r3,-68(fp)
40086c2c:	e0bff117 	ldw	r2,-60(fp)
40086c30:	1885883a 	add	r2,r3,r2
40086c34:	e0bff815 	stw	r2,-32(fp)
   b_data = b_dir + n_dir;          /* Data area start sector */
40086c38:	e0fff817 	ldw	r3,-32(fp)
40086c3c:	e0bff217 	ldw	r2,-56(fp)
40086c40:	1885883a 	add	r2,r3,r2
40086c44:	e0bff915 	stw	r2,-28(fp)
   if (n_vol < b_data + au - b_vol) return FR_MKFS_ABORTED; /* Too small volume */
40086c48:	e0fff917 	ldw	r3,-28(fp)
40086c4c:	e0bfff17 	ldw	r2,-4(fp)
40086c50:	1887883a 	add	r3,r3,r2
40086c54:	e0bff517 	ldw	r2,-44(fp)
40086c58:	1885c83a 	sub	r2,r3,r2
40086c5c:	e0fffc17 	ldw	r3,-16(fp)
40086c60:	1880022e 	bgeu	r3,r2,40086c6c <f_mkfs+0x2fc>
40086c64:	00800384 	movi	r2,14
40086c68:	0002e706 	br	40087808 <f_mkfs+0xe98>

   /* Align data start sector to erase block boundary (for flash memory media) */
   if (disk_ioctl(pdrv, GET_BLOCK_SIZE, &n) != RES_OK || !n || n > 32768) n = 1;
40086c6c:	e0fff403 	ldbu	r3,-48(fp)
40086c70:	e0bffb04 	addi	r2,fp,-20
40086c74:	1809883a 	mov	r4,r3
40086c78:	014000c4 	movi	r5,3
40086c7c:	100d883a 	mov	r6,r2
40086c80:	00810f40 	call	400810f4 <ffs_DiskIOIoctl>
40086c84:	1000051e 	bne	r2,zero,40086c9c <f_mkfs+0x32c>
40086c88:	e0bffb17 	ldw	r2,-20(fp)
40086c8c:	10000326 	beq	r2,zero,40086c9c <f_mkfs+0x32c>
40086c90:	e0bffb17 	ldw	r2,-20(fp)
40086c94:	10a00070 	cmpltui	r2,r2,32769
40086c98:	1000021e 	bne	r2,zero,40086ca4 <f_mkfs+0x334>
40086c9c:	00800044 	movi	r2,1
40086ca0:	e0bffb15 	stw	r2,-20(fp)
   n = (b_data + n - 1) & ~(n - 1); /* Next nearest erase block from current data start */
40086ca4:	e0fffb17 	ldw	r3,-20(fp)
40086ca8:	e0bff917 	ldw	r2,-28(fp)
40086cac:	1885883a 	add	r2,r3,r2
40086cb0:	10ffffc4 	addi	r3,r2,-1
40086cb4:	e0bffb17 	ldw	r2,-20(fp)
40086cb8:	0085c83a 	sub	r2,zero,r2
40086cbc:	1884703a 	and	r2,r3,r2
40086cc0:	e0bffb15 	stw	r2,-20(fp)
   n = (n - b_data) / N_FATS;
40086cc4:	e0fffb17 	ldw	r3,-20(fp)
40086cc8:	e0bff917 	ldw	r2,-28(fp)
40086ccc:	1885c83a 	sub	r2,r3,r2
40086cd0:	e0bffb15 	stw	r2,-20(fp)
   if (fmt == FS_FAT32) {     /* FAT32: Move FAT offset */
40086cd4:	e0bfec03 	ldbu	r2,-80(fp)
40086cd8:	108000d8 	cmpnei	r2,r2,3
40086cdc:	1000091e 	bne	r2,zero,40086d04 <f_mkfs+0x394>
      n_rsv += n;
40086ce0:	e0bffb17 	ldw	r2,-20(fp)
40086ce4:	e0fff017 	ldw	r3,-64(fp)
40086ce8:	1885883a 	add	r2,r3,r2
40086cec:	e0bff015 	stw	r2,-64(fp)
      b_fat += n;
40086cf0:	e0bffb17 	ldw	r2,-20(fp)
40086cf4:	e0ffef17 	ldw	r3,-68(fp)
40086cf8:	1885883a 	add	r2,r3,r2
40086cfc:	e0bfef15 	stw	r2,-68(fp)
40086d00:	00000406 	br	40086d14 <f_mkfs+0x3a4>
   } else {             /* FAT12/16: Expand FAT size */
      n_fat += n;
40086d04:	e0bffb17 	ldw	r2,-20(fp)
40086d08:	e0fff117 	ldw	r3,-60(fp)
40086d0c:	1885883a 	add	r2,r3,r2
40086d10:	e0bff115 	stw	r2,-60(fp)
   }

   /* Determine number of clusters and final check of validity of the FAT sub-type */
   n_clst = (n_vol - n_rsv - n_fat * N_FATS - n_dir) / au;
40086d14:	e0fffc17 	ldw	r3,-16(fp)
40086d18:	e0bff017 	ldw	r2,-64(fp)
40086d1c:	1887c83a 	sub	r3,r3,r2
40086d20:	e0bff117 	ldw	r2,-60(fp)
40086d24:	1887c83a 	sub	r3,r3,r2
40086d28:	e0bff217 	ldw	r2,-56(fp)
40086d2c:	1887c83a 	sub	r3,r3,r2
40086d30:	e0bfff17 	ldw	r2,-4(fp)
40086d34:	1885203a 	divu	r2,r3,r2
40086d38:	e0bff715 	stw	r2,-36(fp)
   if (   (fmt == FS_FAT16 && n_clst < MIN_FAT16)
40086d3c:	e0bfec03 	ldbu	r2,-80(fp)
40086d40:	10800098 	cmpnei	r2,r2,2
40086d44:	1000031e 	bne	r2,zero,40086d54 <f_mkfs+0x3e4>
40086d48:	e0bff717 	ldw	r2,-36(fp)
40086d4c:	1083fdb0 	cmpltui	r2,r2,4086
40086d50:	1000061e 	bne	r2,zero,40086d6c <f_mkfs+0x3fc>
      || (fmt == FS_FAT32 && n_clst < MIN_FAT32))
40086d54:	e0bfec03 	ldbu	r2,-80(fp)
40086d58:	108000d8 	cmpnei	r2,r2,3
40086d5c:	1000051e 	bne	r2,zero,40086d74 <f_mkfs+0x404>
40086d60:	e0bff717 	ldw	r2,-36(fp)
40086d64:	10bffda8 	cmpgeui	r2,r2,65526
40086d68:	1000021e 	bne	r2,zero,40086d74 <f_mkfs+0x404>
      return FR_MKFS_ABORTED;
40086d6c:	00800384 	movi	r2,14
40086d70:	0002a506 	br	40087808 <f_mkfs+0xe98>

   switch (fmt) { /* Determine system ID for partition table */
40086d74:	e0bfec03 	ldbu	r2,-80(fp)
40086d78:	10c00060 	cmpeqi	r3,r2,1
40086d7c:	1800031e 	bne	r3,zero,40086d8c <f_mkfs+0x41c>
40086d80:	108000a0 	cmpeqi	r2,r2,2
40086d84:	1000041e 	bne	r2,zero,40086d98 <f_mkfs+0x428>
40086d88:	00000b06 	br	40086db8 <f_mkfs+0x448>
   case FS_FAT12: sys = 0x01; break;
40086d8c:	00800044 	movi	r2,1
40086d90:	e0bfec85 	stb	r2,-78(fp)
40086d94:	00000a06 	br	40086dc0 <f_mkfs+0x450>
   case FS_FAT16: sys = (n_vol < 0x10000) ? 0x04 : 0x06; break;
40086d98:	e0bffc17 	ldw	r2,-16(fp)
40086d9c:	00ffffd4 	movui	r3,65535
40086da0:	18800236 	bltu	r3,r2,40086dac <f_mkfs+0x43c>
40086da4:	00800104 	movi	r2,4
40086da8:	00000106 	br	40086db0 <f_mkfs+0x440>
40086dac:	00800184 	movi	r2,6
40086db0:	e0bfec85 	stb	r2,-78(fp)
40086db4:	00000206 	br	40086dc0 <f_mkfs+0x450>
   default:       sys = 0x0C;
40086db8:	00800304 	movi	r2,12
40086dbc:	e0bfec85 	stb	r2,-78(fp)
      tbl = &fs->win[MBR_Table + (part - 1) * SZ_PTE];
      tbl[4] = sys;
      if (disk_write(pdrv, fs->win, 0, 1) != RES_OK) return FR_DISK_ERR;
      md = 0xF8;
   } else {
      if (sfd) {  /* No patition table (SFD) */
40086dc0:	e0bffe03 	ldbu	r2,-8(fp)
40086dc4:	10000326 	beq	r2,zero,40086dd4 <f_mkfs+0x464>
         md = 0xF0;
40086dc8:	00bffc04 	movi	r2,-16
40086dcc:	e0bfec45 	stb	r2,-79(fp)
40086dd0:	00006006 	br	40086f54 <f_mkfs+0x5e4>
      } else { /* Create partition table (FDISK) */
         mem_set(fs->win, 0, SS(fs));
40086dd4:	e0bff317 	ldw	r2,-52(fp)
40086dd8:	10800c04 	addi	r2,r2,48
40086ddc:	1009883a 	mov	r4,r2
40086de0:	000b883a 	mov	r5,zero
40086de4:	01808004 	movi	r6,512
40086de8:	00816340 	call	40081634 <mem_set>
         tbl = fs->win+MBR_Table;   /* Create partiton table for single partition in the drive */
40086dec:	e0bff317 	ldw	r2,-52(fp)
40086df0:	10807b84 	addi	r2,r2,494
40086df4:	e0bffa15 	stw	r2,-24(fp)
         tbl[1] = 1;                /* Partition start head */
40086df8:	e0bffa17 	ldw	r2,-24(fp)
40086dfc:	10800044 	addi	r2,r2,1
40086e00:	00c00044 	movi	r3,1
40086e04:	10c00005 	stb	r3,0(r2)
         tbl[2] = 1;                /* Partition start sector */
40086e08:	e0bffa17 	ldw	r2,-24(fp)
40086e0c:	10800084 	addi	r2,r2,2
40086e10:	00c00044 	movi	r3,1
40086e14:	10c00005 	stb	r3,0(r2)
         tbl[3] = 0;                /* Partition start cylinder */
40086e18:	e0bffa17 	ldw	r2,-24(fp)
40086e1c:	108000c4 	addi	r2,r2,3
40086e20:	10000005 	stb	zero,0(r2)
         tbl[4] = sys;              /* System type */
40086e24:	e0bffa17 	ldw	r2,-24(fp)
40086e28:	10800104 	addi	r2,r2,4
40086e2c:	e0ffec83 	ldbu	r3,-78(fp)
40086e30:	10c00005 	stb	r3,0(r2)
         tbl[5] = 254;              /* Partition end head */
40086e34:	e0bffa17 	ldw	r2,-24(fp)
40086e38:	10800144 	addi	r2,r2,5
40086e3c:	00ffff84 	movi	r3,-2
40086e40:	10c00005 	stb	r3,0(r2)
         n = (b_vol + n_vol) / 63 / 255;
40086e44:	e0fffc17 	ldw	r3,-16(fp)
40086e48:	e0bff517 	ldw	r2,-44(fp)
40086e4c:	1887883a 	add	r3,r3,r2
40086e50:	008fb044 	movi	r2,16065
40086e54:	1885203a 	divu	r2,r3,r2
40086e58:	e0bffb15 	stw	r2,-20(fp)
         tbl[6] = (uint8_t)((n >> 2) | 63);  /* Partiiton end sector */
40086e5c:	e0bffa17 	ldw	r2,-24(fp)
40086e60:	10800184 	addi	r2,r2,6
40086e64:	e0fffb17 	ldw	r3,-20(fp)
40086e68:	1806d0ba 	srli	r3,r3,2
40086e6c:	18c00fd4 	ori	r3,r3,63
40086e70:	10c00005 	stb	r3,0(r2)
         tbl[7] = (uint8_t)n;          /* End cylinder */
40086e74:	e0bffa17 	ldw	r2,-24(fp)
40086e78:	108001c4 	addi	r2,r2,7
40086e7c:	e0fffb17 	ldw	r3,-20(fp)
40086e80:	10c00005 	stb	r3,0(r2)
         ST_DWORD(tbl+8, 63);       /* Partition start in LBA */
40086e84:	e0bffa17 	ldw	r2,-24(fp)
40086e88:	10800204 	addi	r2,r2,8
40086e8c:	00c00fc4 	movi	r3,63
40086e90:	10c00005 	stb	r3,0(r2)
40086e94:	e0bffa17 	ldw	r2,-24(fp)
40086e98:	10800244 	addi	r2,r2,9
40086e9c:	10000005 	stb	zero,0(r2)
40086ea0:	e0bffa17 	ldw	r2,-24(fp)
40086ea4:	10800284 	addi	r2,r2,10
40086ea8:	10000005 	stb	zero,0(r2)
40086eac:	e0bffa17 	ldw	r2,-24(fp)
40086eb0:	108002c4 	addi	r2,r2,11
40086eb4:	10000005 	stb	zero,0(r2)
         ST_DWORD(tbl+12, n_vol);      /* Partition size in LBA */
40086eb8:	e0bffa17 	ldw	r2,-24(fp)
40086ebc:	10800304 	addi	r2,r2,12
40086ec0:	e0fffc17 	ldw	r3,-16(fp)
40086ec4:	10c00005 	stb	r3,0(r2)
40086ec8:	e0bffa17 	ldw	r2,-24(fp)
40086ecc:	10800344 	addi	r2,r2,13
40086ed0:	e0fffc17 	ldw	r3,-16(fp)
40086ed4:	18ffffcc 	andi	r3,r3,65535
40086ed8:	1806d23a 	srli	r3,r3,8
40086edc:	10c00005 	stb	r3,0(r2)
40086ee0:	e0bffa17 	ldw	r2,-24(fp)
40086ee4:	10800384 	addi	r2,r2,14
40086ee8:	e0fffc17 	ldw	r3,-16(fp)
40086eec:	1806d43a 	srli	r3,r3,16
40086ef0:	10c00005 	stb	r3,0(r2)
40086ef4:	e0bffa17 	ldw	r2,-24(fp)
40086ef8:	108003c4 	addi	r2,r2,15
40086efc:	e0fffc17 	ldw	r3,-16(fp)
40086f00:	1806d63a 	srli	r3,r3,24
40086f04:	10c00005 	stb	r3,0(r2)
         ST_WORD(fs->win+BS_55AA, 0xAA55);   /* MBR signature */
40086f08:	e0bff317 	ldw	r2,-52(fp)
40086f0c:	00c01544 	movi	r3,85
40086f10:	10c08b85 	stb	r3,558(r2)
40086f14:	e0bff317 	ldw	r2,-52(fp)
40086f18:	00ffea84 	movi	r3,-86
40086f1c:	10c08bc5 	stb	r3,559(r2)
         if (disk_write(pdrv, fs->win, 0, 1) != RES_OK)  /* Write it to the MBR sector */
40086f20:	e0fff403 	ldbu	r3,-48(fp)
40086f24:	e0bff317 	ldw	r2,-52(fp)
40086f28:	10800c04 	addi	r2,r2,48
40086f2c:	1809883a 	mov	r4,r3
40086f30:	100b883a 	mov	r5,r2
40086f34:	000d883a 	mov	r6,zero
40086f38:	01c00044 	movi	r7,1
40086f3c:	0080f880 	call	40080f88 <ffs_DiskIOWrite>
40086f40:	10000226 	beq	r2,zero,40086f4c <f_mkfs+0x5dc>
            return FR_DISK_ERR;
40086f44:	00800044 	movi	r2,1
40086f48:	00022f06 	br	40087808 <f_mkfs+0xe98>
         md = 0xF8;
40086f4c:	00bffe04 	movi	r2,-8
40086f50:	e0bfec45 	stb	r2,-79(fp)
      }
   }

   /* Create BPB in the VBR */
   tbl = fs->win;                   /* Clear sector */
40086f54:	e0bff317 	ldw	r2,-52(fp)
40086f58:	10800c04 	addi	r2,r2,48
40086f5c:	e0bffa15 	stw	r2,-24(fp)
   mem_set(tbl, 0, SS(fs));
40086f60:	e13ffa17 	ldw	r4,-24(fp)
40086f64:	000b883a 	mov	r5,zero
40086f68:	01808004 	movi	r6,512
40086f6c:	00816340 	call	40081634 <mem_set>
   mem_cpy(tbl, "\xEB\xFE\x90" "MSDOS5.0", 11);/* Boot jump code, OEM name */
40086f70:	e13ffa17 	ldw	r4,-24(fp)
40086f74:	015002b4 	movhi	r5,16394
40086f78:	29678504 	addi	r5,r5,-25068
40086f7c:	018002c4 	movi	r6,11
40086f80:	00815c80 	call	400815c8 <mem_cpy>
   i = SS(fs);                      /* Sector size */
40086f84:	00808004 	movi	r2,512
40086f88:	e0bfee15 	stw	r2,-72(fp)
   ST_WORD(tbl+BPB_BytsPerSec, i);
40086f8c:	e0bffa17 	ldw	r2,-24(fp)
40086f90:	108002c4 	addi	r2,r2,11
40086f94:	e0ffee17 	ldw	r3,-72(fp)
40086f98:	10c00005 	stb	r3,0(r2)
40086f9c:	e0bffa17 	ldw	r2,-24(fp)
40086fa0:	10800304 	addi	r2,r2,12
40086fa4:	e0ffee17 	ldw	r3,-72(fp)
40086fa8:	18ffffcc 	andi	r3,r3,65535
40086fac:	1806d23a 	srli	r3,r3,8
40086fb0:	10c00005 	stb	r3,0(r2)
   tbl[BPB_SecPerClus] = (uint8_t)au;        /* Sectors per cluster */
40086fb4:	e0bffa17 	ldw	r2,-24(fp)
40086fb8:	10800344 	addi	r2,r2,13
40086fbc:	e0ffff17 	ldw	r3,-4(fp)
40086fc0:	10c00005 	stb	r3,0(r2)
   ST_WORD(tbl+BPB_RsvdSecCnt, n_rsv);    /* Reserved sectors */
40086fc4:	e0bffa17 	ldw	r2,-24(fp)
40086fc8:	10800384 	addi	r2,r2,14
40086fcc:	e0fff017 	ldw	r3,-64(fp)
40086fd0:	10c00005 	stb	r3,0(r2)
40086fd4:	e0bffa17 	ldw	r2,-24(fp)
40086fd8:	108003c4 	addi	r2,r2,15
40086fdc:	e0fff017 	ldw	r3,-64(fp)
40086fe0:	18ffffcc 	andi	r3,r3,65535
40086fe4:	1806d23a 	srli	r3,r3,8
40086fe8:	10c00005 	stb	r3,0(r2)
   tbl[BPB_NumFATs] = N_FATS;          /* Number of FATs */
40086fec:	e0bffa17 	ldw	r2,-24(fp)
40086ff0:	10800404 	addi	r2,r2,16
40086ff4:	00c00044 	movi	r3,1
40086ff8:	10c00005 	stb	r3,0(r2)
   i = (fmt == FS_FAT32) ? 0 : N_ROOTDIR; /* Number of rootdir entries */
40086ffc:	e0bfec03 	ldbu	r2,-80(fp)
40087000:	108000d8 	cmpnei	r2,r2,3
40087004:	1000021e 	bne	r2,zero,40087010 <f_mkfs+0x6a0>
40087008:	0005883a 	mov	r2,zero
4008700c:	00000106 	br	40087014 <f_mkfs+0x6a4>
40087010:	00808004 	movi	r2,512
40087014:	e0bfee15 	stw	r2,-72(fp)
   ST_WORD(tbl+BPB_RootEntCnt, i);
40087018:	e0bffa17 	ldw	r2,-24(fp)
4008701c:	10800444 	addi	r2,r2,17
40087020:	e0ffee17 	ldw	r3,-72(fp)
40087024:	10c00005 	stb	r3,0(r2)
40087028:	e0bffa17 	ldw	r2,-24(fp)
4008702c:	10800484 	addi	r2,r2,18
40087030:	e0ffee17 	ldw	r3,-72(fp)
40087034:	18ffffcc 	andi	r3,r3,65535
40087038:	1806d23a 	srli	r3,r3,8
4008703c:	10c00005 	stb	r3,0(r2)
   if (n_vol < 0x10000) {              /* Number of total sectors */
40087040:	e0bffc17 	ldw	r2,-16(fp)
40087044:	00ffffd4 	movui	r3,65535
40087048:	18800b36 	bltu	r3,r2,40087078 <f_mkfs+0x708>
      ST_WORD(tbl+BPB_TotSec16, n_vol);
4008704c:	e0bffa17 	ldw	r2,-24(fp)
40087050:	108004c4 	addi	r2,r2,19
40087054:	e0fffc17 	ldw	r3,-16(fp)
40087058:	10c00005 	stb	r3,0(r2)
4008705c:	e0bffa17 	ldw	r2,-24(fp)
40087060:	10800504 	addi	r2,r2,20
40087064:	e0fffc17 	ldw	r3,-16(fp)
40087068:	18ffffcc 	andi	r3,r3,65535
4008706c:	1806d23a 	srli	r3,r3,8
40087070:	10c00005 	stb	r3,0(r2)
40087074:	00001406 	br	400870c8 <f_mkfs+0x758>
   } else {
      ST_DWORD(tbl+BPB_TotSec32, n_vol);
40087078:	e0bffa17 	ldw	r2,-24(fp)
4008707c:	10800804 	addi	r2,r2,32
40087080:	e0fffc17 	ldw	r3,-16(fp)
40087084:	10c00005 	stb	r3,0(r2)
40087088:	e0bffa17 	ldw	r2,-24(fp)
4008708c:	10800844 	addi	r2,r2,33
40087090:	e0fffc17 	ldw	r3,-16(fp)
40087094:	18ffffcc 	andi	r3,r3,65535
40087098:	1806d23a 	srli	r3,r3,8
4008709c:	10c00005 	stb	r3,0(r2)
400870a0:	e0bffa17 	ldw	r2,-24(fp)
400870a4:	10800884 	addi	r2,r2,34
400870a8:	e0fffc17 	ldw	r3,-16(fp)
400870ac:	1806d43a 	srli	r3,r3,16
400870b0:	10c00005 	stb	r3,0(r2)
400870b4:	e0bffa17 	ldw	r2,-24(fp)
400870b8:	108008c4 	addi	r2,r2,35
400870bc:	e0fffc17 	ldw	r3,-16(fp)
400870c0:	1806d63a 	srli	r3,r3,24
400870c4:	10c00005 	stb	r3,0(r2)
   }
   tbl[BPB_Media] = md;             /* Media descriptor */
400870c8:	e0bffa17 	ldw	r2,-24(fp)
400870cc:	10800544 	addi	r2,r2,21
400870d0:	e0ffec43 	ldbu	r3,-79(fp)
400870d4:	10c00005 	stb	r3,0(r2)
   ST_WORD(tbl+BPB_SecPerTrk, 63);        /* Number of sectors per track */
400870d8:	e0bffa17 	ldw	r2,-24(fp)
400870dc:	10800604 	addi	r2,r2,24
400870e0:	00c00fc4 	movi	r3,63
400870e4:	10c00005 	stb	r3,0(r2)
400870e8:	e0bffa17 	ldw	r2,-24(fp)
400870ec:	10800644 	addi	r2,r2,25
400870f0:	10000005 	stb	zero,0(r2)
   ST_WORD(tbl+BPB_NumHeads, 255);        /* Number of heads */
400870f4:	e0bffa17 	ldw	r2,-24(fp)
400870f8:	10800684 	addi	r2,r2,26
400870fc:	00ffffc4 	movi	r3,-1
40087100:	10c00005 	stb	r3,0(r2)
40087104:	e0bffa17 	ldw	r2,-24(fp)
40087108:	108006c4 	addi	r2,r2,27
4008710c:	10000005 	stb	zero,0(r2)
   ST_DWORD(tbl+BPB_HiddSec, b_vol);      /* Hidden sectors */
40087110:	e0bffa17 	ldw	r2,-24(fp)
40087114:	10800704 	addi	r2,r2,28
40087118:	e0fff517 	ldw	r3,-44(fp)
4008711c:	10c00005 	stb	r3,0(r2)
40087120:	e0bffa17 	ldw	r2,-24(fp)
40087124:	10800744 	addi	r2,r2,29
40087128:	e0fff517 	ldw	r3,-44(fp)
4008712c:	18ffffcc 	andi	r3,r3,65535
40087130:	1806d23a 	srli	r3,r3,8
40087134:	10c00005 	stb	r3,0(r2)
40087138:	e0bffa17 	ldw	r2,-24(fp)
4008713c:	10800784 	addi	r2,r2,30
40087140:	e0fff517 	ldw	r3,-44(fp)
40087144:	1806d43a 	srli	r3,r3,16
40087148:	10c00005 	stb	r3,0(r2)
4008714c:	e0bffa17 	ldw	r2,-24(fp)
40087150:	108007c4 	addi	r2,r2,31
40087154:	e0fff517 	ldw	r3,-44(fp)
40087158:	1806d63a 	srli	r3,r3,24
4008715c:	10c00005 	stb	r3,0(r2)
   n = get_fattime();                  /* Use current time as VSN */
40087160:	008159c0 	call	4008159c <get_fattime>
40087164:	e0bffb15 	stw	r2,-20(fp)
   if (fmt == FS_FAT32) {
40087168:	e0bfec03 	ldbu	r2,-80(fp)
4008716c:	108000d8 	cmpnei	r2,r2,3
40087170:	1000531e 	bne	r2,zero,400872c0 <f_mkfs+0x950>
      ST_DWORD(tbl+BS_VolID32, n);     /* VSN */
40087174:	e0bffa17 	ldw	r2,-24(fp)
40087178:	108010c4 	addi	r2,r2,67
4008717c:	e0fffb17 	ldw	r3,-20(fp)
40087180:	10c00005 	stb	r3,0(r2)
40087184:	e0bffa17 	ldw	r2,-24(fp)
40087188:	10801104 	addi	r2,r2,68
4008718c:	e0fffb17 	ldw	r3,-20(fp)
40087190:	18ffffcc 	andi	r3,r3,65535
40087194:	1806d23a 	srli	r3,r3,8
40087198:	10c00005 	stb	r3,0(r2)
4008719c:	e0bffa17 	ldw	r2,-24(fp)
400871a0:	10801144 	addi	r2,r2,69
400871a4:	e0fffb17 	ldw	r3,-20(fp)
400871a8:	1806d43a 	srli	r3,r3,16
400871ac:	10c00005 	stb	r3,0(r2)
400871b0:	e0bffa17 	ldw	r2,-24(fp)
400871b4:	10801184 	addi	r2,r2,70
400871b8:	e0fffb17 	ldw	r3,-20(fp)
400871bc:	1806d63a 	srli	r3,r3,24
400871c0:	10c00005 	stb	r3,0(r2)
      ST_DWORD(tbl+BPB_FATSz32, n_fat);   /* Number of sectors per FAT */
400871c4:	e0bffa17 	ldw	r2,-24(fp)
400871c8:	10800904 	addi	r2,r2,36
400871cc:	e0fff117 	ldw	r3,-60(fp)
400871d0:	10c00005 	stb	r3,0(r2)
400871d4:	e0bffa17 	ldw	r2,-24(fp)
400871d8:	10800944 	addi	r2,r2,37
400871dc:	e0fff117 	ldw	r3,-60(fp)
400871e0:	18ffffcc 	andi	r3,r3,65535
400871e4:	1806d23a 	srli	r3,r3,8
400871e8:	10c00005 	stb	r3,0(r2)
400871ec:	e0bffa17 	ldw	r2,-24(fp)
400871f0:	10800984 	addi	r2,r2,38
400871f4:	e0fff117 	ldw	r3,-60(fp)
400871f8:	1806d43a 	srli	r3,r3,16
400871fc:	10c00005 	stb	r3,0(r2)
40087200:	e0bffa17 	ldw	r2,-24(fp)
40087204:	108009c4 	addi	r2,r2,39
40087208:	e0fff117 	ldw	r3,-60(fp)
4008720c:	1806d63a 	srli	r3,r3,24
40087210:	10c00005 	stb	r3,0(r2)
      ST_DWORD(tbl+BPB_RootClus, 2);      /* Root directory start cluster (2) */
40087214:	e0bffa17 	ldw	r2,-24(fp)
40087218:	10800b04 	addi	r2,r2,44
4008721c:	00c00084 	movi	r3,2
40087220:	10c00005 	stb	r3,0(r2)
40087224:	e0bffa17 	ldw	r2,-24(fp)
40087228:	10800b44 	addi	r2,r2,45
4008722c:	10000005 	stb	zero,0(r2)
40087230:	e0bffa17 	ldw	r2,-24(fp)
40087234:	10800b84 	addi	r2,r2,46
40087238:	10000005 	stb	zero,0(r2)
4008723c:	e0bffa17 	ldw	r2,-24(fp)
40087240:	10800bc4 	addi	r2,r2,47
40087244:	10000005 	stb	zero,0(r2)
      ST_WORD(tbl+BPB_FSInfo, 1);         /* FSInfo record offset (VBR+1) */
40087248:	e0bffa17 	ldw	r2,-24(fp)
4008724c:	10800c04 	addi	r2,r2,48
40087250:	00c00044 	movi	r3,1
40087254:	10c00005 	stb	r3,0(r2)
40087258:	e0bffa17 	ldw	r2,-24(fp)
4008725c:	10800c44 	addi	r2,r2,49
40087260:	10000005 	stb	zero,0(r2)
      ST_WORD(tbl+BPB_BkBootSec, 6);      /* Backup boot record offset (VBR+6) */
40087264:	e0bffa17 	ldw	r2,-24(fp)
40087268:	10800c84 	addi	r2,r2,50
4008726c:	00c00184 	movi	r3,6
40087270:	10c00005 	stb	r3,0(r2)
40087274:	e0bffa17 	ldw	r2,-24(fp)
40087278:	10800cc4 	addi	r2,r2,51
4008727c:	10000005 	stb	zero,0(r2)
      tbl[BS_DrvNum32] = 0x80;         /* Drive number */
40087280:	e0bffa17 	ldw	r2,-24(fp)
40087284:	10801004 	addi	r2,r2,64
40087288:	00ffe004 	movi	r3,-128
4008728c:	10c00005 	stb	r3,0(r2)
      tbl[BS_BootSig32] = 0x29;        /* Extended boot signature */
40087290:	e0bffa17 	ldw	r2,-24(fp)
40087294:	10801084 	addi	r2,r2,66
40087298:	00c00a44 	movi	r3,41
4008729c:	10c00005 	stb	r3,0(r2)
      mem_cpy(tbl+BS_VolLab32, "NO NAME    " "FAT32   ", 19);  /* Volume label, FAT signature */
400872a0:	e0bffa17 	ldw	r2,-24(fp)
400872a4:	108011c4 	addi	r2,r2,71
400872a8:	1009883a 	mov	r4,r2
400872ac:	015002b4 	movhi	r5,16394
400872b0:	29678804 	addi	r5,r5,-25056
400872b4:	018004c4 	movi	r6,19
400872b8:	00815c80 	call	400815c8 <mem_cpy>
400872bc:	00002d06 	br	40087374 <f_mkfs+0xa04>
   } else {
      ST_DWORD(tbl+BS_VolID, n);       /* VSN */
400872c0:	e0bffa17 	ldw	r2,-24(fp)
400872c4:	108009c4 	addi	r2,r2,39
400872c8:	e0fffb17 	ldw	r3,-20(fp)
400872cc:	10c00005 	stb	r3,0(r2)
400872d0:	e0bffa17 	ldw	r2,-24(fp)
400872d4:	10800a04 	addi	r2,r2,40
400872d8:	e0fffb17 	ldw	r3,-20(fp)
400872dc:	18ffffcc 	andi	r3,r3,65535
400872e0:	1806d23a 	srli	r3,r3,8
400872e4:	10c00005 	stb	r3,0(r2)
400872e8:	e0bffa17 	ldw	r2,-24(fp)
400872ec:	10800a44 	addi	r2,r2,41
400872f0:	e0fffb17 	ldw	r3,-20(fp)
400872f4:	1806d43a 	srli	r3,r3,16
400872f8:	10c00005 	stb	r3,0(r2)
400872fc:	e0bffa17 	ldw	r2,-24(fp)
40087300:	10800a84 	addi	r2,r2,42
40087304:	e0fffb17 	ldw	r3,-20(fp)
40087308:	1806d63a 	srli	r3,r3,24
4008730c:	10c00005 	stb	r3,0(r2)
      ST_WORD(tbl+BPB_FATSz16, n_fat); /* Number of sectors per FAT */
40087310:	e0bffa17 	ldw	r2,-24(fp)
40087314:	10800584 	addi	r2,r2,22
40087318:	e0fff117 	ldw	r3,-60(fp)
4008731c:	10c00005 	stb	r3,0(r2)
40087320:	e0bffa17 	ldw	r2,-24(fp)
40087324:	108005c4 	addi	r2,r2,23
40087328:	e0fff117 	ldw	r3,-60(fp)
4008732c:	18ffffcc 	andi	r3,r3,65535
40087330:	1806d23a 	srli	r3,r3,8
40087334:	10c00005 	stb	r3,0(r2)
      tbl[BS_DrvNum] = 0x80;           /* Drive number */
40087338:	e0bffa17 	ldw	r2,-24(fp)
4008733c:	10800904 	addi	r2,r2,36
40087340:	00ffe004 	movi	r3,-128
40087344:	10c00005 	stb	r3,0(r2)
      tbl[BS_BootSig] = 0x29;          /* Extended boot signature */
40087348:	e0bffa17 	ldw	r2,-24(fp)
4008734c:	10800984 	addi	r2,r2,38
40087350:	00c00a44 	movi	r3,41
40087354:	10c00005 	stb	r3,0(r2)
      mem_cpy(tbl+BS_VolLab, "NO NAME    " "FAT     ", 19); /* Volume label, FAT signature */
40087358:	e0bffa17 	ldw	r2,-24(fp)
4008735c:	10800ac4 	addi	r2,r2,43
40087360:	1009883a 	mov	r4,r2
40087364:	015002b4 	movhi	r5,16394
40087368:	29678d04 	addi	r5,r5,-25036
4008736c:	018004c4 	movi	r6,19
40087370:	00815c80 	call	400815c8 <mem_cpy>
   }
   ST_WORD(tbl+BS_55AA, 0xAA55);       /* Signature (Offset is fixed here regardless of sector size) */
40087374:	e0bffa17 	ldw	r2,-24(fp)
40087378:	10807f84 	addi	r2,r2,510
4008737c:	00c01544 	movi	r3,85
40087380:	10c00005 	stb	r3,0(r2)
40087384:	e0bffa17 	ldw	r2,-24(fp)
40087388:	10807fc4 	addi	r2,r2,511
4008738c:	00ffea84 	movi	r3,-86
40087390:	10c00005 	stb	r3,0(r2)
   if (disk_write(pdrv, tbl, b_vol, 1) != RES_OK)  /* Write it to the VBR sector */
40087394:	e0bff403 	ldbu	r2,-48(fp)
40087398:	1009883a 	mov	r4,r2
4008739c:	e17ffa17 	ldw	r5,-24(fp)
400873a0:	e1bff517 	ldw	r6,-44(fp)
400873a4:	01c00044 	movi	r7,1
400873a8:	0080f880 	call	40080f88 <ffs_DiskIOWrite>
400873ac:	10000226 	beq	r2,zero,400873b8 <f_mkfs+0xa48>
      return FR_DISK_ERR;
400873b0:	00800044 	movi	r2,1
400873b4:	00011406 	br	40087808 <f_mkfs+0xe98>
   if (fmt == FS_FAT32)                   /* Write backup VBR if needed (VBR+6) */
400873b8:	e0bfec03 	ldbu	r2,-80(fp)
400873bc:	108000d8 	cmpnei	r2,r2,3
400873c0:	1000081e 	bne	r2,zero,400873e4 <f_mkfs+0xa74>
      disk_write(pdrv, tbl, b_vol + 6, 1);
400873c4:	e0fff403 	ldbu	r3,-48(fp)
400873c8:	e0bff517 	ldw	r2,-44(fp)
400873cc:	10800184 	addi	r2,r2,6
400873d0:	1809883a 	mov	r4,r3
400873d4:	e17ffa17 	ldw	r5,-24(fp)
400873d8:	100d883a 	mov	r6,r2
400873dc:	01c00044 	movi	r7,1
400873e0:	0080f880 	call	40080f88 <ffs_DiskIOWrite>

   /* Initialize FAT area */
   wsect = b_fat;
400873e4:	e0bfef17 	ldw	r2,-68(fp)
400873e8:	e0bfed15 	stw	r2,-76(fp)
   for (i = 0; i < N_FATS; i++) {      /* Initialize each FAT copy */
400873ec:	e03fee15 	stw	zero,-72(fp)
400873f0:	00008606 	br	4008760c <f_mkfs+0xc9c>
      mem_set(tbl, 0, SS(fs));         /* 1st sector of the FAT  */
400873f4:	e13ffa17 	ldw	r4,-24(fp)
400873f8:	000b883a 	mov	r5,zero
400873fc:	01808004 	movi	r6,512
40087400:	00816340 	call	40081634 <mem_set>
      n = md;                       /* Media descriptor byte */
40087404:	e0bfec43 	ldbu	r2,-79(fp)
40087408:	e0bffb15 	stw	r2,-20(fp)
      if (fmt != FS_FAT32) {
4008740c:	e0bfec03 	ldbu	r2,-80(fp)
40087410:	108000e0 	cmpeqi	r2,r2,3
40087414:	10001f1e 	bne	r2,zero,40087494 <f_mkfs+0xb24>
         n |= (fmt == FS_FAT12) ? 0x00FFFF00 : 0xFFFFFF00;
40087418:	e0bfec03 	ldbu	r2,-80(fp)
4008741c:	10800058 	cmpnei	r2,r2,1
40087420:	1000031e 	bne	r2,zero,40087430 <f_mkfs+0xac0>
40087424:	00804034 	movhi	r2,256
40087428:	10bfc004 	addi	r2,r2,-256
4008742c:	00000106 	br	40087434 <f_mkfs+0xac4>
40087430:	00bfc004 	movi	r2,-256
40087434:	e0fffb17 	ldw	r3,-20(fp)
40087438:	10c4b03a 	or	r2,r2,r3
4008743c:	e0bffb15 	stw	r2,-20(fp)
         ST_DWORD(tbl+0, n);           /* Reserve cluster #0-1 (FAT12/16) */
40087440:	e0bffb17 	ldw	r2,-20(fp)
40087444:	1007883a 	mov	r3,r2
40087448:	e0bffa17 	ldw	r2,-24(fp)
4008744c:	10c00005 	stb	r3,0(r2)
40087450:	e0bffa17 	ldw	r2,-24(fp)
40087454:	10800044 	addi	r2,r2,1
40087458:	e0fffb17 	ldw	r3,-20(fp)
4008745c:	18ffffcc 	andi	r3,r3,65535
40087460:	1806d23a 	srli	r3,r3,8
40087464:	10c00005 	stb	r3,0(r2)
40087468:	e0bffa17 	ldw	r2,-24(fp)
4008746c:	10800084 	addi	r2,r2,2
40087470:	e0fffb17 	ldw	r3,-20(fp)
40087474:	1806d43a 	srli	r3,r3,16
40087478:	10c00005 	stb	r3,0(r2)
4008747c:	e0bffa17 	ldw	r2,-24(fp)
40087480:	108000c4 	addi	r2,r2,3
40087484:	e0fffb17 	ldw	r3,-20(fp)
40087488:	1806d63a 	srli	r3,r3,24
4008748c:	10c00005 	stb	r3,0(r2)
40087490:	00003806 	br	40087574 <f_mkfs+0xc04>
      } else {
         n |= 0xFFFFFF00;
40087494:	e0fffb17 	ldw	r3,-20(fp)
40087498:	00bfc004 	movi	r2,-256
4008749c:	1884b03a 	or	r2,r3,r2
400874a0:	e0bffb15 	stw	r2,-20(fp)
         ST_DWORD(tbl+0, n);           /* Reserve cluster #0-1 (FAT32) */
400874a4:	e0bffb17 	ldw	r2,-20(fp)
400874a8:	1007883a 	mov	r3,r2
400874ac:	e0bffa17 	ldw	r2,-24(fp)
400874b0:	10c00005 	stb	r3,0(r2)
400874b4:	e0bffa17 	ldw	r2,-24(fp)
400874b8:	10800044 	addi	r2,r2,1
400874bc:	e0fffb17 	ldw	r3,-20(fp)
400874c0:	18ffffcc 	andi	r3,r3,65535
400874c4:	1806d23a 	srli	r3,r3,8
400874c8:	10c00005 	stb	r3,0(r2)
400874cc:	e0bffa17 	ldw	r2,-24(fp)
400874d0:	10800084 	addi	r2,r2,2
400874d4:	e0fffb17 	ldw	r3,-20(fp)
400874d8:	1806d43a 	srli	r3,r3,16
400874dc:	10c00005 	stb	r3,0(r2)
400874e0:	e0bffa17 	ldw	r2,-24(fp)
400874e4:	108000c4 	addi	r2,r2,3
400874e8:	e0fffb17 	ldw	r3,-20(fp)
400874ec:	1806d63a 	srli	r3,r3,24
400874f0:	10c00005 	stb	r3,0(r2)
         ST_DWORD(tbl+4, 0xFFFFFFFF);
400874f4:	e0bffa17 	ldw	r2,-24(fp)
400874f8:	10800104 	addi	r2,r2,4
400874fc:	00ffffc4 	movi	r3,-1
40087500:	10c00005 	stb	r3,0(r2)
40087504:	e0bffa17 	ldw	r2,-24(fp)
40087508:	10800144 	addi	r2,r2,5
4008750c:	00ffffc4 	movi	r3,-1
40087510:	10c00005 	stb	r3,0(r2)
40087514:	e0bffa17 	ldw	r2,-24(fp)
40087518:	10800184 	addi	r2,r2,6
4008751c:	00ffffc4 	movi	r3,-1
40087520:	10c00005 	stb	r3,0(r2)
40087524:	e0bffa17 	ldw	r2,-24(fp)
40087528:	108001c4 	addi	r2,r2,7
4008752c:	00ffffc4 	movi	r3,-1
40087530:	10c00005 	stb	r3,0(r2)
         ST_DWORD(tbl+8, 0x0FFFFFFF);  /* Reserve cluster #2 for root dir */
40087534:	e0bffa17 	ldw	r2,-24(fp)
40087538:	10800204 	addi	r2,r2,8
4008753c:	00ffffc4 	movi	r3,-1
40087540:	10c00005 	stb	r3,0(r2)
40087544:	e0bffa17 	ldw	r2,-24(fp)
40087548:	10800244 	addi	r2,r2,9
4008754c:	00ffffc4 	movi	r3,-1
40087550:	10c00005 	stb	r3,0(r2)
40087554:	e0bffa17 	ldw	r2,-24(fp)
40087558:	10800284 	addi	r2,r2,10
4008755c:	00ffffc4 	movi	r3,-1
40087560:	10c00005 	stb	r3,0(r2)
40087564:	e0bffa17 	ldw	r2,-24(fp)
40087568:	108002c4 	addi	r2,r2,11
4008756c:	00c003c4 	movi	r3,15
40087570:	10c00005 	stb	r3,0(r2)
      }
      if (disk_write(pdrv, tbl, wsect++, 1) != RES_OK)
40087574:	e13ff403 	ldbu	r4,-48(fp)
40087578:	e0bfed17 	ldw	r2,-76(fp)
4008757c:	10c00044 	addi	r3,r2,1
40087580:	e0ffed15 	stw	r3,-76(fp)
40087584:	e17ffa17 	ldw	r5,-24(fp)
40087588:	100d883a 	mov	r6,r2
4008758c:	01c00044 	movi	r7,1
40087590:	0080f880 	call	40080f88 <ffs_DiskIOWrite>
40087594:	10000226 	beq	r2,zero,400875a0 <f_mkfs+0xc30>
         return FR_DISK_ERR;
40087598:	00800044 	movi	r2,1
4008759c:	00009a06 	br	40087808 <f_mkfs+0xe98>
      mem_set(tbl, 0, SS(fs));         /* Fill following FAT entries with zero */
400875a0:	e13ffa17 	ldw	r4,-24(fp)
400875a4:	000b883a 	mov	r5,zero
400875a8:	01808004 	movi	r6,512
400875ac:	00816340 	call	40081634 <mem_set>
      for (n = 1; n < n_fat; n++) {    /* This loop may take a time on FAT32 volume due to many single sector writes */
400875b0:	00800044 	movi	r2,1
400875b4:	e0bffb15 	stw	r2,-20(fp)
400875b8:	00000e06 	br	400875f4 <f_mkfs+0xc84>
         if (disk_write(pdrv, tbl, wsect++, 1) != RES_OK)
400875bc:	e13ff403 	ldbu	r4,-48(fp)
400875c0:	e0bfed17 	ldw	r2,-76(fp)
400875c4:	10c00044 	addi	r3,r2,1
400875c8:	e0ffed15 	stw	r3,-76(fp)
400875cc:	e17ffa17 	ldw	r5,-24(fp)
400875d0:	100d883a 	mov	r6,r2
400875d4:	01c00044 	movi	r7,1
400875d8:	0080f880 	call	40080f88 <ffs_DiskIOWrite>
400875dc:	10000226 	beq	r2,zero,400875e8 <f_mkfs+0xc78>
            return FR_DISK_ERR;
400875e0:	00800044 	movi	r2,1
400875e4:	00008806 	br	40087808 <f_mkfs+0xe98>
         ST_DWORD(tbl+8, 0x0FFFFFFF);  /* Reserve cluster #2 for root dir */
      }
      if (disk_write(pdrv, tbl, wsect++, 1) != RES_OK)
         return FR_DISK_ERR;
      mem_set(tbl, 0, SS(fs));         /* Fill following FAT entries with zero */
      for (n = 1; n < n_fat; n++) {    /* This loop may take a time on FAT32 volume due to many single sector writes */
400875e8:	e0bffb17 	ldw	r2,-20(fp)
400875ec:	10800044 	addi	r2,r2,1
400875f0:	e0bffb15 	stw	r2,-20(fp)
400875f4:	e0fffb17 	ldw	r3,-20(fp)
400875f8:	e0bff117 	ldw	r2,-60(fp)
400875fc:	18bfef36 	bltu	r3,r2,400875bc <__alt_mem_epcs+0xfff465bc>
   if (fmt == FS_FAT32)                   /* Write backup VBR if needed (VBR+6) */
      disk_write(pdrv, tbl, b_vol + 6, 1);

   /* Initialize FAT area */
   wsect = b_fat;
   for (i = 0; i < N_FATS; i++) {      /* Initialize each FAT copy */
40087600:	e0bfee17 	ldw	r2,-72(fp)
40087604:	10800044 	addi	r2,r2,1
40087608:	e0bfee15 	stw	r2,-72(fp)
4008760c:	e0bfee17 	ldw	r2,-72(fp)
40087610:	103f7826 	beq	r2,zero,400873f4 <__alt_mem_epcs+0xfff463f4>
            return FR_DISK_ERR;
      }
   }

   /* Initialize root directory */
   i = (fmt == FS_FAT32) ? au : n_dir;
40087614:	e0bfec03 	ldbu	r2,-80(fp)
40087618:	108000d8 	cmpnei	r2,r2,3
4008761c:	1000021e 	bne	r2,zero,40087628 <f_mkfs+0xcb8>
40087620:	e0bfff17 	ldw	r2,-4(fp)
40087624:	00000106 	br	4008762c <f_mkfs+0xcbc>
40087628:	e0bff217 	ldw	r2,-56(fp)
4008762c:	e0bfee15 	stw	r2,-72(fp)
   do {
      if (disk_write(pdrv, tbl, wsect++, 1) != RES_OK)
40087630:	e13ff403 	ldbu	r4,-48(fp)
40087634:	e0bfed17 	ldw	r2,-76(fp)
40087638:	10c00044 	addi	r3,r2,1
4008763c:	e0ffed15 	stw	r3,-76(fp)
40087640:	e17ffa17 	ldw	r5,-24(fp)
40087644:	100d883a 	mov	r6,r2
40087648:	01c00044 	movi	r7,1
4008764c:	0080f880 	call	40080f88 <ffs_DiskIOWrite>
40087650:	10000226 	beq	r2,zero,4008765c <f_mkfs+0xcec>
         return FR_DISK_ERR;
40087654:	00800044 	movi	r2,1
40087658:	00006b06 	br	40087808 <f_mkfs+0xe98>
   } while (--i);
4008765c:	e0bfee17 	ldw	r2,-72(fp)
40087660:	10bfffc4 	addi	r2,r2,-1
40087664:	e0bfee15 	stw	r2,-72(fp)
40087668:	e0bfee17 	ldw	r2,-72(fp)
4008766c:	103ff01e 	bne	r2,zero,40087630 <__alt_mem_epcs+0xfff46630>
      disk_ioctl(pdrv, CTRL_ERASE_SECTOR, eb);
   }
#endif

   /* Create FSInfo if needed */
   if (fmt == FS_FAT32) {
40087670:	e0bfec03 	ldbu	r2,-80(fp)
40087674:	108000d8 	cmpnei	r2,r2,3
40087678:	10005c1e 	bne	r2,zero,400877ec <f_mkfs+0xe7c>
      ST_DWORD(tbl+FSI_LeadSig, 0x41615252);
4008767c:	e0bffa17 	ldw	r2,-24(fp)
40087680:	00c01484 	movi	r3,82
40087684:	10c00005 	stb	r3,0(r2)
40087688:	e0bffa17 	ldw	r2,-24(fp)
4008768c:	10800044 	addi	r2,r2,1
40087690:	00c01484 	movi	r3,82
40087694:	10c00005 	stb	r3,0(r2)
40087698:	e0bffa17 	ldw	r2,-24(fp)
4008769c:	10800084 	addi	r2,r2,2
400876a0:	00c01844 	movi	r3,97
400876a4:	10c00005 	stb	r3,0(r2)
400876a8:	e0bffa17 	ldw	r2,-24(fp)
400876ac:	108000c4 	addi	r2,r2,3
400876b0:	00c01044 	movi	r3,65
400876b4:	10c00005 	stb	r3,0(r2)
      ST_DWORD(tbl+FSI_StrucSig, 0x61417272);
400876b8:	e0bffa17 	ldw	r2,-24(fp)
400876bc:	10807904 	addi	r2,r2,484
400876c0:	00c01c84 	movi	r3,114
400876c4:	10c00005 	stb	r3,0(r2)
400876c8:	e0bffa17 	ldw	r2,-24(fp)
400876cc:	10807944 	addi	r2,r2,485
400876d0:	00c01c84 	movi	r3,114
400876d4:	10c00005 	stb	r3,0(r2)
400876d8:	e0bffa17 	ldw	r2,-24(fp)
400876dc:	10807984 	addi	r2,r2,486
400876e0:	00c01044 	movi	r3,65
400876e4:	10c00005 	stb	r3,0(r2)
400876e8:	e0bffa17 	ldw	r2,-24(fp)
400876ec:	108079c4 	addi	r2,r2,487
400876f0:	00c01844 	movi	r3,97
400876f4:	10c00005 	stb	r3,0(r2)
      ST_DWORD(tbl+FSI_Free_Count, n_clst - 1); /* Number of free clusters */
400876f8:	e0bffa17 	ldw	r2,-24(fp)
400876fc:	10807a04 	addi	r2,r2,488
40087700:	e0fff717 	ldw	r3,-36(fp)
40087704:	18ffffc4 	addi	r3,r3,-1
40087708:	10c00005 	stb	r3,0(r2)
4008770c:	e0bffa17 	ldw	r2,-24(fp)
40087710:	10807a44 	addi	r2,r2,489
40087714:	e0fff717 	ldw	r3,-36(fp)
40087718:	18ffffc4 	addi	r3,r3,-1
4008771c:	18ffffcc 	andi	r3,r3,65535
40087720:	1806d23a 	srli	r3,r3,8
40087724:	10c00005 	stb	r3,0(r2)
40087728:	e0bffa17 	ldw	r2,-24(fp)
4008772c:	10807a84 	addi	r2,r2,490
40087730:	e0fff717 	ldw	r3,-36(fp)
40087734:	18ffffc4 	addi	r3,r3,-1
40087738:	1806d43a 	srli	r3,r3,16
4008773c:	10c00005 	stb	r3,0(r2)
40087740:	e0bffa17 	ldw	r2,-24(fp)
40087744:	10807ac4 	addi	r2,r2,491
40087748:	e0fff717 	ldw	r3,-36(fp)
4008774c:	18ffffc4 	addi	r3,r3,-1
40087750:	1806d63a 	srli	r3,r3,24
40087754:	10c00005 	stb	r3,0(r2)
      ST_DWORD(tbl+FSI_Nxt_Free, 2);            /* Last allocated cluster# */
40087758:	e0bffa17 	ldw	r2,-24(fp)
4008775c:	10807b04 	addi	r2,r2,492
40087760:	00c00084 	movi	r3,2
40087764:	10c00005 	stb	r3,0(r2)
40087768:	e0bffa17 	ldw	r2,-24(fp)
4008776c:	10807b44 	addi	r2,r2,493
40087770:	10000005 	stb	zero,0(r2)
40087774:	e0bffa17 	ldw	r2,-24(fp)
40087778:	10807b84 	addi	r2,r2,494
4008777c:	10000005 	stb	zero,0(r2)
40087780:	e0bffa17 	ldw	r2,-24(fp)
40087784:	10807bc4 	addi	r2,r2,495
40087788:	10000005 	stb	zero,0(r2)
      ST_WORD(tbl+BS_55AA, 0xAA55);
4008778c:	e0bffa17 	ldw	r2,-24(fp)
40087790:	10807f84 	addi	r2,r2,510
40087794:	00c01544 	movi	r3,85
40087798:	10c00005 	stb	r3,0(r2)
4008779c:	e0bffa17 	ldw	r2,-24(fp)
400877a0:	10807fc4 	addi	r2,r2,511
400877a4:	00ffea84 	movi	r3,-86
400877a8:	10c00005 	stb	r3,0(r2)
      disk_write(pdrv, tbl, b_vol + 1, 1);   /* Write original (VBR+1) */
400877ac:	e0fff403 	ldbu	r3,-48(fp)
400877b0:	e0bff517 	ldw	r2,-44(fp)
400877b4:	10800044 	addi	r2,r2,1
400877b8:	1809883a 	mov	r4,r3
400877bc:	e17ffa17 	ldw	r5,-24(fp)
400877c0:	100d883a 	mov	r6,r2
400877c4:	01c00044 	movi	r7,1
400877c8:	0080f880 	call	40080f88 <ffs_DiskIOWrite>
      disk_write(pdrv, tbl, b_vol + 7, 1);   /* Write backup (VBR+7) */
400877cc:	e0fff403 	ldbu	r3,-48(fp)
400877d0:	e0bff517 	ldw	r2,-44(fp)
400877d4:	108001c4 	addi	r2,r2,7
400877d8:	1809883a 	mov	r4,r3
400877dc:	e17ffa17 	ldw	r5,-24(fp)
400877e0:	100d883a 	mov	r6,r2
400877e4:	01c00044 	movi	r7,1
400877e8:	0080f880 	call	40080f88 <ffs_DiskIOWrite>
   }

   return (disk_ioctl(pdrv, CTRL_SYNC, 0) == RES_OK) ? FR_OK : FR_DISK_ERR;
400877ec:	e0bff403 	ldbu	r2,-48(fp)
400877f0:	1009883a 	mov	r4,r2
400877f4:	000b883a 	mov	r5,zero
400877f8:	000d883a 	mov	r6,zero
400877fc:	00810f40 	call	400810f4 <ffs_DiskIOIoctl>
40087800:	1004c03a 	cmpne	r2,r2,zero
40087804:	10803fcc 	andi	r2,r2,255
}
40087808:	e037883a 	mov	sp,fp
4008780c:	dfc00117 	ldw	ra,4(sp)
40087810:	df000017 	ldw	fp,0(sp)
40087814:	dec00204 	addi	sp,sp,8
40087818:	f800283a 	ret

4008781c <f_gets>:
TCHAR* f_gets (
   TCHAR* buff,   /* Pointer to the string buffer to read */
   int len,    /* Size of string buffer (characters) */
   FIL* fil    /* Pointer to the file object */
)
{
4008781c:	defff704 	addi	sp,sp,-36
40087820:	dfc00815 	stw	ra,32(sp)
40087824:	df000715 	stw	fp,28(sp)
40087828:	df000704 	addi	fp,sp,28
4008782c:	e13ffd15 	stw	r4,-12(fp)
40087830:	e17ffe15 	stw	r5,-8(fp)
40087834:	e1bfff15 	stw	r6,-4(fp)
   int n = 0;
40087838:	e03ff915 	stw	zero,-28(fp)
   TCHAR c, *p = buff;
4008783c:	e0bffd17 	ldw	r2,-12(fp)
40087840:	e0bffa15 	stw	r2,-24(fp)
   uint8_t s[2];
   uint32_t rc;


   while (n < len - 1) {         /* Read bytes until buffer gets filled */
40087844:	00001906 	br	400878ac <f_gets+0x90>
      f_read(fil, s, 1, &rc);
40087848:	e0fffb44 	addi	r3,fp,-19
4008784c:	e0bffc04 	addi	r2,fp,-16
40087850:	e13fff17 	ldw	r4,-4(fp)
40087854:	180b883a 	mov	r5,r3
40087858:	01800044 	movi	r6,1
4008785c:	100f883a 	mov	r7,r2
40087860:	008441c0 	call	4008441c <f_read>
      if (rc != 1) break;        /* Break on EOF or error */
40087864:	e0bffc17 	ldw	r2,-16(fp)
40087868:	10800060 	cmpeqi	r2,r2,1
4008786c:	1000011e 	bne	r2,zero,40087874 <f_gets+0x58>
40087870:	00001206 	br	400878bc <f_gets+0xa0>
      c = s[0];
40087874:	e0bffb43 	ldbu	r2,-19(fp)
40087878:	e0bffb05 	stb	r2,-20(fp)
      }
#endif
#if _USE_STRFUNC >= 2
      if (c == '\r') continue;   /* Strip '\r' */
#endif
      *p++ = c;
4008787c:	e0bffa17 	ldw	r2,-24(fp)
40087880:	10c00044 	addi	r3,r2,1
40087884:	e0fffa15 	stw	r3,-24(fp)
40087888:	e0fffb03 	ldbu	r3,-20(fp)
4008788c:	10c00005 	stb	r3,0(r2)
      n++;
40087890:	e0bff917 	ldw	r2,-28(fp)
40087894:	10800044 	addi	r2,r2,1
40087898:	e0bff915 	stw	r2,-28(fp)
      if (c == '\n') break;      /* Break on EOL */
4008789c:	e0bffb07 	ldb	r2,-20(fp)
400878a0:	10800298 	cmpnei	r2,r2,10
400878a4:	1000011e 	bne	r2,zero,400878ac <f_gets+0x90>
400878a8:	00000406 	br	400878bc <f_gets+0xa0>
   TCHAR c, *p = buff;
   uint8_t s[2];
   uint32_t rc;


   while (n < len - 1) {         /* Read bytes until buffer gets filled */
400878ac:	e0bffe17 	ldw	r2,-8(fp)
400878b0:	10bfffc4 	addi	r2,r2,-1
400878b4:	e0fff917 	ldw	r3,-28(fp)
400878b8:	18bfe316 	blt	r3,r2,40087848 <__alt_mem_epcs+0xfff46848>
#endif
      *p++ = c;
      n++;
      if (c == '\n') break;      /* Break on EOL */
   }
   *p = 0;
400878bc:	e0bffa17 	ldw	r2,-24(fp)
400878c0:	10000005 	stb	zero,0(r2)
   return n ? buff : 0;       /* When no data read (eof or error), return with error. */
400878c4:	e0bff917 	ldw	r2,-28(fp)
400878c8:	10000226 	beq	r2,zero,400878d4 <f_gets+0xb8>
400878cc:	e0bffd17 	ldw	r2,-12(fp)
400878d0:	00000106 	br	400878d8 <f_gets+0xbc>
400878d4:	0005883a 	mov	r2,zero
}
400878d8:	e037883a 	mov	sp,fp
400878dc:	dfc00117 	ldw	ra,4(sp)
400878e0:	df000017 	ldw	fp,0(sp)
400878e4:	dec00204 	addi	sp,sp,8
400878e8:	f800283a 	ret

400878ec <f_putc>:
/*-----------------------------------------------------------------------*/
int f_putc (
   TCHAR c, /* A character to be output */
   FIL* fil /* Pointer to the file object */
)
{
400878ec:	defff904 	addi	sp,sp,-28
400878f0:	dfc00615 	stw	ra,24(sp)
400878f4:	df000515 	stw	fp,20(sp)
400878f8:	df000504 	addi	fp,sp,20
400878fc:	2005883a 	mov	r2,r4
40087900:	e17fff15 	stw	r5,-4(fp)
40087904:	e0bffe05 	stb	r2,-8(fp)
         s[2] = (uint8_t)(0x80 | (c & 0x3F));
         btw = 3;
      }
   }
#else          /* Write the character without conversion */
   s[0] = (uint8_t)c;
40087908:	e0bffe03 	ldbu	r2,-8(fp)
4008790c:	e0bffd05 	stb	r2,-12(fp)
   btw = 1;
40087910:	00800044 	movi	r2,1
40087914:	e0bffb15 	stw	r2,-20(fp)
#endif
   f_write(fil, s, btw, &bw);    /* Write the char to the file */
40087918:	e0fffd04 	addi	r3,fp,-12
4008791c:	e0bffc04 	addi	r2,fp,-16
40087920:	e13fff17 	ldw	r4,-4(fp)
40087924:	180b883a 	mov	r5,r3
40087928:	e1bffb17 	ldw	r6,-20(fp)
4008792c:	100f883a 	mov	r7,r2
40087930:	00849000 	call	40084900 <f_write>
   return (bw == btw) ? 1 : EOF; /* Return the result */
40087934:	e0fffc17 	ldw	r3,-16(fp)
40087938:	e0bffb17 	ldw	r2,-20(fp)
4008793c:	1880021e 	bne	r3,r2,40087948 <f_putc+0x5c>
40087940:	00800044 	movi	r2,1
40087944:	00000106 	br	4008794c <f_putc+0x60>
40087948:	00bfffc4 	movi	r2,-1
}
4008794c:	e037883a 	mov	sp,fp
40087950:	dfc00117 	ldw	ra,4(sp)
40087954:	df000017 	ldw	fp,0(sp)
40087958:	dec00204 	addi	sp,sp,8
4008795c:	f800283a 	ret

40087960 <f_puts>:
/*-----------------------------------------------------------------------*/
int f_puts (
   const TCHAR* str, /* Pointer to the string to be output */
   FIL* fil       /* Pointer to the file object */
)
{
40087960:	defffb04 	addi	sp,sp,-20
40087964:	dfc00415 	stw	ra,16(sp)
40087968:	df000315 	stw	fp,12(sp)
4008796c:	df000304 	addi	fp,sp,12
40087970:	e13ffe15 	stw	r4,-8(fp)
40087974:	e17fff15 	stw	r5,-4(fp)
   int n;


   for (n = 0; *str; str++, n++) {
40087978:	e03ffd15 	stw	zero,-12(fp)
4008797c:	00001206 	br	400879c8 <f_puts+0x68>
      if (f_putc(*str, fil) == EOF) return EOF;
40087980:	e0bffe17 	ldw	r2,-8(fp)
40087984:	10800003 	ldbu	r2,0(r2)
40087988:	10803fcc 	andi	r2,r2,255
4008798c:	1080201c 	xori	r2,r2,128
40087990:	10bfe004 	addi	r2,r2,-128
40087994:	1009883a 	mov	r4,r2
40087998:	e17fff17 	ldw	r5,-4(fp)
4008799c:	00878ec0 	call	400878ec <f_putc>
400879a0:	10bfffd8 	cmpnei	r2,r2,-1
400879a4:	1000021e 	bne	r2,zero,400879b0 <f_puts+0x50>
400879a8:	00bfffc4 	movi	r2,-1
400879ac:	00000d06 	br	400879e4 <f_puts+0x84>
)
{
   int n;


   for (n = 0; *str; str++, n++) {
400879b0:	e0bffe17 	ldw	r2,-8(fp)
400879b4:	10800044 	addi	r2,r2,1
400879b8:	e0bffe15 	stw	r2,-8(fp)
400879bc:	e0bffd17 	ldw	r2,-12(fp)
400879c0:	10800044 	addi	r2,r2,1
400879c4:	e0bffd15 	stw	r2,-12(fp)
400879c8:	e0bffe17 	ldw	r2,-8(fp)
400879cc:	10800003 	ldbu	r2,0(r2)
400879d0:	10803fcc 	andi	r2,r2,255
400879d4:	1080201c 	xori	r2,r2,128
400879d8:	10bfe004 	addi	r2,r2,-128
400879dc:	103fe81e 	bne	r2,zero,40087980 <__alt_mem_epcs+0xfff46980>
      if (f_putc(*str, fil) == EOF) return EOF;
   }
   return n;
400879e0:	e0bffd17 	ldw	r2,-12(fp)
}
400879e4:	e037883a 	mov	sp,fp
400879e8:	dfc00117 	ldw	ra,4(sp)
400879ec:	df000017 	ldw	fp,0(sp)
400879f0:	dec00204 	addi	sp,sp,8
400879f4:	f800283a 	ret

400879f8 <f_printf>:
int f_printf (
   FIL* fil,         /* Pointer to the file object */
   const TCHAR* str, /* Pointer to the format string */
   ...               /* Optional arguments... */
)
{
400879f8:	deffeb04 	addi	sp,sp,-84
400879fc:	dfc01215 	stw	ra,72(sp)
40087a00:	df001115 	stw	fp,68(sp)
40087a04:	df001104 	addi	fp,sp,68
40087a08:	e13ffe15 	stw	r4,-8(fp)
40087a0c:	e1800215 	stw	r6,8(fp)
40087a10:	e1c00315 	stw	r7,12(fp)
40087a14:	e17fff15 	stw	r5,-4(fp)
   uint32_t v;
   TCHAR c, d, s[16], *p;
   int res, chc, cc;


   va_start(arp, str);
40087a18:	e0800204 	addi	r2,fp,8
40087a1c:	e0bff915 	stw	r2,-28(fp)

   for (cc = res = 0; cc != EOF; res += cc) {
40087a20:	e03ff515 	stw	zero,-44(fp)
40087a24:	e0bff517 	ldw	r2,-44(fp)
40087a28:	e0bff715 	stw	r2,-36(fp)
40087a2c:	00017706 	br	4008800c <f_printf+0x614>
      c = *str++;
40087a30:	e0bfff17 	ldw	r2,-4(fp)
40087a34:	10c00044 	addi	r3,r2,1
40087a38:	e0ffff15 	stw	r3,-4(fp)
40087a3c:	10800003 	ldbu	r2,0(r2)
40087a40:	e0bff405 	stb	r2,-48(fp)
      if (c == 0) break;         /* End of string */
40087a44:	e0bff407 	ldb	r2,-48(fp)
40087a48:	1000011e 	bne	r2,zero,40087a50 <f_printf+0x58>
40087a4c:	00017206 	br	40088018 <f_printf+0x620>
      if (c != '%') {            /* Non escape character */
40087a50:	e0bff407 	ldb	r2,-48(fp)
40087a54:	10800960 	cmpeqi	r2,r2,37
40087a58:	10000c1e 	bne	r2,zero,40087a8c <f_printf+0x94>
         cc = f_putc(c, fil);
40087a5c:	e0bff407 	ldb	r2,-48(fp)
40087a60:	1009883a 	mov	r4,r2
40087a64:	e17ffe17 	ldw	r5,-8(fp)
40087a68:	00878ec0 	call	400878ec <f_putc>
40087a6c:	e0bff715 	stw	r2,-36(fp)
         if (cc != EOF) cc = 1;
40087a70:	e0bff717 	ldw	r2,-36(fp)
40087a74:	10bfffe0 	cmpeqi	r2,r2,-1
40087a78:	1000031e 	bne	r2,zero,40087a88 <f_printf+0x90>
40087a7c:	00800044 	movi	r2,1
40087a80:	e0bff715 	stw	r2,-36(fp)
         continue;
40087a84:	00015d06 	br	40087ffc <f_printf+0x604>
40087a88:	00015c06 	br	40087ffc <f_printf+0x604>
      }
      w = f = 0;
40087a8c:	e03fef05 	stb	zero,-68(fp)
40087a90:	e03ff215 	stw	zero,-56(fp)
      c = *str++;
40087a94:	e0bfff17 	ldw	r2,-4(fp)
40087a98:	10c00044 	addi	r3,r2,1
40087a9c:	e0ffff15 	stw	r3,-4(fp)
40087aa0:	10800003 	ldbu	r2,0(r2)
40087aa4:	e0bff405 	stb	r2,-48(fp)
      if (c == '0') {            /* Flag: '0' padding */
40087aa8:	e0bff407 	ldb	r2,-48(fp)
40087aac:	10800c18 	cmpnei	r2,r2,48
40087ab0:	1000081e 	bne	r2,zero,40087ad4 <f_printf+0xdc>
         f = 1; c = *str++;
40087ab4:	00800044 	movi	r2,1
40087ab8:	e0bfef05 	stb	r2,-68(fp)
40087abc:	e0bfff17 	ldw	r2,-4(fp)
40087ac0:	10c00044 	addi	r3,r2,1
40087ac4:	e0ffff15 	stw	r3,-4(fp)
40087ac8:	10800003 	ldbu	r2,0(r2)
40087acc:	e0bff405 	stb	r2,-48(fp)
40087ad0:	00000a06 	br	40087afc <f_printf+0x104>
      } else {
         if (c == '-') {         /* Flag: left justified */
40087ad4:	e0bff407 	ldb	r2,-48(fp)
40087ad8:	10800b58 	cmpnei	r2,r2,45
40087adc:	1000071e 	bne	r2,zero,40087afc <f_printf+0x104>
            f = 2; c = *str++;
40087ae0:	00800084 	movi	r2,2
40087ae4:	e0bfef05 	stb	r2,-68(fp)
40087ae8:	e0bfff17 	ldw	r2,-4(fp)
40087aec:	10c00044 	addi	r3,r2,1
40087af0:	e0ffff15 	stw	r3,-4(fp)
40087af4:	10800003 	ldbu	r2,0(r2)
40087af8:	e0bff405 	stb	r2,-48(fp)
         }
      }
      while (IsDigit(c)) {    /* Precision */
40087afc:	00000b06 	br	40087b2c <f_printf+0x134>
         w = w * 10 + c - '0';
40087b00:	e0bff217 	ldw	r2,-56(fp)
40087b04:	10c002a4 	muli	r3,r2,10
40087b08:	e0bff407 	ldb	r2,-48(fp)
40087b0c:	1885883a 	add	r2,r3,r2
40087b10:	10bff404 	addi	r2,r2,-48
40087b14:	e0bff215 	stw	r2,-56(fp)
         c = *str++;
40087b18:	e0bfff17 	ldw	r2,-4(fp)
40087b1c:	10c00044 	addi	r3,r2,1
40087b20:	e0ffff15 	stw	r3,-4(fp)
40087b24:	10800003 	ldbu	r2,0(r2)
40087b28:	e0bff405 	stb	r2,-48(fp)
      } else {
         if (c == '-') {         /* Flag: left justified */
            f = 2; c = *str++;
         }
      }
      while (IsDigit(c)) {    /* Precision */
40087b2c:	e0bff407 	ldb	r2,-48(fp)
40087b30:	10800c10 	cmplti	r2,r2,48
40087b34:	1000031e 	bne	r2,zero,40087b44 <f_printf+0x14c>
40087b38:	e0bff407 	ldb	r2,-48(fp)
40087b3c:	10800e90 	cmplti	r2,r2,58
40087b40:	103fef1e 	bne	r2,zero,40087b00 <__alt_mem_epcs+0xfff46b00>
         w = w * 10 + c - '0';
         c = *str++;
      }
      if (c == 'l' || c == 'L') {   /* Prefix: Size is long int */
40087b44:	e0bff407 	ldb	r2,-48(fp)
40087b48:	10801b20 	cmpeqi	r2,r2,108
40087b4c:	1000031e 	bne	r2,zero,40087b5c <f_printf+0x164>
40087b50:	e0bff407 	ldb	r2,-48(fp)
40087b54:	10801318 	cmpnei	r2,r2,76
40087b58:	1000081e 	bne	r2,zero,40087b7c <f_printf+0x184>
         f |= 4; c = *str++;
40087b5c:	e0bfef03 	ldbu	r2,-68(fp)
40087b60:	10800114 	ori	r2,r2,4
40087b64:	e0bfef05 	stb	r2,-68(fp)
40087b68:	e0bfff17 	ldw	r2,-4(fp)
40087b6c:	10c00044 	addi	r3,r2,1
40087b70:	e0ffff15 	stw	r3,-4(fp)
40087b74:	10800003 	ldbu	r2,0(r2)
40087b78:	e0bff405 	stb	r2,-48(fp)
      }
      if (!c) break;
40087b7c:	e0bff407 	ldb	r2,-48(fp)
40087b80:	1000011e 	bne	r2,zero,40087b88 <f_printf+0x190>
40087b84:	00012406 	br	40088018 <f_printf+0x620>
      d = c;
40087b88:	e0bff403 	ldbu	r2,-48(fp)
40087b8c:	e0bff445 	stb	r2,-47(fp)
      if (IsLower(d)) d -= 0x20;
40087b90:	e0bff447 	ldb	r2,-47(fp)
40087b94:	10801850 	cmplti	r2,r2,97
40087b98:	1000061e 	bne	r2,zero,40087bb4 <f_printf+0x1bc>
40087b9c:	e0bff447 	ldb	r2,-47(fp)
40087ba0:	10801ec8 	cmpgei	r2,r2,123
40087ba4:	1000031e 	bne	r2,zero,40087bb4 <f_printf+0x1bc>
40087ba8:	e0bff443 	ldbu	r2,-47(fp)
40087bac:	10bff804 	addi	r2,r2,-32
40087bb0:	e0bff445 	stb	r2,-47(fp)
      switch (d) {            /* Type is... */
40087bb4:	e0bff447 	ldb	r2,-47(fp)
40087bb8:	10bfef84 	addi	r2,r2,-66
40087bbc:	10c005e8 	cmpgeui	r3,r2,23
40087bc0:	1800761e 	bne	r3,zero,40087d9c <f_printf+0x3a4>
40087bc4:	100690ba 	slli	r3,r2,2
40087bc8:	00900234 	movhi	r2,16392
40087bcc:	109ef704 	addi	r2,r2,31708
40087bd0:	1885883a 	add	r2,r3,r2
40087bd4:	10800017 	ldw	r2,0(r2)
40087bd8:	1000683a 	jmp	r2
40087bdc:	40087d6c 	andhi	zero,r8,8693
40087be0:	40087d3c 	xorhi	zero,r8,8692
40087be4:	40087d84 	addi	zero,r8,8694
40087be8:	40087d9c 	xori	zero,r8,8694
40087bec:	40087d9c 	xori	zero,r8,8694
40087bf0:	40087d9c 	xori	zero,r8,8694
40087bf4:	40087d9c 	xori	zero,r8,8694
40087bf8:	40087d9c 	xori	zero,r8,8694
40087bfc:	40087d9c 	xori	zero,r8,8694
40087c00:	40087d9c 	xori	zero,r8,8694
40087c04:	40087d9c 	xori	zero,r8,8694
40087c08:	40087d9c 	xori	zero,r8,8694
40087c0c:	40087d9c 	xori	zero,r8,8694
40087c10:	40087d78 	rdprs	zero,r8,8693
40087c14:	40087d9c 	xori	zero,r8,8694
40087c18:	40087d9c 	xori	zero,r8,8694
40087c1c:	40087d9c 	xori	zero,r8,8694
40087c20:	40087c38 	rdprs	zero,r8,8688
40087c24:	40087d9c 	xori	zero,r8,8694
40087c28:	40087d84 	addi	zero,r8,8694
40087c2c:	40087d9c 	xori	zero,r8,8694
40087c30:	40087d9c 	xori	zero,r8,8694
40087c34:	40087d90 	cmplti	zero,r8,8694
      case 'S' :              /* String */
         p = va_arg(arp, TCHAR*);
40087c38:	e0bff917 	ldw	r2,-28(fp)
40087c3c:	10c00104 	addi	r3,r2,4
40087c40:	e0fff915 	stw	r3,-28(fp)
40087c44:	10800017 	ldw	r2,0(r2)
40087c48:	e0bff815 	stw	r2,-32(fp)
         for (j = 0; p[j]; j++) ;
40087c4c:	e03ff115 	stw	zero,-60(fp)
40087c50:	00000306 	br	40087c60 <f_printf+0x268>
40087c54:	e0bff117 	ldw	r2,-60(fp)
40087c58:	10800044 	addi	r2,r2,1
40087c5c:	e0bff115 	stw	r2,-60(fp)
40087c60:	e0fff817 	ldw	r3,-32(fp)
40087c64:	e0bff117 	ldw	r2,-60(fp)
40087c68:	1885883a 	add	r2,r3,r2
40087c6c:	10800003 	ldbu	r2,0(r2)
40087c70:	10803fcc 	andi	r2,r2,255
40087c74:	1080201c 	xori	r2,r2,128
40087c78:	10bfe004 	addi	r2,r2,-128
40087c7c:	103ff51e 	bne	r2,zero,40087c54 <__alt_mem_epcs+0xfff46c54>
         chc = 0;
40087c80:	e03ff615 	stw	zero,-40(fp)
         if (!(f & 2)) {
40087c84:	e0bfef03 	ldbu	r2,-68(fp)
40087c88:	1080008c 	andi	r2,r2,2
40087c8c:	10000e1e 	bne	r2,zero,40087cc8 <f_printf+0x2d0>
            while (j++ < w) chc += (cc = f_putc(' ', fil));
40087c90:	00000806 	br	40087cb4 <f_printf+0x2bc>
40087c94:	01000804 	movi	r4,32
40087c98:	e17ffe17 	ldw	r5,-8(fp)
40087c9c:	00878ec0 	call	400878ec <f_putc>
40087ca0:	e0bff715 	stw	r2,-36(fp)
40087ca4:	e0bff717 	ldw	r2,-36(fp)
40087ca8:	e0fff617 	ldw	r3,-40(fp)
40087cac:	1885883a 	add	r2,r3,r2
40087cb0:	e0bff615 	stw	r2,-40(fp)
40087cb4:	e0bff117 	ldw	r2,-60(fp)
40087cb8:	10c00044 	addi	r3,r2,1
40087cbc:	e0fff115 	stw	r3,-60(fp)
40087cc0:	e0fff217 	ldw	r3,-56(fp)
40087cc4:	10fff336 	bltu	r2,r3,40087c94 <__alt_mem_epcs+0xfff46c94>
         }
         chc += (cc = f_puts(p, fil));
40087cc8:	e13ff817 	ldw	r4,-32(fp)
40087ccc:	e17ffe17 	ldw	r5,-8(fp)
40087cd0:	00879600 	call	40087960 <f_puts>
40087cd4:	e0bff715 	stw	r2,-36(fp)
40087cd8:	e0bff717 	ldw	r2,-36(fp)
40087cdc:	e0fff617 	ldw	r3,-40(fp)
40087ce0:	1885883a 	add	r2,r3,r2
40087ce4:	e0bff615 	stw	r2,-40(fp)
         while (j++ < w) chc += (cc = f_putc(' ', fil));
40087ce8:	00000806 	br	40087d0c <f_printf+0x314>
40087cec:	01000804 	movi	r4,32
40087cf0:	e17ffe17 	ldw	r5,-8(fp)
40087cf4:	00878ec0 	call	400878ec <f_putc>
40087cf8:	e0bff715 	stw	r2,-36(fp)
40087cfc:	e0bff717 	ldw	r2,-36(fp)
40087d00:	e0fff617 	ldw	r3,-40(fp)
40087d04:	1885883a 	add	r2,r3,r2
40087d08:	e0bff615 	stw	r2,-40(fp)
40087d0c:	e0bff117 	ldw	r2,-60(fp)
40087d10:	10c00044 	addi	r3,r2,1
40087d14:	e0fff115 	stw	r3,-60(fp)
40087d18:	e0fff217 	ldw	r3,-56(fp)
40087d1c:	10fff336 	bltu	r2,r3,40087cec <__alt_mem_epcs+0xfff46cec>
         if (cc != EOF) cc = chc;
40087d20:	e0bff717 	ldw	r2,-36(fp)
40087d24:	10bfffe0 	cmpeqi	r2,r2,-1
40087d28:	1000031e 	bne	r2,zero,40087d38 <f_printf+0x340>
40087d2c:	e0bff617 	ldw	r2,-40(fp)
40087d30:	e0bff715 	stw	r2,-36(fp)
         continue;
40087d34:	0000b106 	br	40087ffc <f_printf+0x604>
40087d38:	0000b006 	br	40087ffc <f_printf+0x604>
      case 'C' :              /* Character */
         cc = f_putc((TCHAR)va_arg(arp, int), fil); continue;
40087d3c:	e0bff917 	ldw	r2,-28(fp)
40087d40:	10c00104 	addi	r3,r2,4
40087d44:	e0fff915 	stw	r3,-28(fp)
40087d48:	10800017 	ldw	r2,0(r2)
40087d4c:	10803fcc 	andi	r2,r2,255
40087d50:	1080201c 	xori	r2,r2,128
40087d54:	10bfe004 	addi	r2,r2,-128
40087d58:	1009883a 	mov	r4,r2
40087d5c:	e17ffe17 	ldw	r5,-8(fp)
40087d60:	00878ec0 	call	400878ec <f_putc>
40087d64:	e0bff715 	stw	r2,-36(fp)
40087d68:	0000a406 	br	40087ffc <f_printf+0x604>
      case 'B' :              /* Binary */
         r = 2; break;
40087d6c:	00800084 	movi	r2,2
40087d70:	e0bfef45 	stb	r2,-67(fp)
40087d74:	00000f06 	br	40087db4 <f_printf+0x3bc>
      case 'O' :              /* Octal */
         r = 8; break;
40087d78:	00800204 	movi	r2,8
40087d7c:	e0bfef45 	stb	r2,-67(fp)
40087d80:	00000c06 	br	40087db4 <f_printf+0x3bc>
      case 'D' :              /* Signed decimal */
      case 'U' :              /* Unsigned decimal */
         r = 10; break;
40087d84:	00800284 	movi	r2,10
40087d88:	e0bfef45 	stb	r2,-67(fp)
40087d8c:	00000906 	br	40087db4 <f_printf+0x3bc>
      case 'X' :              /* Hexdecimal */
         r = 16; break;
40087d90:	00800404 	movi	r2,16
40087d94:	e0bfef45 	stb	r2,-67(fp)
40087d98:	00000606 	br	40087db4 <f_printf+0x3bc>
      default:             /* Unknown type (passthrough) */
         cc = f_putc(c, fil); continue;
40087d9c:	e0bff407 	ldb	r2,-48(fp)
40087da0:	1009883a 	mov	r4,r2
40087da4:	e17ffe17 	ldw	r5,-8(fp)
40087da8:	00878ec0 	call	400878ec <f_putc>
40087dac:	e0bff715 	stw	r2,-36(fp)
40087db0:	00009206 	br	40087ffc <f_printf+0x604>
      }

      /* Get an argument and put it in numeral */
      v = (f & 4) ? (uint32_t)va_arg(arp, long) : ((d == 'D') ? (uint32_t)(long)va_arg(arp, int) : (uint32_t)va_arg(arp, unsigned int));
40087db4:	e0bfef03 	ldbu	r2,-68(fp)
40087db8:	1080010c 	andi	r2,r2,4
40087dbc:	10000526 	beq	r2,zero,40087dd4 <f_printf+0x3dc>
40087dc0:	e0bff917 	ldw	r2,-28(fp)
40087dc4:	10c00104 	addi	r3,r2,4
40087dc8:	e0fff915 	stw	r3,-28(fp)
40087dcc:	10800017 	ldw	r2,0(r2)
40087dd0:	00000c06 	br	40087e04 <f_printf+0x40c>
40087dd4:	e0bff447 	ldb	r2,-47(fp)
40087dd8:	10801118 	cmpnei	r2,r2,68
40087ddc:	1000051e 	bne	r2,zero,40087df4 <f_printf+0x3fc>
40087de0:	e0bff917 	ldw	r2,-28(fp)
40087de4:	10c00104 	addi	r3,r2,4
40087de8:	e0fff915 	stw	r3,-28(fp)
40087dec:	10800017 	ldw	r2,0(r2)
40087df0:	00000406 	br	40087e04 <f_printf+0x40c>
40087df4:	e0bff917 	ldw	r2,-28(fp)
40087df8:	10c00104 	addi	r3,r2,4
40087dfc:	e0fff915 	stw	r3,-28(fp)
40087e00:	10800017 	ldw	r2,0(r2)
40087e04:	e0bff315 	stw	r2,-52(fp)
      if (d == 'D' && (v & 0x80000000)) {
40087e08:	e0bff447 	ldb	r2,-47(fp)
40087e0c:	10801118 	cmpnei	r2,r2,68
40087e10:	1000081e 	bne	r2,zero,40087e34 <f_printf+0x43c>
40087e14:	e0bff317 	ldw	r2,-52(fp)
40087e18:	1000060e 	bge	r2,zero,40087e34 <f_printf+0x43c>
         v = 0 - v;
40087e1c:	e0bff317 	ldw	r2,-52(fp)
40087e20:	0085c83a 	sub	r2,zero,r2
40087e24:	e0bff315 	stw	r2,-52(fp)
         f |= 8;
40087e28:	e0bfef03 	ldbu	r2,-68(fp)
40087e2c:	10800214 	ori	r2,r2,8
40087e30:	e0bfef05 	stb	r2,-68(fp)
      }
      i = 0;
40087e34:	e03ff015 	stw	zero,-64(fp)
      do {
         d = (TCHAR)(v % r); v /= r;
40087e38:	e0ffef43 	ldbu	r3,-67(fp)
40087e3c:	e0bff317 	ldw	r2,-52(fp)
40087e40:	10c9203a 	divu	r4,r2,r3
40087e44:	20c7383a 	mul	r3,r4,r3
40087e48:	10c5c83a 	sub	r2,r2,r3
40087e4c:	e0bff445 	stb	r2,-47(fp)
40087e50:	e0bfef43 	ldbu	r2,-67(fp)
40087e54:	e0fff317 	ldw	r3,-52(fp)
40087e58:	1885203a 	divu	r2,r3,r2
40087e5c:	e0bff315 	stw	r2,-52(fp)
         if (d > 9) d += (c == 'x') ? 0x27 : 0x07;
40087e60:	e0bff447 	ldb	r2,-47(fp)
40087e64:	10800290 	cmplti	r2,r2,10
40087e68:	1000091e 	bne	r2,zero,40087e90 <f_printf+0x498>
40087e6c:	e0bff407 	ldb	r2,-48(fp)
40087e70:	10801e18 	cmpnei	r2,r2,120
40087e74:	1000021e 	bne	r2,zero,40087e80 <f_printf+0x488>
40087e78:	008009c4 	movi	r2,39
40087e7c:	00000106 	br	40087e84 <f_printf+0x48c>
40087e80:	008001c4 	movi	r2,7
40087e84:	e0fff443 	ldbu	r3,-47(fp)
40087e88:	10c5883a 	add	r2,r2,r3
40087e8c:	e0bff445 	stb	r2,-47(fp)
         s[i++] = d + '0';
40087e90:	e0bff017 	ldw	r2,-64(fp)
40087e94:	10c00044 	addi	r3,r2,1
40087e98:	e0fff015 	stw	r3,-64(fp)
40087e9c:	e0fff443 	ldbu	r3,-47(fp)
40087ea0:	18c00c04 	addi	r3,r3,48
40087ea4:	1809883a 	mov	r4,r3
40087ea8:	e0fffa04 	addi	r3,fp,-24
40087eac:	1885883a 	add	r2,r3,r2
40087eb0:	11000005 	stb	r4,0(r2)
      } while (v && i < sizeof(s) / sizeof(s[0]));
40087eb4:	e0bff317 	ldw	r2,-52(fp)
40087eb8:	10000326 	beq	r2,zero,40087ec8 <f_printf+0x4d0>
40087ebc:	e0bff017 	ldw	r2,-64(fp)
40087ec0:	10800430 	cmpltui	r2,r2,16
40087ec4:	103fdc1e 	bne	r2,zero,40087e38 <__alt_mem_epcs+0xfff46e38>
      if (f & 8) s[i++] = '-';
40087ec8:	e0bfef03 	ldbu	r2,-68(fp)
40087ecc:	1080020c 	andi	r2,r2,8
40087ed0:	10000726 	beq	r2,zero,40087ef0 <f_printf+0x4f8>
40087ed4:	e0bff017 	ldw	r2,-64(fp)
40087ed8:	10c00044 	addi	r3,r2,1
40087edc:	e0fff015 	stw	r3,-64(fp)
40087ee0:	e0fffa04 	addi	r3,fp,-24
40087ee4:	1885883a 	add	r2,r3,r2
40087ee8:	00c00b44 	movi	r3,45
40087eec:	10c00005 	stb	r3,0(r2)
      j = i; d = (f & 1) ? '0' : ' ';
40087ef0:	e0bff017 	ldw	r2,-64(fp)
40087ef4:	e0bff115 	stw	r2,-60(fp)
40087ef8:	e0bfef03 	ldbu	r2,-68(fp)
40087efc:	1080004c 	andi	r2,r2,1
40087f00:	10000226 	beq	r2,zero,40087f0c <f_printf+0x514>
40087f04:	00800c04 	movi	r2,48
40087f08:	00000106 	br	40087f10 <f_printf+0x518>
40087f0c:	00800804 	movi	r2,32
40087f10:	e0bff445 	stb	r2,-47(fp)
      res = 0;
40087f14:	e03ff515 	stw	zero,-44(fp)
      while (!(f & 2) && j++ < w) res += (cc = f_putc(d, fil));
40087f18:	00000906 	br	40087f40 <f_printf+0x548>
40087f1c:	e0bff447 	ldb	r2,-47(fp)
40087f20:	1009883a 	mov	r4,r2
40087f24:	e17ffe17 	ldw	r5,-8(fp)
40087f28:	00878ec0 	call	400878ec <f_putc>
40087f2c:	e0bff715 	stw	r2,-36(fp)
40087f30:	e0bff717 	ldw	r2,-36(fp)
40087f34:	e0fff517 	ldw	r3,-44(fp)
40087f38:	1885883a 	add	r2,r3,r2
40087f3c:	e0bff515 	stw	r2,-44(fp)
40087f40:	e0bfef03 	ldbu	r2,-68(fp)
40087f44:	1080008c 	andi	r2,r2,2
40087f48:	1000051e 	bne	r2,zero,40087f60 <f_printf+0x568>
40087f4c:	e0bff117 	ldw	r2,-60(fp)
40087f50:	10c00044 	addi	r3,r2,1
40087f54:	e0fff115 	stw	r3,-60(fp)
40087f58:	e0fff217 	ldw	r3,-56(fp)
40087f5c:	10ffef36 	bltu	r2,r3,40087f1c <__alt_mem_epcs+0xfff46f1c>
      do res += (cc = f_putc(s[--i], fil)); while(i);
40087f60:	e0bff017 	ldw	r2,-64(fp)
40087f64:	10bfffc4 	addi	r2,r2,-1
40087f68:	e0bff015 	stw	r2,-64(fp)
40087f6c:	e0fffa04 	addi	r3,fp,-24
40087f70:	e0bff017 	ldw	r2,-64(fp)
40087f74:	1885883a 	add	r2,r3,r2
40087f78:	10800003 	ldbu	r2,0(r2)
40087f7c:	10803fcc 	andi	r2,r2,255
40087f80:	1080201c 	xori	r2,r2,128
40087f84:	10bfe004 	addi	r2,r2,-128
40087f88:	1009883a 	mov	r4,r2
40087f8c:	e17ffe17 	ldw	r5,-8(fp)
40087f90:	00878ec0 	call	400878ec <f_putc>
40087f94:	e0bff715 	stw	r2,-36(fp)
40087f98:	e0bff717 	ldw	r2,-36(fp)
40087f9c:	e0fff517 	ldw	r3,-44(fp)
40087fa0:	1885883a 	add	r2,r3,r2
40087fa4:	e0bff515 	stw	r2,-44(fp)
40087fa8:	e0bff017 	ldw	r2,-64(fp)
40087fac:	103fec1e 	bne	r2,zero,40087f60 <__alt_mem_epcs+0xfff46f60>
      while (j++ < w) res += (cc = f_putc(' ', fil));
40087fb0:	00000806 	br	40087fd4 <f_printf+0x5dc>
40087fb4:	01000804 	movi	r4,32
40087fb8:	e17ffe17 	ldw	r5,-8(fp)
40087fbc:	00878ec0 	call	400878ec <f_putc>
40087fc0:	e0bff715 	stw	r2,-36(fp)
40087fc4:	e0bff717 	ldw	r2,-36(fp)
40087fc8:	e0fff517 	ldw	r3,-44(fp)
40087fcc:	1885883a 	add	r2,r3,r2
40087fd0:	e0bff515 	stw	r2,-44(fp)
40087fd4:	e0bff117 	ldw	r2,-60(fp)
40087fd8:	10c00044 	addi	r3,r2,1
40087fdc:	e0fff115 	stw	r3,-60(fp)
40087fe0:	e0fff217 	ldw	r3,-56(fp)
40087fe4:	10fff336 	bltu	r2,r3,40087fb4 <__alt_mem_epcs+0xfff46fb4>
      if (cc != EOF) cc = res;
40087fe8:	e0bff717 	ldw	r2,-36(fp)
40087fec:	10bfffe0 	cmpeqi	r2,r2,-1
40087ff0:	1000021e 	bne	r2,zero,40087ffc <f_printf+0x604>
40087ff4:	e0bff517 	ldw	r2,-44(fp)
40087ff8:	e0bff715 	stw	r2,-36(fp)
   int res, chc, cc;


   va_start(arp, str);

   for (cc = res = 0; cc != EOF; res += cc) {
40087ffc:	e0fff517 	ldw	r3,-44(fp)
40088000:	e0bff717 	ldw	r2,-36(fp)
40088004:	1885883a 	add	r2,r3,r2
40088008:	e0bff515 	stw	r2,-44(fp)
4008800c:	e0bff717 	ldw	r2,-36(fp)
40088010:	10bfffd8 	cmpnei	r2,r2,-1
40088014:	103e861e 	bne	r2,zero,40087a30 <__alt_mem_epcs+0xfff46a30>
      while (j++ < w) res += (cc = f_putc(' ', fil));
      if (cc != EOF) cc = res;
   }

   va_end(arp);
   return (cc == EOF) ? cc : res;
40088018:	e0bff717 	ldw	r2,-36(fp)
4008801c:	10bfffd8 	cmpnei	r2,r2,-1
40088020:	1000021e 	bne	r2,zero,4008802c <f_printf+0x634>
40088024:	e0bff717 	ldw	r2,-36(fp)
40088028:	00000106 	br	40088030 <f_printf+0x638>
4008802c:	e0bff517 	ldw	r2,-44(fp)
}
40088030:	e037883a 	mov	sp,fp
40088034:	dfc00117 	ldw	ra,4(sp)
40088038:	df000017 	ldw	fp,0(sp)
4008803c:	dec00404 	addi	sp,sp,16
40088040:	f800283a 	ret

40088044 <xatoi>:
#include <stdarg.h>
#include "monitor.h"

int xatoi (char **str, long *res)
{
40088044:	defffb04 	addi	sp,sp,-20
40088048:	df000415 	stw	fp,16(sp)
4008804c:	df000404 	addi	fp,sp,16
40088050:	e13ffe15 	stw	r4,-8(fp)
40088054:	e17fff15 	stw	r5,-4(fp)
  unsigned long val;
  unsigned char c, radix, s = 0;
40088058:	e03ffd85 	stb	zero,-10(fp)


  while ((c = **str) == ' ') (*str)++;
4008805c:	00000506 	br	40088074 <xatoi+0x30>
40088060:	e0bffe17 	ldw	r2,-8(fp)
40088064:	10800017 	ldw	r2,0(r2)
40088068:	10c00044 	addi	r3,r2,1
4008806c:	e0bffe17 	ldw	r2,-8(fp)
40088070:	10c00015 	stw	r3,0(r2)
40088074:	e0bffe17 	ldw	r2,-8(fp)
40088078:	10800017 	ldw	r2,0(r2)
4008807c:	10800003 	ldbu	r2,0(r2)
40088080:	e0bffd05 	stb	r2,-12(fp)
40088084:	e0bffd03 	ldbu	r2,-12(fp)
40088088:	10800820 	cmpeqi	r2,r2,32
4008808c:	103ff41e 	bne	r2,zero,40088060 <__alt_mem_epcs+0xfff47060>
  if (c == '-') {
40088090:	e0bffd03 	ldbu	r2,-12(fp)
40088094:	10800b58 	cmpnei	r2,r2,45
40088098:	10000b1e 	bne	r2,zero,400880c8 <xatoi+0x84>
    s = 1;
4008809c:	00800044 	movi	r2,1
400880a0:	e0bffd85 	stb	r2,-10(fp)
    c = *(++(*str));
400880a4:	e0bffe17 	ldw	r2,-8(fp)
400880a8:	10800017 	ldw	r2,0(r2)
400880ac:	10c00044 	addi	r3,r2,1
400880b0:	e0bffe17 	ldw	r2,-8(fp)
400880b4:	10c00015 	stw	r3,0(r2)
400880b8:	e0bffe17 	ldw	r2,-8(fp)
400880bc:	10800017 	ldw	r2,0(r2)
400880c0:	10800003 	ldbu	r2,0(r2)
400880c4:	e0bffd05 	stb	r2,-12(fp)
  }
  if (c == '0') {
400880c8:	e0bffd03 	ldbu	r2,-12(fp)
400880cc:	10800c18 	cmpnei	r2,r2,48
400880d0:	1000391e 	bne	r2,zero,400881b8 <xatoi+0x174>
    c = *(++(*str));
400880d4:	e0bffe17 	ldw	r2,-8(fp)
400880d8:	10800017 	ldw	r2,0(r2)
400880dc:	10c00044 	addi	r3,r2,1
400880e0:	e0bffe17 	ldw	r2,-8(fp)
400880e4:	10c00015 	stw	r3,0(r2)
400880e8:	e0bffe17 	ldw	r2,-8(fp)
400880ec:	10800017 	ldw	r2,0(r2)
400880f0:	10800003 	ldbu	r2,0(r2)
400880f4:	e0bffd05 	stb	r2,-12(fp)
    if (c <= ' ') {
400880f8:	e0bffd03 	ldbu	r2,-12(fp)
400880fc:	10800868 	cmpgeui	r2,r2,33
40088100:	1000041e 	bne	r2,zero,40088114 <xatoi+0xd0>
      *res = 0; return 1;
40088104:	e0bfff17 	ldw	r2,-4(fp)
40088108:	10000015 	stw	zero,0(r2)
4008810c:	00800044 	movi	r2,1
40088110:	00006906 	br	400882b8 <xatoi+0x274>
    }
    if (c == 'x') {
40088114:	e0bffd03 	ldbu	r2,-12(fp)
40088118:	10801e18 	cmpnei	r2,r2,120
4008811c:	10000c1e 	bne	r2,zero,40088150 <xatoi+0x10c>
      radix = 16;
40088120:	00800404 	movi	r2,16
40088124:	e0bffd45 	stb	r2,-11(fp)
      c = *(++(*str));
40088128:	e0bffe17 	ldw	r2,-8(fp)
4008812c:	10800017 	ldw	r2,0(r2)
40088130:	10c00044 	addi	r3,r2,1
40088134:	e0bffe17 	ldw	r2,-8(fp)
40088138:	10c00015 	stw	r3,0(r2)
4008813c:	e0bffe17 	ldw	r2,-8(fp)
40088140:	10800017 	ldw	r2,0(r2)
40088144:	10800003 	ldbu	r2,0(r2)
40088148:	e0bffd05 	stb	r2,-12(fp)
4008814c:	00002406 	br	400881e0 <xatoi+0x19c>
    } else {
      if (c == 'b') {
40088150:	e0bffd03 	ldbu	r2,-12(fp)
40088154:	10801898 	cmpnei	r2,r2,98
40088158:	10000c1e 	bne	r2,zero,4008818c <xatoi+0x148>
        radix = 2;
4008815c:	00800084 	movi	r2,2
40088160:	e0bffd45 	stb	r2,-11(fp)
        c = *(++(*str));
40088164:	e0bffe17 	ldw	r2,-8(fp)
40088168:	10800017 	ldw	r2,0(r2)
4008816c:	10c00044 	addi	r3,r2,1
40088170:	e0bffe17 	ldw	r2,-8(fp)
40088174:	10c00015 	stw	r3,0(r2)
40088178:	e0bffe17 	ldw	r2,-8(fp)
4008817c:	10800017 	ldw	r2,0(r2)
40088180:	10800003 	ldbu	r2,0(r2)
40088184:	e0bffd05 	stb	r2,-12(fp)
40088188:	00001506 	br	400881e0 <xatoi+0x19c>
      } else {
        if ((c >= '0')&&(c <= '9'))
4008818c:	e0bffd03 	ldbu	r2,-12(fp)
40088190:	10800c30 	cmpltui	r2,r2,48
40088194:	1000061e 	bne	r2,zero,400881b0 <xatoi+0x16c>
40088198:	e0bffd03 	ldbu	r2,-12(fp)
4008819c:	10800ea8 	cmpgeui	r2,r2,58
400881a0:	1000031e 	bne	r2,zero,400881b0 <xatoi+0x16c>
          radix = 8;
400881a4:	00800204 	movi	r2,8
400881a8:	e0bffd45 	stb	r2,-11(fp)
400881ac:	00000c06 	br	400881e0 <xatoi+0x19c>
        else
          return 0;
400881b0:	0005883a 	mov	r2,zero
400881b4:	00004006 	br	400882b8 <xatoi+0x274>
      }
    }
  } else {
    if ((c < '1')||(c > '9'))
400881b8:	e0bffd03 	ldbu	r2,-12(fp)
400881bc:	10800c70 	cmpltui	r2,r2,49
400881c0:	1000031e 	bne	r2,zero,400881d0 <xatoi+0x18c>
400881c4:	e0bffd03 	ldbu	r2,-12(fp)
400881c8:	10800eb0 	cmpltui	r2,r2,58
400881cc:	1000021e 	bne	r2,zero,400881d8 <xatoi+0x194>
      return 0;
400881d0:	0005883a 	mov	r2,zero
400881d4:	00003806 	br	400882b8 <xatoi+0x274>
    radix = 10;
400881d8:	00800284 	movi	r2,10
400881dc:	e0bffd45 	stb	r2,-11(fp)
  }
  val = 0;
400881e0:	e03ffc15 	stw	zero,-16(fp)
  while (c > ' ') {
400881e4:	00002806 	br	40088288 <xatoi+0x244>
    if (c >= 'a') c -= 0x20;
400881e8:	e0bffd03 	ldbu	r2,-12(fp)
400881ec:	10801870 	cmpltui	r2,r2,97
400881f0:	1000031e 	bne	r2,zero,40088200 <xatoi+0x1bc>
400881f4:	e0bffd03 	ldbu	r2,-12(fp)
400881f8:	10bff804 	addi	r2,r2,-32
400881fc:	e0bffd05 	stb	r2,-12(fp)
    c -= '0';
40088200:	e0bffd03 	ldbu	r2,-12(fp)
40088204:	10bff404 	addi	r2,r2,-48
40088208:	e0bffd05 	stb	r2,-12(fp)
    if (c >= 17) {
4008820c:	e0bffd03 	ldbu	r2,-12(fp)
40088210:	10800470 	cmpltui	r2,r2,17
40088214:	1000081e 	bne	r2,zero,40088238 <xatoi+0x1f4>
      c -= 7;
40088218:	e0bffd03 	ldbu	r2,-12(fp)
4008821c:	10bffe44 	addi	r2,r2,-7
40088220:	e0bffd05 	stb	r2,-12(fp)
      if (c <= 9) return 0;
40088224:	e0bffd03 	ldbu	r2,-12(fp)
40088228:	108002a8 	cmpgeui	r2,r2,10
4008822c:	1000021e 	bne	r2,zero,40088238 <xatoi+0x1f4>
40088230:	0005883a 	mov	r2,zero
40088234:	00002006 	br	400882b8 <xatoi+0x274>
    }
    if (c >= radix) return 0;
40088238:	e0fffd03 	ldbu	r3,-12(fp)
4008823c:	e0bffd43 	ldbu	r2,-11(fp)
40088240:	18800236 	bltu	r3,r2,4008824c <xatoi+0x208>
40088244:	0005883a 	mov	r2,zero
40088248:	00001b06 	br	400882b8 <xatoi+0x274>
    val = val * radix + c;
4008824c:	e0fffd43 	ldbu	r3,-11(fp)
40088250:	e0bffc17 	ldw	r2,-16(fp)
40088254:	1887383a 	mul	r3,r3,r2
40088258:	e0bffd03 	ldbu	r2,-12(fp)
4008825c:	1885883a 	add	r2,r3,r2
40088260:	e0bffc15 	stw	r2,-16(fp)
    c = *(++(*str));
40088264:	e0bffe17 	ldw	r2,-8(fp)
40088268:	10800017 	ldw	r2,0(r2)
4008826c:	10c00044 	addi	r3,r2,1
40088270:	e0bffe17 	ldw	r2,-8(fp)
40088274:	10c00015 	stw	r3,0(r2)
40088278:	e0bffe17 	ldw	r2,-8(fp)
4008827c:	10800017 	ldw	r2,0(r2)
40088280:	10800003 	ldbu	r2,0(r2)
40088284:	e0bffd05 	stb	r2,-12(fp)
    if ((c < '1')||(c > '9'))
      return 0;
    radix = 10;
  }
  val = 0;
  while (c > ' ') {
40088288:	e0bffd03 	ldbu	r2,-12(fp)
4008828c:	10800868 	cmpgeui	r2,r2,33
40088290:	103fd51e 	bne	r2,zero,400881e8 <__alt_mem_epcs+0xfff471e8>
    }
    if (c >= radix) return 0;
    val = val * radix + c;
    c = *(++(*str));
  }
  if (s) val = -val;
40088294:	e0bffd83 	ldbu	r2,-10(fp)
40088298:	10000326 	beq	r2,zero,400882a8 <xatoi+0x264>
4008829c:	e0bffc17 	ldw	r2,-16(fp)
400882a0:	0085c83a 	sub	r2,zero,r2
400882a4:	e0bffc15 	stw	r2,-16(fp)
  *res = val;
400882a8:	e0fffc17 	ldw	r3,-16(fp)
400882ac:	e0bfff17 	ldw	r2,-4(fp)
400882b0:	10c00015 	stw	r3,0(r2)
  return 1;
400882b4:	00800044 	movi	r2,1
}
400882b8:	e037883a 	mov	sp,fp
400882bc:	df000017 	ldw	fp,0(sp)
400882c0:	dec00104 	addi	sp,sp,4
400882c4:	f800283a 	ret

400882c8 <xitoa>:


void xitoa (signed long val, signed char radix, signed char len)
{
400882c8:	defff304 	addi	sp,sp,-52
400882cc:	dfc00c15 	stw	ra,48(sp)
400882d0:	df000b15 	stw	fp,44(sp)
400882d4:	df000b04 	addi	fp,sp,44
400882d8:	e13ffd15 	stw	r4,-12(fp)
400882dc:	2807883a 	mov	r3,r5
400882e0:	3005883a 	mov	r2,r6
400882e4:	e0fffe05 	stb	r3,-8(fp)
400882e8:	e0bfff05 	stb	r2,-4(fp)
  unsigned char c, r, sgn = 0, pad = ' ';
400882ec:	e03ff545 	stb	zero,-43(fp)
400882f0:	00800804 	movi	r2,32
400882f4:	e0bff585 	stb	r2,-42(fp)
  unsigned char s[20], i = 0;
400882f8:	e03ff5c5 	stb	zero,-41(fp)
  unsigned long v;


  if (radix < 0) {
400882fc:	e0bffe07 	ldb	r2,-8(fp)
40088300:	10000a0e 	bge	r2,zero,4008832c <xitoa+0x64>
    radix = -radix;
40088304:	e0bffe03 	ldbu	r2,-8(fp)
40088308:	0085c83a 	sub	r2,zero,r2
4008830c:	e0bffe05 	stb	r2,-8(fp)
    if (val < 0) {
40088310:	e0bffd17 	ldw	r2,-12(fp)
40088314:	1000050e 	bge	r2,zero,4008832c <xitoa+0x64>
      val = -val;
40088318:	e0bffd17 	ldw	r2,-12(fp)
4008831c:	0085c83a 	sub	r2,zero,r2
40088320:	e0bffd15 	stw	r2,-12(fp)
      sgn = '-';
40088324:	00800b44 	movi	r2,45
40088328:	e0bff545 	stb	r2,-43(fp)
    }
  }
  v = val;
4008832c:	e0bffd17 	ldw	r2,-12(fp)
40088330:	e0bff615 	stw	r2,-40(fp)
  r = radix;
40088334:	e0bffe03 	ldbu	r2,-8(fp)
40088338:	e0bff705 	stb	r2,-36(fp)
  if (len < 0) {
4008833c:	e0bfff07 	ldb	r2,-4(fp)
40088340:	1000050e 	bge	r2,zero,40088358 <xitoa+0x90>
    len = -len;
40088344:	e0bfff03 	ldbu	r2,-4(fp)
40088348:	0085c83a 	sub	r2,zero,r2
4008834c:	e0bfff05 	stb	r2,-4(fp)
    pad = '0';
40088350:	00800c04 	movi	r2,48
40088354:	e0bff585 	stb	r2,-42(fp)
  }
  if (len > 20) return;
40088358:	e0bfff07 	ldb	r2,-4(fp)
4008835c:	10800550 	cmplti	r2,r2,21
40088360:	10003f26 	beq	r2,zero,40088460 <xitoa+0x198>
  do {
    c = (unsigned char)(v % r);
40088364:	e0fff703 	ldbu	r3,-36(fp)
40088368:	e0bff617 	ldw	r2,-40(fp)
4008836c:	10c9203a 	divu	r4,r2,r3
40088370:	20c7383a 	mul	r3,r4,r3
40088374:	10c5c83a 	sub	r2,r2,r3
40088378:	e0bff505 	stb	r2,-44(fp)
    if (c >= 10) c += 7;
4008837c:	e0bff503 	ldbu	r2,-44(fp)
40088380:	108002b0 	cmpltui	r2,r2,10
40088384:	1000031e 	bne	r2,zero,40088394 <xitoa+0xcc>
40088388:	e0bff503 	ldbu	r2,-44(fp)
4008838c:	108001c4 	addi	r2,r2,7
40088390:	e0bff505 	stb	r2,-44(fp)
    c += '0';
40088394:	e0bff503 	ldbu	r2,-44(fp)
40088398:	10800c04 	addi	r2,r2,48
4008839c:	e0bff505 	stb	r2,-44(fp)
    s[i++] = c;
400883a0:	e0bff5c3 	ldbu	r2,-41(fp)
400883a4:	10c00044 	addi	r3,r2,1
400883a8:	e0fff5c5 	stb	r3,-41(fp)
400883ac:	10803fcc 	andi	r2,r2,255
400883b0:	e0fff744 	addi	r3,fp,-35
400883b4:	1885883a 	add	r2,r3,r2
400883b8:	e0fff503 	ldbu	r3,-44(fp)
400883bc:	10c00005 	stb	r3,0(r2)
    v /= r;
400883c0:	e0bff703 	ldbu	r2,-36(fp)
400883c4:	e0fff617 	ldw	r3,-40(fp)
400883c8:	1885203a 	divu	r2,r3,r2
400883cc:	e0bff615 	stw	r2,-40(fp)
  } while (v);
400883d0:	e0bff617 	ldw	r2,-40(fp)
400883d4:	103fe31e 	bne	r2,zero,40088364 <__alt_mem_epcs+0xfff47364>
  if (sgn) s[i++] = sgn;
400883d8:	e0bff543 	ldbu	r2,-43(fp)
400883dc:	10000826 	beq	r2,zero,40088400 <xitoa+0x138>
400883e0:	e0bff5c3 	ldbu	r2,-41(fp)
400883e4:	10c00044 	addi	r3,r2,1
400883e8:	e0fff5c5 	stb	r3,-41(fp)
400883ec:	10803fcc 	andi	r2,r2,255
400883f0:	e0fff744 	addi	r3,fp,-35
400883f4:	1885883a 	add	r2,r3,r2
400883f8:	e0fff543 	ldbu	r3,-43(fp)
400883fc:	10c00005 	stb	r3,0(r2)
  while (i < len)
40088400:	00000806 	br	40088424 <xitoa+0x15c>
    s[i++] = pad;
40088404:	e0bff5c3 	ldbu	r2,-41(fp)
40088408:	10c00044 	addi	r3,r2,1
4008840c:	e0fff5c5 	stb	r3,-41(fp)
40088410:	10803fcc 	andi	r2,r2,255
40088414:	e0fff744 	addi	r3,fp,-35
40088418:	1885883a 	add	r2,r3,r2
4008841c:	e0fff583 	ldbu	r3,-42(fp)
40088420:	10c00005 	stb	r3,0(r2)
    c += '0';
    s[i++] = c;
    v /= r;
  } while (v);
  if (sgn) s[i++] = sgn;
  while (i < len)
40088424:	e0fff5c3 	ldbu	r3,-41(fp)
40088428:	e0bfff07 	ldb	r2,-4(fp)
4008842c:	18bff516 	blt	r3,r2,40088404 <__alt_mem_epcs+0xfff47404>
    s[i++] = pad;
  do
    printf("%c",s[--i]);
40088430:	e0bff5c3 	ldbu	r2,-41(fp)
40088434:	10bfffc4 	addi	r2,r2,-1
40088438:	e0bff5c5 	stb	r2,-41(fp)
4008843c:	e0bff5c3 	ldbu	r2,-41(fp)
40088440:	e0fff744 	addi	r3,fp,-35
40088444:	1885883a 	add	r2,r3,r2
40088448:	10800003 	ldbu	r2,0(r2)
4008844c:	10803fcc 	andi	r2,r2,255
40088450:	1009883a 	mov	r4,r2
40088454:	0089cb40 	call	40089cb4 <putchar>
  while (i);
40088458:	e0bff5c3 	ldbu	r2,-41(fp)
4008845c:	103ff41e 	bne	r2,zero,40088430 <__alt_mem_epcs+0xfff47430>
}
40088460:	e037883a 	mov	sp,fp
40088464:	dfc00117 	ldw	ra,4(sp)
40088468:	df000017 	ldw	fp,0(sp)
4008846c:	dec00204 	addi	sp,sp,8
40088470:	f800283a 	ret

40088474 <put_dump>:



void put_dump (const unsigned char *buff, unsigned long ofs, int cnt)
{
40088474:	defffa04 	addi	sp,sp,-24
40088478:	dfc00515 	stw	ra,20(sp)
4008847c:	df000415 	stw	fp,16(sp)
40088480:	df000404 	addi	fp,sp,16
40088484:	e13ffd15 	stw	r4,-12(fp)
40088488:	e17ffe15 	stw	r5,-8(fp)
4008848c:	e1bfff15 	stw	r6,-4(fp)
  unsigned char n;


  printf("%08lX ", ofs);
40088490:	011002b4 	movhi	r4,16394
40088494:	2127bd04 	addi	r4,r4,-24844
40088498:	e17ffe17 	ldw	r5,-8(fp)
4008849c:	0089c700 	call	40089c70 <printf>
  for(n = 0; n < cnt; n++)
400884a0:	e03ffc05 	stb	zero,-16(fp)
400884a4:	00000c06 	br	400884d8 <put_dump+0x64>
    printf(" %02X", buff[n]);
400884a8:	e0bffc03 	ldbu	r2,-16(fp)
400884ac:	e0fffd17 	ldw	r3,-12(fp)
400884b0:	1885883a 	add	r2,r3,r2
400884b4:	10800003 	ldbu	r2,0(r2)
400884b8:	10803fcc 	andi	r2,r2,255
400884bc:	011002b4 	movhi	r4,16394
400884c0:	2127bf04 	addi	r4,r4,-24836
400884c4:	100b883a 	mov	r5,r2
400884c8:	0089c700 	call	40089c70 <printf>
{
  unsigned char n;


  printf("%08lX ", ofs);
  for(n = 0; n < cnt; n++)
400884cc:	e0bffc03 	ldbu	r2,-16(fp)
400884d0:	10800044 	addi	r2,r2,1
400884d4:	e0bffc05 	stb	r2,-16(fp)
400884d8:	e0fffc03 	ldbu	r3,-16(fp)
400884dc:	e0bfff17 	ldw	r2,-4(fp)
400884e0:	18bff116 	blt	r3,r2,400884a8 <__alt_mem_epcs+0xfff474a8>
    printf(" %02X", buff[n]);
  printf(" ");
400884e4:	01000804 	movi	r4,32
400884e8:	0089cb40 	call	40089cb4 <putchar>
  for(n = 0; n < cnt; n++) {
400884ec:	e03ffc05 	stb	zero,-16(fp)
400884f0:	00001b06 	br	40088560 <put_dump+0xec>
    if ((buff[n] < 0x20)||(buff[n] >= 0x7F))
400884f4:	e0bffc03 	ldbu	r2,-16(fp)
400884f8:	e0fffd17 	ldw	r3,-12(fp)
400884fc:	1885883a 	add	r2,r3,r2
40088500:	10800003 	ldbu	r2,0(r2)
40088504:	10803fcc 	andi	r2,r2,255
40088508:	10800830 	cmpltui	r2,r2,32
4008850c:	1000071e 	bne	r2,zero,4008852c <put_dump+0xb8>
40088510:	e0bffc03 	ldbu	r2,-16(fp)
40088514:	e0fffd17 	ldw	r3,-12(fp)
40088518:	1885883a 	add	r2,r3,r2
4008851c:	10800003 	ldbu	r2,0(r2)
40088520:	10803fcc 	andi	r2,r2,255
40088524:	10801ff0 	cmpltui	r2,r2,127
40088528:	1000031e 	bne	r2,zero,40088538 <put_dump+0xc4>
      printf(".");
4008852c:	01000b84 	movi	r4,46
40088530:	0089cb40 	call	40089cb4 <putchar>
40088534:	00000706 	br	40088554 <put_dump+0xe0>
    else
      printf("%c",buff[n]);
40088538:	e0bffc03 	ldbu	r2,-16(fp)
4008853c:	e0fffd17 	ldw	r3,-12(fp)
40088540:	1885883a 	add	r2,r3,r2
40088544:	10800003 	ldbu	r2,0(r2)
40088548:	10803fcc 	andi	r2,r2,255
4008854c:	1009883a 	mov	r4,r2
40088550:	0089cb40 	call	40089cb4 <putchar>

  printf("%08lX ", ofs);
  for(n = 0; n < cnt; n++)
    printf(" %02X", buff[n]);
  printf(" ");
  for(n = 0; n < cnt; n++) {
40088554:	e0bffc03 	ldbu	r2,-16(fp)
40088558:	10800044 	addi	r2,r2,1
4008855c:	e0bffc05 	stb	r2,-16(fp)
40088560:	e0fffc03 	ldbu	r3,-16(fp)
40088564:	e0bfff17 	ldw	r2,-4(fp)
40088568:	18bfe216 	blt	r3,r2,400884f4 <__alt_mem_epcs+0xfff474f4>
    if ((buff[n] < 0x20)||(buff[n] >= 0x7F))
      printf(".");
    else
      printf("%c",buff[n]);
  }
  printf("\n");
4008856c:	01000284 	movi	r4,10
40088570:	0089cb40 	call	40089cb4 <putchar>
}
40088574:	e037883a 	mov	sp,fp
40088578:	dfc00117 	ldw	ra,4(sp)
4008857c:	df000017 	ldw	fp,0(sp)
40088580:	dec00204 	addi	sp,sp,8
40088584:	f800283a 	ret

40088588 <TimerFunction>:
/*                                                                         */
/*  In    : none                                                           */
/*  Out   : none                                                           */
/*  Return: none                                                           */
/***************************************************************************/
alt_u32 TimerFunction(void *context) {
40088588:	defffd04 	addi	sp,sp,-12
4008858c:	dfc00215 	stw	ra,8(sp)
40088590:	df000115 	stw	fp,4(sp)
40088594:	df000104 	addi	fp,sp,4
40088598:	e13fff15 	stw	r4,-4(fp)
	static unsigned short wTimer10ms = 0;

	(void) context;

	Systick++;
4008859c:	d0a73b17 	ldw	r2,-25364(gp)
400885a0:	10800044 	addi	r2,r2,1
400885a4:	d0a73b15 	stw	r2,-25364(gp)
	wTimer10ms++;
400885a8:	d0a73c8b 	ldhu	r2,-25358(gp)
400885ac:	10800044 	addi	r2,r2,1
400885b0:	d0a73c8d 	sth	r2,-25358(gp)
	Timer++; /* Performance counter for this module */
400885b4:	d0a73c0b 	ldhu	r2,-25360(gp)
400885b8:	10800044 	addi	r2,r2,1
400885bc:	d0a73c0d 	sth	r2,-25360(gp)

	if (wTimer10ms == 10) {
400885c0:	d0a73c8b 	ldhu	r2,-25358(gp)
400885c4:	10bfffcc 	andi	r2,r2,65535
400885c8:	10800298 	cmpnei	r2,r2,10
400885cc:	1000021e 	bne	r2,zero,400885d8 <TimerFunction+0x50>
		wTimer10ms = 0;
400885d0:	d0273c8d 	sth	zero,-25358(gp)
		ffs_DiskIOTimerproc(); /* Drive timer procedure of low level disk I/O module */
400885d4:	0080ae00 	call	40080ae0 <ffs_DiskIOTimerproc>
	}

	return (1);
400885d8:	00800044 	movi	r2,1
} /* TimerFunction */
400885dc:	e037883a 	mov	sp,fp
400885e0:	dfc00117 	ldw	ra,4(sp)
400885e4:	df000017 	ldw	fp,0(sp)
400885e8:	dec00204 	addi	sp,sp,8
400885ec:	f800283a 	ret

400885f0 <IoInit>:
/*                                                                         */
/*  In    : none                                                           */
/*  Out   : none                                                           */
/*  Return: none                                                           */
/***************************************************************************/
void IoInit(void) {
400885f0:	defffe04 	addi	sp,sp,-8
400885f4:	dfc00115 	stw	ra,4(sp)
400885f8:	df000015 	stw	fp,0(sp)
400885fc:	d839883a 	mov	fp,sp

	/* Init diskio interface */
	ffs_DiskIOInit();
40088600:	0080ab40 	call	40080ab4 <ffs_DiskIOInit>
	/* Init timer system */
	alt_alarm_start(&alarm2, 1, &TimerFunction, NULL);
40088604:	011002b4 	movhi	r4,16394
40088608:	21373a04 	addi	r4,r4,-8984
4008860c:	01400044 	movi	r5,1
40088610:	01900274 	movhi	r6,16393
40088614:	31a16204 	addi	r6,r6,-31352
40088618:	000f883a 	mov	r7,zero
4008861c:	00955c00 	call	400955c0 <alt_alarm_start>

} /* IoInit */
40088620:	e037883a 	mov	sp,fp
40088624:	dfc00117 	ldw	ra,4(sp)
40088628:	df000017 	ldw	fp,0(sp)
4008862c:	dec00204 	addi	sp,sp,8
40088630:	f800283a 	ret

40088634 <put_rc>:

/*=========================================================================*/
/*  DEFINE: All code exported                                              */
/*=========================================================================*/

void put_rc(FRESULT rc) {
40088634:	defffb04 	addi	sp,sp,-20
40088638:	dfc00415 	stw	ra,16(sp)
4008863c:	df000315 	stw	fp,12(sp)
40088640:	df000304 	addi	fp,sp,12
40088644:	e13fff15 	stw	r4,-4(fp)
	const char *str =
40088648:	009002b4 	movhi	r2,16394
4008864c:	10a7c104 	addi	r2,r2,-24828
40088650:	e0bffd15 	stw	r2,-12(fp)
					"INVALID_NAME\0" "DENIED\0" "EXIST\0" "INVALID_OBJECT\0" "WRITE_PROTECTED\0"
					"INVALID_DRIVE\0" "NOT_ENABLED\0" "NO_FILE_SYSTEM\0" "MKFS_ABORTED\0" "TIMEOUT\0"
					"LOCKED\0" "NOT_ENOUGH_CORE\0" "TOO_MANY_OPEN_FILES\0";
	FRESULT i;

	for (i = 0; i != rc && *str; i++) {
40088654:	e03ffe15 	stw	zero,-8(fp)
40088658:	00000c06 	br	4008868c <put_rc+0x58>
		while (*str++)
4008865c:	0001883a 	nop
40088660:	e0bffd17 	ldw	r2,-12(fp)
40088664:	10c00044 	addi	r3,r2,1
40088668:	e0fffd15 	stw	r3,-12(fp)
4008866c:	10800003 	ldbu	r2,0(r2)
40088670:	10803fcc 	andi	r2,r2,255
40088674:	1080201c 	xori	r2,r2,128
40088678:	10bfe004 	addi	r2,r2,-128
4008867c:	103ff81e 	bne	r2,zero,40088660 <__alt_mem_epcs+0xfff47660>
					"INVALID_NAME\0" "DENIED\0" "EXIST\0" "INVALID_OBJECT\0" "WRITE_PROTECTED\0"
					"INVALID_DRIVE\0" "NOT_ENABLED\0" "NO_FILE_SYSTEM\0" "MKFS_ABORTED\0" "TIMEOUT\0"
					"LOCKED\0" "NOT_ENOUGH_CORE\0" "TOO_MANY_OPEN_FILES\0";
	FRESULT i;

	for (i = 0; i != rc && *str; i++) {
40088680:	e0bffe17 	ldw	r2,-8(fp)
40088684:	10800044 	addi	r2,r2,1
40088688:	e0bffe15 	stw	r2,-8(fp)
4008868c:	e0fffe17 	ldw	r3,-8(fp)
40088690:	e0bfff17 	ldw	r2,-4(fp)
40088694:	18800626 	beq	r3,r2,400886b0 <put_rc+0x7c>
40088698:	e0bffd17 	ldw	r2,-12(fp)
4008869c:	10800003 	ldbu	r2,0(r2)
400886a0:	10803fcc 	andi	r2,r2,255
400886a4:	1080201c 	xori	r2,r2,128
400886a8:	10bfe004 	addi	r2,r2,-128
400886ac:	103feb1e 	bne	r2,zero,4008865c <__alt_mem_epcs+0xfff4765c>
		while (*str++)
			;
	}
	printf("rc=%u FR_%s\n", (uint32_t) rc, str);
400886b0:	011002b4 	movhi	r4,16394
400886b4:	2127f604 	addi	r4,r4,-24616
400886b8:	e17fff17 	ldw	r5,-4(fp)
400886bc:	e1bffd17 	ldw	r6,-12(fp)
400886c0:	0089c700 	call	40089c70 <printf>
}
400886c4:	e037883a 	mov	sp,fp
400886c8:	dfc00117 	ldw	ra,4(sp)
400886cc:	df000017 	ldw	fp,0(sp)
400886d0:	dec00204 	addi	sp,sp,8
400886d4:	f800283a 	ret

400886d8 <ls_dir>:

/*Para listar directorio*/
void ls_dir(char * path) {
400886d8:	deffee04 	addi	sp,sp,-72
400886dc:	dfc01115 	stw	ra,68(sp)
400886e0:	df001015 	stw	fp,64(sp)
400886e4:	df001004 	addi	fp,sp,64
400886e8:	e13fff15 	stw	r4,-4(fp)
	uint8_t res;
	long p1, p2, p3;
	uint32_t s1, s2, cnt, blen = sizeof(Buff);
400886ec:	00880004 	movi	r2,8192
400886f0:	e0bffb15 	stw	r2,-20(fp)
	FATFS *fs; /* Pointer to file system object */

	res = f_opendir(&Dir, path);
400886f4:	011002b4 	movhi	r4,16394
400886f8:	2100ee04 	addi	r4,r4,952
400886fc:	e17fff17 	ldw	r5,-4(fp)
40088700:	00856240 	call	40085624 <f_opendir>
40088704:	e0bffc05 	stb	r2,-16(fp)
	if (res) {
40088708:	e0bffc03 	ldbu	r2,-16(fp)
4008870c:	10000426 	beq	r2,zero,40088720 <ls_dir+0x48>
		put_rc(res);
40088710:	e0bffc03 	ldbu	r2,-16(fp)
40088714:	1009883a 	mov	r4,r2
40088718:	00886340 	call	40088634 <put_rc>
4008871c:	0000a606 	br	400889b8 <ls_dir+0x2e0>
		return;
	}
	p1 = s1 = s2 = 0;
40088720:	e03ffa15 	stw	zero,-24(fp)
40088724:	e0bffa17 	ldw	r2,-24(fp)
40088728:	e0bff915 	stw	r2,-28(fp)
4008872c:	e0bff917 	ldw	r2,-28(fp)
40088730:	e0bffd15 	stw	r2,-12(fp)
	for (;;) {
		res = f_readdir(&Dir, &Finfo);
40088734:	011002b4 	movhi	r4,16394
40088738:	2100ee04 	addi	r4,r4,952
4008873c:	015002b4 	movhi	r5,16394
40088740:	29785f04 	addi	r5,r5,-7812
40088744:	00857940 	call	40085794 <f_readdir>
40088748:	e0bffc05 	stb	r2,-16(fp)
		if ((res != FR_OK) || !Finfo.fname[0])
4008874c:	e0bffc03 	ldbu	r2,-16(fp)
40088750:	10007b1e 	bne	r2,zero,40088940 <ls_dir+0x268>
40088754:	009002b4 	movhi	r2,16394
40088758:	10b85f04 	addi	r2,r2,-7812
4008875c:	10800243 	ldbu	r2,9(r2)
40088760:	10803fcc 	andi	r2,r2,255
40088764:	1080201c 	xori	r2,r2,128
40088768:	10bfe004 	addi	r2,r2,-128
4008876c:	10007426 	beq	r2,zero,40088940 <ls_dir+0x268>
			break;
		if (Finfo.fattrib & AM_DIR) {
40088770:	009002b4 	movhi	r2,16394
40088774:	10b85f04 	addi	r2,r2,-7812
40088778:	10800203 	ldbu	r2,8(r2)
4008877c:	10803fcc 	andi	r2,r2,255
40088780:	1080040c 	andi	r2,r2,16
40088784:	10000426 	beq	r2,zero,40088798 <ls_dir+0xc0>
			s2++;
40088788:	e0bffa17 	ldw	r2,-24(fp)
4008878c:	10800044 	addi	r2,r2,1
40088790:	e0bffa15 	stw	r2,-24(fp)
40088794:	00000906 	br	400887bc <ls_dir+0xe4>
		} else {
			s1++;
40088798:	e0bff917 	ldw	r2,-28(fp)
4008879c:	10800044 	addi	r2,r2,1
400887a0:	e0bff915 	stw	r2,-28(fp)
			p1 += Finfo.fsize;
400887a4:	009002b4 	movhi	r2,16394
400887a8:	10b85f04 	addi	r2,r2,-7812
400887ac:	10800017 	ldw	r2,0(r2)
400887b0:	e0fffd17 	ldw	r3,-12(fp)
400887b4:	10c5883a 	add	r2,r2,r3
400887b8:	e0bffd15 	stw	r2,-12(fp)
		}
		printf("%c%c%c%c%c %u/%02u/%02u %02u:%02u %9lu  %s",
				(Finfo.fattrib & AM_DIR) ? 'D' : '-',
400887bc:	009002b4 	movhi	r2,16394
400887c0:	10b85f04 	addi	r2,r2,-7812
400887c4:	10800203 	ldbu	r2,8(r2)
400887c8:	10803fcc 	andi	r2,r2,255
400887cc:	1080040c 	andi	r2,r2,16
			s2++;
		} else {
			s1++;
			p1 += Finfo.fsize;
		}
		printf("%c%c%c%c%c %u/%02u/%02u %02u:%02u %9lu  %s",
400887d0:	10000226 	beq	r2,zero,400887dc <ls_dir+0x104>
400887d4:	01401104 	movi	r5,68
400887d8:	00000106 	br	400887e0 <ls_dir+0x108>
400887dc:	01400b44 	movi	r5,45
				(Finfo.fattrib & AM_DIR) ? 'D' : '-',
				(Finfo.fattrib & AM_RDO) ? 'R' : '-',
400887e0:	009002b4 	movhi	r2,16394
400887e4:	10b85f04 	addi	r2,r2,-7812
400887e8:	10800203 	ldbu	r2,8(r2)
400887ec:	10803fcc 	andi	r2,r2,255
400887f0:	1080004c 	andi	r2,r2,1
			s2++;
		} else {
			s1++;
			p1 += Finfo.fsize;
		}
		printf("%c%c%c%c%c %u/%02u/%02u %02u:%02u %9lu  %s",
400887f4:	10000226 	beq	r2,zero,40088800 <ls_dir+0x128>
400887f8:	01801484 	movi	r6,82
400887fc:	00000106 	br	40088804 <ls_dir+0x12c>
40088800:	01800b44 	movi	r6,45
				(Finfo.fattrib & AM_DIR) ? 'D' : '-',
				(Finfo.fattrib & AM_RDO) ? 'R' : '-',
				(Finfo.fattrib & AM_HID) ? 'H' : '-',
40088804:	009002b4 	movhi	r2,16394
40088808:	10b85f04 	addi	r2,r2,-7812
4008880c:	10800203 	ldbu	r2,8(r2)
40088810:	10803fcc 	andi	r2,r2,255
40088814:	1080008c 	andi	r2,r2,2
			s2++;
		} else {
			s1++;
			p1 += Finfo.fsize;
		}
		printf("%c%c%c%c%c %u/%02u/%02u %02u:%02u %9lu  %s",
40088818:	10000226 	beq	r2,zero,40088824 <ls_dir+0x14c>
4008881c:	01c01204 	movi	r7,72
40088820:	00000106 	br	40088828 <ls_dir+0x150>
40088824:	01c00b44 	movi	r7,45
				(Finfo.fattrib & AM_DIR) ? 'D' : '-',
				(Finfo.fattrib & AM_RDO) ? 'R' : '-',
				(Finfo.fattrib & AM_HID) ? 'H' : '-',
				(Finfo.fattrib & AM_SYS) ? 'S' : '-',
40088828:	009002b4 	movhi	r2,16394
4008882c:	10b85f04 	addi	r2,r2,-7812
40088830:	10800203 	ldbu	r2,8(r2)
40088834:	10803fcc 	andi	r2,r2,255
40088838:	1080010c 	andi	r2,r2,4
			s2++;
		} else {
			s1++;
			p1 += Finfo.fsize;
		}
		printf("%c%c%c%c%c %u/%02u/%02u %02u:%02u %9lu  %s",
4008883c:	10000226 	beq	r2,zero,40088848 <ls_dir+0x170>
40088840:	010014c4 	movi	r4,83
40088844:	00000106 	br	4008884c <ls_dir+0x174>
40088848:	01000b44 	movi	r4,45
				(Finfo.fattrib & AM_DIR) ? 'D' : '-',
				(Finfo.fattrib & AM_RDO) ? 'R' : '-',
				(Finfo.fattrib & AM_HID) ? 'H' : '-',
				(Finfo.fattrib & AM_SYS) ? 'S' : '-',
				(Finfo.fattrib & AM_ARC) ? 'A' : '-', (Finfo.fdate >> 9) + 1980,
4008884c:	009002b4 	movhi	r2,16394
40088850:	10b85f04 	addi	r2,r2,-7812
40088854:	10800203 	ldbu	r2,8(r2)
40088858:	10803fcc 	andi	r2,r2,255
4008885c:	1080080c 	andi	r2,r2,32
			s2++;
		} else {
			s1++;
			p1 += Finfo.fsize;
		}
		printf("%c%c%c%c%c %u/%02u/%02u %02u:%02u %9lu  %s",
40088860:	10000226 	beq	r2,zero,4008886c <ls_dir+0x194>
40088864:	00c01044 	movi	r3,65
40088868:	00000106 	br	40088870 <ls_dir+0x198>
4008886c:	00c00b44 	movi	r3,45
				(Finfo.fattrib & AM_DIR) ? 'D' : '-',
				(Finfo.fattrib & AM_RDO) ? 'R' : '-',
				(Finfo.fattrib & AM_HID) ? 'H' : '-',
				(Finfo.fattrib & AM_SYS) ? 'S' : '-',
				(Finfo.fattrib & AM_ARC) ? 'A' : '-', (Finfo.fdate >> 9) + 1980,
40088870:	009002b4 	movhi	r2,16394
40088874:	10b85f04 	addi	r2,r2,-7812
40088878:	1080010b 	ldhu	r2,4(r2)
4008887c:	10bfffcc 	andi	r2,r2,65535
40088880:	1004d27a 	srli	r2,r2,9
40088884:	10bfffcc 	andi	r2,r2,65535
			s2++;
		} else {
			s1++;
			p1 += Finfo.fsize;
		}
		printf("%c%c%c%c%c %u/%02u/%02u %02u:%02u %9lu  %s",
40088888:	1301ef04 	addi	r12,r2,1980
				(Finfo.fattrib & AM_DIR) ? 'D' : '-',
				(Finfo.fattrib & AM_RDO) ? 'R' : '-',
				(Finfo.fattrib & AM_HID) ? 'H' : '-',
				(Finfo.fattrib & AM_SYS) ? 'S' : '-',
				(Finfo.fattrib & AM_ARC) ? 'A' : '-', (Finfo.fdate >> 9) + 1980,
				(Finfo.fdate >> 5) & 15, Finfo.fdate & 31, (Finfo.ftime >> 11),
4008888c:	009002b4 	movhi	r2,16394
40088890:	10b85f04 	addi	r2,r2,-7812
40088894:	1080010b 	ldhu	r2,4(r2)
			s2++;
		} else {
			s1++;
			p1 += Finfo.fsize;
		}
		printf("%c%c%c%c%c %u/%02u/%02u %02u:%02u %9lu  %s",
40088898:	10bfffcc 	andi	r2,r2,65535
4008889c:	1004d17a 	srli	r2,r2,5
400888a0:	10bfffcc 	andi	r2,r2,65535
400888a4:	12c003cc 	andi	r11,r2,15
				(Finfo.fattrib & AM_DIR) ? 'D' : '-',
				(Finfo.fattrib & AM_RDO) ? 'R' : '-',
				(Finfo.fattrib & AM_HID) ? 'H' : '-',
				(Finfo.fattrib & AM_SYS) ? 'S' : '-',
				(Finfo.fattrib & AM_ARC) ? 'A' : '-', (Finfo.fdate >> 9) + 1980,
				(Finfo.fdate >> 5) & 15, Finfo.fdate & 31, (Finfo.ftime >> 11),
400888a8:	009002b4 	movhi	r2,16394
400888ac:	10b85f04 	addi	r2,r2,-7812
400888b0:	1080010b 	ldhu	r2,4(r2)
			s2++;
		} else {
			s1++;
			p1 += Finfo.fsize;
		}
		printf("%c%c%c%c%c %u/%02u/%02u %02u:%02u %9lu  %s",
400888b4:	10bfffcc 	andi	r2,r2,65535
400888b8:	128007cc 	andi	r10,r2,31
				(Finfo.fattrib & AM_DIR) ? 'D' : '-',
				(Finfo.fattrib & AM_RDO) ? 'R' : '-',
				(Finfo.fattrib & AM_HID) ? 'H' : '-',
				(Finfo.fattrib & AM_SYS) ? 'S' : '-',
				(Finfo.fattrib & AM_ARC) ? 'A' : '-', (Finfo.fdate >> 9) + 1980,
				(Finfo.fdate >> 5) & 15, Finfo.fdate & 31, (Finfo.ftime >> 11),
400888bc:	009002b4 	movhi	r2,16394
400888c0:	10b85f04 	addi	r2,r2,-7812
400888c4:	1080018b 	ldhu	r2,6(r2)
			s2++;
		} else {
			s1++;
			p1 += Finfo.fsize;
		}
		printf("%c%c%c%c%c %u/%02u/%02u %02u:%02u %9lu  %s",
400888c8:	10bfffcc 	andi	r2,r2,65535
400888cc:	1004d2fa 	srli	r2,r2,11
400888d0:	127fffcc 	andi	r9,r2,65535
				(Finfo.fattrib & AM_RDO) ? 'R' : '-',
				(Finfo.fattrib & AM_HID) ? 'H' : '-',
				(Finfo.fattrib & AM_SYS) ? 'S' : '-',
				(Finfo.fattrib & AM_ARC) ? 'A' : '-', (Finfo.fdate >> 9) + 1980,
				(Finfo.fdate >> 5) & 15, Finfo.fdate & 31, (Finfo.ftime >> 11),
				(Finfo.ftime >> 5) & 63, Finfo.fsize, &(Finfo.fname[0]));
400888d4:	009002b4 	movhi	r2,16394
400888d8:	10b85f04 	addi	r2,r2,-7812
400888dc:	1080018b 	ldhu	r2,6(r2)
			s2++;
		} else {
			s1++;
			p1 += Finfo.fsize;
		}
		printf("%c%c%c%c%c %u/%02u/%02u %02u:%02u %9lu  %s",
400888e0:	10bfffcc 	andi	r2,r2,65535
400888e4:	1004d17a 	srli	r2,r2,5
400888e8:	10bfffcc 	andi	r2,r2,65535
400888ec:	12000fcc 	andi	r8,r2,63
400888f0:	009002b4 	movhi	r2,16394
400888f4:	10b85f04 	addi	r2,r2,-7812
400888f8:	10800017 	ldw	r2,0(r2)
400888fc:	d9000015 	stw	r4,0(sp)
40088900:	d8c00115 	stw	r3,4(sp)
40088904:	db000215 	stw	r12,8(sp)
40088908:	dac00315 	stw	r11,12(sp)
4008890c:	da800415 	stw	r10,16(sp)
40088910:	da400515 	stw	r9,20(sp)
40088914:	da000615 	stw	r8,24(sp)
40088918:	d8800715 	stw	r2,28(sp)
4008891c:	009002b4 	movhi	r2,16394
40088920:	10b86144 	addi	r2,r2,-7803
40088924:	d8800815 	stw	r2,32(sp)
40088928:	011002b4 	movhi	r4,16394
4008892c:	2127fa04 	addi	r4,r4,-24600
40088930:	0089c700 	call	40089c70 <printf>
#if _USE_LFN
		for (p2 = strlen(Finfo.fname); p2 < 14; p2++)
		printf(' ');
		printf("%s\n", Lfname);
#else
		printf("\n");
40088934:	01000284 	movi	r4,10
40088938:	0089cb40 	call	40089cb4 <putchar>
#endif
	}
4008893c:	003f7d06 	br	40088734 <__alt_mem_epcs+0xfff47734>
	printf("%4u File(s),%10lu bytes total\n%4u Dir(s)", s1, p1, s2);
40088940:	e0bffd17 	ldw	r2,-12(fp)
40088944:	011002b4 	movhi	r4,16394
40088948:	21280504 	addi	r4,r4,-24556
4008894c:	e17ff917 	ldw	r5,-28(fp)
40088950:	100d883a 	mov	r6,r2
40088954:	e1fffa17 	ldw	r7,-24(fp)
40088958:	0089c700 	call	40089c70 <printf>
	res = f_getfree(path, (uint32_t *) &p1, &fs);
4008895c:	e0fffd04 	addi	r3,fp,-12
40088960:	e0bffe04 	addi	r2,fp,-8
40088964:	e13fff17 	ldw	r4,-4(fp)
40088968:	180b883a 	mov	r5,r3
4008896c:	100d883a 	mov	r6,r2
40088970:	00859180 	call	40085918 <f_getfree>
40088974:	e0bffc05 	stb	r2,-16(fp)
	if (res == FR_OK)
40088978:	e0bffc03 	ldbu	r2,-16(fp)
4008897c:	10000b1e 	bne	r2,zero,400889ac <ls_dir+0x2d4>
		printf(", %10lu bytes free\n", p1 * fs->csize * 512);
40088980:	e0bffe17 	ldw	r2,-8(fp)
40088984:	10800083 	ldbu	r2,2(r2)
40088988:	10c03fcc 	andi	r3,r2,255
4008898c:	e0bffd17 	ldw	r2,-12(fp)
40088990:	1885383a 	mul	r2,r3,r2
40088994:	1004927a 	slli	r2,r2,9
40088998:	011002b4 	movhi	r4,16394
4008899c:	21281004 	addi	r4,r4,-24512
400889a0:	100b883a 	mov	r5,r2
400889a4:	0089c700 	call	40089c70 <printf>
400889a8:	00000306 	br	400889b8 <ls_dir+0x2e0>
	else
		put_rc(res);
400889ac:	e0bffc03 	ldbu	r2,-16(fp)
400889b0:	1009883a 	mov	r4,r2
400889b4:	00886340 	call	40088634 <put_rc>
}
400889b8:	e037883a 	mov	sp,fp
400889bc:	dfc00117 	ldw	ra,4(sp)
400889c0:	df000017 	ldw	fp,0(sp)
400889c4:	dec00204 	addi	sp,sp,8
400889c8:	f800283a 	ret

400889cc <uart_handle>:
/*---------------------------------------------------------------------------*/
unsigned short int data, status;
alt_u32 control;
int divisor;

void uart_handle(void *context, alt_u32 interrupt) {
400889cc:	defffd04 	addi	sp,sp,-12
400889d0:	df000215 	stw	fp,8(sp)
400889d4:	df000204 	addi	fp,sp,8
400889d8:	e13ffe15 	stw	r4,-8(fp)
400889dc:	e17fff15 	stw	r5,-4(fp)

	status = IORD_ALTERA_AVALON_UART_STATUS(UART1_BASE);
400889e0:	00900534 	movhi	r2,16404
400889e4:	10880a04 	addi	r2,r2,8232
400889e8:	10800037 	ldwio	r2,0(r2)
400889ec:	d0a7430d 	sth	r2,-25332(gp)
	while (!(status & ALTERA_AVALON_UART_STATUS_RRDY_MSK))
400889f0:	00000406 	br	40088a04 <uart_handle+0x38>
		status = IORD_ALTERA_AVALON_UART_STATUS(UART1_BASE);
400889f4:	00900534 	movhi	r2,16404
400889f8:	10880a04 	addi	r2,r2,8232
400889fc:	10800037 	ldwio	r2,0(r2)
40088a00:	d0a7430d 	sth	r2,-25332(gp)
int divisor;

void uart_handle(void *context, alt_u32 interrupt) {

	status = IORD_ALTERA_AVALON_UART_STATUS(UART1_BASE);
	while (!(status & ALTERA_AVALON_UART_STATUS_RRDY_MSK))
40088a04:	d0a7430b 	ldhu	r2,-25332(gp)
40088a08:	10bfffcc 	andi	r2,r2,65535
40088a0c:	1080200c 	andi	r2,r2,128
40088a10:	103ff826 	beq	r2,zero,400889f4 <__alt_mem_epcs+0xfff479f4>
		status = IORD_ALTERA_AVALON_UART_STATUS(UART1_BASE);
	rx_buffer_1[RxHead_1] = IORD_ALTERA_AVALON_UART_RXDATA(UART1_BASE);
40088a14:	d0a73e0b 	ldhu	r2,-25352(gp)
40088a18:	10ffffcc 	andi	r3,r2,65535
40088a1c:	00900534 	movhi	r2,16404
40088a20:	10880804 	addi	r2,r2,8224
40088a24:	10800037 	ldwio	r2,0(r2)
40088a28:	1009883a 	mov	r4,r2
40088a2c:	009002b4 	movhi	r2,16394
40088a30:	1080f504 	addi	r2,r2,980
40088a34:	10c5883a 	add	r2,r2,r3
40088a38:	11000005 	stb	r4,0(r2)
	data = rx_buffer_1[RxHead_1];
40088a3c:	d0a73e0b 	ldhu	r2,-25352(gp)
40088a40:	10ffffcc 	andi	r3,r2,65535
40088a44:	009002b4 	movhi	r2,16394
40088a48:	1080f504 	addi	r2,r2,980
40088a4c:	10c5883a 	add	r2,r2,r3
40088a50:	10800003 	ldbu	r2,0(r2)
40088a54:	10803fcc 	andi	r2,r2,255
40088a58:	d0a7410d 	sth	r2,-25340(gp)
	IOWR_ALTERA_AVALON_UART_STATUS(UART1_BASE, 0);
40088a5c:	0007883a 	mov	r3,zero
40088a60:	00900534 	movhi	r2,16404
40088a64:	10880a04 	addi	r2,r2,8232
40088a68:	10c00035 	stwio	r3,0(r2)
	if (++RxHead_1 > (RX_BUFFER_SIZE_1 - 1)) {
40088a6c:	d0a73e0b 	ldhu	r2,-25352(gp)
40088a70:	10800044 	addi	r2,r2,1
40088a74:	d0a73e0d 	sth	r2,-25352(gp)
40088a78:	d0a73e0b 	ldhu	r2,-25352(gp)
40088a7c:	10bfffcc 	andi	r2,r2,65535
40088a80:	10850030 	cmpltui	r2,r2,5120
40088a84:	1000011e 	bne	r2,zero,40088a8c <uart_handle+0xc0>
		RxHead_1 = 0;
40088a88:	d0273e0d 	sth	zero,-25352(gp)
	}

}
40088a8c:	e037883a 	mov	sp,fp
40088a90:	df000017 	ldw	fp,0(sp)
40088a94:	dec00104 	addi	sp,sp,4
40088a98:	f800283a 	ret

40088a9c <IsrUart1>:

void IsrUart1(void* context, unsigned int id) {
40088a9c:	defffc04 	addi	sp,sp,-16
40088aa0:	df000315 	stw	fp,12(sp)
40088aa4:	df000304 	addi	fp,sp,12
40088aa8:	e13ffe15 	stw	r4,-8(fp)
40088aac:	e17fff15 	stw	r5,-4(fp)
	int sr;

	sr = IORD_ALTERA_AVALON_UART_STATUS(UART1_BASE);
40088ab0:	00900534 	movhi	r2,16404
40088ab4:	10880a04 	addi	r2,r2,8232
40088ab8:	10800037 	ldwio	r2,0(r2)
40088abc:	e0bffd15 	stw	r2,-12(fp)
	if (sr & ALTERA_AVALON_UART_STATUS_RRDY_MSK)
		;
	{
		rx_buffer_1[RxHead_1] = IORD_ALTERA_AVALON_UART_RXDATA(UART1_BASE);
40088ac0:	d0a73e0b 	ldhu	r2,-25352(gp)
40088ac4:	10ffffcc 	andi	r3,r2,65535
40088ac8:	00900534 	movhi	r2,16404
40088acc:	10880804 	addi	r2,r2,8224
40088ad0:	10800037 	ldwio	r2,0(r2)
40088ad4:	1009883a 	mov	r4,r2
40088ad8:	009002b4 	movhi	r2,16394
40088adc:	1080f504 	addi	r2,r2,980
40088ae0:	10c5883a 	add	r2,r2,r3
40088ae4:	11000005 	stb	r4,0(r2)
		IOWR_ALTERA_AVALON_UART_STATUS(UART1_BASE, 0);
40088ae8:	0007883a 	mov	r3,zero
40088aec:	00900534 	movhi	r2,16404
40088af0:	10880a04 	addi	r2,r2,8232
40088af4:	10c00035 	stwio	r3,0(r2)
		if (++RxHead_1 > (RX_BUFFER_SIZE_1 - 1)) {
40088af8:	d0a73e0b 	ldhu	r2,-25352(gp)
40088afc:	10800044 	addi	r2,r2,1
40088b00:	d0a73e0d 	sth	r2,-25352(gp)
40088b04:	d0a73e0b 	ldhu	r2,-25352(gp)
40088b08:	10bfffcc 	andi	r2,r2,65535
40088b0c:	10850030 	cmpltui	r2,r2,5120
40088b10:	1000011e 	bne	r2,zero,40088b18 <IsrUart1+0x7c>
			RxHead_1 = 0;
40088b14:	d0273e0d 	sth	zero,-25352(gp)
		}
	}
	if (sr & ALTERA_AVALON_UART_STATUS_TRDY_MSK) {
40088b18:	e0bffd17 	ldw	r2,-12(fp)
40088b1c:	1080100c 	andi	r2,r2,64
40088b20:	10001f26 	beq	r2,zero,40088ba0 <IsrUart1+0x104>
		if (IORD_ALTERA_AVALON_UART_CONTROL(
40088b24:	00900534 	movhi	r2,16404
40088b28:	10880b04 	addi	r2,r2,8236
40088b2c:	10800037 	ldwio	r2,0(r2)
				UART1_BASE) & ALTERA_AVALON_UART_CONTROL_TRDY_MSK)
			;
		{
			if (TxTail_1 != TxHead_1) {
40088b30:	d0e73d8b 	ldhu	r3,-25354(gp)
40088b34:	d0a73d0b 	ldhu	r2,-25356(gp)
40088b38:	18ffffcc 	andi	r3,r3,65535
40088b3c:	10bfffcc 	andi	r2,r2,65535
40088b40:	18801326 	beq	r3,r2,40088b90 <IsrUart1+0xf4>
				IOWR_ALTERA_AVALON_UART_TXDATA(UART1_BASE,
40088b44:	d0a73d8b 	ldhu	r2,-25354(gp)
40088b48:	10ffffcc 	andi	r3,r2,65535
40088b4c:	009002b4 	movhi	r2,16394
40088b50:	1085f504 	addi	r2,r2,6100
40088b54:	10c5883a 	add	r2,r2,r3
40088b58:	10800003 	ldbu	r2,0(r2)
40088b5c:	10c03fcc 	andi	r3,r2,255
40088b60:	00900534 	movhi	r2,16404
40088b64:	10880904 	addi	r2,r2,8228
40088b68:	10c00035 	stwio	r3,0(r2)
						tx_buffer_1[TxTail_1]);
				if (++TxTail_1 > (TX_BUFFER_SIZE_1 - 1))
40088b6c:	d0a73d8b 	ldhu	r2,-25354(gp)
40088b70:	10800044 	addi	r2,r2,1
40088b74:	d0a73d8d 	sth	r2,-25354(gp)
40088b78:	d0a73d8b 	ldhu	r2,-25354(gp)
40088b7c:	10bfffcc 	andi	r2,r2,65535
40088b80:	10810030 	cmpltui	r2,r2,1024
40088b84:	1000061e 	bne	r2,zero,40088ba0 <IsrUart1+0x104>
					TxTail_1 = 0;
40088b88:	d0273d8d 	sth	zero,-25354(gp)
40088b8c:	00000406 	br	40088ba0 <IsrUart1+0x104>
			} else
				IOWR_ALTERA_AVALON_UART_CONTROL(UART1_BASE,
40088b90:	00c02004 	movi	r3,128
40088b94:	00900534 	movhi	r2,16404
40088b98:	10880b04 	addi	r2,r2,8236
40088b9c:	10c00035 	stwio	r3,0(r2)
						ALTERA_AVALON_UART_CONTROL_RRDY_MSK);
		}
	}

}
40088ba0:	e037883a 	mov	sp,fp
40088ba4:	df000017 	ldw	fp,0(sp)
40088ba8:	dec00104 	addi	sp,sp,4
40088bac:	f800283a 	ret

40088bb0 <InitUart>:

void InitUart(unsigned int BaudRate) {
40088bb0:	defff904 	addi	sp,sp,-28
40088bb4:	dfc00615 	stw	ra,24(sp)
40088bb8:	df000515 	stw	fp,20(sp)
40088bbc:	df000504 	addi	fp,sp,20
40088bc0:	e13fff15 	stw	r4,-4(fp)
	int context_uart1;

	control = ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
40088bc4:	00807004 	movi	r2,448
40088bc8:	d0a73f15 	stw	r2,-25348(gp)
	ALTERA_AVALON_UART_CONTROL_RRDY_MSK |
	ALTERA_AVALON_UART_CONTROL_E_MSK;
	IOWR_ALTERA_AVALON_UART_CONTROL(UART1_BASE, control);
40088bcc:	d0a73f17 	ldw	r2,-25348(gp)
40088bd0:	1007883a 	mov	r3,r2
40088bd4:	00900534 	movhi	r2,16404
40088bd8:	10880b04 	addi	r2,r2,8236
40088bdc:	10c00035 	stwio	r3,0(r2)

	divisor = (int) ((UART1_FREQ / BaudRate) + 1);
40088be0:	0081dcf4 	movhi	r2,1907
40088be4:	10965004 	addi	r2,r2,22848
40088be8:	e0ffff17 	ldw	r3,-4(fp)
40088bec:	10c5203a 	divu	r2,r2,r3
40088bf0:	10800044 	addi	r2,r2,1
40088bf4:	d0a74015 	stw	r2,-25344(gp)
	;
	IOWR_ALTERA_AVALON_UART_DIVISOR(UART1_BASE, divisor);
40088bf8:	d0e74017 	ldw	r3,-25344(gp)
40088bfc:	00900534 	movhi	r2,16404
40088c00:	10880c04 	addi	r2,r2,8240
40088c04:	10c00035 	stwio	r3,0(r2)

	if (alt_irq_register(UART1_IRQ, NULL, IsrUart1)) {
40088c08:	010000c4 	movi	r4,3
40088c0c:	000b883a 	mov	r5,zero
40088c10:	01900274 	movhi	r6,16393
40088c14:	31a2a704 	addi	r6,r6,-30052
40088c18:	009594c0 	call	4009594c <alt_irq_register>
//     IOWR_ALTERA_AVALON_PIO_DATA(LE_BASE, 0x0);
	}
	InitUart1(BaudRate);
40088c1c:	e13fff17 	ldw	r4,-4(fp)
40088c20:	00890080 	call	40089008 <InitUart1>
	/* register the interrupt handler */

	alt_irq_register(UART1_IRQ, NULL, IsrUart1); //LEGACY
40088c24:	010000c4 	movi	r4,3
40088c28:	000b883a 	mov	r5,zero
40088c2c:	01900274 	movhi	r6,16393
40088c30:	31a2a704 	addi	r6,r6,-30052
40088c34:	009594c0 	call	4009594c <alt_irq_register>
40088c38:	008000c4 	movi	r2,3
40088c3c:	e0bffb15 	stw	r2,-20(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
40088c40:	0005303a 	rdctl	r2,status
40088c44:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
40088c48:	e0fffc17 	ldw	r3,-16(fp)
40088c4c:	00bfff84 	movi	r2,-2
40088c50:	1884703a 	and	r2,r3,r2
40088c54:	1001703a 	wrctl	status,r2
  
  return context;
40088c58:	e0bffc17 	ldw	r2,-16(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
40088c5c:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active |= (1 << id);
40088c60:	e0bffb17 	ldw	r2,-20(fp)
40088c64:	00c00044 	movi	r3,1
40088c68:	1884983a 	sll	r2,r3,r2
40088c6c:	1007883a 	mov	r3,r2
40088c70:	009002b4 	movhi	r2,16394
40088c74:	10b73404 	addi	r2,r2,-9008
40088c78:	10800017 	ldw	r2,0(r2)
40088c7c:	1886b03a 	or	r3,r3,r2
40088c80:	009002b4 	movhi	r2,16394
40088c84:	10b73404 	addi	r2,r2,-9008
40088c88:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
40088c8c:	009002b4 	movhi	r2,16394
40088c90:	10b73404 	addi	r2,r2,-9008
40088c94:	10800017 	ldw	r2,0(r2)
40088c98:	100170fa 	wrctl	ienable,r2
40088c9c:	e0bffd17 	ldw	r2,-12(fp)
40088ca0:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
40088ca4:	e0bffe17 	ldw	r2,-8(fp)
40088ca8:	1001703a 	wrctl	status,r2
	//alt_ic_isr_register(UART1_IRQ_ID,UART1_IRQ,IsrUart1,NULL,NULL); //ENHANCED INTERRUPT CONTROLLER
	alt_irq_enable(UART1_IRQ); //LEGACY
	//alt_ic_irq_enable(UART1_IRQ_ID,UART1_IRQ); //ENHANCED INTERRUPT CONTROLLER
}
40088cac:	e037883a 	mov	sp,fp
40088cb0:	dfc00117 	ldw	ra,4(sp)
40088cb4:	df000017 	ldw	fp,0(sp)
40088cb8:	dec00204 	addi	sp,sp,8
40088cbc:	f800283a 	ret

40088cc0 <IsEmptyUart>:

unsigned char IsEmptyUart() {
40088cc0:	deffff04 	addi	sp,sp,-4
40088cc4:	df000015 	stw	fp,0(sp)
40088cc8:	d839883a 	mov	fp,sp
	if (RxHead_1 == RxTail_1) {
40088ccc:	d0e73e0b 	ldhu	r3,-25352(gp)
40088cd0:	d0a73e8b 	ldhu	r2,-25350(gp)
40088cd4:	18ffffcc 	andi	r3,r3,65535
40088cd8:	10bfffcc 	andi	r2,r2,65535
40088cdc:	1880021e 	bne	r3,r2,40088ce8 <IsEmptyUart+0x28>
		return 1;
40088ce0:	00800044 	movi	r2,1
40088ce4:	00000106 	br	40088cec <IsEmptyUart+0x2c>
	}
	return 0;
40088ce8:	0005883a 	mov	r2,zero
}
40088cec:	e037883a 	mov	sp,fp
40088cf0:	df000017 	ldw	fp,0(sp)
40088cf4:	dec00104 	addi	sp,sp,4
40088cf8:	f800283a 	ret

40088cfc <GET_POS>:

unsigned short GET_POS(void) {
40088cfc:	deffff04 	addi	sp,sp,-4
40088d00:	df000015 	stw	fp,0(sp)
40088d04:	d839883a 	mov	fp,sp
	return RxTail_1;
40088d08:	d0a73e8b 	ldhu	r2,-25350(gp)
}
40088d0c:	e037883a 	mov	sp,fp
40088d10:	df000017 	ldw	fp,0(sp)
40088d14:	dec00104 	addi	sp,sp,4
40088d18:	f800283a 	ret

40088d1c <CLEAR_FIFO>:
unsigned short CLEAR_FIFO(void) {
40088d1c:	deffff04 	addi	sp,sp,-4
40088d20:	df000015 	stw	fp,0(sp)
40088d24:	d839883a 	mov	fp,sp
	RxHead_1 = RxTail_1;
40088d28:	d0a73e8b 	ldhu	r2,-25350(gp)
40088d2c:	d0a73e0d 	sth	r2,-25352(gp)
}
40088d30:	e037883a 	mov	sp,fp
40088d34:	df000017 	ldw	fp,0(sp)
40088d38:	dec00104 	addi	sp,sp,4
40088d3c:	f800283a 	ret

40088d40 <GetChar_uart>:

unsigned char GetChar_uart(void) {
40088d40:	defffe04 	addi	sp,sp,-8
40088d44:	df000115 	stw	fp,4(sp)
40088d48:	df000104 	addi	fp,sp,4
	unsigned char rxChar;

	/* buffer is empty */

	rxChar = rx_buffer_1[RxTail_1];
40088d4c:	d0a73e8b 	ldhu	r2,-25350(gp)
40088d50:	10ffffcc 	andi	r3,r2,65535
40088d54:	009002b4 	movhi	r2,16394
40088d58:	1080f504 	addi	r2,r2,980
40088d5c:	10c5883a 	add	r2,r2,r3
40088d60:	10800003 	ldbu	r2,0(r2)
40088d64:	e0bfff05 	stb	r2,-4(fp)
	RxTail_1++;
40088d68:	d0a73e8b 	ldhu	r2,-25350(gp)
40088d6c:	10800044 	addi	r2,r2,1
40088d70:	d0a73e8d 	sth	r2,-25350(gp)
	if (RxTail_1 > (RX_BUFFER_SIZE_1 - 1)) {
40088d74:	d0a73e8b 	ldhu	r2,-25350(gp)
40088d78:	10bfffcc 	andi	r2,r2,65535
40088d7c:	10850030 	cmpltui	r2,r2,5120
40088d80:	1000011e 	bne	r2,zero,40088d88 <GetChar_uart+0x48>
		RxTail_1 = 0;
40088d84:	d0273e8d 	sth	zero,-25350(gp)
	}

	return rxChar;
40088d88:	e0bfff03 	ldbu	r2,-4(fp)
}
40088d8c:	e037883a 	mov	sp,fp
40088d90:	df000017 	ldw	fp,0(sp)
40088d94:	dec00104 	addi	sp,sp,4
40088d98:	f800283a 	ret

40088d9c <sendChar_uart>:

unsigned char sendChar_uart(unsigned char in_char) {
40088d9c:	defffb04 	addi	sp,sp,-20
40088da0:	dfc00415 	stw	ra,16(sp)
40088da4:	df000315 	stw	fp,12(sp)
40088da8:	df000304 	addi	fp,sp,12
40088dac:	2005883a 	mov	r2,r4
40088db0:	e0bfff05 	stb	r2,-4(fp)
	unsigned short size;
	unsigned int z;

	z = IORD_ALTERA_AVALON_UART_STATUS(
40088db4:	00900534 	movhi	r2,16404
40088db8:	10880a04 	addi	r2,r2,8232
40088dbc:	10800037 	ldwio	r2,0(r2)
40088dc0:	1080100c 	andi	r2,r2,64
40088dc4:	e0bffe15 	stw	r2,-8(fp)
			UART1_BASE) & ALTERA_AVALON_UART_STATUS_TRDY_MSK;

	if ((TxHead_1 == TxTail_1) && z)
40088dc8:	d0e73d0b 	ldhu	r3,-25356(gp)
40088dcc:	d0a73d8b 	ldhu	r2,-25354(gp)
40088dd0:	18ffffcc 	andi	r3,r3,65535
40088dd4:	10bfffcc 	andi	r2,r2,65535
40088dd8:	1880071e 	bne	r3,r2,40088df8 <sendChar_uart+0x5c>
40088ddc:	e0bffe17 	ldw	r2,-8(fp)
40088de0:	10000526 	beq	r2,zero,40088df8 <sendChar_uart+0x5c>
		IOWR_ALTERA_AVALON_UART_TXDATA(UART1_BASE, in_char);
40088de4:	e0ffff03 	ldbu	r3,-4(fp)
40088de8:	00900534 	movhi	r2,16404
40088dec:	10880904 	addi	r2,r2,8228
40088df0:	10c00035 	stwio	r3,0(r2)
40088df4:	00002c06 	br	40088ea8 <sendChar_uart+0x10c>
	else {
		if (TxHead_1 >= TxTail_1)
40088df8:	d0e73d0b 	ldhu	r3,-25356(gp)
40088dfc:	d0a73d8b 	ldhu	r2,-25354(gp)
40088e00:	18ffffcc 	andi	r3,r3,65535
40088e04:	10bfffcc 	andi	r2,r2,65535
40088e08:	18800536 	bltu	r3,r2,40088e20 <sendChar_uart+0x84>
			size = TxHead_1 - TxTail_1;
40088e0c:	d0e73d0b 	ldhu	r3,-25356(gp)
40088e10:	d0a73d8b 	ldhu	r2,-25354(gp)
40088e14:	1885c83a 	sub	r2,r3,r2
40088e18:	e0bffd0d 	sth	r2,-12(fp)
40088e1c:	00000506 	br	40088e34 <sendChar_uart+0x98>
		else
			size = ((TX_BUFFER_SIZE_1 - 1) - TxTail_1) + TxHead_1;
40088e20:	d0e73d0b 	ldhu	r3,-25356(gp)
40088e24:	d0a73d8b 	ldhu	r2,-25354(gp)
40088e28:	1885c83a 	sub	r2,r3,r2
40088e2c:	1080ffc4 	addi	r2,r2,1023
40088e30:	e0bffd0d 	sth	r2,-12(fp)
		if (size > (TX_BUFFER_SIZE_1 - 3))
40088e34:	e0bffd0b 	ldhu	r2,-12(fp)
40088e38:	1080ffb0 	cmpltui	r2,r2,1022
40088e3c:	1000021e 	bne	r2,zero,40088e48 <sendChar_uart+0xac>
			return (-1);
40088e40:	00bfffc4 	movi	r2,-1
40088e44:	00001b06 	br	40088eb4 <sendChar_uart+0x118>
		tx_buffer_1[TxHead_1] = in_char;
40088e48:	d0a73d0b 	ldhu	r2,-25356(gp)
40088e4c:	10ffffcc 	andi	r3,r2,65535
40088e50:	009002b4 	movhi	r2,16394
40088e54:	1085f504 	addi	r2,r2,6100
40088e58:	10c5883a 	add	r2,r2,r3
40088e5c:	e0ffff03 	ldbu	r3,-4(fp)
40088e60:	10c00005 	stb	r3,0(r2)
		if (++TxHead_1 > (TX_BUFFER_SIZE_1 - 1))
40088e64:	d0a73d0b 	ldhu	r2,-25356(gp)
40088e68:	10800044 	addi	r2,r2,1
40088e6c:	d0a73d0d 	sth	r2,-25356(gp)
40088e70:	d0a73d0b 	ldhu	r2,-25356(gp)
40088e74:	10bfffcc 	andi	r2,r2,65535
40088e78:	10810030 	cmpltui	r2,r2,1024
40088e7c:	1000011e 	bne	r2,zero,40088e84 <sendChar_uart+0xe8>
			TxHead_1 = 0;
40088e80:	d0273d0d 	sth	zero,-25356(gp)
		z = IORD_ALTERA_AVALON_UART_CONTROL(
40088e84:	00900534 	movhi	r2,16404
40088e88:	10880b04 	addi	r2,r2,8236
40088e8c:	10800037 	ldwio	r2,0(r2)
				UART1_BASE) | ALTERA_AVALON_UART_CONTROL_TRDY_MSK;
40088e90:	10801014 	ori	r2,r2,64
		if (size > (TX_BUFFER_SIZE_1 - 3))
			return (-1);
		tx_buffer_1[TxHead_1] = in_char;
		if (++TxHead_1 > (TX_BUFFER_SIZE_1 - 1))
			TxHead_1 = 0;
		z = IORD_ALTERA_AVALON_UART_CONTROL(
40088e94:	e0bffe15 	stw	r2,-8(fp)
				UART1_BASE) | ALTERA_AVALON_UART_CONTROL_TRDY_MSK;
		IOWR_ALTERA_AVALON_UART_CONTROL(UART1_BASE, z);
40088e98:	e0fffe17 	ldw	r3,-8(fp)
40088e9c:	00900534 	movhi	r2,16404
40088ea0:	10880b04 	addi	r2,r2,8236
40088ea4:	10c00035 	stwio	r3,0(r2)
	}
	usleep(10);
40088ea8:	01000284 	movi	r4,10
40088eac:	00962a80 	call	400962a8 <usleep>

	return (1);
40088eb0:	00800044 	movi	r2,1
}
40088eb4:	e037883a 	mov	sp,fp
40088eb8:	dfc00117 	ldw	ra,4(sp)
40088ebc:	df000017 	ldw	fp,0(sp)
40088ec0:	dec00204 	addi	sp,sp,8
40088ec4:	f800283a 	ret

40088ec8 <get_pack_data_uart>:
 result= get_pack_data_uart(mensaje);
 if(result>0) printf("Esta es una Prueba %s \n", mensaje);

 ****************************************************************************************************/

int get_pack_data_uart(unsigned char * buffer) {
40088ec8:	defff804 	addi	sp,sp,-32
40088ecc:	dfc00715 	stw	ra,28(sp)
40088ed0:	df000615 	stw	fp,24(sp)
40088ed4:	dc400515 	stw	r17,20(sp)
40088ed8:	dc000415 	stw	r16,16(sp)
40088edc:	df000604 	addi	fp,sp,24
40088ee0:	e13ffd15 	stw	r4,-12(fp)
	unsigned int size = fabs(RxHead_1 - RxTail_1);
40088ee4:	d0a73e0b 	ldhu	r2,-25352(gp)
40088ee8:	10ffffcc 	andi	r3,r2,65535
40088eec:	d0a73e8b 	ldhu	r2,-25350(gp)
40088ef0:	10bfffcc 	andi	r2,r2,65535
40088ef4:	1885c83a 	sub	r2,r3,r2
40088ef8:	1009883a 	mov	r4,r2
40088efc:	0089b100 	call	40089b10 <__floatsidf>
40088f00:	1009883a 	mov	r4,r2
40088f04:	180b883a 	mov	r5,r3
40088f08:	2021883a 	mov	r16,r4
40088f0c:	00a00034 	movhi	r2,32768
40088f10:	10bfffc4 	addi	r2,r2,-1
40088f14:	28a2703a 	and	r17,r5,r2
40088f18:	8009883a 	mov	r4,r16
40088f1c:	880b883a 	mov	r5,r17
40088f20:	00890640 	call	40089064 <__fixunsdfsi>
40088f24:	e0bffb15 	stw	r2,-20(fp)
	unsigned char * out_buffer = buffer;
40088f28:	e0bffd17 	ldw	r2,-12(fp)
40088f2c:	e0bffc15 	stw	r2,-16(fp)
	int size_n_to = 0;
40088f30:	e03ffa15 	stw	zero,-24(fp)

	while (!IsEmptyUart()) {
40088f34:	00000806 	br	40088f58 <get_pack_data_uart+0x90>
		out_buffer[size_n_to] = GetChar_uart();
40088f38:	e0bffa17 	ldw	r2,-24(fp)
40088f3c:	e0fffc17 	ldw	r3,-16(fp)
40088f40:	18a1883a 	add	r16,r3,r2
40088f44:	0088d400 	call	40088d40 <GetChar_uart>
40088f48:	80800005 	stb	r2,0(r16)
		size_n_to++;
40088f4c:	e0bffa17 	ldw	r2,-24(fp)
40088f50:	10800044 	addi	r2,r2,1
40088f54:	e0bffa15 	stw	r2,-24(fp)
int get_pack_data_uart(unsigned char * buffer) {
	unsigned int size = fabs(RxHead_1 - RxTail_1);
	unsigned char * out_buffer = buffer;
	int size_n_to = 0;

	while (!IsEmptyUart()) {
40088f58:	0088cc00 	call	40088cc0 <IsEmptyUart>
40088f5c:	10803fcc 	andi	r2,r2,255
40088f60:	103ff526 	beq	r2,zero,40088f38 <__alt_mem_epcs+0xfff47f38>
		out_buffer[size_n_to] = GetChar_uart();
		size_n_to++;
	}

	//printf("pack = %d\n",size_n_to);
	return size_n_to - 1;
40088f64:	e0bffa17 	ldw	r2,-24(fp)
40088f68:	10bfffc4 	addi	r2,r2,-1
}
40088f6c:	e6fffe04 	addi	sp,fp,-8
40088f70:	dfc00317 	ldw	ra,12(sp)
40088f74:	df000217 	ldw	fp,8(sp)
40088f78:	dc400117 	ldw	r17,4(sp)
40088f7c:	dc000017 	ldw	r16,0(sp)
40088f80:	dec00404 	addi	sp,sp,16
40088f84:	f800283a 	ret

40088f88 <uart_write>:

unsigned char uart_write(unsigned char * pack, int len) {
40088f88:	defff904 	addi	sp,sp,-28
40088f8c:	dfc00615 	stw	ra,24(sp)
40088f90:	df000515 	stw	fp,20(sp)
40088f94:	df000504 	addi	fp,sp,20
40088f98:	e13ffe15 	stw	r4,-8(fp)
40088f9c:	e17fff15 	stw	r5,-4(fp)
	int size = len;
40088fa0:	e0bfff17 	ldw	r2,-4(fp)
40088fa4:	e0bffc15 	stw	r2,-16(fp)
	unsigned char * out_buffer = pack;
40088fa8:	e0bffe17 	ldw	r2,-8(fp)
40088fac:	e0bffd15 	stw	r2,-12(fp)
	int size_to = 0;
40088fb0:	e03ffb15 	stw	zero,-20(fp)
	for (size_to = 0; size_to < size; size_to++) {
40088fb4:	e03ffb15 	stw	zero,-20(fp)
40088fb8:	00000a06 	br	40088fe4 <uart_write+0x5c>
		sendChar_uart(out_buffer[size_to]);
40088fbc:	e0bffb17 	ldw	r2,-20(fp)
40088fc0:	e0fffd17 	ldw	r3,-12(fp)
40088fc4:	1885883a 	add	r2,r3,r2
40088fc8:	10800003 	ldbu	r2,0(r2)
40088fcc:	10803fcc 	andi	r2,r2,255
40088fd0:	1009883a 	mov	r4,r2
40088fd4:	0088d9c0 	call	40088d9c <sendChar_uart>

unsigned char uart_write(unsigned char * pack, int len) {
	int size = len;
	unsigned char * out_buffer = pack;
	int size_to = 0;
	for (size_to = 0; size_to < size; size_to++) {
40088fd8:	e0bffb17 	ldw	r2,-20(fp)
40088fdc:	10800044 	addi	r2,r2,1
40088fe0:	e0bffb15 	stw	r2,-20(fp)
40088fe4:	e0fffb17 	ldw	r3,-20(fp)
40088fe8:	e0bffc17 	ldw	r2,-16(fp)
40088fec:	18bff316 	blt	r3,r2,40088fbc <__alt_mem_epcs+0xfff47fbc>
		sendChar_uart(out_buffer[size_to]);
	}
	return 1;
40088ff0:	00800044 	movi	r2,1
}
40088ff4:	e037883a 	mov	sp,fp
40088ff8:	dfc00117 	ldw	ra,4(sp)
40088ffc:	df000017 	ldw	fp,0(sp)
40089000:	dec00204 	addi	sp,sp,8
40089004:	f800283a 	ret

40089008 <InitUart1>:

void InitUart1(unsigned int BaudRate) {
40089008:	defffc04 	addi	sp,sp,-16
4008900c:	df000315 	stw	fp,12(sp)
40089010:	df000304 	addi	fp,sp,12
40089014:	e13fff15 	stw	r4,-4(fp)

	unsigned int divisor;
	int number = 0.0;
40089018:	e03ffd15 	stw	zero,-12(fp)
	//number=((UART1_FREQ/BaudRate) + 0.5);
	divisor = ((UART1_FREQ / BaudRate) + 1);
4008901c:	0081dcf4 	movhi	r2,1907
40089020:	10965004 	addi	r2,r2,22848
40089024:	e0ffff17 	ldw	r3,-4(fp)
40089028:	10c5203a 	divu	r2,r2,r3
4008902c:	10800044 	addi	r2,r2,1
40089030:	e0bffe15 	stw	r2,-8(fp)
	//printf("num float %.1f  %.1f \n",number,0.5);
	//divisor = (unsigned int)(ceil(number));

	//printf("num int %d \n",divisor);
	IOWR_ALTERA_AVALON_UART_DIVISOR(UART1_BASE, divisor);
40089034:	e0fffe17 	ldw	r3,-8(fp)
40089038:	00900534 	movhi	r2,16404
4008903c:	10880c04 	addi	r2,r2,8240
40089040:	10c00035 	stwio	r3,0(r2)
	IOWR_ALTERA_AVALON_UART_CONTROL(UART1_BASE,
40089044:	00c02004 	movi	r3,128
40089048:	00900534 	movhi	r2,16404
4008904c:	10880b04 	addi	r2,r2,8236
40089050:	10c00035 	stwio	r3,0(r2)
			ALTERA_AVALON_UART_CONTROL_RRDY_MSK);

}
40089054:	e037883a 	mov	sp,fp
40089058:	df000017 	ldw	fp,0(sp)
4008905c:	dec00104 	addi	sp,sp,4
40089060:	f800283a 	ret

40089064 <__fixunsdfsi>:
40089064:	defffd04 	addi	sp,sp,-12
40089068:	000d883a 	mov	r6,zero
4008906c:	01d07834 	movhi	r7,16864
40089070:	dc400115 	stw	r17,4(sp)
40089074:	dc000015 	stw	r16,0(sp)
40089078:	dfc00215 	stw	ra,8(sp)
4008907c:	2023883a 	mov	r17,r4
40089080:	2821883a 	mov	r16,r5
40089084:	00890d80 	call	400890d8 <__gedf2>
40089088:	1000080e 	bge	r2,zero,400890ac <__fixunsdfsi+0x48>
4008908c:	8809883a 	mov	r4,r17
40089090:	800b883a 	mov	r5,r16
40089094:	0089a880 	call	40089a88 <__fixdfsi>
40089098:	dfc00217 	ldw	ra,8(sp)
4008909c:	dc400117 	ldw	r17,4(sp)
400890a0:	dc000017 	ldw	r16,0(sp)
400890a4:	dec00304 	addi	sp,sp,12
400890a8:	f800283a 	ret
400890ac:	000d883a 	mov	r6,zero
400890b0:	01d07834 	movhi	r7,16864
400890b4:	8809883a 	mov	r4,r17
400890b8:	800b883a 	mov	r5,r16
400890bc:	00891b80 	call	400891b8 <__subdf3>
400890c0:	180b883a 	mov	r5,r3
400890c4:	1009883a 	mov	r4,r2
400890c8:	0089a880 	call	40089a88 <__fixdfsi>
400890cc:	00e00034 	movhi	r3,32768
400890d0:	10c5883a 	add	r2,r2,r3
400890d4:	003ff006 	br	40089098 <__alt_mem_epcs+0xfff48098>

400890d8 <__gedf2>:
400890d8:	2804d53a 	srli	r2,r5,20
400890dc:	3806d53a 	srli	r3,r7,20
400890e0:	02000434 	movhi	r8,16
400890e4:	423fffc4 	addi	r8,r8,-1
400890e8:	0241ffc4 	movi	r9,2047
400890ec:	1081ffcc 	andi	r2,r2,2047
400890f0:	2a14703a 	and	r10,r5,r8
400890f4:	1a46703a 	and	r3,r3,r9
400890f8:	3a10703a 	and	r8,r7,r8
400890fc:	280ad7fa 	srli	r5,r5,31
40089100:	380ed7fa 	srli	r7,r7,31
40089104:	12400b26 	beq	r2,r9,40089134 <__gedf2+0x5c>
40089108:	1a401626 	beq	r3,r9,40089164 <__gedf2+0x8c>
4008910c:	10000c1e 	bne	r2,zero,40089140 <__gedf2+0x68>
40089110:	5112b03a 	or	r9,r10,r4
40089114:	4813003a 	cmpeq	r9,r9,zero
40089118:	4817883a 	mov	r11,r9
4008911c:	18000c1e 	bne	r3,zero,40089150 <__gedf2+0x78>
40089120:	4198b03a 	or	r12,r8,r6
40089124:	60000a1e 	bne	r12,zero,40089150 <__gedf2+0x78>
40089128:	48001326 	beq	r9,zero,40089178 <__gedf2+0xa0>
4008912c:	0005883a 	mov	r2,zero
40089130:	f800283a 	ret
40089134:	5112b03a 	or	r9,r10,r4
40089138:	4800191e 	bne	r9,zero,400891a0 <__gedf2+0xc8>
4008913c:	18800926 	beq	r3,r2,40089164 <__gedf2+0x8c>
40089140:	18000b1e 	bne	r3,zero,40089170 <__gedf2+0x98>
40089144:	4192b03a 	or	r9,r8,r6
40089148:	0017883a 	mov	r11,zero
4008914c:	48000a26 	beq	r9,zero,40089178 <__gedf2+0xa0>
40089150:	39c03fcc 	andi	r7,r7,255
40089154:	58000726 	beq	r11,zero,40089174 <__gedf2+0x9c>
40089158:	3800081e 	bne	r7,zero,4008917c <__gedf2+0xa4>
4008915c:	00bfffc4 	movi	r2,-1
40089160:	f800283a 	ret
40089164:	4192b03a 	or	r9,r8,r6
40089168:	48000d1e 	bne	r9,zero,400891a0 <__gedf2+0xc8>
4008916c:	103fe826 	beq	r2,zero,40089110 <__alt_mem_epcs+0xfff48110>
40089170:	39c03fcc 	andi	r7,r7,255
40089174:	29c00326 	beq	r5,r7,40089184 <__gedf2+0xac>
40089178:	283ff81e 	bne	r5,zero,4008915c <__alt_mem_epcs+0xfff4815c>
4008917c:	00800044 	movi	r2,1
40089180:	f800283a 	ret
40089184:	18bffc16 	blt	r3,r2,40089178 <__alt_mem_epcs+0xfff48178>
40089188:	10c00316 	blt	r2,r3,40089198 <__gedf2+0xc0>
4008918c:	42bffa36 	bltu	r8,r10,40089178 <__alt_mem_epcs+0xfff48178>
40089190:	52000526 	beq	r10,r8,400891a8 <__gedf2+0xd0>
40089194:	523fe52e 	bgeu	r10,r8,4008912c <__alt_mem_epcs+0xfff4812c>
40089198:	283ff026 	beq	r5,zero,4008915c <__alt_mem_epcs+0xfff4815c>
4008919c:	003ff706 	br	4008917c <__alt_mem_epcs+0xfff4817c>
400891a0:	00bfff84 	movi	r2,-2
400891a4:	f800283a 	ret
400891a8:	313ff336 	bltu	r6,r4,40089178 <__alt_mem_epcs+0xfff48178>
400891ac:	21bfdf2e 	bgeu	r4,r6,4008912c <__alt_mem_epcs+0xfff4812c>
400891b0:	283fea26 	beq	r5,zero,4008915c <__alt_mem_epcs+0xfff4815c>
400891b4:	003ff106 	br	4008917c <__alt_mem_epcs+0xfff4817c>

400891b8 <__subdf3>:
400891b8:	00c00434 	movhi	r3,16
400891bc:	18ffffc4 	addi	r3,r3,-1
400891c0:	defffb04 	addi	sp,sp,-20
400891c4:	28d2703a 	and	r9,r5,r3
400891c8:	3814d53a 	srli	r10,r7,20
400891cc:	38c6703a 	and	r3,r7,r3
400891d0:	3004d77a 	srli	r2,r6,29
400891d4:	dc800215 	stw	r18,8(sp)
400891d8:	dc000015 	stw	r16,0(sp)
400891dc:	2824d7fa 	srli	r18,r5,31
400891e0:	2820d53a 	srli	r16,r5,20
400891e4:	481290fa 	slli	r9,r9,3
400891e8:	200ad77a 	srli	r5,r4,29
400891ec:	180690fa 	slli	r3,r3,3
400891f0:	dc400115 	stw	r17,4(sp)
400891f4:	dfc00415 	stw	ra,16(sp)
400891f8:	202290fa 	slli	r17,r4,3
400891fc:	dcc00315 	stw	r19,12(sp)
40089200:	5281ffcc 	andi	r10,r10,2047
40089204:	0101ffc4 	movi	r4,2047
40089208:	9011883a 	mov	r8,r18
4008920c:	8401ffcc 	andi	r16,r16,2047
40089210:	94803fcc 	andi	r18,r18,255
40089214:	494ab03a 	or	r5,r9,r5
40089218:	380ed7fa 	srli	r7,r7,31
4008921c:	1886b03a 	or	r3,r3,r2
40089220:	300c90fa 	slli	r6,r6,3
40089224:	51009026 	beq	r10,r4,40089468 <__subdf3+0x2b0>
40089228:	39c0005c 	xori	r7,r7,1
4008922c:	8285c83a 	sub	r2,r16,r10
40089230:	91c06f26 	beq	r18,r7,400893f0 <__subdf3+0x238>
40089234:	0080b10e 	bge	zero,r2,400894fc <__subdf3+0x344>
40089238:	50002a1e 	bne	r10,zero,400892e4 <__subdf3+0x12c>
4008923c:	1988b03a 	or	r4,r3,r6
40089240:	2000941e 	bne	r4,zero,40089494 <__subdf3+0x2dc>
40089244:	888001cc 	andi	r2,r17,7
40089248:	10005b26 	beq	r2,zero,400893b8 <__subdf3+0x200>
4008924c:	88c003cc 	andi	r3,r17,15
40089250:	00800104 	movi	r2,4
40089254:	18805826 	beq	r3,r2,400893b8 <__subdf3+0x200>
40089258:	88c00104 	addi	r3,r17,4
4008925c:	1c63803a 	cmpltu	r17,r3,r17
40089260:	2c4b883a 	add	r5,r5,r17
40089264:	2880202c 	andhi	r2,r5,128
40089268:	9200004c 	andi	r8,r18,1
4008926c:	1823883a 	mov	r17,r3
40089270:	10005426 	beq	r2,zero,400893c4 <__subdf3+0x20c>
40089274:	84000044 	addi	r16,r16,1
40089278:	0081ffc4 	movi	r2,2047
4008927c:	8080bf26 	beq	r16,r2,4008957c <__subdf3+0x3c4>
40089280:	013fe034 	movhi	r4,65408
40089284:	213fffc4 	addi	r4,r4,-1
40089288:	290a703a 	and	r5,r5,r4
4008928c:	2804977a 	slli	r2,r5,29
40089290:	280a927a 	slli	r5,r5,9
40089294:	8822d0fa 	srli	r17,r17,3
40089298:	8401ffcc 	andi	r16,r16,2047
4008929c:	2808d33a 	srli	r4,r5,12
400892a0:	1444b03a 	or	r2,r2,r17
400892a4:	8401ffcc 	andi	r16,r16,2047
400892a8:	800a953a 	slli	r5,r16,20
400892ac:	40c03fcc 	andi	r3,r8,255
400892b0:	04000434 	movhi	r16,16
400892b4:	180697fa 	slli	r3,r3,31
400892b8:	843fffc4 	addi	r16,r16,-1
400892bc:	2420703a 	and	r16,r4,r16
400892c0:	8160b03a 	or	r16,r16,r5
400892c4:	80c6b03a 	or	r3,r16,r3
400892c8:	dfc00417 	ldw	ra,16(sp)
400892cc:	dcc00317 	ldw	r19,12(sp)
400892d0:	dc800217 	ldw	r18,8(sp)
400892d4:	dc400117 	ldw	r17,4(sp)
400892d8:	dc000017 	ldw	r16,0(sp)
400892dc:	dec00504 	addi	sp,sp,20
400892e0:	f800283a 	ret
400892e4:	0101ffc4 	movi	r4,2047
400892e8:	813fd626 	beq	r16,r4,40089244 <__alt_mem_epcs+0xfff48244>
400892ec:	18c02034 	orhi	r3,r3,128
400892f0:	01000e04 	movi	r4,56
400892f4:	2080a416 	blt	r4,r2,40089588 <__subdf3+0x3d0>
400892f8:	010007c4 	movi	r4,31
400892fc:	2080c716 	blt	r4,r2,4008961c <__subdf3+0x464>
40089300:	01000804 	movi	r4,32
40089304:	2089c83a 	sub	r4,r4,r2
40089308:	1910983a 	sll	r8,r3,r4
4008930c:	308ed83a 	srl	r7,r6,r2
40089310:	3108983a 	sll	r4,r6,r4
40089314:	1884d83a 	srl	r2,r3,r2
40089318:	41ccb03a 	or	r6,r8,r7
4008931c:	2008c03a 	cmpne	r4,r4,zero
40089320:	310cb03a 	or	r6,r6,r4
40089324:	898dc83a 	sub	r6,r17,r6
40089328:	89a3803a 	cmpltu	r17,r17,r6
4008932c:	288bc83a 	sub	r5,r5,r2
40089330:	2c4bc83a 	sub	r5,r5,r17
40089334:	3023883a 	mov	r17,r6
40089338:	2880202c 	andhi	r2,r5,128
4008933c:	10006b26 	beq	r2,zero,400894ec <__subdf3+0x334>
40089340:	04c02034 	movhi	r19,128
40089344:	9cffffc4 	addi	r19,r19,-1
40089348:	2ce6703a 	and	r19,r5,r19
4008934c:	98007c26 	beq	r19,zero,40089540 <__subdf3+0x388>
40089350:	9809883a 	mov	r4,r19
40089354:	0089be00 	call	40089be0 <__clzsi2>
40089358:	10fffe04 	addi	r3,r2,-8
4008935c:	010007c4 	movi	r4,31
40089360:	20c07d16 	blt	r4,r3,40089558 <__subdf3+0x3a0>
40089364:	01400a04 	movi	r5,40
40089368:	2885c83a 	sub	r2,r5,r2
4008936c:	888ad83a 	srl	r5,r17,r2
40089370:	98e6983a 	sll	r19,r19,r3
40089374:	88e2983a 	sll	r17,r17,r3
40089378:	2ce6b03a 	or	r19,r5,r19
4008937c:	1c007a16 	blt	r3,r16,40089568 <__subdf3+0x3b0>
40089380:	1c21c83a 	sub	r16,r3,r16
40089384:	81400044 	addi	r5,r16,1
40089388:	00c007c4 	movi	r3,31
4008938c:	19409616 	blt	r3,r5,400895e8 <__subdf3+0x430>
40089390:	1c21c83a 	sub	r16,r3,r16
40089394:	8c08983a 	sll	r4,r17,r16
40089398:	8946d83a 	srl	r3,r17,r5
4008939c:	9c20983a 	sll	r16,r19,r16
400893a0:	2008c03a 	cmpne	r4,r4,zero
400893a4:	994ad83a 	srl	r5,r19,r5
400893a8:	1c06b03a 	or	r3,r3,r16
400893ac:	1922b03a 	or	r17,r3,r4
400893b0:	0021883a 	mov	r16,zero
400893b4:	003fa306 	br	40089244 <__alt_mem_epcs+0xfff48244>
400893b8:	2880202c 	andhi	r2,r5,128
400893bc:	9200004c 	andi	r8,r18,1
400893c0:	103fac1e 	bne	r2,zero,40089274 <__alt_mem_epcs+0xfff48274>
400893c4:	2804977a 	slli	r2,r5,29
400893c8:	8822d0fa 	srli	r17,r17,3
400893cc:	00c1ffc4 	movi	r3,2047
400893d0:	280ad0fa 	srli	r5,r5,3
400893d4:	1444b03a 	or	r2,r2,r17
400893d8:	80c02726 	beq	r16,r3,40089478 <__subdf3+0x2c0>
400893dc:	01000434 	movhi	r4,16
400893e0:	213fffc4 	addi	r4,r4,-1
400893e4:	80e0703a 	and	r16,r16,r3
400893e8:	2908703a 	and	r4,r5,r4
400893ec:	003fad06 	br	400892a4 <__alt_mem_epcs+0xfff482a4>
400893f0:	0080690e 	bge	zero,r2,40089598 <__subdf3+0x3e0>
400893f4:	50002f26 	beq	r10,zero,400894b4 <__subdf3+0x2fc>
400893f8:	0101ffc4 	movi	r4,2047
400893fc:	813f9126 	beq	r16,r4,40089244 <__alt_mem_epcs+0xfff48244>
40089400:	18c02034 	orhi	r3,r3,128
40089404:	01000e04 	movi	r4,56
40089408:	2080b00e 	bge	r4,r2,400896cc <__subdf3+0x514>
4008940c:	198cb03a 	or	r6,r3,r6
40089410:	300ec03a 	cmpne	r7,r6,zero
40089414:	0005883a 	mov	r2,zero
40089418:	3c4f883a 	add	r7,r7,r17
4008941c:	3c63803a 	cmpltu	r17,r7,r17
40089420:	114b883a 	add	r5,r2,r5
40089424:	2c4b883a 	add	r5,r5,r17
40089428:	3823883a 	mov	r17,r7
4008942c:	2880202c 	andhi	r2,r5,128
40089430:	10002e26 	beq	r2,zero,400894ec <__subdf3+0x334>
40089434:	84000044 	addi	r16,r16,1
40089438:	0081ffc4 	movi	r2,2047
4008943c:	8080de26 	beq	r16,r2,400897b8 <__subdf3+0x600>
40089440:	00bfe034 	movhi	r2,65408
40089444:	10bfffc4 	addi	r2,r2,-1
40089448:	288a703a 	and	r5,r5,r2
4008944c:	880cd07a 	srli	r6,r17,1
40089450:	280897fa 	slli	r4,r5,31
40089454:	88c0004c 	andi	r3,r17,1
40089458:	30e2b03a 	or	r17,r6,r3
4008945c:	280ad07a 	srli	r5,r5,1
40089460:	8922b03a 	or	r17,r17,r4
40089464:	003f7706 	br	40089244 <__alt_mem_epcs+0xfff48244>
40089468:	1984b03a 	or	r2,r3,r6
4008946c:	103f6e26 	beq	r2,zero,40089228 <__alt_mem_epcs+0xfff48228>
40089470:	39c03fcc 	andi	r7,r7,255
40089474:	003f6d06 	br	4008922c <__alt_mem_epcs+0xfff4822c>
40089478:	1146b03a 	or	r3,r2,r5
4008947c:	18003f26 	beq	r3,zero,4008957c <__subdf3+0x3c4>
40089480:	00c00434 	movhi	r3,16
40089484:	29000234 	orhi	r4,r5,8
40089488:	18ffffc4 	addi	r3,r3,-1
4008948c:	20c8703a 	and	r4,r4,r3
40089490:	003f8406 	br	400892a4 <__alt_mem_epcs+0xfff482a4>
40089494:	10bfffc4 	addi	r2,r2,-1
40089498:	1000501e 	bne	r2,zero,400895dc <__subdf3+0x424>
4008949c:	898fc83a 	sub	r7,r17,r6
400894a0:	89e3803a 	cmpltu	r17,r17,r7
400894a4:	28cbc83a 	sub	r5,r5,r3
400894a8:	2c4bc83a 	sub	r5,r5,r17
400894ac:	3823883a 	mov	r17,r7
400894b0:	003fa106 	br	40089338 <__alt_mem_epcs+0xfff48338>
400894b4:	1988b03a 	or	r4,r3,r6
400894b8:	203f6226 	beq	r4,zero,40089244 <__alt_mem_epcs+0xfff48244>
400894bc:	10bfffc4 	addi	r2,r2,-1
400894c0:	10009b1e 	bne	r2,zero,40089730 <__subdf3+0x578>
400894c4:	344d883a 	add	r6,r6,r17
400894c8:	3463803a 	cmpltu	r17,r6,r17
400894cc:	194b883a 	add	r5,r3,r5
400894d0:	2c4b883a 	add	r5,r5,r17
400894d4:	3023883a 	mov	r17,r6
400894d8:	003fd406 	br	4008942c <__alt_mem_epcs+0xfff4842c>
400894dc:	1106b03a 	or	r3,r2,r4
400894e0:	1800b426 	beq	r3,zero,400897b4 <__subdf3+0x5fc>
400894e4:	100b883a 	mov	r5,r2
400894e8:	2023883a 	mov	r17,r4
400894ec:	888001cc 	andi	r2,r17,7
400894f0:	103f561e 	bne	r2,zero,4008924c <__alt_mem_epcs+0xfff4824c>
400894f4:	9200004c 	andi	r8,r18,1
400894f8:	003fb206 	br	400893c4 <__alt_mem_epcs+0xfff483c4>
400894fc:	1000531e 	bne	r2,zero,4008964c <__subdf3+0x494>
40089500:	80800044 	addi	r2,r16,1
40089504:	1081ffcc 	andi	r2,r2,2047
40089508:	01000044 	movi	r4,1
4008950c:	2080a00e 	bge	r4,r2,40089790 <__subdf3+0x5d8>
40089510:	8985c83a 	sub	r2,r17,r6
40089514:	8889803a 	cmpltu	r4,r17,r2
40089518:	28e7c83a 	sub	r19,r5,r3
4008951c:	9927c83a 	sub	r19,r19,r4
40089520:	9900202c 	andhi	r4,r19,128
40089524:	20006226 	beq	r4,zero,400896b0 <__subdf3+0x4f8>
40089528:	3463c83a 	sub	r17,r6,r17
4008952c:	194bc83a 	sub	r5,r3,r5
40089530:	344d803a 	cmpltu	r6,r6,r17
40089534:	29a7c83a 	sub	r19,r5,r6
40089538:	3825883a 	mov	r18,r7
4008953c:	983f841e 	bne	r19,zero,40089350 <__alt_mem_epcs+0xfff48350>
40089540:	8809883a 	mov	r4,r17
40089544:	0089be00 	call	40089be0 <__clzsi2>
40089548:	10800804 	addi	r2,r2,32
4008954c:	10fffe04 	addi	r3,r2,-8
40089550:	010007c4 	movi	r4,31
40089554:	20ff830e 	bge	r4,r3,40089364 <__alt_mem_epcs+0xfff48364>
40089558:	14fff604 	addi	r19,r2,-40
4008955c:	8ce6983a 	sll	r19,r17,r19
40089560:	0023883a 	mov	r17,zero
40089564:	1c3f860e 	bge	r3,r16,40089380 <__alt_mem_epcs+0xfff48380>
40089568:	017fe034 	movhi	r5,65408
4008956c:	297fffc4 	addi	r5,r5,-1
40089570:	80e1c83a 	sub	r16,r16,r3
40089574:	994a703a 	and	r5,r19,r5
40089578:	003f3206 	br	40089244 <__alt_mem_epcs+0xfff48244>
4008957c:	0009883a 	mov	r4,zero
40089580:	0005883a 	mov	r2,zero
40089584:	003f4706 	br	400892a4 <__alt_mem_epcs+0xfff482a4>
40089588:	198cb03a 	or	r6,r3,r6
4008958c:	300cc03a 	cmpne	r6,r6,zero
40089590:	0005883a 	mov	r2,zero
40089594:	003f6306 	br	40089324 <__alt_mem_epcs+0xfff48324>
40089598:	10009d1e 	bne	r2,zero,40089810 <__subdf3+0x658>
4008959c:	81c00044 	addi	r7,r16,1
400895a0:	3881ffcc 	andi	r2,r7,2047
400895a4:	02400044 	movi	r9,1
400895a8:	4880680e 	bge	r9,r2,4008974c <__subdf3+0x594>
400895ac:	0081ffc4 	movi	r2,2047
400895b0:	3880ae26 	beq	r7,r2,4008986c <__subdf3+0x6b4>
400895b4:	344d883a 	add	r6,r6,r17
400895b8:	3463803a 	cmpltu	r17,r6,r17
400895bc:	194b883a 	add	r5,r3,r5
400895c0:	2c4b883a 	add	r5,r5,r17
400895c4:	282297fa 	slli	r17,r5,31
400895c8:	300cd07a 	srli	r6,r6,1
400895cc:	280ad07a 	srli	r5,r5,1
400895d0:	3821883a 	mov	r16,r7
400895d4:	89a2b03a 	or	r17,r17,r6
400895d8:	003f1a06 	br	40089244 <__alt_mem_epcs+0xfff48244>
400895dc:	0101ffc4 	movi	r4,2047
400895e0:	813f431e 	bne	r16,r4,400892f0 <__alt_mem_epcs+0xfff482f0>
400895e4:	003f1706 	br	40089244 <__alt_mem_epcs+0xfff48244>
400895e8:	80bff844 	addi	r2,r16,-31
400895ec:	00c00804 	movi	r3,32
400895f0:	9884d83a 	srl	r2,r19,r2
400895f4:	28c05126 	beq	r5,r3,4008973c <__subdf3+0x584>
400895f8:	00c00fc4 	movi	r3,63
400895fc:	1c21c83a 	sub	r16,r3,r16
40089600:	9c26983a 	sll	r19,r19,r16
40089604:	9c62b03a 	or	r17,r19,r17
40089608:	8822c03a 	cmpne	r17,r17,zero
4008960c:	88a2b03a 	or	r17,r17,r2
40089610:	000b883a 	mov	r5,zero
40089614:	0021883a 	mov	r16,zero
40089618:	003fb406 	br	400894ec <__alt_mem_epcs+0xfff484ec>
4008961c:	113ff804 	addi	r4,r2,-32
40089620:	01c00804 	movi	r7,32
40089624:	1908d83a 	srl	r4,r3,r4
40089628:	11c04626 	beq	r2,r7,40089744 <__subdf3+0x58c>
4008962c:	01c01004 	movi	r7,64
40089630:	3885c83a 	sub	r2,r7,r2
40089634:	1884983a 	sll	r2,r3,r2
40089638:	118cb03a 	or	r6,r2,r6
4008963c:	300cc03a 	cmpne	r6,r6,zero
40089640:	310cb03a 	or	r6,r6,r4
40089644:	0005883a 	mov	r2,zero
40089648:	003f3606 	br	40089324 <__alt_mem_epcs+0xfff48324>
4008964c:	80002b26 	beq	r16,zero,400896fc <__subdf3+0x544>
40089650:	0101ffc4 	movi	r4,2047
40089654:	51006926 	beq	r10,r4,400897fc <__subdf3+0x644>
40089658:	0085c83a 	sub	r2,zero,r2
4008965c:	29402034 	orhi	r5,r5,128
40089660:	01000e04 	movi	r4,56
40089664:	20807d16 	blt	r4,r2,4008985c <__subdf3+0x6a4>
40089668:	010007c4 	movi	r4,31
4008966c:	2080d916 	blt	r4,r2,400899d4 <__subdf3+0x81c>
40089670:	01000804 	movi	r4,32
40089674:	2089c83a 	sub	r4,r4,r2
40089678:	2912983a 	sll	r9,r5,r4
4008967c:	8890d83a 	srl	r8,r17,r2
40089680:	8908983a 	sll	r4,r17,r4
40089684:	2884d83a 	srl	r2,r5,r2
40089688:	4a22b03a 	or	r17,r9,r8
4008968c:	2008c03a 	cmpne	r4,r4,zero
40089690:	8922b03a 	or	r17,r17,r4
40089694:	3463c83a 	sub	r17,r6,r17
40089698:	1885c83a 	sub	r2,r3,r2
4008969c:	344d803a 	cmpltu	r6,r6,r17
400896a0:	118bc83a 	sub	r5,r2,r6
400896a4:	5021883a 	mov	r16,r10
400896a8:	3825883a 	mov	r18,r7
400896ac:	003f2206 	br	40089338 <__alt_mem_epcs+0xfff48338>
400896b0:	9886b03a 	or	r3,r19,r2
400896b4:	18001c1e 	bne	r3,zero,40089728 <__subdf3+0x570>
400896b8:	0011883a 	mov	r8,zero
400896bc:	000b883a 	mov	r5,zero
400896c0:	0023883a 	mov	r17,zero
400896c4:	0021883a 	mov	r16,zero
400896c8:	003f3e06 	br	400893c4 <__alt_mem_epcs+0xfff483c4>
400896cc:	010007c4 	movi	r4,31
400896d0:	20803c16 	blt	r4,r2,400897c4 <__subdf3+0x60c>
400896d4:	01000804 	movi	r4,32
400896d8:	2089c83a 	sub	r4,r4,r2
400896dc:	1912983a 	sll	r9,r3,r4
400896e0:	308ed83a 	srl	r7,r6,r2
400896e4:	3108983a 	sll	r4,r6,r4
400896e8:	1884d83a 	srl	r2,r3,r2
400896ec:	49ceb03a 	or	r7,r9,r7
400896f0:	2008c03a 	cmpne	r4,r4,zero
400896f4:	390eb03a 	or	r7,r7,r4
400896f8:	003f4706 	br	40089418 <__alt_mem_epcs+0xfff48418>
400896fc:	2c48b03a 	or	r4,r5,r17
40089700:	20003e26 	beq	r4,zero,400897fc <__subdf3+0x644>
40089704:	0084303a 	nor	r2,zero,r2
40089708:	10003a1e 	bne	r2,zero,400897f4 <__subdf3+0x63c>
4008970c:	3463c83a 	sub	r17,r6,r17
40089710:	194bc83a 	sub	r5,r3,r5
40089714:	344d803a 	cmpltu	r6,r6,r17
40089718:	298bc83a 	sub	r5,r5,r6
4008971c:	5021883a 	mov	r16,r10
40089720:	3825883a 	mov	r18,r7
40089724:	003f0406 	br	40089338 <__alt_mem_epcs+0xfff48338>
40089728:	1023883a 	mov	r17,r2
4008972c:	003f0706 	br	4008934c <__alt_mem_epcs+0xfff4834c>
40089730:	0101ffc4 	movi	r4,2047
40089734:	813f331e 	bne	r16,r4,40089404 <__alt_mem_epcs+0xfff48404>
40089738:	003ec206 	br	40089244 <__alt_mem_epcs+0xfff48244>
4008973c:	0027883a 	mov	r19,zero
40089740:	003fb006 	br	40089604 <__alt_mem_epcs+0xfff48604>
40089744:	0005883a 	mov	r2,zero
40089748:	003fbb06 	br	40089638 <__alt_mem_epcs+0xfff48638>
4008974c:	2c44b03a 	or	r2,r5,r17
40089750:	80008b1e 	bne	r16,zero,40089980 <__subdf3+0x7c8>
40089754:	1000b526 	beq	r2,zero,40089a2c <__subdf3+0x874>
40089758:	1984b03a 	or	r2,r3,r6
4008975c:	103eb926 	beq	r2,zero,40089244 <__alt_mem_epcs+0xfff48244>
40089760:	3449883a 	add	r4,r6,r17
40089764:	2463803a 	cmpltu	r17,r4,r17
40089768:	194b883a 	add	r5,r3,r5
4008976c:	2c4b883a 	add	r5,r5,r17
40089770:	2880202c 	andhi	r2,r5,128
40089774:	2023883a 	mov	r17,r4
40089778:	103f5c26 	beq	r2,zero,400894ec <__alt_mem_epcs+0xfff484ec>
4008977c:	00bfe034 	movhi	r2,65408
40089780:	10bfffc4 	addi	r2,r2,-1
40089784:	4821883a 	mov	r16,r9
40089788:	288a703a 	and	r5,r5,r2
4008978c:	003ead06 	br	40089244 <__alt_mem_epcs+0xfff48244>
40089790:	2c44b03a 	or	r2,r5,r17
40089794:	8000291e 	bne	r16,zero,4008983c <__subdf3+0x684>
40089798:	10004f1e 	bne	r2,zero,400898d8 <__subdf3+0x720>
4008979c:	1984b03a 	or	r2,r3,r6
400897a0:	10000426 	beq	r2,zero,400897b4 <__subdf3+0x5fc>
400897a4:	180b883a 	mov	r5,r3
400897a8:	3023883a 	mov	r17,r6
400897ac:	3825883a 	mov	r18,r7
400897b0:	003ea406 	br	40089244 <__alt_mem_epcs+0xfff48244>
400897b4:	0011883a 	mov	r8,zero
400897b8:	000b883a 	mov	r5,zero
400897bc:	0023883a 	mov	r17,zero
400897c0:	003f0006 	br	400893c4 <__alt_mem_epcs+0xfff483c4>
400897c4:	11fff804 	addi	r7,r2,-32
400897c8:	19c8d83a 	srl	r4,r3,r7
400897cc:	01c00804 	movi	r7,32
400897d0:	11c07e26 	beq	r2,r7,400899cc <__subdf3+0x814>
400897d4:	01c01004 	movi	r7,64
400897d8:	3885c83a 	sub	r2,r7,r2
400897dc:	1884983a 	sll	r2,r3,r2
400897e0:	118cb03a 	or	r6,r2,r6
400897e4:	300ec03a 	cmpne	r7,r6,zero
400897e8:	390eb03a 	or	r7,r7,r4
400897ec:	0005883a 	mov	r2,zero
400897f0:	003f0906 	br	40089418 <__alt_mem_epcs+0xfff48418>
400897f4:	0101ffc4 	movi	r4,2047
400897f8:	513f991e 	bne	r10,r4,40089660 <__alt_mem_epcs+0xfff48660>
400897fc:	180b883a 	mov	r5,r3
40089800:	3023883a 	mov	r17,r6
40089804:	5021883a 	mov	r16,r10
40089808:	3825883a 	mov	r18,r7
4008980c:	003e8d06 	br	40089244 <__alt_mem_epcs+0xfff48244>
40089810:	80001a1e 	bne	r16,zero,4008987c <__subdf3+0x6c4>
40089814:	2c48b03a 	or	r4,r5,r17
40089818:	20005526 	beq	r4,zero,40089970 <__subdf3+0x7b8>
4008981c:	0084303a 	nor	r2,zero,r2
40089820:	1000511e 	bne	r2,zero,40089968 <__subdf3+0x7b0>
40089824:	89a3883a 	add	r17,r17,r6
40089828:	194b883a 	add	r5,r3,r5
4008982c:	898d803a 	cmpltu	r6,r17,r6
40089830:	298b883a 	add	r5,r5,r6
40089834:	5021883a 	mov	r16,r10
40089838:	003efc06 	br	4008942c <__alt_mem_epcs+0xfff4842c>
4008983c:	1000341e 	bne	r2,zero,40089910 <__subdf3+0x758>
40089840:	1984b03a 	or	r2,r3,r6
40089844:	10006f26 	beq	r2,zero,40089a04 <__subdf3+0x84c>
40089848:	180b883a 	mov	r5,r3
4008984c:	3023883a 	mov	r17,r6
40089850:	3825883a 	mov	r18,r7
40089854:	0401ffc4 	movi	r16,2047
40089858:	003e7a06 	br	40089244 <__alt_mem_epcs+0xfff48244>
4008985c:	2c62b03a 	or	r17,r5,r17
40089860:	8822c03a 	cmpne	r17,r17,zero
40089864:	0005883a 	mov	r2,zero
40089868:	003f8a06 	br	40089694 <__alt_mem_epcs+0xfff48694>
4008986c:	3821883a 	mov	r16,r7
40089870:	000b883a 	mov	r5,zero
40089874:	0023883a 	mov	r17,zero
40089878:	003ed206 	br	400893c4 <__alt_mem_epcs+0xfff483c4>
4008987c:	0101ffc4 	movi	r4,2047
40089880:	51003b26 	beq	r10,r4,40089970 <__subdf3+0x7b8>
40089884:	0085c83a 	sub	r2,zero,r2
40089888:	29402034 	orhi	r5,r5,128
4008988c:	01000e04 	movi	r4,56
40089890:	20806216 	blt	r4,r2,40089a1c <__subdf3+0x864>
40089894:	010007c4 	movi	r4,31
40089898:	20806b16 	blt	r4,r2,40089a48 <__subdf3+0x890>
4008989c:	01000804 	movi	r4,32
400898a0:	2089c83a 	sub	r4,r4,r2
400898a4:	2912983a 	sll	r9,r5,r4
400898a8:	888ed83a 	srl	r7,r17,r2
400898ac:	8908983a 	sll	r4,r17,r4
400898b0:	2884d83a 	srl	r2,r5,r2
400898b4:	49e2b03a 	or	r17,r9,r7
400898b8:	2008c03a 	cmpne	r4,r4,zero
400898bc:	8922b03a 	or	r17,r17,r4
400898c0:	89a3883a 	add	r17,r17,r6
400898c4:	10c5883a 	add	r2,r2,r3
400898c8:	898d803a 	cmpltu	r6,r17,r6
400898cc:	118b883a 	add	r5,r2,r6
400898d0:	5021883a 	mov	r16,r10
400898d4:	003ed506 	br	4008942c <__alt_mem_epcs+0xfff4842c>
400898d8:	1984b03a 	or	r2,r3,r6
400898dc:	103e5926 	beq	r2,zero,40089244 <__alt_mem_epcs+0xfff48244>
400898e0:	8989c83a 	sub	r4,r17,r6
400898e4:	8911803a 	cmpltu	r8,r17,r4
400898e8:	28c5c83a 	sub	r2,r5,r3
400898ec:	1205c83a 	sub	r2,r2,r8
400898f0:	1200202c 	andhi	r8,r2,128
400898f4:	403ef926 	beq	r8,zero,400894dc <__alt_mem_epcs+0xfff484dc>
400898f8:	3463c83a 	sub	r17,r6,r17
400898fc:	194bc83a 	sub	r5,r3,r5
40089900:	344d803a 	cmpltu	r6,r6,r17
40089904:	298bc83a 	sub	r5,r5,r6
40089908:	3825883a 	mov	r18,r7
4008990c:	003e4d06 	br	40089244 <__alt_mem_epcs+0xfff48244>
40089910:	1984b03a 	or	r2,r3,r6
40089914:	10002b26 	beq	r2,zero,400899c4 <__subdf3+0x80c>
40089918:	2808d0fa 	srli	r4,r5,3
4008991c:	8822d0fa 	srli	r17,r17,3
40089920:	280a977a 	slli	r5,r5,29
40089924:	2080022c 	andhi	r2,r4,8
40089928:	2c62b03a 	or	r17,r5,r17
4008992c:	10000826 	beq	r2,zero,40089950 <__subdf3+0x798>
40089930:	1810d0fa 	srli	r8,r3,3
40089934:	4080022c 	andhi	r2,r8,8
40089938:	1000051e 	bne	r2,zero,40089950 <__subdf3+0x798>
4008993c:	300cd0fa 	srli	r6,r6,3
40089940:	1804977a 	slli	r2,r3,29
40089944:	4009883a 	mov	r4,r8
40089948:	3825883a 	mov	r18,r7
4008994c:	11a2b03a 	or	r17,r2,r6
40089950:	880ad77a 	srli	r5,r17,29
40089954:	200890fa 	slli	r4,r4,3
40089958:	882290fa 	slli	r17,r17,3
4008995c:	0401ffc4 	movi	r16,2047
40089960:	290ab03a 	or	r5,r5,r4
40089964:	003e3706 	br	40089244 <__alt_mem_epcs+0xfff48244>
40089968:	0101ffc4 	movi	r4,2047
4008996c:	513fc71e 	bne	r10,r4,4008988c <__alt_mem_epcs+0xfff4888c>
40089970:	180b883a 	mov	r5,r3
40089974:	3023883a 	mov	r17,r6
40089978:	5021883a 	mov	r16,r10
4008997c:	003e3106 	br	40089244 <__alt_mem_epcs+0xfff48244>
40089980:	10002d26 	beq	r2,zero,40089a38 <__subdf3+0x880>
40089984:	1984b03a 	or	r2,r3,r6
40089988:	10000e26 	beq	r2,zero,400899c4 <__subdf3+0x80c>
4008998c:	2808d0fa 	srli	r4,r5,3
40089990:	8822d0fa 	srli	r17,r17,3
40089994:	280a977a 	slli	r5,r5,29
40089998:	2080022c 	andhi	r2,r4,8
4008999c:	2c62b03a 	or	r17,r5,r17
400899a0:	103feb26 	beq	r2,zero,40089950 <__alt_mem_epcs+0xfff48950>
400899a4:	180ed0fa 	srli	r7,r3,3
400899a8:	3880022c 	andhi	r2,r7,8
400899ac:	103fe81e 	bne	r2,zero,40089950 <__alt_mem_epcs+0xfff48950>
400899b0:	300cd0fa 	srli	r6,r6,3
400899b4:	1804977a 	slli	r2,r3,29
400899b8:	3809883a 	mov	r4,r7
400899bc:	11a2b03a 	or	r17,r2,r6
400899c0:	003fe306 	br	40089950 <__alt_mem_epcs+0xfff48950>
400899c4:	0401ffc4 	movi	r16,2047
400899c8:	003e1e06 	br	40089244 <__alt_mem_epcs+0xfff48244>
400899cc:	0005883a 	mov	r2,zero
400899d0:	003f8306 	br	400897e0 <__alt_mem_epcs+0xfff487e0>
400899d4:	113ff804 	addi	r4,r2,-32
400899d8:	02000804 	movi	r8,32
400899dc:	2908d83a 	srl	r4,r5,r4
400899e0:	12002526 	beq	r2,r8,40089a78 <__subdf3+0x8c0>
400899e4:	02001004 	movi	r8,64
400899e8:	4085c83a 	sub	r2,r8,r2
400899ec:	288a983a 	sll	r5,r5,r2
400899f0:	2c62b03a 	or	r17,r5,r17
400899f4:	8822c03a 	cmpne	r17,r17,zero
400899f8:	8922b03a 	or	r17,r17,r4
400899fc:	0005883a 	mov	r2,zero
40089a00:	003f2406 	br	40089694 <__alt_mem_epcs+0xfff48694>
40089a04:	01402034 	movhi	r5,128
40089a08:	0011883a 	mov	r8,zero
40089a0c:	297fffc4 	addi	r5,r5,-1
40089a10:	047ffe04 	movi	r17,-8
40089a14:	0401ffc4 	movi	r16,2047
40089a18:	003e6a06 	br	400893c4 <__alt_mem_epcs+0xfff483c4>
40089a1c:	2c62b03a 	or	r17,r5,r17
40089a20:	8822c03a 	cmpne	r17,r17,zero
40089a24:	0005883a 	mov	r2,zero
40089a28:	003fa506 	br	400898c0 <__alt_mem_epcs+0xfff488c0>
40089a2c:	180b883a 	mov	r5,r3
40089a30:	3023883a 	mov	r17,r6
40089a34:	003e0306 	br	40089244 <__alt_mem_epcs+0xfff48244>
40089a38:	180b883a 	mov	r5,r3
40089a3c:	3023883a 	mov	r17,r6
40089a40:	0401ffc4 	movi	r16,2047
40089a44:	003dff06 	br	40089244 <__alt_mem_epcs+0xfff48244>
40089a48:	113ff804 	addi	r4,r2,-32
40089a4c:	01c00804 	movi	r7,32
40089a50:	2908d83a 	srl	r4,r5,r4
40089a54:	11c00a26 	beq	r2,r7,40089a80 <__subdf3+0x8c8>
40089a58:	01c01004 	movi	r7,64
40089a5c:	3885c83a 	sub	r2,r7,r2
40089a60:	288a983a 	sll	r5,r5,r2
40089a64:	2c62b03a 	or	r17,r5,r17
40089a68:	8822c03a 	cmpne	r17,r17,zero
40089a6c:	8922b03a 	or	r17,r17,r4
40089a70:	0005883a 	mov	r2,zero
40089a74:	003f9206 	br	400898c0 <__alt_mem_epcs+0xfff488c0>
40089a78:	000b883a 	mov	r5,zero
40089a7c:	003fdc06 	br	400899f0 <__alt_mem_epcs+0xfff489f0>
40089a80:	000b883a 	mov	r5,zero
40089a84:	003ff706 	br	40089a64 <__alt_mem_epcs+0xfff48a64>

40089a88 <__fixdfsi>:
40089a88:	2806d53a 	srli	r3,r5,20
40089a8c:	00800434 	movhi	r2,16
40089a90:	10bfffc4 	addi	r2,r2,-1
40089a94:	18c1ffcc 	andi	r3,r3,2047
40089a98:	0180ff84 	movi	r6,1022
40089a9c:	2884703a 	and	r2,r5,r2
40089aa0:	280ad7fa 	srli	r5,r5,31
40089aa4:	30c0130e 	bge	r6,r3,40089af4 <__fixdfsi+0x6c>
40089aa8:	01810744 	movi	r6,1053
40089aac:	30c00d16 	blt	r6,r3,40089ae4 <__fixdfsi+0x5c>
40089ab0:	01810cc4 	movi	r6,1075
40089ab4:	30cdc83a 	sub	r6,r6,r3
40089ab8:	01c007c4 	movi	r7,31
40089abc:	10800434 	orhi	r2,r2,16
40089ac0:	39800e0e 	bge	r7,r6,40089afc <__fixdfsi+0x74>
40089ac4:	010104c4 	movi	r4,1043
40089ac8:	20c7c83a 	sub	r3,r4,r3
40089acc:	10c6d83a 	srl	r3,r2,r3
40089ad0:	29403fcc 	andi	r5,r5,255
40089ad4:	0145c83a 	sub	r2,zero,r5
40089ad8:	1884f03a 	xor	r2,r3,r2
40089adc:	1145883a 	add	r2,r2,r5
40089ae0:	f800283a 	ret
40089ae4:	00a00034 	movhi	r2,32768
40089ae8:	10bfffc4 	addi	r2,r2,-1
40089aec:	2885883a 	add	r2,r5,r2
40089af0:	f800283a 	ret
40089af4:	0005883a 	mov	r2,zero
40089af8:	f800283a 	ret
40089afc:	18fefb44 	addi	r3,r3,-1043
40089b00:	2188d83a 	srl	r4,r4,r6
40089b04:	10c6983a 	sll	r3,r2,r3
40089b08:	20c6b03a 	or	r3,r4,r3
40089b0c:	003ff006 	br	40089ad0 <__alt_mem_epcs+0xfff48ad0>

40089b10 <__floatsidf>:
40089b10:	defffd04 	addi	sp,sp,-12
40089b14:	dc400115 	stw	r17,4(sp)
40089b18:	dfc00215 	stw	ra,8(sp)
40089b1c:	dc000015 	stw	r16,0(sp)
40089b20:	2023883a 	mov	r17,r4
40089b24:	20001426 	beq	r4,zero,40089b78 <__floatsidf+0x68>
40089b28:	2020d7fa 	srli	r16,r4,31
40089b2c:	80000126 	beq	r16,zero,40089b34 <__floatsidf+0x24>
40089b30:	0123c83a 	sub	r17,zero,r4
40089b34:	8809883a 	mov	r4,r17
40089b38:	0089be00 	call	40089be0 <__clzsi2>
40089b3c:	01410784 	movi	r5,1054
40089b40:	00c00284 	movi	r3,10
40089b44:	288bc83a 	sub	r5,r5,r2
40089b48:	18801c16 	blt	r3,r2,40089bbc <__floatsidf+0xac>
40089b4c:	00c002c4 	movi	r3,11
40089b50:	1887c83a 	sub	r3,r3,r2
40089b54:	88c8d83a 	srl	r4,r17,r3
40089b58:	00c00434 	movhi	r3,16
40089b5c:	18ffffc4 	addi	r3,r3,-1
40089b60:	10800544 	addi	r2,r2,21
40089b64:	20c8703a 	and	r4,r4,r3
40089b68:	8884983a 	sll	r2,r17,r2
40089b6c:	28c1ffcc 	andi	r3,r5,2047
40089b70:	800d883a 	mov	r6,r16
40089b74:	00000406 	br	40089b88 <__floatsidf+0x78>
40089b78:	000d883a 	mov	r6,zero
40089b7c:	0007883a 	mov	r3,zero
40089b80:	0009883a 	mov	r4,zero
40089b84:	0005883a 	mov	r2,zero
40089b88:	180a953a 	slli	r5,r3,20
40089b8c:	31803fcc 	andi	r6,r6,255
40089b90:	00c00434 	movhi	r3,16
40089b94:	300c97fa 	slli	r6,r6,31
40089b98:	18ffffc4 	addi	r3,r3,-1
40089b9c:	20c6703a 	and	r3,r4,r3
40089ba0:	1946b03a 	or	r3,r3,r5
40089ba4:	1986b03a 	or	r3,r3,r6
40089ba8:	dfc00217 	ldw	ra,8(sp)
40089bac:	dc400117 	ldw	r17,4(sp)
40089bb0:	dc000017 	ldw	r16,0(sp)
40089bb4:	dec00304 	addi	sp,sp,12
40089bb8:	f800283a 	ret
40089bbc:	10fffd44 	addi	r3,r2,-11
40089bc0:	88c8983a 	sll	r4,r17,r3
40089bc4:	00800434 	movhi	r2,16
40089bc8:	10bfffc4 	addi	r2,r2,-1
40089bcc:	2088703a 	and	r4,r4,r2
40089bd0:	28c1ffcc 	andi	r3,r5,2047
40089bd4:	800d883a 	mov	r6,r16
40089bd8:	0005883a 	mov	r2,zero
40089bdc:	003fea06 	br	40089b88 <__alt_mem_epcs+0xfff48b88>

40089be0 <__clzsi2>:
40089be0:	00bfffd4 	movui	r2,65535
40089be4:	11000b36 	bltu	r2,r4,40089c14 <__clzsi2+0x34>
40089be8:	00803fc4 	movi	r2,255
40089bec:	1100122e 	bgeu	r2,r4,40089c38 <__clzsi2+0x58>
40089bf0:	00c00204 	movi	r3,8
40089bf4:	01400604 	movi	r5,24
40089bf8:	20c8d83a 	srl	r4,r4,r3
40089bfc:	009002b4 	movhi	r2,16394
40089c00:	10a81504 	addi	r2,r2,-24492
40089c04:	1109883a 	add	r4,r2,r4
40089c08:	20800003 	ldbu	r2,0(r4)
40089c0c:	2885c83a 	sub	r2,r5,r2
40089c10:	f800283a 	ret
40089c14:	00804034 	movhi	r2,256
40089c18:	10bfffc4 	addi	r2,r2,-1
40089c1c:	11000336 	bltu	r2,r4,40089c2c <__clzsi2+0x4c>
40089c20:	00c00404 	movi	r3,16
40089c24:	180b883a 	mov	r5,r3
40089c28:	003ff306 	br	40089bf8 <__alt_mem_epcs+0xfff48bf8>
40089c2c:	00c00604 	movi	r3,24
40089c30:	01400204 	movi	r5,8
40089c34:	003ff006 	br	40089bf8 <__alt_mem_epcs+0xfff48bf8>
40089c38:	0007883a 	mov	r3,zero
40089c3c:	01400804 	movi	r5,32
40089c40:	003fed06 	br	40089bf8 <__alt_mem_epcs+0xfff48bf8>

40089c44 <_printf_r>:
40089c44:	defffd04 	addi	sp,sp,-12
40089c48:	dfc00015 	stw	ra,0(sp)
40089c4c:	d9800115 	stw	r6,4(sp)
40089c50:	d9c00215 	stw	r7,8(sp)
40089c54:	280d883a 	mov	r6,r5
40089c58:	21400217 	ldw	r5,8(r4)
40089c5c:	d9c00104 	addi	r7,sp,4
40089c60:	0089e300 	call	40089e30 <___vfprintf_internal_r>
40089c64:	dfc00017 	ldw	ra,0(sp)
40089c68:	dec00304 	addi	sp,sp,12
40089c6c:	f800283a 	ret

40089c70 <printf>:
40089c70:	defffc04 	addi	sp,sp,-16
40089c74:	dfc00015 	stw	ra,0(sp)
40089c78:	d9400115 	stw	r5,4(sp)
40089c7c:	d9800215 	stw	r6,8(sp)
40089c80:	d9c00315 	stw	r7,12(sp)
40089c84:	009002b4 	movhi	r2,16394
40089c88:	10afeb04 	addi	r2,r2,-16468
40089c8c:	10800017 	ldw	r2,0(r2)
40089c90:	200b883a 	mov	r5,r4
40089c94:	d9800104 	addi	r6,sp,4
40089c98:	11000217 	ldw	r4,8(r2)
40089c9c:	008be2c0 	call	4008be2c <__vfprintf_internal>
40089ca0:	dfc00017 	ldw	ra,0(sp)
40089ca4:	dec00404 	addi	sp,sp,16
40089ca8:	f800283a 	ret

40089cac <_putchar_r>:
40089cac:	21800217 	ldw	r6,8(r4)
40089cb0:	00907341 	jmpi	40090734 <_putc_r>

40089cb4 <putchar>:
40089cb4:	009002b4 	movhi	r2,16394
40089cb8:	10afeb04 	addi	r2,r2,-16468
40089cbc:	200b883a 	mov	r5,r4
40089cc0:	11000017 	ldw	r4,0(r2)
40089cc4:	21800217 	ldw	r6,8(r4)
40089cc8:	00907341 	jmpi	40090734 <_putc_r>

40089ccc <_puts_r>:
40089ccc:	defff604 	addi	sp,sp,-40
40089cd0:	dc000715 	stw	r16,28(sp)
40089cd4:	2021883a 	mov	r16,r4
40089cd8:	2809883a 	mov	r4,r5
40089cdc:	dc400815 	stw	r17,32(sp)
40089ce0:	dfc00915 	stw	ra,36(sp)
40089ce4:	2823883a 	mov	r17,r5
40089ce8:	0089d980 	call	40089d98 <strlen>
40089cec:	00d002b4 	movhi	r3,16394
40089cf0:	18efeb04 	addi	r3,r3,-16468
40089cf4:	18c00017 	ldw	r3,0(r3)
40089cf8:	11000044 	addi	r4,r2,1
40089cfc:	d8800115 	stw	r2,4(sp)
40089d00:	18c00217 	ldw	r3,8(r3)
40089d04:	015002b4 	movhi	r5,16394
40089d08:	29685504 	addi	r5,r5,-24236
40089d0c:	1880030b 	ldhu	r2,12(r3)
40089d10:	d9400215 	stw	r5,8(sp)
40089d14:	d9000615 	stw	r4,24(sp)
40089d18:	01400044 	movi	r5,1
40089d1c:	01000084 	movi	r4,2
40089d20:	d9000515 	stw	r4,20(sp)
40089d24:	dc400015 	stw	r17,0(sp)
40089d28:	d9400315 	stw	r5,12(sp)
40089d2c:	dec00415 	stw	sp,16(sp)
40089d30:	1108000c 	andi	r4,r2,8192
40089d34:	2000061e 	bne	r4,zero,40089d50 <_puts_r+0x84>
40089d38:	19401917 	ldw	r5,100(r3)
40089d3c:	0137ffc4 	movi	r4,-8193
40089d40:	10880014 	ori	r2,r2,8192
40089d44:	2908703a 	and	r4,r5,r4
40089d48:	1880030d 	sth	r2,12(r3)
40089d4c:	19001915 	stw	r4,100(r3)
40089d50:	81400217 	ldw	r5,8(r16)
40089d54:	8009883a 	mov	r4,r16
40089d58:	d9800404 	addi	r6,sp,16
40089d5c:	008e2b40 	call	4008e2b4 <__sfvwrite_r>
40089d60:	1000061e 	bne	r2,zero,40089d7c <_puts_r+0xb0>
40089d64:	00800284 	movi	r2,10
40089d68:	dfc00917 	ldw	ra,36(sp)
40089d6c:	dc400817 	ldw	r17,32(sp)
40089d70:	dc000717 	ldw	r16,28(sp)
40089d74:	dec00a04 	addi	sp,sp,40
40089d78:	f800283a 	ret
40089d7c:	00bfffc4 	movi	r2,-1
40089d80:	003ff906 	br	40089d68 <__alt_mem_epcs+0xfff48d68>

40089d84 <puts>:
40089d84:	009002b4 	movhi	r2,16394
40089d88:	10afeb04 	addi	r2,r2,-16468
40089d8c:	200b883a 	mov	r5,r4
40089d90:	11000017 	ldw	r4,0(r2)
40089d94:	0089ccc1 	jmpi	40089ccc <_puts_r>

40089d98 <strlen>:
40089d98:	208000cc 	andi	r2,r4,3
40089d9c:	10002026 	beq	r2,zero,40089e20 <strlen+0x88>
40089da0:	20800007 	ldb	r2,0(r4)
40089da4:	10002026 	beq	r2,zero,40089e28 <strlen+0x90>
40089da8:	2005883a 	mov	r2,r4
40089dac:	00000206 	br	40089db8 <strlen+0x20>
40089db0:	10c00007 	ldb	r3,0(r2)
40089db4:	18001826 	beq	r3,zero,40089e18 <strlen+0x80>
40089db8:	10800044 	addi	r2,r2,1
40089dbc:	10c000cc 	andi	r3,r2,3
40089dc0:	183ffb1e 	bne	r3,zero,40089db0 <__alt_mem_epcs+0xfff48db0>
40089dc4:	10c00017 	ldw	r3,0(r2)
40089dc8:	01ffbff4 	movhi	r7,65279
40089dcc:	39ffbfc4 	addi	r7,r7,-257
40089dd0:	00ca303a 	nor	r5,zero,r3
40089dd4:	01a02074 	movhi	r6,32897
40089dd8:	19c7883a 	add	r3,r3,r7
40089ddc:	31a02004 	addi	r6,r6,-32640
40089de0:	1946703a 	and	r3,r3,r5
40089de4:	1986703a 	and	r3,r3,r6
40089de8:	1800091e 	bne	r3,zero,40089e10 <strlen+0x78>
40089dec:	10800104 	addi	r2,r2,4
40089df0:	10c00017 	ldw	r3,0(r2)
40089df4:	19cb883a 	add	r5,r3,r7
40089df8:	00c6303a 	nor	r3,zero,r3
40089dfc:	28c6703a 	and	r3,r5,r3
40089e00:	1986703a 	and	r3,r3,r6
40089e04:	183ff926 	beq	r3,zero,40089dec <__alt_mem_epcs+0xfff48dec>
40089e08:	00000106 	br	40089e10 <strlen+0x78>
40089e0c:	10800044 	addi	r2,r2,1
40089e10:	10c00007 	ldb	r3,0(r2)
40089e14:	183ffd1e 	bne	r3,zero,40089e0c <__alt_mem_epcs+0xfff48e0c>
40089e18:	1105c83a 	sub	r2,r2,r4
40089e1c:	f800283a 	ret
40089e20:	2005883a 	mov	r2,r4
40089e24:	003fe706 	br	40089dc4 <__alt_mem_epcs+0xfff48dc4>
40089e28:	0005883a 	mov	r2,zero
40089e2c:	f800283a 	ret

40089e30 <___vfprintf_internal_r>:
40089e30:	defeb604 	addi	sp,sp,-1320
40089e34:	dfc14915 	stw	ra,1316(sp)
40089e38:	ddc14715 	stw	r23,1308(sp)
40089e3c:	dd814615 	stw	r22,1304(sp)
40089e40:	282f883a 	mov	r23,r5
40089e44:	202d883a 	mov	r22,r4
40089e48:	d9812a15 	stw	r6,1192(sp)
40089e4c:	d9c12d15 	stw	r7,1204(sp)
40089e50:	df014815 	stw	fp,1312(sp)
40089e54:	dd414515 	stw	r21,1300(sp)
40089e58:	dd014415 	stw	r20,1296(sp)
40089e5c:	dcc14315 	stw	r19,1292(sp)
40089e60:	dc814215 	stw	r18,1288(sp)
40089e64:	dc414115 	stw	r17,1284(sp)
40089e68:	dc014015 	stw	r16,1280(sp)
40089e6c:	008e9740 	call	4008e974 <_localeconv_r>
40089e70:	10800017 	ldw	r2,0(r2)
40089e74:	1009883a 	mov	r4,r2
40089e78:	d8813515 	stw	r2,1236(sp)
40089e7c:	0089d980 	call	40089d98 <strlen>
40089e80:	d8813815 	stw	r2,1248(sp)
40089e84:	b0000226 	beq	r22,zero,40089e90 <___vfprintf_internal_r+0x60>
40089e88:	b0800e17 	ldw	r2,56(r22)
40089e8c:	10010426 	beq	r2,zero,4008a2a0 <___vfprintf_internal_r+0x470>
40089e90:	b8c0030b 	ldhu	r3,12(r23)
40089e94:	1908000c 	andi	r4,r3,8192
40089e98:	1805883a 	mov	r2,r3
40089e9c:	2000071e 	bne	r4,zero,40089ebc <___vfprintf_internal_r+0x8c>
40089ea0:	b9001917 	ldw	r4,100(r23)
40089ea4:	18880014 	ori	r2,r3,8192
40089ea8:	00f7ffc4 	movi	r3,-8193
40089eac:	20c8703a 	and	r4,r4,r3
40089eb0:	b880030d 	sth	r2,12(r23)
40089eb4:	1007883a 	mov	r3,r2
40089eb8:	b9001915 	stw	r4,100(r23)
40089ebc:	1100020c 	andi	r4,r2,8
40089ec0:	2000a726 	beq	r4,zero,4008a160 <___vfprintf_internal_r+0x330>
40089ec4:	b9000417 	ldw	r4,16(r23)
40089ec8:	2000a526 	beq	r4,zero,4008a160 <___vfprintf_internal_r+0x330>
40089ecc:	1080068c 	andi	r2,r2,26
40089ed0:	01000284 	movi	r4,10
40089ed4:	1100ab26 	beq	r2,r4,4008a184 <___vfprintf_internal_r+0x354>
40089ed8:	dac10e04 	addi	r11,sp,1080
40089edc:	db010dc4 	addi	r12,sp,1079
40089ee0:	d8800404 	addi	r2,sp,16
40089ee4:	051002b4 	movhi	r20,16394
40089ee8:	dac12815 	stw	r11,1184(sp)
40089eec:	5b17c83a 	sub	r11,r11,r12
40089ef0:	a5286684 	addi	r20,r20,-24166
40089ef4:	db012915 	stw	r12,1188(sp)
40089ef8:	d8811e15 	stw	r2,1144(sp)
40089efc:	d8012015 	stw	zero,1152(sp)
40089f00:	d8011f15 	stw	zero,1148(sp)
40089f04:	d8013315 	stw	zero,1228(sp)
40089f08:	d8013715 	stw	zero,1244(sp)
40089f0c:	d8013915 	stw	zero,1252(sp)
40089f10:	d8013b15 	stw	zero,1260(sp)
40089f14:	d8013a15 	stw	zero,1256(sp)
40089f18:	d8012f15 	stw	zero,1212(sp)
40089f1c:	1011883a 	mov	r8,r2
40089f20:	dac13c15 	stw	r11,1264(sp)
40089f24:	db012a17 	ldw	r12,1192(sp)
40089f28:	60800007 	ldb	r2,0(r12)
40089f2c:	1000df26 	beq	r2,zero,4008a2ac <___vfprintf_internal_r+0x47c>
40089f30:	00c00944 	movi	r3,37
40089f34:	10c0dd26 	beq	r2,r3,4008a2ac <___vfprintf_internal_r+0x47c>
40089f38:	6021883a 	mov	r16,r12
40089f3c:	00000106 	br	40089f44 <___vfprintf_internal_r+0x114>
40089f40:	10c08426 	beq	r2,r3,4008a154 <___vfprintf_internal_r+0x324>
40089f44:	84000044 	addi	r16,r16,1
40089f48:	80800007 	ldb	r2,0(r16)
40089f4c:	103ffc1e 	bne	r2,zero,40089f40 <__alt_mem_epcs+0xfff48f40>
40089f50:	dac12a17 	ldw	r11,1192(sp)
40089f54:	82e3c83a 	sub	r17,r16,r11
40089f58:	88000f26 	beq	r17,zero,40089f98 <___vfprintf_internal_r+0x168>
40089f5c:	d8c12017 	ldw	r3,1152(sp)
40089f60:	d8811f17 	ldw	r2,1148(sp)
40089f64:	dac12a17 	ldw	r11,1192(sp)
40089f68:	1c47883a 	add	r3,r3,r17
40089f6c:	10800044 	addi	r2,r2,1
40089f70:	d8c12015 	stw	r3,1152(sp)
40089f74:	42c00015 	stw	r11,0(r8)
40089f78:	44400115 	stw	r17,4(r8)
40089f7c:	d8811f15 	stw	r2,1148(sp)
40089f80:	00c001c4 	movi	r3,7
40089f84:	1880b416 	blt	r3,r2,4008a258 <___vfprintf_internal_r+0x428>
40089f88:	42000204 	addi	r8,r8,8
40089f8c:	db012f17 	ldw	r12,1212(sp)
40089f90:	6459883a 	add	r12,r12,r17
40089f94:	db012f15 	stw	r12,1212(sp)
40089f98:	80800007 	ldb	r2,0(r16)
40089f9c:	1000b526 	beq	r2,zero,4008a274 <___vfprintf_internal_r+0x444>
40089fa0:	80800044 	addi	r2,r16,1
40089fa4:	84000047 	ldb	r16,1(r16)
40089fa8:	d8012785 	stb	zero,1182(sp)
40089fac:	000d883a 	mov	r6,zero
40089fb0:	027fffc4 	movi	r9,-1
40089fb4:	d8012e15 	stw	zero,1208(sp)
40089fb8:	0023883a 	mov	r17,zero
40089fbc:	01001604 	movi	r4,88
40089fc0:	01400244 	movi	r5,9
40089fc4:	02800a84 	movi	r10,42
40089fc8:	01c01b04 	movi	r7,108
40089fcc:	10c00044 	addi	r3,r2,1
40089fd0:	80bff804 	addi	r2,r16,-32
40089fd4:	2082f236 	bltu	r4,r2,4008aba0 <___vfprintf_internal_r+0xd70>
40089fd8:	100490ba 	slli	r2,r2,2
40089fdc:	02d00274 	movhi	r11,16393
40089fe0:	5ae7fc04 	addi	r11,r11,-24592
40089fe4:	12c5883a 	add	r2,r2,r11
40089fe8:	10800017 	ldw	r2,0(r2)
40089fec:	1000683a 	jmp	r2
40089ff0:	4008a9e8 	cmpgeui	zero,r8,8871
40089ff4:	4008aba0 	cmpeqi	zero,r8,8878
40089ff8:	4008aba0 	cmpeqi	zero,r8,8878
40089ffc:	4008aa08 	cmpgei	zero,r8,8872
4008a000:	4008aba0 	cmpeqi	zero,r8,8878
4008a004:	4008aba0 	cmpeqi	zero,r8,8878
4008a008:	4008aba0 	cmpeqi	zero,r8,8878
4008a00c:	4008aba0 	cmpeqi	zero,r8,8878
4008a010:	4008aba0 	cmpeqi	zero,r8,8878
4008a014:	4008aba0 	cmpeqi	zero,r8,8878
4008a018:	4008ab64 	muli	zero,r8,8877
4008a01c:	4008ab90 	cmplti	zero,r8,8878
4008a020:	4008aba0 	cmpeqi	zero,r8,8878
4008a024:	4008a2b4 	orhi	zero,r8,8842
4008a028:	4008a2c4 	addi	zero,r8,8843
4008a02c:	4008aba0 	cmpeqi	zero,r8,8878
4008a030:	4008a304 	addi	zero,r8,8844
4008a034:	4008a7f8 	rdprs	zero,r8,8863
4008a038:	4008a7f8 	rdprs	zero,r8,8863
4008a03c:	4008a7f8 	rdprs	zero,r8,8863
4008a040:	4008a7f8 	rdprs	zero,r8,8863
4008a044:	4008a7f8 	rdprs	zero,r8,8863
4008a048:	4008a7f8 	rdprs	zero,r8,8863
4008a04c:	4008a7f8 	rdprs	zero,r8,8863
4008a050:	4008a7f8 	rdprs	zero,r8,8863
4008a054:	4008a7f8 	rdprs	zero,r8,8863
4008a058:	4008aba0 	cmpeqi	zero,r8,8878
4008a05c:	4008aba0 	cmpeqi	zero,r8,8878
4008a060:	4008aba0 	cmpeqi	zero,r8,8878
4008a064:	4008aba0 	cmpeqi	zero,r8,8878
4008a068:	4008aba0 	cmpeqi	zero,r8,8878
4008a06c:	4008aba0 	cmpeqi	zero,r8,8878
4008a070:	4008aba0 	cmpeqi	zero,r8,8878
4008a074:	4008aba0 	cmpeqi	zero,r8,8878
4008a078:	4008aba0 	cmpeqi	zero,r8,8878
4008a07c:	4008aba0 	cmpeqi	zero,r8,8878
4008a080:	4008a82c 	andhi	zero,r8,8864
4008a084:	4008a314 	ori	zero,r8,8844
4008a088:	4008aba0 	cmpeqi	zero,r8,8878
4008a08c:	4008a314 	ori	zero,r8,8844
4008a090:	4008aba0 	cmpeqi	zero,r8,8878
4008a094:	4008aba0 	cmpeqi	zero,r8,8878
4008a098:	4008aba0 	cmpeqi	zero,r8,8878
4008a09c:	4008aba0 	cmpeqi	zero,r8,8878
4008a0a0:	4008a3b8 	rdprs	zero,r8,8846
4008a0a4:	4008aba0 	cmpeqi	zero,r8,8878
4008a0a8:	4008aba0 	cmpeqi	zero,r8,8878
4008a0ac:	4008a3c8 	cmpgei	zero,r8,8847
4008a0b0:	4008aba0 	cmpeqi	zero,r8,8878
4008a0b4:	4008aba0 	cmpeqi	zero,r8,8878
4008a0b8:	4008aba0 	cmpeqi	zero,r8,8878
4008a0bc:	4008aba0 	cmpeqi	zero,r8,8878
4008a0c0:	4008aba0 	cmpeqi	zero,r8,8878
4008a0c4:	4008a7c4 	addi	zero,r8,8863
4008a0c8:	4008aba0 	cmpeqi	zero,r8,8878
4008a0cc:	4008aba0 	cmpeqi	zero,r8,8878
4008a0d0:	4008a874 	orhi	zero,r8,8865
4008a0d4:	4008aba0 	cmpeqi	zero,r8,8878
4008a0d8:	4008aba0 	cmpeqi	zero,r8,8878
4008a0dc:	4008aba0 	cmpeqi	zero,r8,8878
4008a0e0:	4008aba0 	cmpeqi	zero,r8,8878
4008a0e4:	4008aba0 	cmpeqi	zero,r8,8878
4008a0e8:	4008aba0 	cmpeqi	zero,r8,8878
4008a0ec:	4008aba0 	cmpeqi	zero,r8,8878
4008a0f0:	4008aba0 	cmpeqi	zero,r8,8878
4008a0f4:	4008aba0 	cmpeqi	zero,r8,8878
4008a0f8:	4008aba0 	cmpeqi	zero,r8,8878
4008a0fc:	4008aa68 	cmpgeui	zero,r8,8873
4008a100:	4008aa18 	cmpnei	zero,r8,8872
4008a104:	4008a314 	ori	zero,r8,8844
4008a108:	4008a314 	ori	zero,r8,8844
4008a10c:	4008a314 	ori	zero,r8,8844
4008a110:	4008aa58 	cmpnei	zero,r8,8873
4008a114:	4008aa18 	cmpnei	zero,r8,8872
4008a118:	4008aba0 	cmpeqi	zero,r8,8878
4008a11c:	4008aba0 	cmpeqi	zero,r8,8878
4008a120:	4008a960 	cmpeqi	zero,r8,8869
4008a124:	4008aba0 	cmpeqi	zero,r8,8878
4008a128:	4008a974 	orhi	zero,r8,8869
4008a12c:	4008a9a8 	cmpgeui	zero,r8,8870
4008a130:	4008aaa8 	cmpgeui	zero,r8,8874
4008a134:	4008a8d0 	cmplti	zero,r8,8867
4008a138:	4008aba0 	cmpeqi	zero,r8,8878
4008a13c:	4008aaf0 	cmpltui	zero,r8,8875
4008a140:	4008aba0 	cmpeqi	zero,r8,8878
4008a144:	4008a8e0 	cmpeqi	zero,r8,8867
4008a148:	4008aba0 	cmpeqi	zero,r8,8878
4008a14c:	4008aba0 	cmpeqi	zero,r8,8878
4008a150:	4008a920 	cmpeqi	zero,r8,8868
4008a154:	db012a17 	ldw	r12,1192(sp)
4008a158:	8323c83a 	sub	r17,r16,r12
4008a15c:	003f7e06 	br	40089f58 <__alt_mem_epcs+0xfff48f58>
4008a160:	b009883a 	mov	r4,r22
4008a164:	b80b883a 	mov	r5,r23
4008a168:	008be500 	call	4008be50 <__swsetup_r>
4008a16c:	10002d1e 	bne	r2,zero,4008a224 <___vfprintf_internal_r+0x3f4>
4008a170:	b8c0030b 	ldhu	r3,12(r23)
4008a174:	01000284 	movi	r4,10
4008a178:	1805883a 	mov	r2,r3
4008a17c:	1080068c 	andi	r2,r2,26
4008a180:	113f551e 	bne	r2,r4,40089ed8 <__alt_mem_epcs+0xfff48ed8>
4008a184:	b880038b 	ldhu	r2,14(r23)
4008a188:	113fffcc 	andi	r4,r2,65535
4008a18c:	2120001c 	xori	r4,r4,32768
4008a190:	21200004 	addi	r4,r4,-32768
4008a194:	203f5016 	blt	r4,zero,40089ed8 <__alt_mem_epcs+0xfff48ed8>
4008a198:	bac01917 	ldw	r11,100(r23)
4008a19c:	ba800717 	ldw	r10,28(r23)
4008a1a0:	ba400917 	ldw	r9,36(r23)
4008a1a4:	d9812a17 	ldw	r6,1192(sp)
4008a1a8:	d9c12d17 	ldw	r7,1204(sp)
4008a1ac:	02010004 	movi	r8,1024
4008a1b0:	18ffff4c 	andi	r3,r3,65533
4008a1b4:	d881078d 	sth	r2,1054(sp)
4008a1b8:	b009883a 	mov	r4,r22
4008a1bc:	d8800404 	addi	r2,sp,16
4008a1c0:	d9410404 	addi	r5,sp,1040
4008a1c4:	d8c1070d 	sth	r3,1052(sp)
4008a1c8:	dac11d15 	stw	r11,1140(sp)
4008a1cc:	da810b15 	stw	r10,1068(sp)
4008a1d0:	da410d15 	stw	r9,1076(sp)
4008a1d4:	d8810415 	stw	r2,1040(sp)
4008a1d8:	d8810815 	stw	r2,1056(sp)
4008a1dc:	da010615 	stw	r8,1048(sp)
4008a1e0:	da010915 	stw	r8,1060(sp)
4008a1e4:	d8010a15 	stw	zero,1064(sp)
4008a1e8:	0089e300 	call	40089e30 <___vfprintf_internal_r>
4008a1ec:	1021883a 	mov	r16,r2
4008a1f0:	10000416 	blt	r2,zero,4008a204 <___vfprintf_internal_r+0x3d4>
4008a1f4:	b009883a 	mov	r4,r22
4008a1f8:	d9410404 	addi	r5,sp,1040
4008a1fc:	008d8a80 	call	4008d8a8 <_fflush_r>
4008a200:	1006ee1e 	bne	r2,zero,4008bdbc <___vfprintf_internal_r+0x1f8c>
4008a204:	d881070b 	ldhu	r2,1052(sp)
4008a208:	1080100c 	andi	r2,r2,64
4008a20c:	10000326 	beq	r2,zero,4008a21c <___vfprintf_internal_r+0x3ec>
4008a210:	b880030b 	ldhu	r2,12(r23)
4008a214:	10801014 	ori	r2,r2,64
4008a218:	b880030d 	sth	r2,12(r23)
4008a21c:	8005883a 	mov	r2,r16
4008a220:	00000106 	br	4008a228 <___vfprintf_internal_r+0x3f8>
4008a224:	00bfffc4 	movi	r2,-1
4008a228:	dfc14917 	ldw	ra,1316(sp)
4008a22c:	df014817 	ldw	fp,1312(sp)
4008a230:	ddc14717 	ldw	r23,1308(sp)
4008a234:	dd814617 	ldw	r22,1304(sp)
4008a238:	dd414517 	ldw	r21,1300(sp)
4008a23c:	dd014417 	ldw	r20,1296(sp)
4008a240:	dcc14317 	ldw	r19,1292(sp)
4008a244:	dc814217 	ldw	r18,1288(sp)
4008a248:	dc414117 	ldw	r17,1284(sp)
4008a24c:	dc014017 	ldw	r16,1280(sp)
4008a250:	dec14a04 	addi	sp,sp,1320
4008a254:	f800283a 	ret
4008a258:	b009883a 	mov	r4,r22
4008a25c:	b80b883a 	mov	r5,r23
4008a260:	d9811e04 	addi	r6,sp,1144
4008a264:	00911e00 	call	400911e0 <__sprint_r>
4008a268:	1000081e 	bne	r2,zero,4008a28c <___vfprintf_internal_r+0x45c>
4008a26c:	da000404 	addi	r8,sp,16
4008a270:	003f4606 	br	40089f8c <__alt_mem_epcs+0xfff48f8c>
4008a274:	d8812017 	ldw	r2,1152(sp)
4008a278:	10000426 	beq	r2,zero,4008a28c <___vfprintf_internal_r+0x45c>
4008a27c:	b009883a 	mov	r4,r22
4008a280:	b80b883a 	mov	r5,r23
4008a284:	d9811e04 	addi	r6,sp,1144
4008a288:	00911e00 	call	400911e0 <__sprint_r>
4008a28c:	b880030b 	ldhu	r2,12(r23)
4008a290:	1080100c 	andi	r2,r2,64
4008a294:	103fe31e 	bne	r2,zero,4008a224 <__alt_mem_epcs+0xfff49224>
4008a298:	d8812f17 	ldw	r2,1212(sp)
4008a29c:	003fe206 	br	4008a228 <__alt_mem_epcs+0xfff49228>
4008a2a0:	b009883a 	mov	r4,r22
4008a2a4:	008de500 	call	4008de50 <__sinit>
4008a2a8:	003ef906 	br	40089e90 <__alt_mem_epcs+0xfff48e90>
4008a2ac:	dc012a17 	ldw	r16,1192(sp)
4008a2b0:	003f3906 	br	40089f98 <__alt_mem_epcs+0xfff48f98>
4008a2b4:	1805883a 	mov	r2,r3
4008a2b8:	8c400114 	ori	r17,r17,4
4008a2bc:	1c000007 	ldb	r16,0(r3)
4008a2c0:	003f4206 	br	40089fcc <__alt_mem_epcs+0xfff48fcc>
4008a2c4:	1c000007 	ldb	r16,0(r3)
4008a2c8:	18800044 	addi	r2,r3,1
4008a2cc:	8286b326 	beq	r16,r10,4008bd9c <___vfprintf_internal_r+0x1f6c>
4008a2d0:	82fff404 	addi	r11,r16,-48
4008a2d4:	1007883a 	mov	r3,r2
4008a2d8:	0013883a 	mov	r9,zero
4008a2dc:	2aff3c36 	bltu	r5,r11,40089fd0 <__alt_mem_epcs+0xfff48fd0>
4008a2e0:	1c000007 	ldb	r16,0(r3)
4008a2e4:	4a4002a4 	muli	r9,r9,10
4008a2e8:	18c00044 	addi	r3,r3,1
4008a2ec:	5a53883a 	add	r9,r11,r9
4008a2f0:	82fff404 	addi	r11,r16,-48
4008a2f4:	2afffa2e 	bgeu	r5,r11,4008a2e0 <__alt_mem_epcs+0xfff492e0>
4008a2f8:	483f350e 	bge	r9,zero,40089fd0 <__alt_mem_epcs+0xfff48fd0>
4008a2fc:	027fffc4 	movi	r9,-1
4008a300:	003f3306 	br	40089fd0 <__alt_mem_epcs+0xfff48fd0>
4008a304:	8c402014 	ori	r17,r17,128
4008a308:	1805883a 	mov	r2,r3
4008a30c:	1c000007 	ldb	r16,0(r3)
4008a310:	003f2e06 	br	40089fcc <__alt_mem_epcs+0xfff48fcc>
4008a314:	db012d17 	ldw	r12,1204(sp)
4008a318:	dac12d17 	ldw	r11,1204(sp)
4008a31c:	d8c12a15 	stw	r3,1192(sp)
4008a320:	63000017 	ldw	r12,0(r12)
4008a324:	5ac00117 	ldw	r11,4(r11)
4008a328:	d9812785 	stb	r6,1182(sp)
4008a32c:	6009883a 	mov	r4,r12
4008a330:	580b883a 	mov	r5,r11
4008a334:	db013715 	stw	r12,1244(sp)
4008a338:	da013f15 	stw	r8,1276(sp)
4008a33c:	da413e15 	stw	r9,1272(sp)
4008a340:	dac13915 	stw	r11,1252(sp)
4008a344:	0090e3c0 	call	40090e3c <__fpclassifyd>
4008a348:	db012d17 	ldw	r12,1204(sp)
4008a34c:	04800044 	movi	r18,1
4008a350:	da013f17 	ldw	r8,1276(sp)
4008a354:	64c00204 	addi	r19,r12,8
4008a358:	da413e17 	ldw	r9,1272(sp)
4008a35c:	d9013717 	ldw	r4,1244(sp)
4008a360:	d9413917 	ldw	r5,1252(sp)
4008a364:	1484581e 	bne	r2,r18,4008b4c8 <___vfprintf_internal_r+0x1698>
4008a368:	000d883a 	mov	r6,zero
4008a36c:	000f883a 	mov	r7,zero
4008a370:	0094d180 	call	40094d18 <__ledf2>
4008a374:	da013f17 	ldw	r8,1276(sp)
4008a378:	1005ef16 	blt	r2,zero,4008bb38 <___vfprintf_internal_r+0x1d08>
4008a37c:	dd412783 	ldbu	r21,1182(sp)
4008a380:	008011c4 	movi	r2,71
4008a384:	14053b0e 	bge	r2,r16,4008b874 <___vfprintf_internal_r+0x1a44>
4008a388:	00d002b4 	movhi	r3,16394
4008a38c:	18e85704 	addi	r3,r3,-24228
4008a390:	d8c13115 	stw	r3,1220(sp)
4008a394:	02c000c4 	movi	r11,3
4008a398:	00bfdfc4 	movi	r2,-129
4008a39c:	dac12b15 	stw	r11,1196(sp)
4008a3a0:	88a2703a 	and	r17,r17,r2
4008a3a4:	dcc12d15 	stw	r19,1204(sp)
4008a3a8:	5825883a 	mov	r18,r11
4008a3ac:	d8013215 	stw	zero,1224(sp)
4008a3b0:	d8013415 	stw	zero,1232(sp)
4008a3b4:	00003206 	br	4008a480 <___vfprintf_internal_r+0x650>
4008a3b8:	8c400214 	ori	r17,r17,8
4008a3bc:	1805883a 	mov	r2,r3
4008a3c0:	1c000007 	ldb	r16,0(r3)
4008a3c4:	003f0106 	br	40089fcc <__alt_mem_epcs+0xfff48fcc>
4008a3c8:	8c400414 	ori	r17,r17,16
4008a3cc:	d8c12a15 	stw	r3,1192(sp)
4008a3d0:	88c0080c 	andi	r3,r17,32
4008a3d4:	d8812d17 	ldw	r2,1204(sp)
4008a3d8:	18017726 	beq	r3,zero,4008a9b8 <___vfprintf_internal_r+0xb88>
4008a3dc:	db012d17 	ldw	r12,1204(sp)
4008a3e0:	14c00017 	ldw	r19,0(r2)
4008a3e4:	17000117 	ldw	fp,4(r2)
4008a3e8:	63000204 	addi	r12,r12,8
4008a3ec:	db012d15 	stw	r12,1204(sp)
4008a3f0:	0005883a 	mov	r2,zero
4008a3f4:	9f06b03a 	or	r3,r19,fp
4008a3f8:	d8012785 	stb	zero,1182(sp)
4008a3fc:	da413215 	stw	r9,1224(sp)
4008a400:	002b883a 	mov	r21,zero
4008a404:	48000216 	blt	r9,zero,4008a410 <___vfprintf_internal_r+0x5e0>
4008a408:	013fdfc4 	movi	r4,-129
4008a40c:	8922703a 	and	r17,r17,r4
4008a410:	1801ed1e 	bne	r3,zero,4008abc8 <___vfprintf_internal_r+0xd98>
4008a414:	4802e026 	beq	r9,zero,4008af98 <___vfprintf_internal_r+0x1168>
4008a418:	10803fcc 	andi	r2,r2,255
4008a41c:	00c00044 	movi	r3,1
4008a420:	10c20f26 	beq	r2,r3,4008ac60 <___vfprintf_internal_r+0xe30>
4008a424:	00c00084 	movi	r3,2
4008a428:	10c2fd26 	beq	r2,r3,4008b020 <___vfprintf_internal_r+0x11f0>
4008a42c:	d8c10e04 	addi	r3,sp,1080
4008a430:	9808d0fa 	srli	r4,r19,3
4008a434:	e00a977a 	slli	r5,fp,29
4008a438:	e038d0fa 	srli	fp,fp,3
4008a43c:	9cc001cc 	andi	r19,r19,7
4008a440:	98800c04 	addi	r2,r19,48
4008a444:	18ffffc4 	addi	r3,r3,-1
4008a448:	2926b03a 	or	r19,r5,r4
4008a44c:	18800005 	stb	r2,0(r3)
4008a450:	9f08b03a 	or	r4,r19,fp
4008a454:	203ff61e 	bne	r4,zero,4008a430 <__alt_mem_epcs+0xfff49430>
4008a458:	8900004c 	andi	r4,r17,1
4008a45c:	d8c13115 	stw	r3,1220(sp)
4008a460:	2003791e 	bne	r4,zero,4008b248 <___vfprintf_internal_r+0x1418>
4008a464:	dac12817 	ldw	r11,1184(sp)
4008a468:	58e5c83a 	sub	r18,r11,r3
4008a46c:	9005883a 	mov	r2,r18
4008a470:	9240010e 	bge	r18,r9,4008a478 <___vfprintf_internal_r+0x648>
4008a474:	4805883a 	mov	r2,r9
4008a478:	d8812b15 	stw	r2,1196(sp)
4008a47c:	d8013415 	stw	zero,1232(sp)
4008a480:	a8803fcc 	andi	r2,r21,255
4008a484:	1080201c 	xori	r2,r2,128
4008a488:	10bfe004 	addi	r2,r2,-128
4008a48c:	10000326 	beq	r2,zero,4008a49c <___vfprintf_internal_r+0x66c>
4008a490:	db012b17 	ldw	r12,1196(sp)
4008a494:	63000044 	addi	r12,r12,1
4008a498:	db012b15 	stw	r12,1196(sp)
4008a49c:	88c0008c 	andi	r3,r17,2
4008a4a0:	d8c12c15 	stw	r3,1200(sp)
4008a4a4:	18000326 	beq	r3,zero,4008a4b4 <___vfprintf_internal_r+0x684>
4008a4a8:	dac12b17 	ldw	r11,1196(sp)
4008a4ac:	5ac00084 	addi	r11,r11,2
4008a4b0:	dac12b15 	stw	r11,1196(sp)
4008a4b4:	8b00210c 	andi	r12,r17,132
4008a4b8:	db013015 	stw	r12,1216(sp)
4008a4bc:	6001c01e 	bne	r12,zero,4008abc0 <___vfprintf_internal_r+0xd90>
4008a4c0:	dac12e17 	ldw	r11,1208(sp)
4008a4c4:	db012b17 	ldw	r12,1196(sp)
4008a4c8:	5b39c83a 	sub	fp,r11,r12
4008a4cc:	0701bc0e 	bge	zero,fp,4008abc0 <___vfprintf_internal_r+0xd90>
4008a4d0:	02400404 	movi	r9,16
4008a4d4:	d8c12017 	ldw	r3,1152(sp)
4008a4d8:	d8811f17 	ldw	r2,1148(sp)
4008a4dc:	4f05220e 	bge	r9,fp,4008b968 <___vfprintf_internal_r+0x1b38>
4008a4e0:	015002b4 	movhi	r5,16394
4008a4e4:	29686a84 	addi	r5,r5,-24150
4008a4e8:	d9413615 	stw	r5,1240(sp)
4008a4ec:	482b883a 	mov	r21,r9
4008a4f0:	04c001c4 	movi	r19,7
4008a4f4:	00000306 	br	4008a504 <___vfprintf_internal_r+0x6d4>
4008a4f8:	e73ffc04 	addi	fp,fp,-16
4008a4fc:	42000204 	addi	r8,r8,8
4008a500:	af00130e 	bge	r21,fp,4008a550 <___vfprintf_internal_r+0x720>
4008a504:	02d002b4 	movhi	r11,16394
4008a508:	18c00404 	addi	r3,r3,16
4008a50c:	10800044 	addi	r2,r2,1
4008a510:	5ae86a84 	addi	r11,r11,-24150
4008a514:	42c00015 	stw	r11,0(r8)
4008a518:	45400115 	stw	r21,4(r8)
4008a51c:	d8c12015 	stw	r3,1152(sp)
4008a520:	d8811f15 	stw	r2,1148(sp)
4008a524:	98bff40e 	bge	r19,r2,4008a4f8 <__alt_mem_epcs+0xfff494f8>
4008a528:	b009883a 	mov	r4,r22
4008a52c:	b80b883a 	mov	r5,r23
4008a530:	d9811e04 	addi	r6,sp,1144
4008a534:	00911e00 	call	400911e0 <__sprint_r>
4008a538:	103f541e 	bne	r2,zero,4008a28c <__alt_mem_epcs+0xfff4928c>
4008a53c:	e73ffc04 	addi	fp,fp,-16
4008a540:	d8c12017 	ldw	r3,1152(sp)
4008a544:	d8811f17 	ldw	r2,1148(sp)
4008a548:	da000404 	addi	r8,sp,16
4008a54c:	af3fed16 	blt	r21,fp,4008a504 <__alt_mem_epcs+0xfff49504>
4008a550:	db013617 	ldw	r12,1240(sp)
4008a554:	e0c7883a 	add	r3,fp,r3
4008a558:	10800044 	addi	r2,r2,1
4008a55c:	43000015 	stw	r12,0(r8)
4008a560:	47000115 	stw	fp,4(r8)
4008a564:	d8c12015 	stw	r3,1152(sp)
4008a568:	d8811f15 	stw	r2,1148(sp)
4008a56c:	010001c4 	movi	r4,7
4008a570:	2082f416 	blt	r4,r2,4008b144 <___vfprintf_internal_r+0x1314>
4008a574:	d8812787 	ldb	r2,1182(sp)
4008a578:	42000204 	addi	r8,r8,8
4008a57c:	10000c26 	beq	r2,zero,4008a5b0 <___vfprintf_internal_r+0x780>
4008a580:	d8811f17 	ldw	r2,1148(sp)
4008a584:	d9012784 	addi	r4,sp,1182
4008a588:	18c00044 	addi	r3,r3,1
4008a58c:	10800044 	addi	r2,r2,1
4008a590:	41000015 	stw	r4,0(r8)
4008a594:	01000044 	movi	r4,1
4008a598:	41000115 	stw	r4,4(r8)
4008a59c:	d8c12015 	stw	r3,1152(sp)
4008a5a0:	d8811f15 	stw	r2,1148(sp)
4008a5a4:	010001c4 	movi	r4,7
4008a5a8:	20828d16 	blt	r4,r2,4008afe0 <___vfprintf_internal_r+0x11b0>
4008a5ac:	42000204 	addi	r8,r8,8
4008a5b0:	dac12c17 	ldw	r11,1200(sp)
4008a5b4:	58000c26 	beq	r11,zero,4008a5e8 <___vfprintf_internal_r+0x7b8>
4008a5b8:	d8811f17 	ldw	r2,1148(sp)
4008a5bc:	d9012704 	addi	r4,sp,1180
4008a5c0:	18c00084 	addi	r3,r3,2
4008a5c4:	10800044 	addi	r2,r2,1
4008a5c8:	41000015 	stw	r4,0(r8)
4008a5cc:	01000084 	movi	r4,2
4008a5d0:	41000115 	stw	r4,4(r8)
4008a5d4:	d8c12015 	stw	r3,1152(sp)
4008a5d8:	d8811f15 	stw	r2,1148(sp)
4008a5dc:	010001c4 	movi	r4,7
4008a5e0:	20828716 	blt	r4,r2,4008b000 <___vfprintf_internal_r+0x11d0>
4008a5e4:	42000204 	addi	r8,r8,8
4008a5e8:	db013017 	ldw	r12,1216(sp)
4008a5ec:	00802004 	movi	r2,128
4008a5f0:	6081e926 	beq	r12,r2,4008ad98 <___vfprintf_internal_r+0xf68>
4008a5f4:	db013217 	ldw	r12,1224(sp)
4008a5f8:	64abc83a 	sub	r21,r12,r18
4008a5fc:	0540260e 	bge	zero,r21,4008a698 <___vfprintf_internal_r+0x868>
4008a600:	07000404 	movi	fp,16
4008a604:	d8811f17 	ldw	r2,1148(sp)
4008a608:	e5443d0e 	bge	fp,r21,4008b700 <___vfprintf_internal_r+0x18d0>
4008a60c:	015002b4 	movhi	r5,16394
4008a610:	29686684 	addi	r5,r5,-24166
4008a614:	d9412c15 	stw	r5,1200(sp)
4008a618:	04c001c4 	movi	r19,7
4008a61c:	00000306 	br	4008a62c <___vfprintf_internal_r+0x7fc>
4008a620:	ad7ffc04 	addi	r21,r21,-16
4008a624:	42000204 	addi	r8,r8,8
4008a628:	e540110e 	bge	fp,r21,4008a670 <___vfprintf_internal_r+0x840>
4008a62c:	18c00404 	addi	r3,r3,16
4008a630:	10800044 	addi	r2,r2,1
4008a634:	45000015 	stw	r20,0(r8)
4008a638:	47000115 	stw	fp,4(r8)
4008a63c:	d8c12015 	stw	r3,1152(sp)
4008a640:	d8811f15 	stw	r2,1148(sp)
4008a644:	98bff60e 	bge	r19,r2,4008a620 <__alt_mem_epcs+0xfff49620>
4008a648:	b009883a 	mov	r4,r22
4008a64c:	b80b883a 	mov	r5,r23
4008a650:	d9811e04 	addi	r6,sp,1144
4008a654:	00911e00 	call	400911e0 <__sprint_r>
4008a658:	103f0c1e 	bne	r2,zero,4008a28c <__alt_mem_epcs+0xfff4928c>
4008a65c:	ad7ffc04 	addi	r21,r21,-16
4008a660:	d8c12017 	ldw	r3,1152(sp)
4008a664:	d8811f17 	ldw	r2,1148(sp)
4008a668:	da000404 	addi	r8,sp,16
4008a66c:	e57fef16 	blt	fp,r21,4008a62c <__alt_mem_epcs+0xfff4962c>
4008a670:	dac12c17 	ldw	r11,1200(sp)
4008a674:	1d47883a 	add	r3,r3,r21
4008a678:	10800044 	addi	r2,r2,1
4008a67c:	42c00015 	stw	r11,0(r8)
4008a680:	45400115 	stw	r21,4(r8)
4008a684:	d8c12015 	stw	r3,1152(sp)
4008a688:	d8811f15 	stw	r2,1148(sp)
4008a68c:	010001c4 	movi	r4,7
4008a690:	20824b16 	blt	r4,r2,4008afc0 <___vfprintf_internal_r+0x1190>
4008a694:	42000204 	addi	r8,r8,8
4008a698:	8880400c 	andi	r2,r17,256
4008a69c:	1001761e 	bne	r2,zero,4008ac78 <___vfprintf_internal_r+0xe48>
4008a6a0:	d8811f17 	ldw	r2,1148(sp)
4008a6a4:	db013117 	ldw	r12,1220(sp)
4008a6a8:	1c87883a 	add	r3,r3,r18
4008a6ac:	10800044 	addi	r2,r2,1
4008a6b0:	43000015 	stw	r12,0(r8)
4008a6b4:	44800115 	stw	r18,4(r8)
4008a6b8:	d8c12015 	stw	r3,1152(sp)
4008a6bc:	d8811f15 	stw	r2,1148(sp)
4008a6c0:	010001c4 	movi	r4,7
4008a6c4:	20822616 	blt	r4,r2,4008af60 <___vfprintf_internal_r+0x1130>
4008a6c8:	42000204 	addi	r8,r8,8
4008a6cc:	8c40010c 	andi	r17,r17,4
4008a6d0:	88003126 	beq	r17,zero,4008a798 <___vfprintf_internal_r+0x968>
4008a6d4:	db012e17 	ldw	r12,1208(sp)
4008a6d8:	dac12b17 	ldw	r11,1196(sp)
4008a6dc:	62e1c83a 	sub	r16,r12,r11
4008a6e0:	04002d0e 	bge	zero,r16,4008a798 <___vfprintf_internal_r+0x968>
4008a6e4:	04400404 	movi	r17,16
4008a6e8:	d8811f17 	ldw	r2,1148(sp)
4008a6ec:	8c04df0e 	bge	r17,r16,4008ba6c <___vfprintf_internal_r+0x1c3c>
4008a6f0:	011002b4 	movhi	r4,16394
4008a6f4:	21286a84 	addi	r4,r4,-24150
4008a6f8:	d9013615 	stw	r4,1240(sp)
4008a6fc:	048001c4 	movi	r18,7
4008a700:	00000306 	br	4008a710 <___vfprintf_internal_r+0x8e0>
4008a704:	843ffc04 	addi	r16,r16,-16
4008a708:	42000204 	addi	r8,r8,8
4008a70c:	8c00130e 	bge	r17,r16,4008a75c <___vfprintf_internal_r+0x92c>
4008a710:	015002b4 	movhi	r5,16394
4008a714:	18c00404 	addi	r3,r3,16
4008a718:	10800044 	addi	r2,r2,1
4008a71c:	29686a84 	addi	r5,r5,-24150
4008a720:	41400015 	stw	r5,0(r8)
4008a724:	44400115 	stw	r17,4(r8)
4008a728:	d8c12015 	stw	r3,1152(sp)
4008a72c:	d8811f15 	stw	r2,1148(sp)
4008a730:	90bff40e 	bge	r18,r2,4008a704 <__alt_mem_epcs+0xfff49704>
4008a734:	b009883a 	mov	r4,r22
4008a738:	b80b883a 	mov	r5,r23
4008a73c:	d9811e04 	addi	r6,sp,1144
4008a740:	00911e00 	call	400911e0 <__sprint_r>
4008a744:	103ed11e 	bne	r2,zero,4008a28c <__alt_mem_epcs+0xfff4928c>
4008a748:	843ffc04 	addi	r16,r16,-16
4008a74c:	d8c12017 	ldw	r3,1152(sp)
4008a750:	d8811f17 	ldw	r2,1148(sp)
4008a754:	da000404 	addi	r8,sp,16
4008a758:	8c3fed16 	blt	r17,r16,4008a710 <__alt_mem_epcs+0xfff49710>
4008a75c:	dac13617 	ldw	r11,1240(sp)
4008a760:	1c07883a 	add	r3,r3,r16
4008a764:	10800044 	addi	r2,r2,1
4008a768:	42c00015 	stw	r11,0(r8)
4008a76c:	44000115 	stw	r16,4(r8)
4008a770:	d8c12015 	stw	r3,1152(sp)
4008a774:	d8811f15 	stw	r2,1148(sp)
4008a778:	010001c4 	movi	r4,7
4008a77c:	2080060e 	bge	r4,r2,4008a798 <___vfprintf_internal_r+0x968>
4008a780:	b009883a 	mov	r4,r22
4008a784:	b80b883a 	mov	r5,r23
4008a788:	d9811e04 	addi	r6,sp,1144
4008a78c:	00911e00 	call	400911e0 <__sprint_r>
4008a790:	103ebe1e 	bne	r2,zero,4008a28c <__alt_mem_epcs+0xfff4928c>
4008a794:	d8c12017 	ldw	r3,1152(sp)
4008a798:	d8812b17 	ldw	r2,1196(sp)
4008a79c:	db012e17 	ldw	r12,1208(sp)
4008a7a0:	1300010e 	bge	r2,r12,4008a7a8 <___vfprintf_internal_r+0x978>
4008a7a4:	6005883a 	mov	r2,r12
4008a7a8:	dac12f17 	ldw	r11,1212(sp)
4008a7ac:	5897883a 	add	r11,r11,r2
4008a7b0:	dac12f15 	stw	r11,1212(sp)
4008a7b4:	1801f21e 	bne	r3,zero,4008af80 <___vfprintf_internal_r+0x1150>
4008a7b8:	d8011f15 	stw	zero,1148(sp)
4008a7bc:	da000404 	addi	r8,sp,16
4008a7c0:	003dd806 	br	40089f24 <__alt_mem_epcs+0xfff48f24>
4008a7c4:	8c400414 	ori	r17,r17,16
4008a7c8:	d8c12a15 	stw	r3,1192(sp)
4008a7cc:	88c0080c 	andi	r3,r17,32
4008a7d0:	d8812d17 	ldw	r2,1204(sp)
4008a7d4:	18004626 	beq	r3,zero,4008a8f0 <___vfprintf_internal_r+0xac0>
4008a7d8:	dac12d17 	ldw	r11,1204(sp)
4008a7dc:	14c00017 	ldw	r19,0(r2)
4008a7e0:	17000117 	ldw	fp,4(r2)
4008a7e4:	5ac00204 	addi	r11,r11,8
4008a7e8:	dac12d15 	stw	r11,1204(sp)
4008a7ec:	00800044 	movi	r2,1
4008a7f0:	9f06b03a 	or	r3,r19,fp
4008a7f4:	003f0006 	br	4008a3f8 <__alt_mem_epcs+0xfff493f8>
4008a7f8:	1805883a 	mov	r2,r3
4008a7fc:	d8012e15 	stw	zero,1208(sp)
4008a800:	82fff404 	addi	r11,r16,-48
4008a804:	0019883a 	mov	r12,zero
4008a808:	14000007 	ldb	r16,0(r2)
4008a80c:	630002a4 	muli	r12,r12,10
4008a810:	18c00044 	addi	r3,r3,1
4008a814:	1805883a 	mov	r2,r3
4008a818:	62d9883a 	add	r12,r12,r11
4008a81c:	82fff404 	addi	r11,r16,-48
4008a820:	2afff92e 	bgeu	r5,r11,4008a808 <__alt_mem_epcs+0xfff49808>
4008a824:	db012e15 	stw	r12,1208(sp)
4008a828:	003de906 	br	40089fd0 <__alt_mem_epcs+0xfff48fd0>
4008a82c:	8c400414 	ori	r17,r17,16
4008a830:	d8c12a15 	stw	r3,1192(sp)
4008a834:	d9812785 	stb	r6,1182(sp)
4008a838:	8880080c 	andi	r2,r17,32
4008a83c:	d8c12d17 	ldw	r3,1204(sp)
4008a840:	10007a26 	beq	r2,zero,4008aa2c <___vfprintf_internal_r+0xbfc>
4008a844:	db012d17 	ldw	r12,1204(sp)
4008a848:	18800117 	ldw	r2,4(r3)
4008a84c:	1cc00017 	ldw	r19,0(r3)
4008a850:	63000204 	addi	r12,r12,8
4008a854:	db012d15 	stw	r12,1204(sp)
4008a858:	1039883a 	mov	fp,r2
4008a85c:	10031016 	blt	r2,zero,4008b4a0 <___vfprintf_internal_r+0x1670>
4008a860:	dd412783 	ldbu	r21,1182(sp)
4008a864:	da413215 	stw	r9,1224(sp)
4008a868:	00800044 	movi	r2,1
4008a86c:	9f06b03a 	or	r3,r19,fp
4008a870:	003ee406 	br	4008a404 <__alt_mem_epcs+0xfff49404>
4008a874:	031002b4 	movhi	r12,16394
4008a878:	63285a04 	addi	r12,r12,-24216
4008a87c:	d8c12a15 	stw	r3,1192(sp)
4008a880:	d9812785 	stb	r6,1182(sp)
4008a884:	db013b15 	stw	r12,1260(sp)
4008a888:	88c0080c 	andi	r3,r17,32
4008a88c:	d8812d17 	ldw	r2,1204(sp)
4008a890:	18002b26 	beq	r3,zero,4008a940 <___vfprintf_internal_r+0xb10>
4008a894:	dac12d17 	ldw	r11,1204(sp)
4008a898:	14c00017 	ldw	r19,0(r2)
4008a89c:	17000117 	ldw	fp,4(r2)
4008a8a0:	5ac00204 	addi	r11,r11,8
4008a8a4:	dac12d15 	stw	r11,1204(sp)
4008a8a8:	8880004c 	andi	r2,r17,1
4008a8ac:	10025b26 	beq	r2,zero,4008b21c <___vfprintf_internal_r+0x13ec>
4008a8b0:	9f06b03a 	or	r3,r19,fp
4008a8b4:	18037026 	beq	r3,zero,4008b678 <___vfprintf_internal_r+0x1848>
4008a8b8:	00800c04 	movi	r2,48
4008a8bc:	d8812705 	stb	r2,1180(sp)
4008a8c0:	dc012745 	stb	r16,1181(sp)
4008a8c4:	8c400094 	ori	r17,r17,2
4008a8c8:	00800084 	movi	r2,2
4008a8cc:	003eca06 	br	4008a3f8 <__alt_mem_epcs+0xfff493f8>
4008a8d0:	8c400814 	ori	r17,r17,32
4008a8d4:	1805883a 	mov	r2,r3
4008a8d8:	1c000007 	ldb	r16,0(r3)
4008a8dc:	003dbb06 	br	40089fcc <__alt_mem_epcs+0xfff48fcc>
4008a8e0:	d8c12a15 	stw	r3,1192(sp)
4008a8e4:	88c0080c 	andi	r3,r17,32
4008a8e8:	d8812d17 	ldw	r2,1204(sp)
4008a8ec:	183fba1e 	bne	r3,zero,4008a7d8 <__alt_mem_epcs+0xfff497d8>
4008a8f0:	88c0040c 	andi	r3,r17,16
4008a8f4:	18024c1e 	bne	r3,zero,4008b228 <___vfprintf_internal_r+0x13f8>
4008a8f8:	88c0100c 	andi	r3,r17,64
4008a8fc:	18024a26 	beq	r3,zero,4008b228 <___vfprintf_internal_r+0x13f8>
4008a900:	dac12d17 	ldw	r11,1204(sp)
4008a904:	14c0000b 	ldhu	r19,0(r2)
4008a908:	0039883a 	mov	fp,zero
4008a90c:	5ac00104 	addi	r11,r11,4
4008a910:	dac12d15 	stw	r11,1204(sp)
4008a914:	00800044 	movi	r2,1
4008a918:	9807883a 	mov	r3,r19
4008a91c:	003eb606 	br	4008a3f8 <__alt_mem_epcs+0xfff493f8>
4008a920:	009002b4 	movhi	r2,16394
4008a924:	10a85f04 	addi	r2,r2,-24196
4008a928:	d8c12a15 	stw	r3,1192(sp)
4008a92c:	d8813b15 	stw	r2,1260(sp)
4008a930:	d9812785 	stb	r6,1182(sp)
4008a934:	88c0080c 	andi	r3,r17,32
4008a938:	d8812d17 	ldw	r2,1204(sp)
4008a93c:	183fd51e 	bne	r3,zero,4008a894 <__alt_mem_epcs+0xfff49894>
4008a940:	88c0040c 	andi	r3,r17,16
4008a944:	18034126 	beq	r3,zero,4008b64c <___vfprintf_internal_r+0x181c>
4008a948:	db012d17 	ldw	r12,1204(sp)
4008a94c:	14c00017 	ldw	r19,0(r2)
4008a950:	0039883a 	mov	fp,zero
4008a954:	63000104 	addi	r12,r12,4
4008a958:	db012d15 	stw	r12,1204(sp)
4008a95c:	003fd206 	br	4008a8a8 <__alt_mem_epcs+0xfff498a8>
4008a960:	1c000007 	ldb	r16,0(r3)
4008a964:	81c3d626 	beq	r16,r7,4008b8c0 <___vfprintf_internal_r+0x1a90>
4008a968:	8c400414 	ori	r17,r17,16
4008a96c:	1805883a 	mov	r2,r3
4008a970:	003d9606 	br	40089fcc <__alt_mem_epcs+0xfff48fcc>
4008a974:	d8c12a15 	stw	r3,1192(sp)
4008a978:	d9812785 	stb	r6,1182(sp)
4008a97c:	8880080c 	andi	r2,r17,32
4008a980:	10033f26 	beq	r2,zero,4008b680 <___vfprintf_internal_r+0x1850>
4008a984:	db012d17 	ldw	r12,1204(sp)
4008a988:	dac12f17 	ldw	r11,1212(sp)
4008a98c:	60800017 	ldw	r2,0(r12)
4008a990:	5807d7fa 	srai	r3,r11,31
4008a994:	63000104 	addi	r12,r12,4
4008a998:	db012d15 	stw	r12,1204(sp)
4008a99c:	12c00015 	stw	r11,0(r2)
4008a9a0:	10c00115 	stw	r3,4(r2)
4008a9a4:	003d5f06 	br	40089f24 <__alt_mem_epcs+0xfff48f24>
4008a9a8:	d8c12a15 	stw	r3,1192(sp)
4008a9ac:	88c0080c 	andi	r3,r17,32
4008a9b0:	d8812d17 	ldw	r2,1204(sp)
4008a9b4:	183e891e 	bne	r3,zero,4008a3dc <__alt_mem_epcs+0xfff493dc>
4008a9b8:	88c0040c 	andi	r3,r17,16
4008a9bc:	1801ea1e 	bne	r3,zero,4008b168 <___vfprintf_internal_r+0x1338>
4008a9c0:	88c0100c 	andi	r3,r17,64
4008a9c4:	1801e826 	beq	r3,zero,4008b168 <___vfprintf_internal_r+0x1338>
4008a9c8:	db012d17 	ldw	r12,1204(sp)
4008a9cc:	14c0000b 	ldhu	r19,0(r2)
4008a9d0:	0039883a 	mov	fp,zero
4008a9d4:	63000104 	addi	r12,r12,4
4008a9d8:	db012d15 	stw	r12,1204(sp)
4008a9dc:	0005883a 	mov	r2,zero
4008a9e0:	9807883a 	mov	r3,r19
4008a9e4:	003e8406 	br	4008a3f8 <__alt_mem_epcs+0xfff493f8>
4008a9e8:	30803fcc 	andi	r2,r6,255
4008a9ec:	1080201c 	xori	r2,r2,128
4008a9f0:	10bfe004 	addi	r2,r2,-128
4008a9f4:	10031d1e 	bne	r2,zero,4008b66c <___vfprintf_internal_r+0x183c>
4008a9f8:	1805883a 	mov	r2,r3
4008a9fc:	01800804 	movi	r6,32
4008aa00:	1c000007 	ldb	r16,0(r3)
4008aa04:	003d7106 	br	40089fcc <__alt_mem_epcs+0xfff48fcc>
4008aa08:	8c400054 	ori	r17,r17,1
4008aa0c:	1805883a 	mov	r2,r3
4008aa10:	1c000007 	ldb	r16,0(r3)
4008aa14:	003d6d06 	br	40089fcc <__alt_mem_epcs+0xfff48fcc>
4008aa18:	d8c12a15 	stw	r3,1192(sp)
4008aa1c:	d9812785 	stb	r6,1182(sp)
4008aa20:	8880080c 	andi	r2,r17,32
4008aa24:	d8c12d17 	ldw	r3,1204(sp)
4008aa28:	103f861e 	bne	r2,zero,4008a844 <__alt_mem_epcs+0xfff49844>
4008aa2c:	8880040c 	andi	r2,r17,16
4008aa30:	1001f31e 	bne	r2,zero,4008b200 <___vfprintf_internal_r+0x13d0>
4008aa34:	8880100c 	andi	r2,r17,64
4008aa38:	1001f126 	beq	r2,zero,4008b200 <___vfprintf_internal_r+0x13d0>
4008aa3c:	1cc0000f 	ldh	r19,0(r3)
4008aa40:	db012d17 	ldw	r12,1204(sp)
4008aa44:	9839d7fa 	srai	fp,r19,31
4008aa48:	63000104 	addi	r12,r12,4
4008aa4c:	db012d15 	stw	r12,1204(sp)
4008aa50:	e005883a 	mov	r2,fp
4008aa54:	003f8106 	br	4008a85c <__alt_mem_epcs+0xfff4985c>
4008aa58:	8c401014 	ori	r17,r17,64
4008aa5c:	1805883a 	mov	r2,r3
4008aa60:	1c000007 	ldb	r16,0(r3)
4008aa64:	003d5906 	br	40089fcc <__alt_mem_epcs+0xfff48fcc>
4008aa68:	db012d17 	ldw	r12,1204(sp)
4008aa6c:	d8c12a15 	stw	r3,1192(sp)
4008aa70:	00c00044 	movi	r3,1
4008aa74:	60800017 	ldw	r2,0(r12)
4008aa78:	63000104 	addi	r12,r12,4
4008aa7c:	d8c12b15 	stw	r3,1196(sp)
4008aa80:	d8012785 	stb	zero,1182(sp)
4008aa84:	d8810405 	stb	r2,1040(sp)
4008aa88:	db012d15 	stw	r12,1204(sp)
4008aa8c:	dac10404 	addi	r11,sp,1040
4008aa90:	1825883a 	mov	r18,r3
4008aa94:	d8013215 	stw	zero,1224(sp)
4008aa98:	d8013415 	stw	zero,1232(sp)
4008aa9c:	dac13115 	stw	r11,1220(sp)
4008aaa0:	0005883a 	mov	r2,zero
4008aaa4:	003e7d06 	br	4008a49c <__alt_mem_epcs+0xfff4949c>
4008aaa8:	db012d17 	ldw	r12,1204(sp)
4008aaac:	00800c04 	movi	r2,48
4008aab0:	d8812705 	stb	r2,1180(sp)
4008aab4:	64c00017 	ldw	r19,0(r12)
4008aab8:	00801e04 	movi	r2,120
4008aabc:	d8812745 	stb	r2,1181(sp)
4008aac0:	009002b4 	movhi	r2,16394
4008aac4:	10a85f04 	addi	r2,r2,-24196
4008aac8:	63000104 	addi	r12,r12,4
4008aacc:	d8c12a15 	stw	r3,1192(sp)
4008aad0:	d8813b15 	stw	r2,1260(sp)
4008aad4:	0039883a 	mov	fp,zero
4008aad8:	8c400094 	ori	r17,r17,2
4008aadc:	db012d15 	stw	r12,1204(sp)
4008aae0:	00800084 	movi	r2,2
4008aae4:	04001e04 	movi	r16,120
4008aae8:	9807883a 	mov	r3,r19
4008aaec:	003e4206 	br	4008a3f8 <__alt_mem_epcs+0xfff493f8>
4008aaf0:	dac12d17 	ldw	r11,1204(sp)
4008aaf4:	db012d17 	ldw	r12,1204(sp)
4008aaf8:	d8c12a15 	stw	r3,1192(sp)
4008aafc:	5ac00017 	ldw	r11,0(r11)
4008ab00:	d8012785 	stb	zero,1182(sp)
4008ab04:	64c00104 	addi	r19,r12,4
4008ab08:	dac13115 	stw	r11,1220(sp)
4008ab0c:	5803e826 	beq	r11,zero,4008bab0 <___vfprintf_internal_r+0x1c80>
4008ab10:	d9013117 	ldw	r4,1220(sp)
4008ab14:	48037a16 	blt	r9,zero,4008b900 <___vfprintf_internal_r+0x1ad0>
4008ab18:	480d883a 	mov	r6,r9
4008ab1c:	000b883a 	mov	r5,zero
4008ab20:	da013f15 	stw	r8,1276(sp)
4008ab24:	da413e15 	stw	r9,1272(sp)
4008ab28:	008f3080 	call	4008f308 <memchr>
4008ab2c:	da013f17 	ldw	r8,1276(sp)
4008ab30:	da413e17 	ldw	r9,1272(sp)
4008ab34:	10044426 	beq	r2,zero,4008bc48 <___vfprintf_internal_r+0x1e18>
4008ab38:	d8c13117 	ldw	r3,1220(sp)
4008ab3c:	10e5c83a 	sub	r18,r2,r3
4008ab40:	4c834416 	blt	r9,r18,4008b854 <___vfprintf_internal_r+0x1a24>
4008ab44:	9005883a 	mov	r2,r18
4008ab48:	90037216 	blt	r18,zero,4008b914 <___vfprintf_internal_r+0x1ae4>
4008ab4c:	dd412783 	ldbu	r21,1182(sp)
4008ab50:	d8812b15 	stw	r2,1196(sp)
4008ab54:	dcc12d15 	stw	r19,1204(sp)
4008ab58:	d8013215 	stw	zero,1224(sp)
4008ab5c:	d8013415 	stw	zero,1232(sp)
4008ab60:	003e4706 	br	4008a480 <__alt_mem_epcs+0xfff49480>
4008ab64:	dac12d17 	ldw	r11,1204(sp)
4008ab68:	db012d17 	ldw	r12,1204(sp)
4008ab6c:	5ac00017 	ldw	r11,0(r11)
4008ab70:	dac12e15 	stw	r11,1208(sp)
4008ab74:	62c00104 	addi	r11,r12,4
4008ab78:	db012e17 	ldw	r12,1208(sp)
4008ab7c:	60034a16 	blt	r12,zero,4008b8a8 <___vfprintf_internal_r+0x1a78>
4008ab80:	dac12d15 	stw	r11,1204(sp)
4008ab84:	1805883a 	mov	r2,r3
4008ab88:	1c000007 	ldb	r16,0(r3)
4008ab8c:	003d0f06 	br	40089fcc <__alt_mem_epcs+0xfff48fcc>
4008ab90:	1805883a 	mov	r2,r3
4008ab94:	01800ac4 	movi	r6,43
4008ab98:	1c000007 	ldb	r16,0(r3)
4008ab9c:	003d0b06 	br	40089fcc <__alt_mem_epcs+0xfff48fcc>
4008aba0:	d8c12a15 	stw	r3,1192(sp)
4008aba4:	d9812785 	stb	r6,1182(sp)
4008aba8:	803db226 	beq	r16,zero,4008a274 <__alt_mem_epcs+0xfff49274>
4008abac:	00c00044 	movi	r3,1
4008abb0:	d8c12b15 	stw	r3,1196(sp)
4008abb4:	dc010405 	stb	r16,1040(sp)
4008abb8:	d8012785 	stb	zero,1182(sp)
4008abbc:	003fb306 	br	4008aa8c <__alt_mem_epcs+0xfff49a8c>
4008abc0:	d8c12017 	ldw	r3,1152(sp)
4008abc4:	003e6d06 	br	4008a57c <__alt_mem_epcs+0xfff4957c>
4008abc8:	10803fcc 	andi	r2,r2,255
4008abcc:	00c00044 	movi	r3,1
4008abd0:	10fe141e 	bne	r2,r3,4008a424 <__alt_mem_epcs+0xfff49424>
4008abd4:	e000021e 	bne	fp,zero,4008abe0 <___vfprintf_internal_r+0xdb0>
4008abd8:	00800244 	movi	r2,9
4008abdc:	14c0202e 	bgeu	r2,r19,4008ac60 <___vfprintf_internal_r+0xe30>
4008abe0:	dc012b15 	stw	r16,1196(sp)
4008abe4:	dc412c15 	stw	r17,1200(sp)
4008abe8:	9821883a 	mov	r16,r19
4008abec:	e023883a 	mov	r17,fp
4008abf0:	dc810e04 	addi	r18,sp,1080
4008abf4:	4027883a 	mov	r19,r8
4008abf8:	4839883a 	mov	fp,r9
4008abfc:	8009883a 	mov	r4,r16
4008ac00:	880b883a 	mov	r5,r17
4008ac04:	01800284 	movi	r6,10
4008ac08:	000f883a 	mov	r7,zero
4008ac0c:	00934700 	call	40093470 <__umoddi3>
4008ac10:	10800c04 	addi	r2,r2,48
4008ac14:	94bfffc4 	addi	r18,r18,-1
4008ac18:	8009883a 	mov	r4,r16
4008ac1c:	880b883a 	mov	r5,r17
4008ac20:	01800284 	movi	r6,10
4008ac24:	000f883a 	mov	r7,zero
4008ac28:	90800005 	stb	r2,0(r18)
4008ac2c:	0092eb00 	call	40092eb0 <__udivdi3>
4008ac30:	1021883a 	mov	r16,r2
4008ac34:	10c4b03a 	or	r2,r2,r3
4008ac38:	1823883a 	mov	r17,r3
4008ac3c:	103fef1e 	bne	r2,zero,4008abfc <__alt_mem_epcs+0xfff49bfc>
4008ac40:	dac12817 	ldw	r11,1184(sp)
4008ac44:	dc813115 	stw	r18,1220(sp)
4008ac48:	dc012b17 	ldw	r16,1196(sp)
4008ac4c:	9811883a 	mov	r8,r19
4008ac50:	dc412c17 	ldw	r17,1200(sp)
4008ac54:	e013883a 	mov	r9,fp
4008ac58:	5ca5c83a 	sub	r18,r11,r18
4008ac5c:	003e0306 	br	4008a46c <__alt_mem_epcs+0xfff4946c>
4008ac60:	9cc00c04 	addi	r19,r19,48
4008ac64:	d8c10dc4 	addi	r3,sp,1079
4008ac68:	dcc10dc5 	stb	r19,1079(sp)
4008ac6c:	dc813c17 	ldw	r18,1264(sp)
4008ac70:	d8c13115 	stw	r3,1220(sp)
4008ac74:	003dfd06 	br	4008a46c <__alt_mem_epcs+0xfff4946c>
4008ac78:	00801944 	movi	r2,101
4008ac7c:	1400710e 	bge	r2,r16,4008ae44 <___vfprintf_internal_r+0x1014>
4008ac80:	d9013717 	ldw	r4,1244(sp)
4008ac84:	d9413917 	ldw	r5,1252(sp)
4008ac88:	000d883a 	mov	r6,zero
4008ac8c:	000f883a 	mov	r7,zero
4008ac90:	d8c13d15 	stw	r3,1268(sp)
4008ac94:	da013f15 	stw	r8,1276(sp)
4008ac98:	0094c940 	call	40094c94 <__eqdf2>
4008ac9c:	d8c13d17 	ldw	r3,1268(sp)
4008aca0:	da013f17 	ldw	r8,1276(sp)
4008aca4:	1000ef1e 	bne	r2,zero,4008b064 <___vfprintf_internal_r+0x1234>
4008aca8:	d8811f17 	ldw	r2,1148(sp)
4008acac:	011002b4 	movhi	r4,16394
4008acb0:	21286604 	addi	r4,r4,-24168
4008acb4:	18c00044 	addi	r3,r3,1
4008acb8:	10800044 	addi	r2,r2,1
4008acbc:	41000015 	stw	r4,0(r8)
4008acc0:	01000044 	movi	r4,1
4008acc4:	41000115 	stw	r4,4(r8)
4008acc8:	d8c12015 	stw	r3,1152(sp)
4008accc:	d8811f15 	stw	r2,1148(sp)
4008acd0:	010001c4 	movi	r4,7
4008acd4:	20828e16 	blt	r4,r2,4008b710 <___vfprintf_internal_r+0x18e0>
4008acd8:	42000204 	addi	r8,r8,8
4008acdc:	d8812617 	ldw	r2,1176(sp)
4008ace0:	dac13317 	ldw	r11,1228(sp)
4008ace4:	12c00216 	blt	r2,r11,4008acf0 <___vfprintf_internal_r+0xec0>
4008ace8:	8880004c 	andi	r2,r17,1
4008acec:	103e7726 	beq	r2,zero,4008a6cc <__alt_mem_epcs+0xfff496cc>
4008acf0:	db013817 	ldw	r12,1248(sp)
4008acf4:	d8811f17 	ldw	r2,1148(sp)
4008acf8:	dac13517 	ldw	r11,1236(sp)
4008acfc:	1b07883a 	add	r3,r3,r12
4008ad00:	10800044 	addi	r2,r2,1
4008ad04:	42c00015 	stw	r11,0(r8)
4008ad08:	43000115 	stw	r12,4(r8)
4008ad0c:	d8c12015 	stw	r3,1152(sp)
4008ad10:	d8811f15 	stw	r2,1148(sp)
4008ad14:	010001c4 	movi	r4,7
4008ad18:	2082ed16 	blt	r4,r2,4008b8d0 <___vfprintf_internal_r+0x1aa0>
4008ad1c:	42000204 	addi	r8,r8,8
4008ad20:	db013317 	ldw	r12,1228(sp)
4008ad24:	643fffc4 	addi	r16,r12,-1
4008ad28:	043e680e 	bge	zero,r16,4008a6cc <__alt_mem_epcs+0xfff496cc>
4008ad2c:	04800404 	movi	r18,16
4008ad30:	d8811f17 	ldw	r2,1148(sp)
4008ad34:	94007e0e 	bge	r18,r16,4008af30 <___vfprintf_internal_r+0x1100>
4008ad38:	015002b4 	movhi	r5,16394
4008ad3c:	29686684 	addi	r5,r5,-24166
4008ad40:	d9412c15 	stw	r5,1200(sp)
4008ad44:	054001c4 	movi	r21,7
4008ad48:	00000306 	br	4008ad58 <___vfprintf_internal_r+0xf28>
4008ad4c:	42000204 	addi	r8,r8,8
4008ad50:	843ffc04 	addi	r16,r16,-16
4008ad54:	9400790e 	bge	r18,r16,4008af3c <___vfprintf_internal_r+0x110c>
4008ad58:	18c00404 	addi	r3,r3,16
4008ad5c:	10800044 	addi	r2,r2,1
4008ad60:	45000015 	stw	r20,0(r8)
4008ad64:	44800115 	stw	r18,4(r8)
4008ad68:	d8c12015 	stw	r3,1152(sp)
4008ad6c:	d8811f15 	stw	r2,1148(sp)
4008ad70:	a8bff60e 	bge	r21,r2,4008ad4c <__alt_mem_epcs+0xfff49d4c>
4008ad74:	b009883a 	mov	r4,r22
4008ad78:	b80b883a 	mov	r5,r23
4008ad7c:	d9811e04 	addi	r6,sp,1144
4008ad80:	00911e00 	call	400911e0 <__sprint_r>
4008ad84:	103d411e 	bne	r2,zero,4008a28c <__alt_mem_epcs+0xfff4928c>
4008ad88:	d8c12017 	ldw	r3,1152(sp)
4008ad8c:	d8811f17 	ldw	r2,1148(sp)
4008ad90:	da000404 	addi	r8,sp,16
4008ad94:	003fee06 	br	4008ad50 <__alt_mem_epcs+0xfff49d50>
4008ad98:	dac12e17 	ldw	r11,1208(sp)
4008ad9c:	db012b17 	ldw	r12,1196(sp)
4008ada0:	5b2bc83a 	sub	r21,r11,r12
4008ada4:	057e130e 	bge	zero,r21,4008a5f4 <__alt_mem_epcs+0xfff495f4>
4008ada8:	07000404 	movi	fp,16
4008adac:	d8811f17 	ldw	r2,1148(sp)
4008adb0:	e543640e 	bge	fp,r21,4008bb44 <___vfprintf_internal_r+0x1d14>
4008adb4:	015002b4 	movhi	r5,16394
4008adb8:	29686684 	addi	r5,r5,-24166
4008adbc:	d9412c15 	stw	r5,1200(sp)
4008adc0:	04c001c4 	movi	r19,7
4008adc4:	00000306 	br	4008add4 <___vfprintf_internal_r+0xfa4>
4008adc8:	ad7ffc04 	addi	r21,r21,-16
4008adcc:	42000204 	addi	r8,r8,8
4008add0:	e540110e 	bge	fp,r21,4008ae18 <___vfprintf_internal_r+0xfe8>
4008add4:	18c00404 	addi	r3,r3,16
4008add8:	10800044 	addi	r2,r2,1
4008addc:	45000015 	stw	r20,0(r8)
4008ade0:	47000115 	stw	fp,4(r8)
4008ade4:	d8c12015 	stw	r3,1152(sp)
4008ade8:	d8811f15 	stw	r2,1148(sp)
4008adec:	98bff60e 	bge	r19,r2,4008adc8 <__alt_mem_epcs+0xfff49dc8>
4008adf0:	b009883a 	mov	r4,r22
4008adf4:	b80b883a 	mov	r5,r23
4008adf8:	d9811e04 	addi	r6,sp,1144
4008adfc:	00911e00 	call	400911e0 <__sprint_r>
4008ae00:	103d221e 	bne	r2,zero,4008a28c <__alt_mem_epcs+0xfff4928c>
4008ae04:	ad7ffc04 	addi	r21,r21,-16
4008ae08:	d8c12017 	ldw	r3,1152(sp)
4008ae0c:	d8811f17 	ldw	r2,1148(sp)
4008ae10:	da000404 	addi	r8,sp,16
4008ae14:	e57fef16 	blt	fp,r21,4008add4 <__alt_mem_epcs+0xfff49dd4>
4008ae18:	dac12c17 	ldw	r11,1200(sp)
4008ae1c:	1d47883a 	add	r3,r3,r21
4008ae20:	10800044 	addi	r2,r2,1
4008ae24:	42c00015 	stw	r11,0(r8)
4008ae28:	45400115 	stw	r21,4(r8)
4008ae2c:	d8c12015 	stw	r3,1152(sp)
4008ae30:	d8811f15 	stw	r2,1148(sp)
4008ae34:	010001c4 	movi	r4,7
4008ae38:	20819116 	blt	r4,r2,4008b480 <___vfprintf_internal_r+0x1650>
4008ae3c:	42000204 	addi	r8,r8,8
4008ae40:	003dec06 	br	4008a5f4 <__alt_mem_epcs+0xfff495f4>
4008ae44:	db013317 	ldw	r12,1228(sp)
4008ae48:	00800044 	movi	r2,1
4008ae4c:	18c00044 	addi	r3,r3,1
4008ae50:	1301530e 	bge	r2,r12,4008b3a0 <___vfprintf_internal_r+0x1570>
4008ae54:	dc011f17 	ldw	r16,1148(sp)
4008ae58:	dac13117 	ldw	r11,1220(sp)
4008ae5c:	00800044 	movi	r2,1
4008ae60:	84000044 	addi	r16,r16,1
4008ae64:	40800115 	stw	r2,4(r8)
4008ae68:	42c00015 	stw	r11,0(r8)
4008ae6c:	d8c12015 	stw	r3,1152(sp)
4008ae70:	dc011f15 	stw	r16,1148(sp)
4008ae74:	008001c4 	movi	r2,7
4008ae78:	14016b16 	blt	r2,r16,4008b428 <___vfprintf_internal_r+0x15f8>
4008ae7c:	42000204 	addi	r8,r8,8
4008ae80:	db013817 	ldw	r12,1248(sp)
4008ae84:	dac13517 	ldw	r11,1236(sp)
4008ae88:	84000044 	addi	r16,r16,1
4008ae8c:	1b07883a 	add	r3,r3,r12
4008ae90:	42c00015 	stw	r11,0(r8)
4008ae94:	43000115 	stw	r12,4(r8)
4008ae98:	d8c12015 	stw	r3,1152(sp)
4008ae9c:	dc011f15 	stw	r16,1148(sp)
4008aea0:	008001c4 	movi	r2,7
4008aea4:	14016916 	blt	r2,r16,4008b44c <___vfprintf_internal_r+0x161c>
4008aea8:	44800204 	addi	r18,r8,8
4008aeac:	d9013717 	ldw	r4,1244(sp)
4008aeb0:	d9413917 	ldw	r5,1252(sp)
4008aeb4:	000d883a 	mov	r6,zero
4008aeb8:	000f883a 	mov	r7,zero
4008aebc:	d8c13d15 	stw	r3,1268(sp)
4008aec0:	0094c940 	call	40094c94 <__eqdf2>
4008aec4:	d8c13d17 	ldw	r3,1268(sp)
4008aec8:	db013317 	ldw	r12,1228(sp)
4008aecc:	1000ae26 	beq	r2,zero,4008b188 <___vfprintf_internal_r+0x1358>
4008aed0:	dac13117 	ldw	r11,1220(sp)
4008aed4:	60bfffc4 	addi	r2,r12,-1
4008aed8:	1887883a 	add	r3,r3,r2
4008aedc:	59000044 	addi	r4,r11,1
4008aee0:	84000044 	addi	r16,r16,1
4008aee4:	90800115 	stw	r2,4(r18)
4008aee8:	91000015 	stw	r4,0(r18)
4008aeec:	d8c12015 	stw	r3,1152(sp)
4008aef0:	dc011f15 	stw	r16,1148(sp)
4008aef4:	008001c4 	movi	r2,7
4008aef8:	14014216 	blt	r2,r16,4008b404 <___vfprintf_internal_r+0x15d4>
4008aefc:	94800204 	addi	r18,r18,8
4008af00:	dac13a17 	ldw	r11,1256(sp)
4008af04:	dd4122c4 	addi	r21,sp,1163
4008af08:	84000044 	addi	r16,r16,1
4008af0c:	58c7883a 	add	r3,r11,r3
4008af10:	95400015 	stw	r21,0(r18)
4008af14:	92c00115 	stw	r11,4(r18)
4008af18:	d8c12015 	stw	r3,1152(sp)
4008af1c:	dc011f15 	stw	r16,1148(sp)
4008af20:	008001c4 	movi	r2,7
4008af24:	14000e16 	blt	r2,r16,4008af60 <___vfprintf_internal_r+0x1130>
4008af28:	92000204 	addi	r8,r18,8
4008af2c:	003de706 	br	4008a6cc <__alt_mem_epcs+0xfff496cc>
4008af30:	011002b4 	movhi	r4,16394
4008af34:	21286684 	addi	r4,r4,-24166
4008af38:	d9012c15 	stw	r4,1200(sp)
4008af3c:	dac12c17 	ldw	r11,1200(sp)
4008af40:	1c07883a 	add	r3,r3,r16
4008af44:	44000115 	stw	r16,4(r8)
4008af48:	42c00015 	stw	r11,0(r8)
4008af4c:	10800044 	addi	r2,r2,1
4008af50:	d8c12015 	stw	r3,1152(sp)
4008af54:	d8811f15 	stw	r2,1148(sp)
4008af58:	010001c4 	movi	r4,7
4008af5c:	20bdda0e 	bge	r4,r2,4008a6c8 <__alt_mem_epcs+0xfff496c8>
4008af60:	b009883a 	mov	r4,r22
4008af64:	b80b883a 	mov	r5,r23
4008af68:	d9811e04 	addi	r6,sp,1144
4008af6c:	00911e00 	call	400911e0 <__sprint_r>
4008af70:	103cc61e 	bne	r2,zero,4008a28c <__alt_mem_epcs+0xfff4928c>
4008af74:	d8c12017 	ldw	r3,1152(sp)
4008af78:	da000404 	addi	r8,sp,16
4008af7c:	003dd306 	br	4008a6cc <__alt_mem_epcs+0xfff496cc>
4008af80:	b009883a 	mov	r4,r22
4008af84:	b80b883a 	mov	r5,r23
4008af88:	d9811e04 	addi	r6,sp,1144
4008af8c:	00911e00 	call	400911e0 <__sprint_r>
4008af90:	103e0926 	beq	r2,zero,4008a7b8 <__alt_mem_epcs+0xfff497b8>
4008af94:	003cbd06 	br	4008a28c <__alt_mem_epcs+0xfff4928c>
4008af98:	10803fcc 	andi	r2,r2,255
4008af9c:	1000651e 	bne	r2,zero,4008b134 <___vfprintf_internal_r+0x1304>
4008afa0:	8880004c 	andi	r2,r17,1
4008afa4:	10013226 	beq	r2,zero,4008b470 <___vfprintf_internal_r+0x1640>
4008afa8:	00800c04 	movi	r2,48
4008afac:	d8c10dc4 	addi	r3,sp,1079
4008afb0:	d8810dc5 	stb	r2,1079(sp)
4008afb4:	dc813c17 	ldw	r18,1264(sp)
4008afb8:	d8c13115 	stw	r3,1220(sp)
4008afbc:	003d2b06 	br	4008a46c <__alt_mem_epcs+0xfff4946c>
4008afc0:	b009883a 	mov	r4,r22
4008afc4:	b80b883a 	mov	r5,r23
4008afc8:	d9811e04 	addi	r6,sp,1144
4008afcc:	00911e00 	call	400911e0 <__sprint_r>
4008afd0:	103cae1e 	bne	r2,zero,4008a28c <__alt_mem_epcs+0xfff4928c>
4008afd4:	d8c12017 	ldw	r3,1152(sp)
4008afd8:	da000404 	addi	r8,sp,16
4008afdc:	003dae06 	br	4008a698 <__alt_mem_epcs+0xfff49698>
4008afe0:	b009883a 	mov	r4,r22
4008afe4:	b80b883a 	mov	r5,r23
4008afe8:	d9811e04 	addi	r6,sp,1144
4008afec:	00911e00 	call	400911e0 <__sprint_r>
4008aff0:	103ca61e 	bne	r2,zero,4008a28c <__alt_mem_epcs+0xfff4928c>
4008aff4:	d8c12017 	ldw	r3,1152(sp)
4008aff8:	da000404 	addi	r8,sp,16
4008affc:	003d6c06 	br	4008a5b0 <__alt_mem_epcs+0xfff495b0>
4008b000:	b009883a 	mov	r4,r22
4008b004:	b80b883a 	mov	r5,r23
4008b008:	d9811e04 	addi	r6,sp,1144
4008b00c:	00911e00 	call	400911e0 <__sprint_r>
4008b010:	103c9e1e 	bne	r2,zero,4008a28c <__alt_mem_epcs+0xfff4928c>
4008b014:	d8c12017 	ldw	r3,1152(sp)
4008b018:	da000404 	addi	r8,sp,16
4008b01c:	003d7206 	br	4008a5e8 <__alt_mem_epcs+0xfff495e8>
4008b020:	d9413b17 	ldw	r5,1260(sp)
4008b024:	d8c10e04 	addi	r3,sp,1080
4008b028:	988003cc 	andi	r2,r19,15
4008b02c:	e008973a 	slli	r4,fp,28
4008b030:	2885883a 	add	r2,r5,r2
4008b034:	9826d13a 	srli	r19,r19,4
4008b038:	10800003 	ldbu	r2,0(r2)
4008b03c:	e038d13a 	srli	fp,fp,4
4008b040:	18ffffc4 	addi	r3,r3,-1
4008b044:	24e6b03a 	or	r19,r4,r19
4008b048:	18800005 	stb	r2,0(r3)
4008b04c:	9f04b03a 	or	r2,r19,fp
4008b050:	103ff51e 	bne	r2,zero,4008b028 <__alt_mem_epcs+0xfff4a028>
4008b054:	db012817 	ldw	r12,1184(sp)
4008b058:	d8c13115 	stw	r3,1220(sp)
4008b05c:	60e5c83a 	sub	r18,r12,r3
4008b060:	003d0206 	br	4008a46c <__alt_mem_epcs+0xfff4946c>
4008b064:	dc012617 	ldw	r16,1176(sp)
4008b068:	0401b10e 	bge	zero,r16,4008b730 <___vfprintf_internal_r+0x1900>
4008b06c:	db013117 	ldw	r12,1220(sp)
4008b070:	dac13317 	ldw	r11,1228(sp)
4008b074:	62e1883a 	add	r16,r12,r11
4008b078:	db013417 	ldw	r12,1232(sp)
4008b07c:	5825883a 	mov	r18,r11
4008b080:	62c0010e 	bge	r12,r11,4008b088 <___vfprintf_internal_r+0x1258>
4008b084:	6025883a 	mov	r18,r12
4008b088:	04800b0e 	bge	zero,r18,4008b0b8 <___vfprintf_internal_r+0x1288>
4008b08c:	d8811f17 	ldw	r2,1148(sp)
4008b090:	dac13117 	ldw	r11,1220(sp)
4008b094:	1c87883a 	add	r3,r3,r18
4008b098:	10800044 	addi	r2,r2,1
4008b09c:	42c00015 	stw	r11,0(r8)
4008b0a0:	44800115 	stw	r18,4(r8)
4008b0a4:	d8c12015 	stw	r3,1152(sp)
4008b0a8:	d8811f15 	stw	r2,1148(sp)
4008b0ac:	010001c4 	movi	r4,7
4008b0b0:	20824f16 	blt	r4,r2,4008b9f0 <___vfprintf_internal_r+0x1bc0>
4008b0b4:	42000204 	addi	r8,r8,8
4008b0b8:	90024b16 	blt	r18,zero,4008b9e8 <___vfprintf_internal_r+0x1bb8>
4008b0bc:	db013417 	ldw	r12,1232(sp)
4008b0c0:	64a5c83a 	sub	r18,r12,r18
4008b0c4:	0480730e 	bge	zero,r18,4008b294 <___vfprintf_internal_r+0x1464>
4008b0c8:	05400404 	movi	r21,16
4008b0cc:	d8811f17 	ldw	r2,1148(sp)
4008b0d0:	ac817d0e 	bge	r21,r18,4008b6c8 <___vfprintf_internal_r+0x1898>
4008b0d4:	015002b4 	movhi	r5,16394
4008b0d8:	29686684 	addi	r5,r5,-24166
4008b0dc:	d9412c15 	stw	r5,1200(sp)
4008b0e0:	070001c4 	movi	fp,7
4008b0e4:	00000306 	br	4008b0f4 <___vfprintf_internal_r+0x12c4>
4008b0e8:	42000204 	addi	r8,r8,8
4008b0ec:	94bffc04 	addi	r18,r18,-16
4008b0f0:	ac81780e 	bge	r21,r18,4008b6d4 <___vfprintf_internal_r+0x18a4>
4008b0f4:	18c00404 	addi	r3,r3,16
4008b0f8:	10800044 	addi	r2,r2,1
4008b0fc:	45000015 	stw	r20,0(r8)
4008b100:	45400115 	stw	r21,4(r8)
4008b104:	d8c12015 	stw	r3,1152(sp)
4008b108:	d8811f15 	stw	r2,1148(sp)
4008b10c:	e0bff60e 	bge	fp,r2,4008b0e8 <__alt_mem_epcs+0xfff4a0e8>
4008b110:	b009883a 	mov	r4,r22
4008b114:	b80b883a 	mov	r5,r23
4008b118:	d9811e04 	addi	r6,sp,1144
4008b11c:	00911e00 	call	400911e0 <__sprint_r>
4008b120:	103c5a1e 	bne	r2,zero,4008a28c <__alt_mem_epcs+0xfff4928c>
4008b124:	d8c12017 	ldw	r3,1152(sp)
4008b128:	d8811f17 	ldw	r2,1148(sp)
4008b12c:	da000404 	addi	r8,sp,16
4008b130:	003fee06 	br	4008b0ec <__alt_mem_epcs+0xfff4a0ec>
4008b134:	dac10e04 	addi	r11,sp,1080
4008b138:	0025883a 	mov	r18,zero
4008b13c:	dac13115 	stw	r11,1220(sp)
4008b140:	003cca06 	br	4008a46c <__alt_mem_epcs+0xfff4946c>
4008b144:	b009883a 	mov	r4,r22
4008b148:	b80b883a 	mov	r5,r23
4008b14c:	d9811e04 	addi	r6,sp,1144
4008b150:	00911e00 	call	400911e0 <__sprint_r>
4008b154:	103c4d1e 	bne	r2,zero,4008a28c <__alt_mem_epcs+0xfff4928c>
4008b158:	d8c12017 	ldw	r3,1152(sp)
4008b15c:	d8812787 	ldb	r2,1182(sp)
4008b160:	da000404 	addi	r8,sp,16
4008b164:	003d0506 	br	4008a57c <__alt_mem_epcs+0xfff4957c>
4008b168:	dac12d17 	ldw	r11,1204(sp)
4008b16c:	14c00017 	ldw	r19,0(r2)
4008b170:	0039883a 	mov	fp,zero
4008b174:	5ac00104 	addi	r11,r11,4
4008b178:	dac12d15 	stw	r11,1204(sp)
4008b17c:	0005883a 	mov	r2,zero
4008b180:	9807883a 	mov	r3,r19
4008b184:	003c9c06 	br	4008a3f8 <__alt_mem_epcs+0xfff493f8>
4008b188:	657fffc4 	addi	r21,r12,-1
4008b18c:	057f5c0e 	bge	zero,r21,4008af00 <__alt_mem_epcs+0xfff49f00>
4008b190:	07000404 	movi	fp,16
4008b194:	e5408f0e 	bge	fp,r21,4008b3d4 <___vfprintf_internal_r+0x15a4>
4008b198:	011002b4 	movhi	r4,16394
4008b19c:	21286684 	addi	r4,r4,-24166
4008b1a0:	d9012c15 	stw	r4,1200(sp)
4008b1a4:	01c001c4 	movi	r7,7
4008b1a8:	00000306 	br	4008b1b8 <___vfprintf_internal_r+0x1388>
4008b1ac:	94800204 	addi	r18,r18,8
4008b1b0:	ad7ffc04 	addi	r21,r21,-16
4008b1b4:	e5408a0e 	bge	fp,r21,4008b3e0 <___vfprintf_internal_r+0x15b0>
4008b1b8:	18c00404 	addi	r3,r3,16
4008b1bc:	84000044 	addi	r16,r16,1
4008b1c0:	95000015 	stw	r20,0(r18)
4008b1c4:	97000115 	stw	fp,4(r18)
4008b1c8:	d8c12015 	stw	r3,1152(sp)
4008b1cc:	dc011f15 	stw	r16,1148(sp)
4008b1d0:	3c3ff60e 	bge	r7,r16,4008b1ac <__alt_mem_epcs+0xfff4a1ac>
4008b1d4:	b009883a 	mov	r4,r22
4008b1d8:	b80b883a 	mov	r5,r23
4008b1dc:	d9811e04 	addi	r6,sp,1144
4008b1e0:	d9c13d15 	stw	r7,1268(sp)
4008b1e4:	00911e00 	call	400911e0 <__sprint_r>
4008b1e8:	d9c13d17 	ldw	r7,1268(sp)
4008b1ec:	103c271e 	bne	r2,zero,4008a28c <__alt_mem_epcs+0xfff4928c>
4008b1f0:	d8c12017 	ldw	r3,1152(sp)
4008b1f4:	dc011f17 	ldw	r16,1148(sp)
4008b1f8:	dc800404 	addi	r18,sp,16
4008b1fc:	003fec06 	br	4008b1b0 <__alt_mem_epcs+0xfff4a1b0>
4008b200:	1cc00017 	ldw	r19,0(r3)
4008b204:	dac12d17 	ldw	r11,1204(sp)
4008b208:	9839d7fa 	srai	fp,r19,31
4008b20c:	5ac00104 	addi	r11,r11,4
4008b210:	dac12d15 	stw	r11,1204(sp)
4008b214:	e005883a 	mov	r2,fp
4008b218:	003d9006 	br	4008a85c <__alt_mem_epcs+0xfff4985c>
4008b21c:	00800084 	movi	r2,2
4008b220:	9f06b03a 	or	r3,r19,fp
4008b224:	003c7406 	br	4008a3f8 <__alt_mem_epcs+0xfff493f8>
4008b228:	db012d17 	ldw	r12,1204(sp)
4008b22c:	14c00017 	ldw	r19,0(r2)
4008b230:	0039883a 	mov	fp,zero
4008b234:	63000104 	addi	r12,r12,4
4008b238:	db012d15 	stw	r12,1204(sp)
4008b23c:	00800044 	movi	r2,1
4008b240:	9807883a 	mov	r3,r19
4008b244:	003c6c06 	br	4008a3f8 <__alt_mem_epcs+0xfff493f8>
4008b248:	10803fcc 	andi	r2,r2,255
4008b24c:	1080201c 	xori	r2,r2,128
4008b250:	10bfe004 	addi	r2,r2,-128
4008b254:	01000c04 	movi	r4,48
4008b258:	1101a526 	beq	r2,r4,4008b8f0 <___vfprintf_internal_r+0x1ac0>
4008b25c:	dac13117 	ldw	r11,1220(sp)
4008b260:	db012817 	ldw	r12,1184(sp)
4008b264:	193fffc5 	stb	r4,-1(r3)
4008b268:	5affffc4 	addi	r11,r11,-1
4008b26c:	dac13115 	stw	r11,1220(sp)
4008b270:	62e5c83a 	sub	r18,r12,r11
4008b274:	003c7d06 	br	4008a46c <__alt_mem_epcs+0xfff4946c>
4008b278:	b009883a 	mov	r4,r22
4008b27c:	b80b883a 	mov	r5,r23
4008b280:	d9811e04 	addi	r6,sp,1144
4008b284:	00911e00 	call	400911e0 <__sprint_r>
4008b288:	103c001e 	bne	r2,zero,4008a28c <__alt_mem_epcs+0xfff4928c>
4008b28c:	d8c12017 	ldw	r3,1152(sp)
4008b290:	da000404 	addi	r8,sp,16
4008b294:	db013117 	ldw	r12,1220(sp)
4008b298:	dac13417 	ldw	r11,1232(sp)
4008b29c:	d8812617 	ldw	r2,1176(sp)
4008b2a0:	62e5883a 	add	r18,r12,r11
4008b2a4:	db013317 	ldw	r12,1228(sp)
4008b2a8:	13000216 	blt	r2,r12,4008b2b4 <___vfprintf_internal_r+0x1484>
4008b2ac:	8900004c 	andi	r4,r17,1
4008b2b0:	20000c26 	beq	r4,zero,4008b2e4 <___vfprintf_internal_r+0x14b4>
4008b2b4:	dac13817 	ldw	r11,1248(sp)
4008b2b8:	d9011f17 	ldw	r4,1148(sp)
4008b2bc:	db013517 	ldw	r12,1236(sp)
4008b2c0:	1ac7883a 	add	r3,r3,r11
4008b2c4:	21000044 	addi	r4,r4,1
4008b2c8:	43000015 	stw	r12,0(r8)
4008b2cc:	42c00115 	stw	r11,4(r8)
4008b2d0:	d8c12015 	stw	r3,1152(sp)
4008b2d4:	d9011f15 	stw	r4,1148(sp)
4008b2d8:	014001c4 	movi	r5,7
4008b2dc:	2901cc16 	blt	r5,r4,4008ba10 <___vfprintf_internal_r+0x1be0>
4008b2e0:	42000204 	addi	r8,r8,8
4008b2e4:	dac13317 	ldw	r11,1228(sp)
4008b2e8:	8489c83a 	sub	r4,r16,r18
4008b2ec:	5885c83a 	sub	r2,r11,r2
4008b2f0:	1021883a 	mov	r16,r2
4008b2f4:	2080010e 	bge	r4,r2,4008b2fc <___vfprintf_internal_r+0x14cc>
4008b2f8:	2021883a 	mov	r16,r4
4008b2fc:	04000a0e 	bge	zero,r16,4008b328 <___vfprintf_internal_r+0x14f8>
4008b300:	d9011f17 	ldw	r4,1148(sp)
4008b304:	1c07883a 	add	r3,r3,r16
4008b308:	44800015 	stw	r18,0(r8)
4008b30c:	21000044 	addi	r4,r4,1
4008b310:	44000115 	stw	r16,4(r8)
4008b314:	d8c12015 	stw	r3,1152(sp)
4008b318:	d9011f15 	stw	r4,1148(sp)
4008b31c:	014001c4 	movi	r5,7
4008b320:	2901d616 	blt	r5,r4,4008ba7c <___vfprintf_internal_r+0x1c4c>
4008b324:	42000204 	addi	r8,r8,8
4008b328:	8001df16 	blt	r16,zero,4008baa8 <___vfprintf_internal_r+0x1c78>
4008b32c:	1421c83a 	sub	r16,r2,r16
4008b330:	043ce60e 	bge	zero,r16,4008a6cc <__alt_mem_epcs+0xfff496cc>
4008b334:	04800404 	movi	r18,16
4008b338:	d8811f17 	ldw	r2,1148(sp)
4008b33c:	943efc0e 	bge	r18,r16,4008af30 <__alt_mem_epcs+0xfff49f30>
4008b340:	015002b4 	movhi	r5,16394
4008b344:	29686684 	addi	r5,r5,-24166
4008b348:	d9412c15 	stw	r5,1200(sp)
4008b34c:	054001c4 	movi	r21,7
4008b350:	00000306 	br	4008b360 <___vfprintf_internal_r+0x1530>
4008b354:	42000204 	addi	r8,r8,8
4008b358:	843ffc04 	addi	r16,r16,-16
4008b35c:	943ef70e 	bge	r18,r16,4008af3c <__alt_mem_epcs+0xfff49f3c>
4008b360:	18c00404 	addi	r3,r3,16
4008b364:	10800044 	addi	r2,r2,1
4008b368:	45000015 	stw	r20,0(r8)
4008b36c:	44800115 	stw	r18,4(r8)
4008b370:	d8c12015 	stw	r3,1152(sp)
4008b374:	d8811f15 	stw	r2,1148(sp)
4008b378:	a8bff60e 	bge	r21,r2,4008b354 <__alt_mem_epcs+0xfff4a354>
4008b37c:	b009883a 	mov	r4,r22
4008b380:	b80b883a 	mov	r5,r23
4008b384:	d9811e04 	addi	r6,sp,1144
4008b388:	00911e00 	call	400911e0 <__sprint_r>
4008b38c:	103bbf1e 	bne	r2,zero,4008a28c <__alt_mem_epcs+0xfff4928c>
4008b390:	d8c12017 	ldw	r3,1152(sp)
4008b394:	d8811f17 	ldw	r2,1148(sp)
4008b398:	da000404 	addi	r8,sp,16
4008b39c:	003fee06 	br	4008b358 <__alt_mem_epcs+0xfff4a358>
4008b3a0:	8888703a 	and	r4,r17,r2
4008b3a4:	203eab1e 	bne	r4,zero,4008ae54 <__alt_mem_epcs+0xfff49e54>
4008b3a8:	dc011f17 	ldw	r16,1148(sp)
4008b3ac:	db013117 	ldw	r12,1220(sp)
4008b3b0:	40800115 	stw	r2,4(r8)
4008b3b4:	84000044 	addi	r16,r16,1
4008b3b8:	43000015 	stw	r12,0(r8)
4008b3bc:	d8c12015 	stw	r3,1152(sp)
4008b3c0:	dc011f15 	stw	r16,1148(sp)
4008b3c4:	008001c4 	movi	r2,7
4008b3c8:	14000e16 	blt	r2,r16,4008b404 <___vfprintf_internal_r+0x15d4>
4008b3cc:	44800204 	addi	r18,r8,8
4008b3d0:	003ecb06 	br	4008af00 <__alt_mem_epcs+0xfff49f00>
4008b3d4:	009002b4 	movhi	r2,16394
4008b3d8:	10a86684 	addi	r2,r2,-24166
4008b3dc:	d8812c15 	stw	r2,1200(sp)
4008b3e0:	dac12c17 	ldw	r11,1200(sp)
4008b3e4:	1d47883a 	add	r3,r3,r21
4008b3e8:	84000044 	addi	r16,r16,1
4008b3ec:	92c00015 	stw	r11,0(r18)
4008b3f0:	95400115 	stw	r21,4(r18)
4008b3f4:	d8c12015 	stw	r3,1152(sp)
4008b3f8:	dc011f15 	stw	r16,1148(sp)
4008b3fc:	008001c4 	movi	r2,7
4008b400:	143ebe0e 	bge	r2,r16,4008aefc <__alt_mem_epcs+0xfff49efc>
4008b404:	b009883a 	mov	r4,r22
4008b408:	b80b883a 	mov	r5,r23
4008b40c:	d9811e04 	addi	r6,sp,1144
4008b410:	00911e00 	call	400911e0 <__sprint_r>
4008b414:	103b9d1e 	bne	r2,zero,4008a28c <__alt_mem_epcs+0xfff4928c>
4008b418:	d8c12017 	ldw	r3,1152(sp)
4008b41c:	dc011f17 	ldw	r16,1148(sp)
4008b420:	dc800404 	addi	r18,sp,16
4008b424:	003eb606 	br	4008af00 <__alt_mem_epcs+0xfff49f00>
4008b428:	b009883a 	mov	r4,r22
4008b42c:	b80b883a 	mov	r5,r23
4008b430:	d9811e04 	addi	r6,sp,1144
4008b434:	00911e00 	call	400911e0 <__sprint_r>
4008b438:	103b941e 	bne	r2,zero,4008a28c <__alt_mem_epcs+0xfff4928c>
4008b43c:	d8c12017 	ldw	r3,1152(sp)
4008b440:	dc011f17 	ldw	r16,1148(sp)
4008b444:	da000404 	addi	r8,sp,16
4008b448:	003e8d06 	br	4008ae80 <__alt_mem_epcs+0xfff49e80>
4008b44c:	b009883a 	mov	r4,r22
4008b450:	b80b883a 	mov	r5,r23
4008b454:	d9811e04 	addi	r6,sp,1144
4008b458:	00911e00 	call	400911e0 <__sprint_r>
4008b45c:	103b8b1e 	bne	r2,zero,4008a28c <__alt_mem_epcs+0xfff4928c>
4008b460:	d8c12017 	ldw	r3,1152(sp)
4008b464:	dc011f17 	ldw	r16,1148(sp)
4008b468:	dc800404 	addi	r18,sp,16
4008b46c:	003e8f06 	br	4008aeac <__alt_mem_epcs+0xfff49eac>
4008b470:	db010e04 	addi	r12,sp,1080
4008b474:	0025883a 	mov	r18,zero
4008b478:	db013115 	stw	r12,1220(sp)
4008b47c:	003bfb06 	br	4008a46c <__alt_mem_epcs+0xfff4946c>
4008b480:	b009883a 	mov	r4,r22
4008b484:	b80b883a 	mov	r5,r23
4008b488:	d9811e04 	addi	r6,sp,1144
4008b48c:	00911e00 	call	400911e0 <__sprint_r>
4008b490:	103b7e1e 	bne	r2,zero,4008a28c <__alt_mem_epcs+0xfff4928c>
4008b494:	d8c12017 	ldw	r3,1152(sp)
4008b498:	da000404 	addi	r8,sp,16
4008b49c:	003c5506 	br	4008a5f4 <__alt_mem_epcs+0xfff495f4>
4008b4a0:	04e7c83a 	sub	r19,zero,r19
4008b4a4:	9804c03a 	cmpne	r2,r19,zero
4008b4a8:	0739c83a 	sub	fp,zero,fp
4008b4ac:	e0b9c83a 	sub	fp,fp,r2
4008b4b0:	05400b44 	movi	r21,45
4008b4b4:	dd412785 	stb	r21,1182(sp)
4008b4b8:	da413215 	stw	r9,1224(sp)
4008b4bc:	00800044 	movi	r2,1
4008b4c0:	9f06b03a 	or	r3,r19,fp
4008b4c4:	003bcf06 	br	4008a404 <__alt_mem_epcs+0xfff49404>
4008b4c8:	da013f15 	stw	r8,1276(sp)
4008b4cc:	da413e15 	stw	r9,1272(sp)
4008b4d0:	0090e3c0 	call	40090e3c <__fpclassifyd>
4008b4d4:	da013f17 	ldw	r8,1276(sp)
4008b4d8:	da413e17 	ldw	r9,1272(sp)
4008b4dc:	1000ce26 	beq	r2,zero,4008b818 <___vfprintf_internal_r+0x19e8>
4008b4e0:	057ff7c4 	movi	r21,-33
4008b4e4:	00bfffc4 	movi	r2,-1
4008b4e8:	856a703a 	and	r21,r16,r21
4008b4ec:	4881f026 	beq	r9,r2,4008bcb0 <___vfprintf_internal_r+0x1e80>
4008b4f0:	008011c4 	movi	r2,71
4008b4f4:	a881e526 	beq	r21,r2,4008bc8c <___vfprintf_internal_r+0x1e5c>
4008b4f8:	db013917 	ldw	r12,1252(sp)
4008b4fc:	8ac04014 	ori	r11,r17,256
4008b500:	dac12d15 	stw	r11,1204(sp)
4008b504:	6001e416 	blt	r12,zero,4008bc98 <___vfprintf_internal_r+0x1e68>
4008b508:	dc813917 	ldw	r18,1252(sp)
4008b50c:	d8012b05 	stb	zero,1196(sp)
4008b510:	00801984 	movi	r2,102
4008b514:	80811826 	beq	r16,r2,4008b978 <___vfprintf_internal_r+0x1b48>
4008b518:	00801184 	movi	r2,70
4008b51c:	80811626 	beq	r16,r2,4008b978 <___vfprintf_internal_r+0x1b48>
4008b520:	00801144 	movi	r2,69
4008b524:	a881e026 	beq	r21,r2,4008bca8 <___vfprintf_internal_r+0x1e78>
4008b528:	4839883a 	mov	fp,r9
4008b52c:	d8812604 	addi	r2,sp,1176
4008b530:	d8800115 	stw	r2,4(sp)
4008b534:	d9413717 	ldw	r5,1244(sp)
4008b538:	d8812504 	addi	r2,sp,1172
4008b53c:	d8800215 	stw	r2,8(sp)
4008b540:	d8812104 	addi	r2,sp,1156
4008b544:	df000015 	stw	fp,0(sp)
4008b548:	d8800315 	stw	r2,12(sp)
4008b54c:	b009883a 	mov	r4,r22
4008b550:	900d883a 	mov	r6,r18
4008b554:	01c00084 	movi	r7,2
4008b558:	da013f15 	stw	r8,1276(sp)
4008b55c:	da413e15 	stw	r9,1272(sp)
4008b560:	008c1800 	call	4008c180 <_dtoa_r>
4008b564:	d8813115 	stw	r2,1220(sp)
4008b568:	008019c4 	movi	r2,103
4008b56c:	da013f17 	ldw	r8,1276(sp)
4008b570:	da413e17 	ldw	r9,1272(sp)
4008b574:	80800226 	beq	r16,r2,4008b580 <___vfprintf_internal_r+0x1750>
4008b578:	008011c4 	movi	r2,71
4008b57c:	8081101e 	bne	r16,r2,4008b9c0 <___vfprintf_internal_r+0x1b90>
4008b580:	8880004c 	andi	r2,r17,1
4008b584:	1001df26 	beq	r2,zero,4008bd04 <___vfprintf_internal_r+0x1ed4>
4008b588:	db013117 	ldw	r12,1220(sp)
4008b58c:	6715883a 	add	r10,r12,fp
4008b590:	d9013717 	ldw	r4,1244(sp)
4008b594:	900b883a 	mov	r5,r18
4008b598:	000d883a 	mov	r6,zero
4008b59c:	000f883a 	mov	r7,zero
4008b5a0:	da013f15 	stw	r8,1276(sp)
4008b5a4:	da413e15 	stw	r9,1272(sp)
4008b5a8:	da813d15 	stw	r10,1268(sp)
4008b5ac:	0094c940 	call	40094c94 <__eqdf2>
4008b5b0:	da013f17 	ldw	r8,1276(sp)
4008b5b4:	da413e17 	ldw	r9,1272(sp)
4008b5b8:	da813d17 	ldw	r10,1268(sp)
4008b5bc:	10016526 	beq	r2,zero,4008bb54 <___vfprintf_internal_r+0x1d24>
4008b5c0:	d8812117 	ldw	r2,1156(sp)
4008b5c4:	1280062e 	bgeu	r2,r10,4008b5e0 <___vfprintf_internal_r+0x17b0>
4008b5c8:	01000c04 	movi	r4,48
4008b5cc:	10c00044 	addi	r3,r2,1
4008b5d0:	d8c12115 	stw	r3,1156(sp)
4008b5d4:	11000005 	stb	r4,0(r2)
4008b5d8:	d8812117 	ldw	r2,1156(sp)
4008b5dc:	12bffb36 	bltu	r2,r10,4008b5cc <__alt_mem_epcs+0xfff4a5cc>
4008b5e0:	db013117 	ldw	r12,1220(sp)
4008b5e4:	1305c83a 	sub	r2,r2,r12
4008b5e8:	d8813315 	stw	r2,1228(sp)
4008b5ec:	008011c4 	movi	r2,71
4008b5f0:	a8814a26 	beq	r21,r2,4008bb1c <___vfprintf_internal_r+0x1cec>
4008b5f4:	00801944 	movi	r2,101
4008b5f8:	14020a0e 	bge	r2,r16,4008be24 <___vfprintf_internal_r+0x1ff4>
4008b5fc:	00801984 	movi	r2,102
4008b600:	8081b626 	beq	r16,r2,4008bcdc <___vfprintf_internal_r+0x1eac>
4008b604:	db012617 	ldw	r12,1176(sp)
4008b608:	db013415 	stw	r12,1232(sp)
4008b60c:	db013417 	ldw	r12,1232(sp)
4008b610:	dac13317 	ldw	r11,1228(sp)
4008b614:	62c1a816 	blt	r12,r11,4008bcb8 <___vfprintf_internal_r+0x1e88>
4008b618:	8c40004c 	andi	r17,r17,1
4008b61c:	8801ca1e 	bne	r17,zero,4008bd48 <___vfprintf_internal_r+0x1f18>
4008b620:	6005883a 	mov	r2,r12
4008b624:	6001b516 	blt	r12,zero,4008bcfc <___vfprintf_internal_r+0x1ecc>
4008b628:	dc813417 	ldw	r18,1232(sp)
4008b62c:	df012b07 	ldb	fp,1196(sp)
4008b630:	e001321e 	bne	fp,zero,4008bafc <___vfprintf_internal_r+0x1ccc>
4008b634:	dc412d17 	ldw	r17,1204(sp)
4008b638:	dd412783 	ldbu	r21,1182(sp)
4008b63c:	d8812b15 	stw	r2,1196(sp)
4008b640:	dcc12d15 	stw	r19,1204(sp)
4008b644:	d8013215 	stw	zero,1224(sp)
4008b648:	003b8d06 	br	4008a480 <__alt_mem_epcs+0xfff49480>
4008b64c:	88c0100c 	andi	r3,r17,64
4008b650:	18008226 	beq	r3,zero,4008b85c <___vfprintf_internal_r+0x1a2c>
4008b654:	dac12d17 	ldw	r11,1204(sp)
4008b658:	14c0000b 	ldhu	r19,0(r2)
4008b65c:	0039883a 	mov	fp,zero
4008b660:	5ac00104 	addi	r11,r11,4
4008b664:	dac12d15 	stw	r11,1204(sp)
4008b668:	003c8f06 	br	4008a8a8 <__alt_mem_epcs+0xfff498a8>
4008b66c:	1c000007 	ldb	r16,0(r3)
4008b670:	1805883a 	mov	r2,r3
4008b674:	003a5506 	br	40089fcc <__alt_mem_epcs+0xfff48fcc>
4008b678:	00800084 	movi	r2,2
4008b67c:	003b5e06 	br	4008a3f8 <__alt_mem_epcs+0xfff493f8>
4008b680:	8880040c 	andi	r2,r17,16
4008b684:	1000091e 	bne	r2,zero,4008b6ac <___vfprintf_internal_r+0x187c>
4008b688:	8c40100c 	andi	r17,r17,64
4008b68c:	88000726 	beq	r17,zero,4008b6ac <___vfprintf_internal_r+0x187c>
4008b690:	db012d17 	ldw	r12,1204(sp)
4008b694:	dac12f17 	ldw	r11,1212(sp)
4008b698:	60800017 	ldw	r2,0(r12)
4008b69c:	63000104 	addi	r12,r12,4
4008b6a0:	db012d15 	stw	r12,1204(sp)
4008b6a4:	12c0000d 	sth	r11,0(r2)
4008b6a8:	003a1e06 	br	40089f24 <__alt_mem_epcs+0xfff48f24>
4008b6ac:	db012d17 	ldw	r12,1204(sp)
4008b6b0:	dac12f17 	ldw	r11,1212(sp)
4008b6b4:	60800017 	ldw	r2,0(r12)
4008b6b8:	63000104 	addi	r12,r12,4
4008b6bc:	db012d15 	stw	r12,1204(sp)
4008b6c0:	12c00015 	stw	r11,0(r2)
4008b6c4:	003a1706 	br	40089f24 <__alt_mem_epcs+0xfff48f24>
4008b6c8:	011002b4 	movhi	r4,16394
4008b6cc:	21286684 	addi	r4,r4,-24166
4008b6d0:	d9012c15 	stw	r4,1200(sp)
4008b6d4:	dac12c17 	ldw	r11,1200(sp)
4008b6d8:	1c87883a 	add	r3,r3,r18
4008b6dc:	10800044 	addi	r2,r2,1
4008b6e0:	42c00015 	stw	r11,0(r8)
4008b6e4:	44800115 	stw	r18,4(r8)
4008b6e8:	d8c12015 	stw	r3,1152(sp)
4008b6ec:	d8811f15 	stw	r2,1148(sp)
4008b6f0:	010001c4 	movi	r4,7
4008b6f4:	20bee016 	blt	r4,r2,4008b278 <__alt_mem_epcs+0xfff4a278>
4008b6f8:	42000204 	addi	r8,r8,8
4008b6fc:	003ee506 	br	4008b294 <__alt_mem_epcs+0xfff4a294>
4008b700:	011002b4 	movhi	r4,16394
4008b704:	21286684 	addi	r4,r4,-24166
4008b708:	d9012c15 	stw	r4,1200(sp)
4008b70c:	003bd806 	br	4008a670 <__alt_mem_epcs+0xfff49670>
4008b710:	b009883a 	mov	r4,r22
4008b714:	b80b883a 	mov	r5,r23
4008b718:	d9811e04 	addi	r6,sp,1144
4008b71c:	00911e00 	call	400911e0 <__sprint_r>
4008b720:	103ada1e 	bne	r2,zero,4008a28c <__alt_mem_epcs+0xfff4928c>
4008b724:	d8c12017 	ldw	r3,1152(sp)
4008b728:	da000404 	addi	r8,sp,16
4008b72c:	003d6b06 	br	4008acdc <__alt_mem_epcs+0xfff49cdc>
4008b730:	d8811f17 	ldw	r2,1148(sp)
4008b734:	031002b4 	movhi	r12,16394
4008b738:	01000044 	movi	r4,1
4008b73c:	18c00044 	addi	r3,r3,1
4008b740:	10800044 	addi	r2,r2,1
4008b744:	63286604 	addi	r12,r12,-24168
4008b748:	41000115 	stw	r4,4(r8)
4008b74c:	43000015 	stw	r12,0(r8)
4008b750:	d8c12015 	stw	r3,1152(sp)
4008b754:	d8811f15 	stw	r2,1148(sp)
4008b758:	010001c4 	movi	r4,7
4008b75c:	20804916 	blt	r4,r2,4008b884 <___vfprintf_internal_r+0x1a54>
4008b760:	42000204 	addi	r8,r8,8
4008b764:	8000041e 	bne	r16,zero,4008b778 <___vfprintf_internal_r+0x1948>
4008b768:	dac13317 	ldw	r11,1228(sp)
4008b76c:	5800021e 	bne	r11,zero,4008b778 <___vfprintf_internal_r+0x1948>
4008b770:	8880004c 	andi	r2,r17,1
4008b774:	103bd526 	beq	r2,zero,4008a6cc <__alt_mem_epcs+0xfff496cc>
4008b778:	db013817 	ldw	r12,1248(sp)
4008b77c:	d8811f17 	ldw	r2,1148(sp)
4008b780:	dac13517 	ldw	r11,1236(sp)
4008b784:	1b07883a 	add	r3,r3,r12
4008b788:	10800044 	addi	r2,r2,1
4008b78c:	42c00015 	stw	r11,0(r8)
4008b790:	43000115 	stw	r12,4(r8)
4008b794:	d8c12015 	stw	r3,1152(sp)
4008b798:	d8811f15 	stw	r2,1148(sp)
4008b79c:	010001c4 	movi	r4,7
4008b7a0:	20813016 	blt	r4,r2,4008bc64 <___vfprintf_internal_r+0x1e34>
4008b7a4:	42000204 	addi	r8,r8,8
4008b7a8:	0421c83a 	sub	r16,zero,r16
4008b7ac:	0400630e 	bge	zero,r16,4008b93c <___vfprintf_internal_r+0x1b0c>
4008b7b0:	04800404 	movi	r18,16
4008b7b4:	94009f0e 	bge	r18,r16,4008ba34 <___vfprintf_internal_r+0x1c04>
4008b7b8:	011002b4 	movhi	r4,16394
4008b7bc:	21286684 	addi	r4,r4,-24166
4008b7c0:	d9012c15 	stw	r4,1200(sp)
4008b7c4:	054001c4 	movi	r21,7
4008b7c8:	00000306 	br	4008b7d8 <___vfprintf_internal_r+0x19a8>
4008b7cc:	42000204 	addi	r8,r8,8
4008b7d0:	843ffc04 	addi	r16,r16,-16
4008b7d4:	94009a0e 	bge	r18,r16,4008ba40 <___vfprintf_internal_r+0x1c10>
4008b7d8:	18c00404 	addi	r3,r3,16
4008b7dc:	10800044 	addi	r2,r2,1
4008b7e0:	45000015 	stw	r20,0(r8)
4008b7e4:	44800115 	stw	r18,4(r8)
4008b7e8:	d8c12015 	stw	r3,1152(sp)
4008b7ec:	d8811f15 	stw	r2,1148(sp)
4008b7f0:	a8bff60e 	bge	r21,r2,4008b7cc <__alt_mem_epcs+0xfff4a7cc>
4008b7f4:	b009883a 	mov	r4,r22
4008b7f8:	b80b883a 	mov	r5,r23
4008b7fc:	d9811e04 	addi	r6,sp,1144
4008b800:	00911e00 	call	400911e0 <__sprint_r>
4008b804:	103aa11e 	bne	r2,zero,4008a28c <__alt_mem_epcs+0xfff4928c>
4008b808:	d8c12017 	ldw	r3,1152(sp)
4008b80c:	d8811f17 	ldw	r2,1148(sp)
4008b810:	da000404 	addi	r8,sp,16
4008b814:	003fee06 	br	4008b7d0 <__alt_mem_epcs+0xfff4a7d0>
4008b818:	008011c4 	movi	r2,71
4008b81c:	1400b316 	blt	r2,r16,4008baec <___vfprintf_internal_r+0x1cbc>
4008b820:	031002b4 	movhi	r12,16394
4008b824:	63285804 	addi	r12,r12,-24224
4008b828:	db013115 	stw	r12,1220(sp)
4008b82c:	00c000c4 	movi	r3,3
4008b830:	00bfdfc4 	movi	r2,-129
4008b834:	d8c12b15 	stw	r3,1196(sp)
4008b838:	88a2703a 	and	r17,r17,r2
4008b83c:	dd412783 	ldbu	r21,1182(sp)
4008b840:	dcc12d15 	stw	r19,1204(sp)
4008b844:	1825883a 	mov	r18,r3
4008b848:	d8013215 	stw	zero,1224(sp)
4008b84c:	d8013415 	stw	zero,1232(sp)
4008b850:	003b0b06 	br	4008a480 <__alt_mem_epcs+0xfff49480>
4008b854:	4825883a 	mov	r18,r9
4008b858:	003cba06 	br	4008ab44 <__alt_mem_epcs+0xfff49b44>
4008b85c:	db012d17 	ldw	r12,1204(sp)
4008b860:	14c00017 	ldw	r19,0(r2)
4008b864:	0039883a 	mov	fp,zero
4008b868:	63000104 	addi	r12,r12,4
4008b86c:	db012d15 	stw	r12,1204(sp)
4008b870:	003c0d06 	br	4008a8a8 <__alt_mem_epcs+0xfff498a8>
4008b874:	009002b4 	movhi	r2,16394
4008b878:	10a85604 	addi	r2,r2,-24232
4008b87c:	d8813115 	stw	r2,1220(sp)
4008b880:	003ac406 	br	4008a394 <__alt_mem_epcs+0xfff49394>
4008b884:	b009883a 	mov	r4,r22
4008b888:	b80b883a 	mov	r5,r23
4008b88c:	d9811e04 	addi	r6,sp,1144
4008b890:	00911e00 	call	400911e0 <__sprint_r>
4008b894:	103a7d1e 	bne	r2,zero,4008a28c <__alt_mem_epcs+0xfff4928c>
4008b898:	dc012617 	ldw	r16,1176(sp)
4008b89c:	d8c12017 	ldw	r3,1152(sp)
4008b8a0:	da000404 	addi	r8,sp,16
4008b8a4:	003faf06 	br	4008b764 <__alt_mem_epcs+0xfff4a764>
4008b8a8:	db012e17 	ldw	r12,1208(sp)
4008b8ac:	1805883a 	mov	r2,r3
4008b8b0:	dac12d15 	stw	r11,1204(sp)
4008b8b4:	0319c83a 	sub	r12,zero,r12
4008b8b8:	db012e15 	stw	r12,1208(sp)
4008b8bc:	003a7e06 	br	4008a2b8 <__alt_mem_epcs+0xfff492b8>
4008b8c0:	18800044 	addi	r2,r3,1
4008b8c4:	8c400814 	ori	r17,r17,32
4008b8c8:	1c000047 	ldb	r16,1(r3)
4008b8cc:	0039bf06 	br	40089fcc <__alt_mem_epcs+0xfff48fcc>
4008b8d0:	b009883a 	mov	r4,r22
4008b8d4:	b80b883a 	mov	r5,r23
4008b8d8:	d9811e04 	addi	r6,sp,1144
4008b8dc:	00911e00 	call	400911e0 <__sprint_r>
4008b8e0:	103a6a1e 	bne	r2,zero,4008a28c <__alt_mem_epcs+0xfff4928c>
4008b8e4:	d8c12017 	ldw	r3,1152(sp)
4008b8e8:	da000404 	addi	r8,sp,16
4008b8ec:	003d0c06 	br	4008ad20 <__alt_mem_epcs+0xfff49d20>
4008b8f0:	db012817 	ldw	r12,1184(sp)
4008b8f4:	d8c13117 	ldw	r3,1220(sp)
4008b8f8:	60e5c83a 	sub	r18,r12,r3
4008b8fc:	003adb06 	br	4008a46c <__alt_mem_epcs+0xfff4946c>
4008b900:	da013f15 	stw	r8,1276(sp)
4008b904:	0089d980 	call	40089d98 <strlen>
4008b908:	1025883a 	mov	r18,r2
4008b90c:	da013f17 	ldw	r8,1276(sp)
4008b910:	903c8e0e 	bge	r18,zero,4008ab4c <__alt_mem_epcs+0xfff49b4c>
4008b914:	0005883a 	mov	r2,zero
4008b918:	003c8c06 	br	4008ab4c <__alt_mem_epcs+0xfff49b4c>
4008b91c:	b009883a 	mov	r4,r22
4008b920:	b80b883a 	mov	r5,r23
4008b924:	d9811e04 	addi	r6,sp,1144
4008b928:	00911e00 	call	400911e0 <__sprint_r>
4008b92c:	103a571e 	bne	r2,zero,4008a28c <__alt_mem_epcs+0xfff4928c>
4008b930:	d8c12017 	ldw	r3,1152(sp)
4008b934:	d8811f17 	ldw	r2,1148(sp)
4008b938:	da000404 	addi	r8,sp,16
4008b93c:	db013317 	ldw	r12,1228(sp)
4008b940:	dac13117 	ldw	r11,1220(sp)
4008b944:	10800044 	addi	r2,r2,1
4008b948:	60c7883a 	add	r3,r12,r3
4008b94c:	42c00015 	stw	r11,0(r8)
4008b950:	43000115 	stw	r12,4(r8)
4008b954:	d8c12015 	stw	r3,1152(sp)
4008b958:	d8811f15 	stw	r2,1148(sp)
4008b95c:	010001c4 	movi	r4,7
4008b960:	20bb590e 	bge	r4,r2,4008a6c8 <__alt_mem_epcs+0xfff496c8>
4008b964:	003d7e06 	br	4008af60 <__alt_mem_epcs+0xfff49f60>
4008b968:	011002b4 	movhi	r4,16394
4008b96c:	21286a84 	addi	r4,r4,-24150
4008b970:	d9013615 	stw	r4,1240(sp)
4008b974:	003af606 	br	4008a550 <__alt_mem_epcs+0xfff49550>
4008b978:	d8812604 	addi	r2,sp,1176
4008b97c:	d8800115 	stw	r2,4(sp)
4008b980:	d9413717 	ldw	r5,1244(sp)
4008b984:	d8812504 	addi	r2,sp,1172
4008b988:	d8800215 	stw	r2,8(sp)
4008b98c:	d8812104 	addi	r2,sp,1156
4008b990:	da400015 	stw	r9,0(sp)
4008b994:	d8800315 	stw	r2,12(sp)
4008b998:	b009883a 	mov	r4,r22
4008b99c:	900d883a 	mov	r6,r18
4008b9a0:	01c000c4 	movi	r7,3
4008b9a4:	da013f15 	stw	r8,1276(sp)
4008b9a8:	da413e15 	stw	r9,1272(sp)
4008b9ac:	008c1800 	call	4008c180 <_dtoa_r>
4008b9b0:	da413e17 	ldw	r9,1272(sp)
4008b9b4:	da013f17 	ldw	r8,1276(sp)
4008b9b8:	d8813115 	stw	r2,1220(sp)
4008b9bc:	4839883a 	mov	fp,r9
4008b9c0:	dac13117 	ldw	r11,1220(sp)
4008b9c4:	00801184 	movi	r2,70
4008b9c8:	5f15883a 	add	r10,r11,fp
4008b9cc:	a8bef01e 	bne	r21,r2,4008b590 <__alt_mem_epcs+0xfff4a590>
4008b9d0:	59000007 	ldb	r4,0(r11)
4008b9d4:	00800c04 	movi	r2,48
4008b9d8:	2080e026 	beq	r4,r2,4008bd5c <___vfprintf_internal_r+0x1f2c>
4008b9dc:	d8c12617 	ldw	r3,1176(sp)
4008b9e0:	50d5883a 	add	r10,r10,r3
4008b9e4:	003eea06 	br	4008b590 <__alt_mem_epcs+0xfff4a590>
4008b9e8:	0025883a 	mov	r18,zero
4008b9ec:	003db306 	br	4008b0bc <__alt_mem_epcs+0xfff4a0bc>
4008b9f0:	b009883a 	mov	r4,r22
4008b9f4:	b80b883a 	mov	r5,r23
4008b9f8:	d9811e04 	addi	r6,sp,1144
4008b9fc:	00911e00 	call	400911e0 <__sprint_r>
4008ba00:	103a221e 	bne	r2,zero,4008a28c <__alt_mem_epcs+0xfff4928c>
4008ba04:	d8c12017 	ldw	r3,1152(sp)
4008ba08:	da000404 	addi	r8,sp,16
4008ba0c:	003daa06 	br	4008b0b8 <__alt_mem_epcs+0xfff4a0b8>
4008ba10:	b009883a 	mov	r4,r22
4008ba14:	b80b883a 	mov	r5,r23
4008ba18:	d9811e04 	addi	r6,sp,1144
4008ba1c:	00911e00 	call	400911e0 <__sprint_r>
4008ba20:	103a1a1e 	bne	r2,zero,4008a28c <__alt_mem_epcs+0xfff4928c>
4008ba24:	d8812617 	ldw	r2,1176(sp)
4008ba28:	d8c12017 	ldw	r3,1152(sp)
4008ba2c:	da000404 	addi	r8,sp,16
4008ba30:	003e2c06 	br	4008b2e4 <__alt_mem_epcs+0xfff4a2e4>
4008ba34:	031002b4 	movhi	r12,16394
4008ba38:	63286684 	addi	r12,r12,-24166
4008ba3c:	db012c15 	stw	r12,1200(sp)
4008ba40:	dac12c17 	ldw	r11,1200(sp)
4008ba44:	1c07883a 	add	r3,r3,r16
4008ba48:	10800044 	addi	r2,r2,1
4008ba4c:	42c00015 	stw	r11,0(r8)
4008ba50:	44000115 	stw	r16,4(r8)
4008ba54:	d8c12015 	stw	r3,1152(sp)
4008ba58:	d8811f15 	stw	r2,1148(sp)
4008ba5c:	010001c4 	movi	r4,7
4008ba60:	20bfae16 	blt	r4,r2,4008b91c <__alt_mem_epcs+0xfff4a91c>
4008ba64:	42000204 	addi	r8,r8,8
4008ba68:	003fb406 	br	4008b93c <__alt_mem_epcs+0xfff4a93c>
4008ba6c:	031002b4 	movhi	r12,16394
4008ba70:	63286a84 	addi	r12,r12,-24150
4008ba74:	db013615 	stw	r12,1240(sp)
4008ba78:	003b3806 	br	4008a75c <__alt_mem_epcs+0xfff4975c>
4008ba7c:	b009883a 	mov	r4,r22
4008ba80:	b80b883a 	mov	r5,r23
4008ba84:	d9811e04 	addi	r6,sp,1144
4008ba88:	00911e00 	call	400911e0 <__sprint_r>
4008ba8c:	1039ff1e 	bne	r2,zero,4008a28c <__alt_mem_epcs+0xfff4928c>
4008ba90:	d8812617 	ldw	r2,1176(sp)
4008ba94:	db013317 	ldw	r12,1228(sp)
4008ba98:	d8c12017 	ldw	r3,1152(sp)
4008ba9c:	da000404 	addi	r8,sp,16
4008baa0:	6085c83a 	sub	r2,r12,r2
4008baa4:	003e2006 	br	4008b328 <__alt_mem_epcs+0xfff4a328>
4008baa8:	0021883a 	mov	r16,zero
4008baac:	003e1f06 	br	4008b32c <__alt_mem_epcs+0xfff4a32c>
4008bab0:	00800184 	movi	r2,6
4008bab4:	1240012e 	bgeu	r2,r9,4008babc <___vfprintf_internal_r+0x1c8c>
4008bab8:	1013883a 	mov	r9,r2
4008babc:	4825883a 	mov	r18,r9
4008bac0:	4805883a 	mov	r2,r9
4008bac4:	48009e16 	blt	r9,zero,4008bd40 <___vfprintf_internal_r+0x1f10>
4008bac8:	d8812b15 	stw	r2,1196(sp)
4008bacc:	009002b4 	movhi	r2,16394
4008bad0:	10a86404 	addi	r2,r2,-24176
4008bad4:	d8813115 	stw	r2,1220(sp)
4008bad8:	dcc12d15 	stw	r19,1204(sp)
4008badc:	d8013215 	stw	zero,1224(sp)
4008bae0:	d8013415 	stw	zero,1232(sp)
4008bae4:	0005883a 	mov	r2,zero
4008bae8:	003a6c06 	br	4008a49c <__alt_mem_epcs+0xfff4949c>
4008baec:	009002b4 	movhi	r2,16394
4008baf0:	10a85904 	addi	r2,r2,-24220
4008baf4:	d8813115 	stw	r2,1220(sp)
4008baf8:	003f4c06 	br	4008b82c <__alt_mem_epcs+0xfff4a82c>
4008bafc:	00c00b44 	movi	r3,45
4008bb00:	d8812b15 	stw	r2,1196(sp)
4008bb04:	dc412d17 	ldw	r17,1204(sp)
4008bb08:	d8c12785 	stb	r3,1182(sp)
4008bb0c:	dcc12d15 	stw	r19,1204(sp)
4008bb10:	d8013215 	stw	zero,1224(sp)
4008bb14:	00800b44 	movi	r2,45
4008bb18:	003a5d06 	br	4008a490 <__alt_mem_epcs+0xfff49490>
4008bb1c:	d8c12617 	ldw	r3,1176(sp)
4008bb20:	00bfff44 	movi	r2,-3
4008bb24:	18800d16 	blt	r3,r2,4008bb5c <___vfprintf_internal_r+0x1d2c>
4008bb28:	48c00c16 	blt	r9,r3,4008bb5c <___vfprintf_internal_r+0x1d2c>
4008bb2c:	d8c13415 	stw	r3,1232(sp)
4008bb30:	040019c4 	movi	r16,103
4008bb34:	003eb506 	br	4008b60c <__alt_mem_epcs+0xfff4a60c>
4008bb38:	05400b44 	movi	r21,45
4008bb3c:	dd412785 	stb	r21,1182(sp)
4008bb40:	003a0f06 	br	4008a380 <__alt_mem_epcs+0xfff49380>
4008bb44:	011002b4 	movhi	r4,16394
4008bb48:	21286684 	addi	r4,r4,-24166
4008bb4c:	d9012c15 	stw	r4,1200(sp)
4008bb50:	003cb106 	br	4008ae18 <__alt_mem_epcs+0xfff49e18>
4008bb54:	5005883a 	mov	r2,r10
4008bb58:	003ea106 	br	4008b5e0 <__alt_mem_epcs+0xfff4a5e0>
4008bb5c:	843fff84 	addi	r16,r16,-2
4008bb60:	1f3fffc4 	addi	fp,r3,-1
4008bb64:	df012615 	stw	fp,1176(sp)
4008bb68:	dc0122c5 	stb	r16,1163(sp)
4008bb6c:	e0009516 	blt	fp,zero,4008bdc4 <___vfprintf_internal_r+0x1f94>
4008bb70:	00800ac4 	movi	r2,43
4008bb74:	d8812305 	stb	r2,1164(sp)
4008bb78:	00800244 	movi	r2,9
4008bb7c:	1700690e 	bge	r2,fp,4008bd24 <___vfprintf_internal_r+0x1ef4>
4008bb80:	dd4122c4 	addi	r21,sp,1163
4008bb84:	dc012c15 	stw	r16,1200(sp)
4008bb88:	8825883a 	mov	r18,r17
4008bb8c:	a821883a 	mov	r16,r21
4008bb90:	4023883a 	mov	r17,r8
4008bb94:	e009883a 	mov	r4,fp
4008bb98:	01400284 	movi	r5,10
4008bb9c:	0093ac00 	call	40093ac0 <__modsi3>
4008bba0:	10800c04 	addi	r2,r2,48
4008bba4:	843fffc4 	addi	r16,r16,-1
4008bba8:	e009883a 	mov	r4,fp
4008bbac:	01400284 	movi	r5,10
4008bbb0:	80800005 	stb	r2,0(r16)
4008bbb4:	0093a6c0 	call	40093a6c <__divsi3>
4008bbb8:	1039883a 	mov	fp,r2
4008bbbc:	00800244 	movi	r2,9
4008bbc0:	173ff416 	blt	r2,fp,4008bb94 <__alt_mem_epcs+0xfff4ab94>
4008bbc4:	8811883a 	mov	r8,r17
4008bbc8:	e0800c04 	addi	r2,fp,48
4008bbcc:	9023883a 	mov	r17,r18
4008bbd0:	8025883a 	mov	r18,r16
4008bbd4:	913fffc4 	addi	r4,r18,-1
4008bbd8:	90bfffc5 	stb	r2,-1(r18)
4008bbdc:	dc012c17 	ldw	r16,1200(sp)
4008bbe0:	25408e2e 	bgeu	r4,r21,4008be1c <___vfprintf_internal_r+0x1fec>
4008bbe4:	d9412384 	addi	r5,sp,1166
4008bbe8:	2c8bc83a 	sub	r5,r5,r18
4008bbec:	d8c12344 	addi	r3,sp,1165
4008bbf0:	a94b883a 	add	r5,r21,r5
4008bbf4:	00000106 	br	4008bbfc <___vfprintf_internal_r+0x1dcc>
4008bbf8:	20800003 	ldbu	r2,0(r4)
4008bbfc:	18800005 	stb	r2,0(r3)
4008bc00:	18c00044 	addi	r3,r3,1
4008bc04:	21000044 	addi	r4,r4,1
4008bc08:	197ffb1e 	bne	r3,r5,4008bbf8 <__alt_mem_epcs+0xfff4abf8>
4008bc0c:	d8812304 	addi	r2,sp,1164
4008bc10:	1485c83a 	sub	r2,r2,r18
4008bc14:	d8c12344 	addi	r3,sp,1165
4008bc18:	1885883a 	add	r2,r3,r2
4008bc1c:	dac13317 	ldw	r11,1228(sp)
4008bc20:	156bc83a 	sub	r21,r2,r21
4008bc24:	dd413a15 	stw	r21,1256(sp)
4008bc28:	00800044 	movi	r2,1
4008bc2c:	5d65883a 	add	r18,r11,r21
4008bc30:	12c0770e 	bge	r2,r11,4008be10 <___vfprintf_internal_r+0x1fe0>
4008bc34:	94800044 	addi	r18,r18,1
4008bc38:	9005883a 	mov	r2,r18
4008bc3c:	90007216 	blt	r18,zero,4008be08 <___vfprintf_internal_r+0x1fd8>
4008bc40:	d8013415 	stw	zero,1232(sp)
4008bc44:	003e7906 	br	4008b62c <__alt_mem_epcs+0xfff4a62c>
4008bc48:	da412b15 	stw	r9,1196(sp)
4008bc4c:	dd412783 	ldbu	r21,1182(sp)
4008bc50:	4825883a 	mov	r18,r9
4008bc54:	dcc12d15 	stw	r19,1204(sp)
4008bc58:	d8013215 	stw	zero,1224(sp)
4008bc5c:	d8013415 	stw	zero,1232(sp)
4008bc60:	003a0706 	br	4008a480 <__alt_mem_epcs+0xfff49480>
4008bc64:	b009883a 	mov	r4,r22
4008bc68:	b80b883a 	mov	r5,r23
4008bc6c:	d9811e04 	addi	r6,sp,1144
4008bc70:	00911e00 	call	400911e0 <__sprint_r>
4008bc74:	1039851e 	bne	r2,zero,4008a28c <__alt_mem_epcs+0xfff4928c>
4008bc78:	dc012617 	ldw	r16,1176(sp)
4008bc7c:	d8c12017 	ldw	r3,1152(sp)
4008bc80:	d8811f17 	ldw	r2,1148(sp)
4008bc84:	da000404 	addi	r8,sp,16
4008bc88:	003ec706 	br	4008b7a8 <__alt_mem_epcs+0xfff4a7a8>
4008bc8c:	483e1a1e 	bne	r9,zero,4008b4f8 <__alt_mem_epcs+0xfff4a4f8>
4008bc90:	9013883a 	mov	r9,r18
4008bc94:	003e1806 	br	4008b4f8 <__alt_mem_epcs+0xfff4a4f8>
4008bc98:	00c00b44 	movi	r3,45
4008bc9c:	64a0003c 	xorhi	r18,r12,32768
4008bca0:	d8c12b05 	stb	r3,1196(sp)
4008bca4:	003e1a06 	br	4008b510 <__alt_mem_epcs+0xfff4a510>
4008bca8:	4f000044 	addi	fp,r9,1
4008bcac:	003e1f06 	br	4008b52c <__alt_mem_epcs+0xfff4a52c>
4008bcb0:	02400184 	movi	r9,6
4008bcb4:	003e1006 	br	4008b4f8 <__alt_mem_epcs+0xfff4a4f8>
4008bcb8:	d8c13417 	ldw	r3,1232(sp)
4008bcbc:	00c04b0e 	bge	zero,r3,4008bdec <___vfprintf_internal_r+0x1fbc>
4008bcc0:	04800044 	movi	r18,1
4008bcc4:	dac13317 	ldw	r11,1228(sp)
4008bcc8:	92e5883a 	add	r18,r18,r11
4008bccc:	9005883a 	mov	r2,r18
4008bcd0:	903e560e 	bge	r18,zero,4008b62c <__alt_mem_epcs+0xfff4a62c>
4008bcd4:	0005883a 	mov	r2,zero
4008bcd8:	003e5406 	br	4008b62c <__alt_mem_epcs+0xfff4a62c>
4008bcdc:	d8c12617 	ldw	r3,1176(sp)
4008bce0:	d8c13415 	stw	r3,1232(sp)
4008bce4:	00c03b0e 	bge	zero,r3,4008bdd4 <___vfprintf_internal_r+0x1fa4>
4008bce8:	4800081e 	bne	r9,zero,4008bd0c <___vfprintf_internal_r+0x1edc>
4008bcec:	8c40004c 	andi	r17,r17,1
4008bcf0:	8800061e 	bne	r17,zero,4008bd0c <___vfprintf_internal_r+0x1edc>
4008bcf4:	1805883a 	mov	r2,r3
4008bcf8:	183e4b0e 	bge	r3,zero,4008b628 <__alt_mem_epcs+0xfff4a628>
4008bcfc:	0005883a 	mov	r2,zero
4008bd00:	003e4906 	br	4008b628 <__alt_mem_epcs+0xfff4a628>
4008bd04:	d8812117 	ldw	r2,1156(sp)
4008bd08:	003e3506 	br	4008b5e0 <__alt_mem_epcs+0xfff4a5e0>
4008bd0c:	dac13417 	ldw	r11,1232(sp)
4008bd10:	4a400044 	addi	r9,r9,1
4008bd14:	5a65883a 	add	r18,r11,r9
4008bd18:	9005883a 	mov	r2,r18
4008bd1c:	903e430e 	bge	r18,zero,4008b62c <__alt_mem_epcs+0xfff4a62c>
4008bd20:	003fec06 	br	4008bcd4 <__alt_mem_epcs+0xfff4acd4>
4008bd24:	00800c04 	movi	r2,48
4008bd28:	e0c00c04 	addi	r3,fp,48
4008bd2c:	d8812345 	stb	r2,1165(sp)
4008bd30:	d8c12385 	stb	r3,1166(sp)
4008bd34:	d88123c4 	addi	r2,sp,1167
4008bd38:	dd4122c4 	addi	r21,sp,1163
4008bd3c:	003fb706 	br	4008bc1c <__alt_mem_epcs+0xfff4ac1c>
4008bd40:	0005883a 	mov	r2,zero
4008bd44:	003f6006 	br	4008bac8 <__alt_mem_epcs+0xfff4aac8>
4008bd48:	db013417 	ldw	r12,1232(sp)
4008bd4c:	64800044 	addi	r18,r12,1
4008bd50:	9005883a 	mov	r2,r18
4008bd54:	903e350e 	bge	r18,zero,4008b62c <__alt_mem_epcs+0xfff4a62c>
4008bd58:	003fde06 	br	4008bcd4 <__alt_mem_epcs+0xfff4acd4>
4008bd5c:	d9013717 	ldw	r4,1244(sp)
4008bd60:	900b883a 	mov	r5,r18
4008bd64:	000d883a 	mov	r6,zero
4008bd68:	000f883a 	mov	r7,zero
4008bd6c:	da013f15 	stw	r8,1276(sp)
4008bd70:	da413e15 	stw	r9,1272(sp)
4008bd74:	da813d15 	stw	r10,1268(sp)
4008bd78:	0094c940 	call	40094c94 <__eqdf2>
4008bd7c:	da013f17 	ldw	r8,1276(sp)
4008bd80:	da413e17 	ldw	r9,1272(sp)
4008bd84:	da813d17 	ldw	r10,1268(sp)
4008bd88:	103f1426 	beq	r2,zero,4008b9dc <__alt_mem_epcs+0xfff4a9dc>
4008bd8c:	00800044 	movi	r2,1
4008bd90:	1707c83a 	sub	r3,r2,fp
4008bd94:	d8c12615 	stw	r3,1176(sp)
4008bd98:	003f1106 	br	4008b9e0 <__alt_mem_epcs+0xfff4a9e0>
4008bd9c:	dac12d17 	ldw	r11,1204(sp)
4008bda0:	5a400017 	ldw	r9,0(r11)
4008bda4:	5ac00104 	addi	r11,r11,4
4008bda8:	dac12d15 	stw	r11,1204(sp)
4008bdac:	483ec60e 	bge	r9,zero,4008b8c8 <__alt_mem_epcs+0xfff4a8c8>
4008bdb0:	027fffc4 	movi	r9,-1
4008bdb4:	1c000047 	ldb	r16,1(r3)
4008bdb8:	00388406 	br	40089fcc <__alt_mem_epcs+0xfff48fcc>
4008bdbc:	043fffc4 	movi	r16,-1
4008bdc0:	00391006 	br	4008a204 <__alt_mem_epcs+0xfff49204>
4008bdc4:	00800b44 	movi	r2,45
4008bdc8:	0739c83a 	sub	fp,zero,fp
4008bdcc:	d8812305 	stb	r2,1164(sp)
4008bdd0:	003f6906 	br	4008bb78 <__alt_mem_epcs+0xfff4ab78>
4008bdd4:	4800081e 	bne	r9,zero,4008bdf8 <___vfprintf_internal_r+0x1fc8>
4008bdd8:	8c40004c 	andi	r17,r17,1
4008bddc:	8800061e 	bne	r17,zero,4008bdf8 <___vfprintf_internal_r+0x1fc8>
4008bde0:	00800044 	movi	r2,1
4008bde4:	1025883a 	mov	r18,r2
4008bde8:	003e1006 	br	4008b62c <__alt_mem_epcs+0xfff4a62c>
4008bdec:	04800084 	movi	r18,2
4008bdf0:	90e5c83a 	sub	r18,r18,r3
4008bdf4:	003fb306 	br	4008bcc4 <__alt_mem_epcs+0xfff4acc4>
4008bdf8:	4c800084 	addi	r18,r9,2
4008bdfc:	9005883a 	mov	r2,r18
4008be00:	903e0a0e 	bge	r18,zero,4008b62c <__alt_mem_epcs+0xfff4a62c>
4008be04:	003fb306 	br	4008bcd4 <__alt_mem_epcs+0xfff4acd4>
4008be08:	0005883a 	mov	r2,zero
4008be0c:	003f8c06 	br	4008bc40 <__alt_mem_epcs+0xfff4ac40>
4008be10:	88a2703a 	and	r17,r17,r2
4008be14:	883f8826 	beq	r17,zero,4008bc38 <__alt_mem_epcs+0xfff4ac38>
4008be18:	003f8606 	br	4008bc34 <__alt_mem_epcs+0xfff4ac34>
4008be1c:	d8812344 	addi	r2,sp,1165
4008be20:	003f7e06 	br	4008bc1c <__alt_mem_epcs+0xfff4ac1c>
4008be24:	d8c12617 	ldw	r3,1176(sp)
4008be28:	003f4d06 	br	4008bb60 <__alt_mem_epcs+0xfff4ab60>

4008be2c <__vfprintf_internal>:
4008be2c:	2007883a 	mov	r3,r4
4008be30:	011002b4 	movhi	r4,16394
4008be34:	212feb04 	addi	r4,r4,-16468
4008be38:	21000017 	ldw	r4,0(r4)
4008be3c:	2805883a 	mov	r2,r5
4008be40:	300f883a 	mov	r7,r6
4008be44:	180b883a 	mov	r5,r3
4008be48:	100d883a 	mov	r6,r2
4008be4c:	0089e301 	jmpi	40089e30 <___vfprintf_internal_r>

4008be50 <__swsetup_r>:
4008be50:	009002b4 	movhi	r2,16394
4008be54:	defffd04 	addi	sp,sp,-12
4008be58:	10afeb04 	addi	r2,r2,-16468
4008be5c:	dc400115 	stw	r17,4(sp)
4008be60:	2023883a 	mov	r17,r4
4008be64:	11000017 	ldw	r4,0(r2)
4008be68:	dc000015 	stw	r16,0(sp)
4008be6c:	dfc00215 	stw	ra,8(sp)
4008be70:	2821883a 	mov	r16,r5
4008be74:	20000226 	beq	r4,zero,4008be80 <__swsetup_r+0x30>
4008be78:	20c00e17 	ldw	r3,56(r4)
4008be7c:	18002e26 	beq	r3,zero,4008bf38 <__swsetup_r+0xe8>
4008be80:	8080030b 	ldhu	r2,12(r16)
4008be84:	10c0020c 	andi	r3,r2,8
4008be88:	100d883a 	mov	r6,r2
4008be8c:	18000f26 	beq	r3,zero,4008becc <__swsetup_r+0x7c>
4008be90:	80c00417 	ldw	r3,16(r16)
4008be94:	18001526 	beq	r3,zero,4008beec <__swsetup_r+0x9c>
4008be98:	1100004c 	andi	r4,r2,1
4008be9c:	20001c1e 	bne	r4,zero,4008bf10 <__swsetup_r+0xc0>
4008bea0:	1080008c 	andi	r2,r2,2
4008bea4:	1000261e 	bne	r2,zero,4008bf40 <__swsetup_r+0xf0>
4008bea8:	80800517 	ldw	r2,20(r16)
4008beac:	80800215 	stw	r2,8(r16)
4008beb0:	18001c26 	beq	r3,zero,4008bf24 <__swsetup_r+0xd4>
4008beb4:	0005883a 	mov	r2,zero
4008beb8:	dfc00217 	ldw	ra,8(sp)
4008bebc:	dc400117 	ldw	r17,4(sp)
4008bec0:	dc000017 	ldw	r16,0(sp)
4008bec4:	dec00304 	addi	sp,sp,12
4008bec8:	f800283a 	ret
4008becc:	3080040c 	andi	r2,r6,16
4008bed0:	10001726 	beq	r2,zero,4008bf30 <__swsetup_r+0xe0>
4008bed4:	3080010c 	andi	r2,r6,4
4008bed8:	10001b1e 	bne	r2,zero,4008bf48 <__swsetup_r+0xf8>
4008bedc:	80c00417 	ldw	r3,16(r16)
4008bee0:	30800214 	ori	r2,r6,8
4008bee4:	8080030d 	sth	r2,12(r16)
4008bee8:	183feb1e 	bne	r3,zero,4008be98 <__alt_mem_epcs+0xfff4ae98>
4008beec:	1140a00c 	andi	r5,r2,640
4008bef0:	01008004 	movi	r4,512
4008bef4:	293fe826 	beq	r5,r4,4008be98 <__alt_mem_epcs+0xfff4ae98>
4008bef8:	8809883a 	mov	r4,r17
4008befc:	800b883a 	mov	r5,r16
4008bf00:	008e9a80 	call	4008e9a8 <__smakebuf_r>
4008bf04:	8080030b 	ldhu	r2,12(r16)
4008bf08:	80c00417 	ldw	r3,16(r16)
4008bf0c:	003fe206 	br	4008be98 <__alt_mem_epcs+0xfff4ae98>
4008bf10:	80800517 	ldw	r2,20(r16)
4008bf14:	80000215 	stw	zero,8(r16)
4008bf18:	0085c83a 	sub	r2,zero,r2
4008bf1c:	80800615 	stw	r2,24(r16)
4008bf20:	183fe41e 	bne	r3,zero,4008beb4 <__alt_mem_epcs+0xfff4aeb4>
4008bf24:	8080030b 	ldhu	r2,12(r16)
4008bf28:	1080200c 	andi	r2,r2,128
4008bf2c:	103fe226 	beq	r2,zero,4008beb8 <__alt_mem_epcs+0xfff4aeb8>
4008bf30:	00bfffc4 	movi	r2,-1
4008bf34:	003fe006 	br	4008beb8 <__alt_mem_epcs+0xfff4aeb8>
4008bf38:	008de500 	call	4008de50 <__sinit>
4008bf3c:	003fd006 	br	4008be80 <__alt_mem_epcs+0xfff4ae80>
4008bf40:	0005883a 	mov	r2,zero
4008bf44:	003fd906 	br	4008beac <__alt_mem_epcs+0xfff4aeac>
4008bf48:	81400c17 	ldw	r5,48(r16)
4008bf4c:	28000626 	beq	r5,zero,4008bf68 <__swsetup_r+0x118>
4008bf50:	80801004 	addi	r2,r16,64
4008bf54:	28800326 	beq	r5,r2,4008bf64 <__swsetup_r+0x114>
4008bf58:	8809883a 	mov	r4,r17
4008bf5c:	008dfc40 	call	4008dfc4 <_free_r>
4008bf60:	8180030b 	ldhu	r6,12(r16)
4008bf64:	80000c15 	stw	zero,48(r16)
4008bf68:	80c00417 	ldw	r3,16(r16)
4008bf6c:	00bff6c4 	movi	r2,-37
4008bf70:	118c703a 	and	r6,r2,r6
4008bf74:	80000115 	stw	zero,4(r16)
4008bf78:	80c00015 	stw	r3,0(r16)
4008bf7c:	003fd806 	br	4008bee0 <__alt_mem_epcs+0xfff4aee0>

4008bf80 <quorem>:
4008bf80:	defff704 	addi	sp,sp,-36
4008bf84:	dc800215 	stw	r18,8(sp)
4008bf88:	20800417 	ldw	r2,16(r4)
4008bf8c:	2c800417 	ldw	r18,16(r5)
4008bf90:	dfc00815 	stw	ra,32(sp)
4008bf94:	ddc00715 	stw	r23,28(sp)
4008bf98:	dd800615 	stw	r22,24(sp)
4008bf9c:	dd400515 	stw	r21,20(sp)
4008bfa0:	dd000415 	stw	r20,16(sp)
4008bfa4:	dcc00315 	stw	r19,12(sp)
4008bfa8:	dc400115 	stw	r17,4(sp)
4008bfac:	dc000015 	stw	r16,0(sp)
4008bfb0:	14807116 	blt	r2,r18,4008c178 <quorem+0x1f8>
4008bfb4:	94bfffc4 	addi	r18,r18,-1
4008bfb8:	94ad883a 	add	r22,r18,r18
4008bfbc:	b5ad883a 	add	r22,r22,r22
4008bfc0:	2c400504 	addi	r17,r5,20
4008bfc4:	8da9883a 	add	r20,r17,r22
4008bfc8:	25400504 	addi	r21,r4,20
4008bfcc:	282f883a 	mov	r23,r5
4008bfd0:	adad883a 	add	r22,r21,r22
4008bfd4:	a1400017 	ldw	r5,0(r20)
4008bfd8:	2021883a 	mov	r16,r4
4008bfdc:	b1000017 	ldw	r4,0(r22)
4008bfe0:	29400044 	addi	r5,r5,1
4008bfe4:	0093b1c0 	call	40093b1c <__udivsi3>
4008bfe8:	1027883a 	mov	r19,r2
4008bfec:	10002c26 	beq	r2,zero,4008c0a0 <quorem+0x120>
4008bff0:	a813883a 	mov	r9,r21
4008bff4:	8811883a 	mov	r8,r17
4008bff8:	0009883a 	mov	r4,zero
4008bffc:	000d883a 	mov	r6,zero
4008c000:	41c00017 	ldw	r7,0(r8)
4008c004:	49400017 	ldw	r5,0(r9)
4008c008:	42000104 	addi	r8,r8,4
4008c00c:	38bfffcc 	andi	r2,r7,65535
4008c010:	14c5383a 	mul	r2,r2,r19
4008c014:	380ed43a 	srli	r7,r7,16
4008c018:	28ffffcc 	andi	r3,r5,65535
4008c01c:	2085883a 	add	r2,r4,r2
4008c020:	1008d43a 	srli	r4,r2,16
4008c024:	3ccf383a 	mul	r7,r7,r19
4008c028:	198d883a 	add	r6,r3,r6
4008c02c:	10ffffcc 	andi	r3,r2,65535
4008c030:	30c7c83a 	sub	r3,r6,r3
4008c034:	280ad43a 	srli	r5,r5,16
4008c038:	21c9883a 	add	r4,r4,r7
4008c03c:	180dd43a 	srai	r6,r3,16
4008c040:	20bfffcc 	andi	r2,r4,65535
4008c044:	288bc83a 	sub	r5,r5,r2
4008c048:	298b883a 	add	r5,r5,r6
4008c04c:	280e943a 	slli	r7,r5,16
4008c050:	18ffffcc 	andi	r3,r3,65535
4008c054:	2008d43a 	srli	r4,r4,16
4008c058:	38ceb03a 	or	r7,r7,r3
4008c05c:	49c00015 	stw	r7,0(r9)
4008c060:	280dd43a 	srai	r6,r5,16
4008c064:	4a400104 	addi	r9,r9,4
4008c068:	a23fe52e 	bgeu	r20,r8,4008c000 <__alt_mem_epcs+0xfff4b000>
4008c06c:	b0800017 	ldw	r2,0(r22)
4008c070:	10000b1e 	bne	r2,zero,4008c0a0 <quorem+0x120>
4008c074:	b0bfff04 	addi	r2,r22,-4
4008c078:	a880082e 	bgeu	r21,r2,4008c09c <quorem+0x11c>
4008c07c:	b0ffff17 	ldw	r3,-4(r22)
4008c080:	18000326 	beq	r3,zero,4008c090 <quorem+0x110>
4008c084:	00000506 	br	4008c09c <quorem+0x11c>
4008c088:	10c00017 	ldw	r3,0(r2)
4008c08c:	1800031e 	bne	r3,zero,4008c09c <quorem+0x11c>
4008c090:	10bfff04 	addi	r2,r2,-4
4008c094:	94bfffc4 	addi	r18,r18,-1
4008c098:	a8bffb36 	bltu	r21,r2,4008c088 <__alt_mem_epcs+0xfff4b088>
4008c09c:	84800415 	stw	r18,16(r16)
4008c0a0:	8009883a 	mov	r4,r16
4008c0a4:	b80b883a 	mov	r5,r23
4008c0a8:	00900680 	call	40090068 <__mcmp>
4008c0ac:	10002616 	blt	r2,zero,4008c148 <quorem+0x1c8>
4008c0b0:	9cc00044 	addi	r19,r19,1
4008c0b4:	a80d883a 	mov	r6,r21
4008c0b8:	000b883a 	mov	r5,zero
4008c0bc:	31000017 	ldw	r4,0(r6)
4008c0c0:	88800017 	ldw	r2,0(r17)
4008c0c4:	31800104 	addi	r6,r6,4
4008c0c8:	20ffffcc 	andi	r3,r4,65535
4008c0cc:	194b883a 	add	r5,r3,r5
4008c0d0:	10ffffcc 	andi	r3,r2,65535
4008c0d4:	28c7c83a 	sub	r3,r5,r3
4008c0d8:	1004d43a 	srli	r2,r2,16
4008c0dc:	2008d43a 	srli	r4,r4,16
4008c0e0:	180bd43a 	srai	r5,r3,16
4008c0e4:	18ffffcc 	andi	r3,r3,65535
4008c0e8:	2089c83a 	sub	r4,r4,r2
4008c0ec:	2149883a 	add	r4,r4,r5
4008c0f0:	2004943a 	slli	r2,r4,16
4008c0f4:	8c400104 	addi	r17,r17,4
4008c0f8:	200bd43a 	srai	r5,r4,16
4008c0fc:	10c6b03a 	or	r3,r2,r3
4008c100:	30ffff15 	stw	r3,-4(r6)
4008c104:	a47fed2e 	bgeu	r20,r17,4008c0bc <__alt_mem_epcs+0xfff4b0bc>
4008c108:	9485883a 	add	r2,r18,r18
4008c10c:	1085883a 	add	r2,r2,r2
4008c110:	a887883a 	add	r3,r21,r2
4008c114:	18800017 	ldw	r2,0(r3)
4008c118:	10000b1e 	bne	r2,zero,4008c148 <quorem+0x1c8>
4008c11c:	18bfff04 	addi	r2,r3,-4
4008c120:	a880082e 	bgeu	r21,r2,4008c144 <quorem+0x1c4>
4008c124:	18ffff17 	ldw	r3,-4(r3)
4008c128:	18000326 	beq	r3,zero,4008c138 <quorem+0x1b8>
4008c12c:	00000506 	br	4008c144 <quorem+0x1c4>
4008c130:	10c00017 	ldw	r3,0(r2)
4008c134:	1800031e 	bne	r3,zero,4008c144 <quorem+0x1c4>
4008c138:	10bfff04 	addi	r2,r2,-4
4008c13c:	94bfffc4 	addi	r18,r18,-1
4008c140:	a8bffb36 	bltu	r21,r2,4008c130 <__alt_mem_epcs+0xfff4b130>
4008c144:	84800415 	stw	r18,16(r16)
4008c148:	9805883a 	mov	r2,r19
4008c14c:	dfc00817 	ldw	ra,32(sp)
4008c150:	ddc00717 	ldw	r23,28(sp)
4008c154:	dd800617 	ldw	r22,24(sp)
4008c158:	dd400517 	ldw	r21,20(sp)
4008c15c:	dd000417 	ldw	r20,16(sp)
4008c160:	dcc00317 	ldw	r19,12(sp)
4008c164:	dc800217 	ldw	r18,8(sp)
4008c168:	dc400117 	ldw	r17,4(sp)
4008c16c:	dc000017 	ldw	r16,0(sp)
4008c170:	dec00904 	addi	sp,sp,36
4008c174:	f800283a 	ret
4008c178:	0005883a 	mov	r2,zero
4008c17c:	003ff306 	br	4008c14c <__alt_mem_epcs+0xfff4b14c>

4008c180 <_dtoa_r>:
4008c180:	20801017 	ldw	r2,64(r4)
4008c184:	deffde04 	addi	sp,sp,-136
4008c188:	dd401d15 	stw	r21,116(sp)
4008c18c:	dcc01b15 	stw	r19,108(sp)
4008c190:	dc801a15 	stw	r18,104(sp)
4008c194:	dc401915 	stw	r17,100(sp)
4008c198:	dc001815 	stw	r16,96(sp)
4008c19c:	dfc02115 	stw	ra,132(sp)
4008c1a0:	df002015 	stw	fp,128(sp)
4008c1a4:	ddc01f15 	stw	r23,124(sp)
4008c1a8:	dd801e15 	stw	r22,120(sp)
4008c1ac:	dd001c15 	stw	r20,112(sp)
4008c1b0:	d9c00315 	stw	r7,12(sp)
4008c1b4:	2021883a 	mov	r16,r4
4008c1b8:	302b883a 	mov	r21,r6
4008c1bc:	2825883a 	mov	r18,r5
4008c1c0:	dc402417 	ldw	r17,144(sp)
4008c1c4:	3027883a 	mov	r19,r6
4008c1c8:	10000826 	beq	r2,zero,4008c1ec <_dtoa_r+0x6c>
4008c1cc:	21801117 	ldw	r6,68(r4)
4008c1d0:	00c00044 	movi	r3,1
4008c1d4:	100b883a 	mov	r5,r2
4008c1d8:	1986983a 	sll	r3,r3,r6
4008c1dc:	11800115 	stw	r6,4(r2)
4008c1e0:	10c00215 	stw	r3,8(r2)
4008c1e4:	008f8500 	call	4008f850 <_Bfree>
4008c1e8:	80001015 	stw	zero,64(r16)
4008c1ec:	a8002d16 	blt	r21,zero,4008c2a4 <_dtoa_r+0x124>
4008c1f0:	88000015 	stw	zero,0(r17)
4008c1f4:	a8dffc2c 	andhi	r3,r21,32752
4008c1f8:	009ffc34 	movhi	r2,32752
4008c1fc:	18801b26 	beq	r3,r2,4008c26c <_dtoa_r+0xec>
4008c200:	9009883a 	mov	r4,r18
4008c204:	980b883a 	mov	r5,r19
4008c208:	000d883a 	mov	r6,zero
4008c20c:	000f883a 	mov	r7,zero
4008c210:	0094c940 	call	40094c94 <__eqdf2>
4008c214:	10002a1e 	bne	r2,zero,4008c2c0 <_dtoa_r+0x140>
4008c218:	d8c02317 	ldw	r3,140(sp)
4008c21c:	d9002517 	ldw	r4,148(sp)
4008c220:	00800044 	movi	r2,1
4008c224:	18800015 	stw	r2,0(r3)
4008c228:	2001a226 	beq	r4,zero,4008c8b4 <_dtoa_r+0x734>
4008c22c:	009002b4 	movhi	r2,16394
4008c230:	10a86644 	addi	r2,r2,-24167
4008c234:	20800015 	stw	r2,0(r4)
4008c238:	10bfffc4 	addi	r2,r2,-1
4008c23c:	dfc02117 	ldw	ra,132(sp)
4008c240:	df002017 	ldw	fp,128(sp)
4008c244:	ddc01f17 	ldw	r23,124(sp)
4008c248:	dd801e17 	ldw	r22,120(sp)
4008c24c:	dd401d17 	ldw	r21,116(sp)
4008c250:	dd001c17 	ldw	r20,112(sp)
4008c254:	dcc01b17 	ldw	r19,108(sp)
4008c258:	dc801a17 	ldw	r18,104(sp)
4008c25c:	dc401917 	ldw	r17,100(sp)
4008c260:	dc001817 	ldw	r16,96(sp)
4008c264:	dec02204 	addi	sp,sp,136
4008c268:	f800283a 	ret
4008c26c:	d8c02317 	ldw	r3,140(sp)
4008c270:	0089c3c4 	movi	r2,9999
4008c274:	18800015 	stw	r2,0(r3)
4008c278:	90017c26 	beq	r18,zero,4008c86c <_dtoa_r+0x6ec>
4008c27c:	009002b4 	movhi	r2,16394
4008c280:	10a87204 	addi	r2,r2,-24120
4008c284:	d9002517 	ldw	r4,148(sp)
4008c288:	203fec26 	beq	r4,zero,4008c23c <__alt_mem_epcs+0xfff4b23c>
4008c28c:	10c000c7 	ldb	r3,3(r2)
4008c290:	18017d1e 	bne	r3,zero,4008c888 <_dtoa_r+0x708>
4008c294:	10c000c4 	addi	r3,r2,3
4008c298:	d9802517 	ldw	r6,148(sp)
4008c29c:	30c00015 	stw	r3,0(r6)
4008c2a0:	003fe606 	br	4008c23c <__alt_mem_epcs+0xfff4b23c>
4008c2a4:	04e00034 	movhi	r19,32768
4008c2a8:	9cffffc4 	addi	r19,r19,-1
4008c2ac:	00800044 	movi	r2,1
4008c2b0:	ace6703a 	and	r19,r21,r19
4008c2b4:	88800015 	stw	r2,0(r17)
4008c2b8:	982b883a 	mov	r21,r19
4008c2bc:	003fcd06 	br	4008c1f4 <__alt_mem_epcs+0xfff4b1f4>
4008c2c0:	d8800204 	addi	r2,sp,8
4008c2c4:	a822d53a 	srli	r17,r21,20
4008c2c8:	d8800015 	stw	r2,0(sp)
4008c2cc:	8009883a 	mov	r4,r16
4008c2d0:	900b883a 	mov	r5,r18
4008c2d4:	980d883a 	mov	r6,r19
4008c2d8:	d9c00104 	addi	r7,sp,4
4008c2dc:	00903dc0 	call	400903dc <__d2b>
4008c2e0:	1039883a 	mov	fp,r2
4008c2e4:	88016a1e 	bne	r17,zero,4008c890 <_dtoa_r+0x710>
4008c2e8:	dd000217 	ldw	r20,8(sp)
4008c2ec:	dc400117 	ldw	r17,4(sp)
4008c2f0:	00befbc4 	movi	r2,-1041
4008c2f4:	a463883a 	add	r17,r20,r17
4008c2f8:	8882ea16 	blt	r17,r2,4008cea4 <_dtoa_r+0xd24>
4008c2fc:	00bf0384 	movi	r2,-1010
4008c300:	1445c83a 	sub	r2,r2,r17
4008c304:	89010484 	addi	r4,r17,1042
4008c308:	a8aa983a 	sll	r21,r21,r2
4008c30c:	9108d83a 	srl	r4,r18,r4
4008c310:	a908b03a 	or	r4,r21,r4
4008c314:	009551c0 	call	4009551c <__floatunsidf>
4008c318:	017f8434 	movhi	r5,65040
4008c31c:	01800044 	movi	r6,1
4008c320:	1009883a 	mov	r4,r2
4008c324:	194b883a 	add	r5,r3,r5
4008c328:	8c7fffc4 	addi	r17,r17,-1
4008c32c:	d9800f15 	stw	r6,60(sp)
4008c330:	000d883a 	mov	r6,zero
4008c334:	01cffe34 	movhi	r7,16376
4008c338:	00891b80 	call	400891b8 <__subdf3>
4008c33c:	0198dbf4 	movhi	r6,25455
4008c340:	01cff4f4 	movhi	r7,16339
4008c344:	1009883a 	mov	r4,r2
4008c348:	180b883a 	mov	r5,r3
4008c34c:	3190d844 	addi	r6,r6,17249
4008c350:	39e1e9c4 	addi	r7,r7,-30809
4008c354:	0094df80 	call	40094df8 <__muldf3>
4008c358:	01a2d874 	movhi	r6,35681
4008c35c:	01cff1f4 	movhi	r7,16327
4008c360:	180b883a 	mov	r5,r3
4008c364:	31b22cc4 	addi	r6,r6,-14157
4008c368:	39e28a04 	addi	r7,r7,-30168
4008c36c:	1009883a 	mov	r4,r2
4008c370:	0093b2c0 	call	40093b2c <__adddf3>
4008c374:	8809883a 	mov	r4,r17
4008c378:	102d883a 	mov	r22,r2
4008c37c:	182b883a 	mov	r21,r3
4008c380:	0089b100 	call	40089b10 <__floatsidf>
4008c384:	019427f4 	movhi	r6,20639
4008c388:	01cff4f4 	movhi	r7,16339
4008c38c:	1009883a 	mov	r4,r2
4008c390:	180b883a 	mov	r5,r3
4008c394:	319e7ec4 	addi	r6,r6,31227
4008c398:	39d104c4 	addi	r7,r7,17427
4008c39c:	0094df80 	call	40094df8 <__muldf3>
4008c3a0:	b009883a 	mov	r4,r22
4008c3a4:	a80b883a 	mov	r5,r21
4008c3a8:	100d883a 	mov	r6,r2
4008c3ac:	180f883a 	mov	r7,r3
4008c3b0:	0093b2c0 	call	40093b2c <__adddf3>
4008c3b4:	1009883a 	mov	r4,r2
4008c3b8:	180b883a 	mov	r5,r3
4008c3bc:	102d883a 	mov	r22,r2
4008c3c0:	182b883a 	mov	r21,r3
4008c3c4:	0089a880 	call	40089a88 <__fixdfsi>
4008c3c8:	b009883a 	mov	r4,r22
4008c3cc:	a80b883a 	mov	r5,r21
4008c3d0:	000d883a 	mov	r6,zero
4008c3d4:	000f883a 	mov	r7,zero
4008c3d8:	d8800515 	stw	r2,20(sp)
4008c3dc:	0094d180 	call	40094d18 <__ledf2>
4008c3e0:	10023116 	blt	r2,zero,4008cca8 <_dtoa_r+0xb28>
4008c3e4:	d8c00517 	ldw	r3,20(sp)
4008c3e8:	00800584 	movi	r2,22
4008c3ec:	10c21f36 	bltu	r2,r3,4008cc6c <_dtoa_r+0xaec>
4008c3f0:	180490fa 	slli	r2,r3,3
4008c3f4:	00d002b4 	movhi	r3,16394
4008c3f8:	18e88e04 	addi	r3,r3,-24008
4008c3fc:	1885883a 	add	r2,r3,r2
4008c400:	11000017 	ldw	r4,0(r2)
4008c404:	11400117 	ldw	r5,4(r2)
4008c408:	900d883a 	mov	r6,r18
4008c40c:	980f883a 	mov	r7,r19
4008c410:	00890d80 	call	400890d8 <__gedf2>
4008c414:	0082a70e 	bge	zero,r2,4008ceb4 <_dtoa_r+0xd34>
4008c418:	d9000517 	ldw	r4,20(sp)
4008c41c:	d8000c15 	stw	zero,48(sp)
4008c420:	213fffc4 	addi	r4,r4,-1
4008c424:	d9000515 	stw	r4,20(sp)
4008c428:	a463c83a 	sub	r17,r20,r17
4008c42c:	8dbfffc4 	addi	r22,r17,-1
4008c430:	b0021916 	blt	r22,zero,4008cc98 <_dtoa_r+0xb18>
4008c434:	d8000815 	stw	zero,32(sp)
4008c438:	d8800517 	ldw	r2,20(sp)
4008c43c:	10020e16 	blt	r2,zero,4008cc78 <_dtoa_r+0xaf8>
4008c440:	b0ad883a 	add	r22,r22,r2
4008c444:	d8800a15 	stw	r2,40(sp)
4008c448:	d8000915 	stw	zero,36(sp)
4008c44c:	d8c00317 	ldw	r3,12(sp)
4008c450:	00800244 	movi	r2,9
4008c454:	10c11a36 	bltu	r2,r3,4008c8c0 <_dtoa_r+0x740>
4008c458:	00800144 	movi	r2,5
4008c45c:	10c4fc0e 	bge	r2,r3,4008d850 <_dtoa_r+0x16d0>
4008c460:	18ffff04 	addi	r3,r3,-4
4008c464:	d8c00315 	stw	r3,12(sp)
4008c468:	0029883a 	mov	r20,zero
4008c46c:	d9800317 	ldw	r6,12(sp)
4008c470:	008000c4 	movi	r2,3
4008c474:	3083bd26 	beq	r6,r2,4008d36c <_dtoa_r+0x11ec>
4008c478:	1183670e 	bge	r2,r6,4008d218 <_dtoa_r+0x1098>
4008c47c:	d8c00317 	ldw	r3,12(sp)
4008c480:	00800104 	movi	r2,4
4008c484:	1882e726 	beq	r3,r2,4008d024 <_dtoa_r+0xea4>
4008c488:	00800144 	movi	r2,5
4008c48c:	1884f21e 	bne	r3,r2,4008d858 <_dtoa_r+0x16d8>
4008c490:	00800044 	movi	r2,1
4008c494:	d8800b15 	stw	r2,44(sp)
4008c498:	d8c02217 	ldw	r3,136(sp)
4008c49c:	d9000517 	ldw	r4,20(sp)
4008c4a0:	1907883a 	add	r3,r3,r4
4008c4a4:	19800044 	addi	r6,r3,1
4008c4a8:	d8c00d15 	stw	r3,52(sp)
4008c4ac:	d9800615 	stw	r6,24(sp)
4008c4b0:	0183c30e 	bge	zero,r6,4008d3c0 <_dtoa_r+0x1240>
4008c4b4:	d9800617 	ldw	r6,24(sp)
4008c4b8:	3023883a 	mov	r17,r6
4008c4bc:	80001115 	stw	zero,68(r16)
4008c4c0:	008005c4 	movi	r2,23
4008c4c4:	1184f62e 	bgeu	r2,r6,4008d8a0 <_dtoa_r+0x1720>
4008c4c8:	00c00044 	movi	r3,1
4008c4cc:	00800104 	movi	r2,4
4008c4d0:	1085883a 	add	r2,r2,r2
4008c4d4:	11000504 	addi	r4,r2,20
4008c4d8:	180b883a 	mov	r5,r3
4008c4dc:	18c00044 	addi	r3,r3,1
4008c4e0:	313ffb2e 	bgeu	r6,r4,4008c4d0 <__alt_mem_epcs+0xfff4b4d0>
4008c4e4:	81401115 	stw	r5,68(r16)
4008c4e8:	8009883a 	mov	r4,r16
4008c4ec:	008f7a80 	call	4008f7a8 <_Balloc>
4008c4f0:	d8800715 	stw	r2,28(sp)
4008c4f4:	80801015 	stw	r2,64(r16)
4008c4f8:	00800384 	movi	r2,14
4008c4fc:	1440fd36 	bltu	r2,r17,4008c8f4 <_dtoa_r+0x774>
4008c500:	a000fc26 	beq	r20,zero,4008c8f4 <_dtoa_r+0x774>
4008c504:	d8800517 	ldw	r2,20(sp)
4008c508:	0083b90e 	bge	zero,r2,4008d3f0 <_dtoa_r+0x1270>
4008c50c:	d8c00517 	ldw	r3,20(sp)
4008c510:	108003cc 	andi	r2,r2,15
4008c514:	100490fa 	slli	r2,r2,3
4008c518:	182fd13a 	srai	r23,r3,4
4008c51c:	00d002b4 	movhi	r3,16394
4008c520:	18e88e04 	addi	r3,r3,-24008
4008c524:	1885883a 	add	r2,r3,r2
4008c528:	b8c0040c 	andi	r3,r23,16
4008c52c:	12c00017 	ldw	r11,0(r2)
4008c530:	12800117 	ldw	r10,4(r2)
4008c534:	18039726 	beq	r3,zero,4008d394 <_dtoa_r+0x1214>
4008c538:	009002b4 	movhi	r2,16394
4008c53c:	10a88404 	addi	r2,r2,-24048
4008c540:	11800817 	ldw	r6,32(r2)
4008c544:	11c00917 	ldw	r7,36(r2)
4008c548:	9009883a 	mov	r4,r18
4008c54c:	980b883a 	mov	r5,r19
4008c550:	da801615 	stw	r10,88(sp)
4008c554:	dac01515 	stw	r11,84(sp)
4008c558:	00943c80 	call	400943c8 <__divdf3>
4008c55c:	da801617 	ldw	r10,88(sp)
4008c560:	dac01517 	ldw	r11,84(sp)
4008c564:	bdc003cc 	andi	r23,r23,15
4008c568:	044000c4 	movi	r17,3
4008c56c:	d8800e15 	stw	r2,56(sp)
4008c570:	182b883a 	mov	r21,r3
4008c574:	b8001126 	beq	r23,zero,4008c5bc <_dtoa_r+0x43c>
4008c578:	051002b4 	movhi	r20,16394
4008c57c:	a5288404 	addi	r20,r20,-24048
4008c580:	5805883a 	mov	r2,r11
4008c584:	5007883a 	mov	r3,r10
4008c588:	b980004c 	andi	r6,r23,1
4008c58c:	1009883a 	mov	r4,r2
4008c590:	b82fd07a 	srai	r23,r23,1
4008c594:	180b883a 	mov	r5,r3
4008c598:	30000426 	beq	r6,zero,4008c5ac <_dtoa_r+0x42c>
4008c59c:	a1800017 	ldw	r6,0(r20)
4008c5a0:	a1c00117 	ldw	r7,4(r20)
4008c5a4:	8c400044 	addi	r17,r17,1
4008c5a8:	0094df80 	call	40094df8 <__muldf3>
4008c5ac:	a5000204 	addi	r20,r20,8
4008c5b0:	b83ff51e 	bne	r23,zero,4008c588 <__alt_mem_epcs+0xfff4b588>
4008c5b4:	1017883a 	mov	r11,r2
4008c5b8:	1815883a 	mov	r10,r3
4008c5bc:	d9000e17 	ldw	r4,56(sp)
4008c5c0:	a80b883a 	mov	r5,r21
4008c5c4:	580d883a 	mov	r6,r11
4008c5c8:	500f883a 	mov	r7,r10
4008c5cc:	00943c80 	call	400943c8 <__divdf3>
4008c5d0:	1029883a 	mov	r20,r2
4008c5d4:	182b883a 	mov	r21,r3
4008c5d8:	d9800c17 	ldw	r6,48(sp)
4008c5dc:	30000626 	beq	r6,zero,4008c5f8 <_dtoa_r+0x478>
4008c5e0:	a009883a 	mov	r4,r20
4008c5e4:	a80b883a 	mov	r5,r21
4008c5e8:	000d883a 	mov	r6,zero
4008c5ec:	01cffc34 	movhi	r7,16368
4008c5f0:	0094d180 	call	40094d18 <__ledf2>
4008c5f4:	10043216 	blt	r2,zero,4008d6c0 <_dtoa_r+0x1540>
4008c5f8:	8809883a 	mov	r4,r17
4008c5fc:	0089b100 	call	40089b10 <__floatsidf>
4008c600:	1009883a 	mov	r4,r2
4008c604:	180b883a 	mov	r5,r3
4008c608:	a00d883a 	mov	r6,r20
4008c60c:	a80f883a 	mov	r7,r21
4008c610:	0094df80 	call	40094df8 <__muldf3>
4008c614:	000d883a 	mov	r6,zero
4008c618:	1009883a 	mov	r4,r2
4008c61c:	180b883a 	mov	r5,r3
4008c620:	01d00734 	movhi	r7,16412
4008c624:	0093b2c0 	call	40093b2c <__adddf3>
4008c628:	1023883a 	mov	r17,r2
4008c62c:	d9800617 	ldw	r6,24(sp)
4008c630:	00bf3034 	movhi	r2,64704
4008c634:	1885883a 	add	r2,r3,r2
4008c638:	d8800e15 	stw	r2,56(sp)
4008c63c:	30032e26 	beq	r6,zero,4008d2f8 <_dtoa_r+0x1178>
4008c640:	d8c00517 	ldw	r3,20(sp)
4008c644:	da800617 	ldw	r10,24(sp)
4008c648:	d8c01215 	stw	r3,72(sp)
4008c64c:	d9000b17 	ldw	r4,44(sp)
4008c650:	2003b026 	beq	r4,zero,4008d514 <_dtoa_r+0x1394>
4008c654:	50bfffc4 	addi	r2,r10,-1
4008c658:	100490fa 	slli	r2,r2,3
4008c65c:	00d002b4 	movhi	r3,16394
4008c660:	18e88e04 	addi	r3,r3,-24008
4008c664:	1885883a 	add	r2,r3,r2
4008c668:	11800017 	ldw	r6,0(r2)
4008c66c:	11c00117 	ldw	r7,4(r2)
4008c670:	d8800717 	ldw	r2,28(sp)
4008c674:	0009883a 	mov	r4,zero
4008c678:	014ff834 	movhi	r5,16352
4008c67c:	da801615 	stw	r10,88(sp)
4008c680:	15c00044 	addi	r23,r2,1
4008c684:	00943c80 	call	400943c8 <__divdf3>
4008c688:	d9c00e17 	ldw	r7,56(sp)
4008c68c:	880d883a 	mov	r6,r17
4008c690:	1009883a 	mov	r4,r2
4008c694:	180b883a 	mov	r5,r3
4008c698:	00891b80 	call	400891b8 <__subdf3>
4008c69c:	a80b883a 	mov	r5,r21
4008c6a0:	a009883a 	mov	r4,r20
4008c6a4:	d8c01015 	stw	r3,64(sp)
4008c6a8:	d8800e15 	stw	r2,56(sp)
4008c6ac:	0089a880 	call	40089a88 <__fixdfsi>
4008c6b0:	1009883a 	mov	r4,r2
4008c6b4:	d8801715 	stw	r2,92(sp)
4008c6b8:	0089b100 	call	40089b10 <__floatsidf>
4008c6bc:	a009883a 	mov	r4,r20
4008c6c0:	a80b883a 	mov	r5,r21
4008c6c4:	100d883a 	mov	r6,r2
4008c6c8:	180f883a 	mov	r7,r3
4008c6cc:	00891b80 	call	400891b8 <__subdf3>
4008c6d0:	da001717 	ldw	r8,92(sp)
4008c6d4:	1829883a 	mov	r20,r3
4008c6d8:	d8c00717 	ldw	r3,28(sp)
4008c6dc:	d9000e17 	ldw	r4,56(sp)
4008c6e0:	d9401017 	ldw	r5,64(sp)
4008c6e4:	42000c04 	addi	r8,r8,48
4008c6e8:	1023883a 	mov	r17,r2
4008c6ec:	1a000005 	stb	r8,0(r3)
4008c6f0:	880d883a 	mov	r6,r17
4008c6f4:	a00f883a 	mov	r7,r20
4008c6f8:	402b883a 	mov	r21,r8
4008c6fc:	00890d80 	call	400890d8 <__gedf2>
4008c700:	00844516 	blt	zero,r2,4008d818 <_dtoa_r+0x1698>
4008c704:	0009883a 	mov	r4,zero
4008c708:	014ffc34 	movhi	r5,16368
4008c70c:	880d883a 	mov	r6,r17
4008c710:	a00f883a 	mov	r7,r20
4008c714:	00891b80 	call	400891b8 <__subdf3>
4008c718:	d9000e17 	ldw	r4,56(sp)
4008c71c:	d9401017 	ldw	r5,64(sp)
4008c720:	100d883a 	mov	r6,r2
4008c724:	180f883a 	mov	r7,r3
4008c728:	00890d80 	call	400890d8 <__gedf2>
4008c72c:	da801617 	ldw	r10,88(sp)
4008c730:	00843616 	blt	zero,r2,4008d80c <_dtoa_r+0x168c>
4008c734:	00800044 	movi	r2,1
4008c738:	12806e0e 	bge	r2,r10,4008c8f4 <_dtoa_r+0x774>
4008c73c:	d9000717 	ldw	r4,28(sp)
4008c740:	dd801315 	stw	r22,76(sp)
4008c744:	dc001115 	stw	r16,68(sp)
4008c748:	2295883a 	add	r10,r4,r10
4008c74c:	dcc01415 	stw	r19,80(sp)
4008c750:	502d883a 	mov	r22,r10
4008c754:	dcc01017 	ldw	r19,64(sp)
4008c758:	b821883a 	mov	r16,r23
4008c75c:	dc801015 	stw	r18,64(sp)
4008c760:	dc800e17 	ldw	r18,56(sp)
4008c764:	00000906 	br	4008c78c <_dtoa_r+0x60c>
4008c768:	00891b80 	call	400891b8 <__subdf3>
4008c76c:	1009883a 	mov	r4,r2
4008c770:	180b883a 	mov	r5,r3
4008c774:	900d883a 	mov	r6,r18
4008c778:	980f883a 	mov	r7,r19
4008c77c:	0094d180 	call	40094d18 <__ledf2>
4008c780:	10040e16 	blt	r2,zero,4008d7bc <_dtoa_r+0x163c>
4008c784:	b821883a 	mov	r16,r23
4008c788:	bd841026 	beq	r23,r22,4008d7cc <_dtoa_r+0x164c>
4008c78c:	9009883a 	mov	r4,r18
4008c790:	980b883a 	mov	r5,r19
4008c794:	000d883a 	mov	r6,zero
4008c798:	01d00934 	movhi	r7,16420
4008c79c:	0094df80 	call	40094df8 <__muldf3>
4008c7a0:	000d883a 	mov	r6,zero
4008c7a4:	01d00934 	movhi	r7,16420
4008c7a8:	8809883a 	mov	r4,r17
4008c7ac:	a00b883a 	mov	r5,r20
4008c7b0:	1025883a 	mov	r18,r2
4008c7b4:	1827883a 	mov	r19,r3
4008c7b8:	0094df80 	call	40094df8 <__muldf3>
4008c7bc:	180b883a 	mov	r5,r3
4008c7c0:	1009883a 	mov	r4,r2
4008c7c4:	1823883a 	mov	r17,r3
4008c7c8:	1029883a 	mov	r20,r2
4008c7cc:	0089a880 	call	40089a88 <__fixdfsi>
4008c7d0:	1009883a 	mov	r4,r2
4008c7d4:	102b883a 	mov	r21,r2
4008c7d8:	0089b100 	call	40089b10 <__floatsidf>
4008c7dc:	a009883a 	mov	r4,r20
4008c7e0:	880b883a 	mov	r5,r17
4008c7e4:	100d883a 	mov	r6,r2
4008c7e8:	180f883a 	mov	r7,r3
4008c7ec:	00891b80 	call	400891b8 <__subdf3>
4008c7f0:	ad400c04 	addi	r21,r21,48
4008c7f4:	1009883a 	mov	r4,r2
4008c7f8:	180b883a 	mov	r5,r3
4008c7fc:	900d883a 	mov	r6,r18
4008c800:	980f883a 	mov	r7,r19
4008c804:	85400005 	stb	r21,0(r16)
4008c808:	1023883a 	mov	r17,r2
4008c80c:	1829883a 	mov	r20,r3
4008c810:	0094d180 	call	40094d18 <__ledf2>
4008c814:	bdc00044 	addi	r23,r23,1
4008c818:	0009883a 	mov	r4,zero
4008c81c:	014ffc34 	movhi	r5,16368
4008c820:	880d883a 	mov	r6,r17
4008c824:	a00f883a 	mov	r7,r20
4008c828:	103fcf0e 	bge	r2,zero,4008c768 <__alt_mem_epcs+0xfff4b768>
4008c82c:	d9801217 	ldw	r6,72(sp)
4008c830:	dc001117 	ldw	r16,68(sp)
4008c834:	d9800515 	stw	r6,20(sp)
4008c838:	8009883a 	mov	r4,r16
4008c83c:	e00b883a 	mov	r5,fp
4008c840:	008f8500 	call	4008f850 <_Bfree>
4008c844:	d8c00517 	ldw	r3,20(sp)
4008c848:	d9002317 	ldw	r4,140(sp)
4008c84c:	d9802517 	ldw	r6,148(sp)
4008c850:	b8000005 	stb	zero,0(r23)
4008c854:	18800044 	addi	r2,r3,1
4008c858:	20800015 	stw	r2,0(r4)
4008c85c:	30027226 	beq	r6,zero,4008d228 <_dtoa_r+0x10a8>
4008c860:	35c00015 	stw	r23,0(r6)
4008c864:	d8800717 	ldw	r2,28(sp)
4008c868:	003e7406 	br	4008c23c <__alt_mem_epcs+0xfff4b23c>
4008c86c:	00800434 	movhi	r2,16
4008c870:	10bfffc4 	addi	r2,r2,-1
4008c874:	a8aa703a 	and	r21,r21,r2
4008c878:	a83e801e 	bne	r21,zero,4008c27c <__alt_mem_epcs+0xfff4b27c>
4008c87c:	009002b4 	movhi	r2,16394
4008c880:	10a86f04 	addi	r2,r2,-24132
4008c884:	003e7f06 	br	4008c284 <__alt_mem_epcs+0xfff4b284>
4008c888:	10c00204 	addi	r3,r2,8
4008c88c:	003e8206 	br	4008c298 <__alt_mem_epcs+0xfff4b298>
4008c890:	01400434 	movhi	r5,16
4008c894:	297fffc4 	addi	r5,r5,-1
4008c898:	994a703a 	and	r5,r19,r5
4008c89c:	9009883a 	mov	r4,r18
4008c8a0:	8c7f0044 	addi	r17,r17,-1023
4008c8a4:	294ffc34 	orhi	r5,r5,16368
4008c8a8:	dd000217 	ldw	r20,8(sp)
4008c8ac:	d8000f15 	stw	zero,60(sp)
4008c8b0:	003e9f06 	br	4008c330 <__alt_mem_epcs+0xfff4b330>
4008c8b4:	009002b4 	movhi	r2,16394
4008c8b8:	10a86604 	addi	r2,r2,-24168
4008c8bc:	003e5f06 	br	4008c23c <__alt_mem_epcs+0xfff4b23c>
4008c8c0:	80001115 	stw	zero,68(r16)
4008c8c4:	8009883a 	mov	r4,r16
4008c8c8:	000b883a 	mov	r5,zero
4008c8cc:	008f7a80 	call	4008f7a8 <_Balloc>
4008c8d0:	01bfffc4 	movi	r6,-1
4008c8d4:	d8800715 	stw	r2,28(sp)
4008c8d8:	80801015 	stw	r2,64(r16)
4008c8dc:	00800044 	movi	r2,1
4008c8e0:	d9800615 	stw	r6,24(sp)
4008c8e4:	d8800b15 	stw	r2,44(sp)
4008c8e8:	d8002215 	stw	zero,136(sp)
4008c8ec:	d9800d15 	stw	r6,52(sp)
4008c8f0:	d8000315 	stw	zero,12(sp)
4008c8f4:	d8800117 	ldw	r2,4(sp)
4008c8f8:	10008e16 	blt	r2,zero,4008cb34 <_dtoa_r+0x9b4>
4008c8fc:	d9000517 	ldw	r4,20(sp)
4008c900:	00c00384 	movi	r3,14
4008c904:	19008b16 	blt	r3,r4,4008cb34 <_dtoa_r+0x9b4>
4008c908:	200490fa 	slli	r2,r4,3
4008c90c:	00d002b4 	movhi	r3,16394
4008c910:	d9802217 	ldw	r6,136(sp)
4008c914:	18e88e04 	addi	r3,r3,-24008
4008c918:	1885883a 	add	r2,r3,r2
4008c91c:	14400017 	ldw	r17,0(r2)
4008c920:	15000117 	ldw	r20,4(r2)
4008c924:	3001c716 	blt	r6,zero,4008d044 <_dtoa_r+0xec4>
4008c928:	880d883a 	mov	r6,r17
4008c92c:	a00f883a 	mov	r7,r20
4008c930:	9009883a 	mov	r4,r18
4008c934:	980b883a 	mov	r5,r19
4008c938:	00943c80 	call	400943c8 <__divdf3>
4008c93c:	180b883a 	mov	r5,r3
4008c940:	1009883a 	mov	r4,r2
4008c944:	0089a880 	call	40089a88 <__fixdfsi>
4008c948:	1009883a 	mov	r4,r2
4008c94c:	102d883a 	mov	r22,r2
4008c950:	0089b100 	call	40089b10 <__floatsidf>
4008c954:	1009883a 	mov	r4,r2
4008c958:	180b883a 	mov	r5,r3
4008c95c:	880d883a 	mov	r6,r17
4008c960:	a00f883a 	mov	r7,r20
4008c964:	0094df80 	call	40094df8 <__muldf3>
4008c968:	9009883a 	mov	r4,r18
4008c96c:	980b883a 	mov	r5,r19
4008c970:	100d883a 	mov	r6,r2
4008c974:	180f883a 	mov	r7,r3
4008c978:	00891b80 	call	400891b8 <__subdf3>
4008c97c:	d9000717 	ldw	r4,28(sp)
4008c980:	d9800617 	ldw	r6,24(sp)
4008c984:	180b883a 	mov	r5,r3
4008c988:	b0c00c04 	addi	r3,r22,48
4008c98c:	20c00005 	stb	r3,0(r4)
4008c990:	25c00044 	addi	r23,r4,1
4008c994:	01000044 	movi	r4,1
4008c998:	1011883a 	mov	r8,r2
4008c99c:	2807883a 	mov	r3,r5
4008c9a0:	31003d26 	beq	r6,r4,4008ca98 <_dtoa_r+0x918>
4008c9a4:	000d883a 	mov	r6,zero
4008c9a8:	01d00934 	movhi	r7,16420
4008c9ac:	1009883a 	mov	r4,r2
4008c9b0:	0094df80 	call	40094df8 <__muldf3>
4008c9b4:	1009883a 	mov	r4,r2
4008c9b8:	180b883a 	mov	r5,r3
4008c9bc:	000d883a 	mov	r6,zero
4008c9c0:	000f883a 	mov	r7,zero
4008c9c4:	1027883a 	mov	r19,r2
4008c9c8:	182b883a 	mov	r21,r3
4008c9cc:	0094c940 	call	40094c94 <__eqdf2>
4008c9d0:	103f9926 	beq	r2,zero,4008c838 <__alt_mem_epcs+0xfff4b838>
4008c9d4:	d8c00617 	ldw	r3,24(sp)
4008c9d8:	d9000717 	ldw	r4,28(sp)
4008c9dc:	b825883a 	mov	r18,r23
4008c9e0:	18bfffc4 	addi	r2,r3,-1
4008c9e4:	20ad883a 	add	r22,r4,r2
4008c9e8:	dc000315 	stw	r16,12(sp)
4008c9ec:	00000a06 	br	4008ca18 <_dtoa_r+0x898>
4008c9f0:	0094df80 	call	40094df8 <__muldf3>
4008c9f4:	1009883a 	mov	r4,r2
4008c9f8:	180b883a 	mov	r5,r3
4008c9fc:	000d883a 	mov	r6,zero
4008ca00:	000f883a 	mov	r7,zero
4008ca04:	1027883a 	mov	r19,r2
4008ca08:	182b883a 	mov	r21,r3
4008ca0c:	b825883a 	mov	r18,r23
4008ca10:	0094c940 	call	40094c94 <__eqdf2>
4008ca14:	10022626 	beq	r2,zero,4008d2b0 <_dtoa_r+0x1130>
4008ca18:	880d883a 	mov	r6,r17
4008ca1c:	a00f883a 	mov	r7,r20
4008ca20:	9809883a 	mov	r4,r19
4008ca24:	a80b883a 	mov	r5,r21
4008ca28:	00943c80 	call	400943c8 <__divdf3>
4008ca2c:	180b883a 	mov	r5,r3
4008ca30:	1009883a 	mov	r4,r2
4008ca34:	0089a880 	call	40089a88 <__fixdfsi>
4008ca38:	1009883a 	mov	r4,r2
4008ca3c:	1021883a 	mov	r16,r2
4008ca40:	0089b100 	call	40089b10 <__floatsidf>
4008ca44:	1009883a 	mov	r4,r2
4008ca48:	180b883a 	mov	r5,r3
4008ca4c:	880d883a 	mov	r6,r17
4008ca50:	a00f883a 	mov	r7,r20
4008ca54:	0094df80 	call	40094df8 <__muldf3>
4008ca58:	9809883a 	mov	r4,r19
4008ca5c:	a80b883a 	mov	r5,r21
4008ca60:	100d883a 	mov	r6,r2
4008ca64:	180f883a 	mov	r7,r3
4008ca68:	00891b80 	call	400891b8 <__subdf3>
4008ca6c:	82000c04 	addi	r8,r16,48
4008ca70:	92000005 	stb	r8,0(r18)
4008ca74:	1009883a 	mov	r4,r2
4008ca78:	180b883a 	mov	r5,r3
4008ca7c:	000d883a 	mov	r6,zero
4008ca80:	01d00934 	movhi	r7,16420
4008ca84:	1011883a 	mov	r8,r2
4008ca88:	bdc00044 	addi	r23,r23,1
4008ca8c:	95bfd81e 	bne	r18,r22,4008c9f0 <__alt_mem_epcs+0xfff4b9f0>
4008ca90:	802d883a 	mov	r22,r16
4008ca94:	dc000317 	ldw	r16,12(sp)
4008ca98:	4009883a 	mov	r4,r8
4008ca9c:	180b883a 	mov	r5,r3
4008caa0:	400d883a 	mov	r6,r8
4008caa4:	180f883a 	mov	r7,r3
4008caa8:	0093b2c0 	call	40093b2c <__adddf3>
4008caac:	8809883a 	mov	r4,r17
4008cab0:	a00b883a 	mov	r5,r20
4008cab4:	100d883a 	mov	r6,r2
4008cab8:	180f883a 	mov	r7,r3
4008cabc:	1027883a 	mov	r19,r2
4008cac0:	1825883a 	mov	r18,r3
4008cac4:	0094d180 	call	40094d18 <__ledf2>
4008cac8:	10000816 	blt	r2,zero,4008caec <_dtoa_r+0x96c>
4008cacc:	8809883a 	mov	r4,r17
4008cad0:	a00b883a 	mov	r5,r20
4008cad4:	980d883a 	mov	r6,r19
4008cad8:	900f883a 	mov	r7,r18
4008cadc:	0094c940 	call	40094c94 <__eqdf2>
4008cae0:	103f551e 	bne	r2,zero,4008c838 <__alt_mem_epcs+0xfff4b838>
4008cae4:	b580004c 	andi	r22,r22,1
4008cae8:	b03f5326 	beq	r22,zero,4008c838 <__alt_mem_epcs+0xfff4b838>
4008caec:	bd7fffc3 	ldbu	r21,-1(r23)
4008caf0:	b8bfffc4 	addi	r2,r23,-1
4008caf4:	1007883a 	mov	r3,r2
4008caf8:	01400e44 	movi	r5,57
4008cafc:	d9800717 	ldw	r6,28(sp)
4008cb00:	00000506 	br	4008cb18 <_dtoa_r+0x998>
4008cb04:	18ffffc4 	addi	r3,r3,-1
4008cb08:	30825e26 	beq	r6,r2,4008d484 <_dtoa_r+0x1304>
4008cb0c:	1d400003 	ldbu	r21,0(r3)
4008cb10:	102f883a 	mov	r23,r2
4008cb14:	10bfffc4 	addi	r2,r2,-1
4008cb18:	a9003fcc 	andi	r4,r21,255
4008cb1c:	2100201c 	xori	r4,r4,128
4008cb20:	213fe004 	addi	r4,r4,-128
4008cb24:	217ff726 	beq	r4,r5,4008cb04 <__alt_mem_epcs+0xfff4bb04>
4008cb28:	aa000044 	addi	r8,r21,1
4008cb2c:	12000005 	stb	r8,0(r2)
4008cb30:	003f4106 	br	4008c838 <__alt_mem_epcs+0xfff4b838>
4008cb34:	d8c00b17 	ldw	r3,44(sp)
4008cb38:	18006726 	beq	r3,zero,4008ccd8 <_dtoa_r+0xb58>
4008cb3c:	d9000317 	ldw	r4,12(sp)
4008cb40:	00c00044 	movi	r3,1
4008cb44:	19016a0e 	bge	r3,r4,4008d0f0 <_dtoa_r+0xf70>
4008cb48:	d8800617 	ldw	r2,24(sp)
4008cb4c:	d8c00917 	ldw	r3,36(sp)
4008cb50:	157fffc4 	addi	r21,r2,-1
4008cb54:	1d420716 	blt	r3,r21,4008d374 <_dtoa_r+0x11f4>
4008cb58:	1d6bc83a 	sub	r21,r3,r21
4008cb5c:	d8800617 	ldw	r2,24(sp)
4008cb60:	1002c716 	blt	r2,zero,4008d680 <_dtoa_r+0x1500>
4008cb64:	dd000817 	ldw	r20,32(sp)
4008cb68:	d8800617 	ldw	r2,24(sp)
4008cb6c:	d9800817 	ldw	r6,32(sp)
4008cb70:	8009883a 	mov	r4,r16
4008cb74:	01400044 	movi	r5,1
4008cb78:	308d883a 	add	r6,r6,r2
4008cb7c:	d9800815 	stw	r6,32(sp)
4008cb80:	b0ad883a 	add	r22,r22,r2
4008cb84:	008fba80 	call	4008fba8 <__i2b>
4008cb88:	1023883a 	mov	r17,r2
4008cb8c:	a0000826 	beq	r20,zero,4008cbb0 <_dtoa_r+0xa30>
4008cb90:	0580070e 	bge	zero,r22,4008cbb0 <_dtoa_r+0xa30>
4008cb94:	b005883a 	mov	r2,r22
4008cb98:	a5812016 	blt	r20,r22,4008d01c <_dtoa_r+0xe9c>
4008cb9c:	d8c00817 	ldw	r3,32(sp)
4008cba0:	a0a9c83a 	sub	r20,r20,r2
4008cba4:	b0adc83a 	sub	r22,r22,r2
4008cba8:	1887c83a 	sub	r3,r3,r2
4008cbac:	d8c00815 	stw	r3,32(sp)
4008cbb0:	d9000917 	ldw	r4,36(sp)
4008cbb4:	0100140e 	bge	zero,r4,4008cc08 <_dtoa_r+0xa88>
4008cbb8:	d9800b17 	ldw	r6,44(sp)
4008cbbc:	3001e526 	beq	r6,zero,4008d354 <_dtoa_r+0x11d4>
4008cbc0:	05400e0e 	bge	zero,r21,4008cbfc <_dtoa_r+0xa7c>
4008cbc4:	880b883a 	mov	r5,r17
4008cbc8:	8009883a 	mov	r4,r16
4008cbcc:	a80d883a 	mov	r6,r21
4008cbd0:	008fde00 	call	4008fde0 <__pow5mult>
4008cbd4:	e00d883a 	mov	r6,fp
4008cbd8:	8009883a 	mov	r4,r16
4008cbdc:	100b883a 	mov	r5,r2
4008cbe0:	1023883a 	mov	r17,r2
4008cbe4:	008fbe40 	call	4008fbe4 <__multiply>
4008cbe8:	102f883a 	mov	r23,r2
4008cbec:	e00b883a 	mov	r5,fp
4008cbf0:	8009883a 	mov	r4,r16
4008cbf4:	008f8500 	call	4008f850 <_Bfree>
4008cbf8:	b839883a 	mov	fp,r23
4008cbfc:	d8800917 	ldw	r2,36(sp)
4008cc00:	154dc83a 	sub	r6,r2,r21
4008cc04:	3001281e 	bne	r6,zero,4008d0a8 <_dtoa_r+0xf28>
4008cc08:	05c00044 	movi	r23,1
4008cc0c:	8009883a 	mov	r4,r16
4008cc10:	b80b883a 	mov	r5,r23
4008cc14:	008fba80 	call	4008fba8 <__i2b>
4008cc18:	d8c00a17 	ldw	r3,40(sp)
4008cc1c:	102b883a 	mov	r21,r2
4008cc20:	00c0310e 	bge	zero,r3,4008cce8 <_dtoa_r+0xb68>
4008cc24:	8009883a 	mov	r4,r16
4008cc28:	100b883a 	mov	r5,r2
4008cc2c:	180d883a 	mov	r6,r3
4008cc30:	008fde00 	call	4008fde0 <__pow5mult>
4008cc34:	d9000317 	ldw	r4,12(sp)
4008cc38:	102b883a 	mov	r21,r2
4008cc3c:	b9011f0e 	bge	r23,r4,4008d0bc <_dtoa_r+0xf3c>
4008cc40:	0027883a 	mov	r19,zero
4008cc44:	a8800417 	ldw	r2,16(r21)
4008cc48:	10800104 	addi	r2,r2,4
4008cc4c:	1085883a 	add	r2,r2,r2
4008cc50:	1085883a 	add	r2,r2,r2
4008cc54:	a885883a 	add	r2,r21,r2
4008cc58:	11000017 	ldw	r4,0(r2)
4008cc5c:	008fa900 	call	4008fa90 <__hi0bits>
4008cc60:	00c00804 	movi	r3,32
4008cc64:	1885c83a 	sub	r2,r3,r2
4008cc68:	00002506 	br	4008cd00 <_dtoa_r+0xb80>
4008cc6c:	01800044 	movi	r6,1
4008cc70:	d9800c15 	stw	r6,48(sp)
4008cc74:	003dec06 	br	4008c428 <__alt_mem_epcs+0xfff4b428>
4008cc78:	d8c00817 	ldw	r3,32(sp)
4008cc7c:	d9000517 	ldw	r4,20(sp)
4008cc80:	d8000a15 	stw	zero,40(sp)
4008cc84:	1907c83a 	sub	r3,r3,r4
4008cc88:	010dc83a 	sub	r6,zero,r4
4008cc8c:	d8c00815 	stw	r3,32(sp)
4008cc90:	d9800915 	stw	r6,36(sp)
4008cc94:	003ded06 	br	4008c44c <__alt_mem_epcs+0xfff4b44c>
4008cc98:	05adc83a 	sub	r22,zero,r22
4008cc9c:	dd800815 	stw	r22,32(sp)
4008cca0:	002d883a 	mov	r22,zero
4008cca4:	003de406 	br	4008c438 <__alt_mem_epcs+0xfff4b438>
4008cca8:	d9000517 	ldw	r4,20(sp)
4008ccac:	0089b100 	call	40089b10 <__floatsidf>
4008ccb0:	1009883a 	mov	r4,r2
4008ccb4:	180b883a 	mov	r5,r3
4008ccb8:	b00d883a 	mov	r6,r22
4008ccbc:	a80f883a 	mov	r7,r21
4008ccc0:	0094c940 	call	40094c94 <__eqdf2>
4008ccc4:	103dc726 	beq	r2,zero,4008c3e4 <__alt_mem_epcs+0xfff4b3e4>
4008ccc8:	d8800517 	ldw	r2,20(sp)
4008cccc:	10bfffc4 	addi	r2,r2,-1
4008ccd0:	d8800515 	stw	r2,20(sp)
4008ccd4:	003dc306 	br	4008c3e4 <__alt_mem_epcs+0xfff4b3e4>
4008ccd8:	dd400917 	ldw	r21,36(sp)
4008ccdc:	dd000817 	ldw	r20,32(sp)
4008cce0:	0023883a 	mov	r17,zero
4008cce4:	003fa906 	br	4008cb8c <__alt_mem_epcs+0xfff4bb8c>
4008cce8:	d9800317 	ldw	r6,12(sp)
4008ccec:	b981670e 	bge	r23,r6,4008d28c <_dtoa_r+0x110c>
4008ccf0:	0027883a 	mov	r19,zero
4008ccf4:	d8c00a17 	ldw	r3,40(sp)
4008ccf8:	183fd21e 	bne	r3,zero,4008cc44 <__alt_mem_epcs+0xfff4bc44>
4008ccfc:	00800044 	movi	r2,1
4008cd00:	1585883a 	add	r2,r2,r22
4008cd04:	108007cc 	andi	r2,r2,31
4008cd08:	10005f26 	beq	r2,zero,4008ce88 <_dtoa_r+0xd08>
4008cd0c:	00c00804 	movi	r3,32
4008cd10:	1887c83a 	sub	r3,r3,r2
4008cd14:	01000104 	movi	r4,4
4008cd18:	20c2dd0e 	bge	r4,r3,4008d890 <_dtoa_r+0x1710>
4008cd1c:	d9000817 	ldw	r4,32(sp)
4008cd20:	00c00704 	movi	r3,28
4008cd24:	1885c83a 	sub	r2,r3,r2
4008cd28:	2089883a 	add	r4,r4,r2
4008cd2c:	d9000815 	stw	r4,32(sp)
4008cd30:	a0a9883a 	add	r20,r20,r2
4008cd34:	b0ad883a 	add	r22,r22,r2
4008cd38:	d8800817 	ldw	r2,32(sp)
4008cd3c:	0080050e 	bge	zero,r2,4008cd54 <_dtoa_r+0xbd4>
4008cd40:	e00b883a 	mov	r5,fp
4008cd44:	8009883a 	mov	r4,r16
4008cd48:	100d883a 	mov	r6,r2
4008cd4c:	008ff200 	call	4008ff20 <__lshift>
4008cd50:	1039883a 	mov	fp,r2
4008cd54:	0580050e 	bge	zero,r22,4008cd6c <_dtoa_r+0xbec>
4008cd58:	a80b883a 	mov	r5,r21
4008cd5c:	8009883a 	mov	r4,r16
4008cd60:	b00d883a 	mov	r6,r22
4008cd64:	008ff200 	call	4008ff20 <__lshift>
4008cd68:	102b883a 	mov	r21,r2
4008cd6c:	d8c00c17 	ldw	r3,48(sp)
4008cd70:	1801161e 	bne	r3,zero,4008d1cc <_dtoa_r+0x104c>
4008cd74:	d8c00617 	ldw	r3,24(sp)
4008cd78:	00c12d0e 	bge	zero,r3,4008d230 <_dtoa_r+0x10b0>
4008cd7c:	d8c00b17 	ldw	r3,44(sp)
4008cd80:	1800571e 	bne	r3,zero,4008cee0 <_dtoa_r+0xd60>
4008cd84:	dc800717 	ldw	r18,28(sp)
4008cd88:	dcc00617 	ldw	r19,24(sp)
4008cd8c:	9029883a 	mov	r20,r18
4008cd90:	00000206 	br	4008cd9c <_dtoa_r+0xc1c>
4008cd94:	008f8780 	call	4008f878 <__multadd>
4008cd98:	1039883a 	mov	fp,r2
4008cd9c:	e009883a 	mov	r4,fp
4008cda0:	a80b883a 	mov	r5,r21
4008cda4:	008bf800 	call	4008bf80 <quorem>
4008cda8:	10800c04 	addi	r2,r2,48
4008cdac:	90800005 	stb	r2,0(r18)
4008cdb0:	94800044 	addi	r18,r18,1
4008cdb4:	9507c83a 	sub	r3,r18,r20
4008cdb8:	8009883a 	mov	r4,r16
4008cdbc:	e00b883a 	mov	r5,fp
4008cdc0:	01800284 	movi	r6,10
4008cdc4:	000f883a 	mov	r7,zero
4008cdc8:	1cfff216 	blt	r3,r19,4008cd94 <__alt_mem_epcs+0xfff4bd94>
4008cdcc:	1011883a 	mov	r8,r2
4008cdd0:	d8800617 	ldw	r2,24(sp)
4008cdd4:	00822e0e 	bge	zero,r2,4008d690 <_dtoa_r+0x1510>
4008cdd8:	d9000717 	ldw	r4,28(sp)
4008cddc:	0025883a 	mov	r18,zero
4008cde0:	20af883a 	add	r23,r4,r2
4008cde4:	e00b883a 	mov	r5,fp
4008cde8:	01800044 	movi	r6,1
4008cdec:	8009883a 	mov	r4,r16
4008cdf0:	da001715 	stw	r8,92(sp)
4008cdf4:	008ff200 	call	4008ff20 <__lshift>
4008cdf8:	1009883a 	mov	r4,r2
4008cdfc:	a80b883a 	mov	r5,r21
4008ce00:	1039883a 	mov	fp,r2
4008ce04:	00900680 	call	40090068 <__mcmp>
4008ce08:	da001717 	ldw	r8,92(sp)
4008ce0c:	00816e0e 	bge	zero,r2,4008d3c8 <_dtoa_r+0x1248>
4008ce10:	b93fffc3 	ldbu	r4,-1(r23)
4008ce14:	b8bfffc4 	addi	r2,r23,-1
4008ce18:	1007883a 	mov	r3,r2
4008ce1c:	01800e44 	movi	r6,57
4008ce20:	d9c00717 	ldw	r7,28(sp)
4008ce24:	00000506 	br	4008ce3c <_dtoa_r+0xcbc>
4008ce28:	18ffffc4 	addi	r3,r3,-1
4008ce2c:	38811926 	beq	r7,r2,4008d294 <_dtoa_r+0x1114>
4008ce30:	19000003 	ldbu	r4,0(r3)
4008ce34:	102f883a 	mov	r23,r2
4008ce38:	10bfffc4 	addi	r2,r2,-1
4008ce3c:	21403fcc 	andi	r5,r4,255
4008ce40:	2940201c 	xori	r5,r5,128
4008ce44:	297fe004 	addi	r5,r5,-128
4008ce48:	29bff726 	beq	r5,r6,4008ce28 <__alt_mem_epcs+0xfff4be28>
4008ce4c:	21000044 	addi	r4,r4,1
4008ce50:	11000005 	stb	r4,0(r2)
4008ce54:	8009883a 	mov	r4,r16
4008ce58:	a80b883a 	mov	r5,r21
4008ce5c:	008f8500 	call	4008f850 <_Bfree>
4008ce60:	883e7526 	beq	r17,zero,4008c838 <__alt_mem_epcs+0xfff4b838>
4008ce64:	90000426 	beq	r18,zero,4008ce78 <_dtoa_r+0xcf8>
4008ce68:	94400326 	beq	r18,r17,4008ce78 <_dtoa_r+0xcf8>
4008ce6c:	8009883a 	mov	r4,r16
4008ce70:	900b883a 	mov	r5,r18
4008ce74:	008f8500 	call	4008f850 <_Bfree>
4008ce78:	8009883a 	mov	r4,r16
4008ce7c:	880b883a 	mov	r5,r17
4008ce80:	008f8500 	call	4008f850 <_Bfree>
4008ce84:	003e6c06 	br	4008c838 <__alt_mem_epcs+0xfff4b838>
4008ce88:	00800704 	movi	r2,28
4008ce8c:	d9800817 	ldw	r6,32(sp)
4008ce90:	a0a9883a 	add	r20,r20,r2
4008ce94:	b0ad883a 	add	r22,r22,r2
4008ce98:	308d883a 	add	r6,r6,r2
4008ce9c:	d9800815 	stw	r6,32(sp)
4008cea0:	003fa506 	br	4008cd38 <__alt_mem_epcs+0xfff4bd38>
4008cea4:	013efb84 	movi	r4,-1042
4008cea8:	246bc83a 	sub	r21,r4,r17
4008ceac:	9548983a 	sll	r4,r18,r21
4008ceb0:	003d1806 	br	4008c314 <__alt_mem_epcs+0xfff4b314>
4008ceb4:	d8000c15 	stw	zero,48(sp)
4008ceb8:	003d5b06 	br	4008c428 <__alt_mem_epcs+0xfff4b428>
4008cebc:	880b883a 	mov	r5,r17
4008cec0:	8009883a 	mov	r4,r16
4008cec4:	01800284 	movi	r6,10
4008cec8:	000f883a 	mov	r7,zero
4008cecc:	008f8780 	call	4008f878 <__multadd>
4008ced0:	1023883a 	mov	r17,r2
4008ced4:	d8800d17 	ldw	r2,52(sp)
4008ced8:	0082550e 	bge	zero,r2,4008d830 <_dtoa_r+0x16b0>
4008cedc:	d8800615 	stw	r2,24(sp)
4008cee0:	0500050e 	bge	zero,r20,4008cef8 <_dtoa_r+0xd78>
4008cee4:	880b883a 	mov	r5,r17
4008cee8:	8009883a 	mov	r4,r16
4008ceec:	a00d883a 	mov	r6,r20
4008cef0:	008ff200 	call	4008ff20 <__lshift>
4008cef4:	1023883a 	mov	r17,r2
4008cef8:	98016a1e 	bne	r19,zero,4008d4a4 <_dtoa_r+0x1324>
4008cefc:	8829883a 	mov	r20,r17
4008cf00:	d9000617 	ldw	r4,24(sp)
4008cf04:	dcc00717 	ldw	r19,28(sp)
4008cf08:	9480004c 	andi	r18,r18,1
4008cf0c:	20bfffc4 	addi	r2,r4,-1
4008cf10:	9885883a 	add	r2,r19,r2
4008cf14:	d8800415 	stw	r2,16(sp)
4008cf18:	dc800615 	stw	r18,24(sp)
4008cf1c:	e009883a 	mov	r4,fp
4008cf20:	a80b883a 	mov	r5,r21
4008cf24:	008bf800 	call	4008bf80 <quorem>
4008cf28:	e009883a 	mov	r4,fp
4008cf2c:	880b883a 	mov	r5,r17
4008cf30:	102f883a 	mov	r23,r2
4008cf34:	00900680 	call	40090068 <__mcmp>
4008cf38:	8009883a 	mov	r4,r16
4008cf3c:	a80b883a 	mov	r5,r21
4008cf40:	a00d883a 	mov	r6,r20
4008cf44:	102d883a 	mov	r22,r2
4008cf48:	00900c80 	call	400900c8 <__mdiff>
4008cf4c:	1007883a 	mov	r3,r2
4008cf50:	10800317 	ldw	r2,12(r2)
4008cf54:	bc800c04 	addi	r18,r23,48
4008cf58:	1000971e 	bne	r2,zero,4008d1b8 <_dtoa_r+0x1038>
4008cf5c:	180b883a 	mov	r5,r3
4008cf60:	e009883a 	mov	r4,fp
4008cf64:	d8c01515 	stw	r3,84(sp)
4008cf68:	00900680 	call	40090068 <__mcmp>
4008cf6c:	d8c01517 	ldw	r3,84(sp)
4008cf70:	8009883a 	mov	r4,r16
4008cf74:	d8801515 	stw	r2,84(sp)
4008cf78:	180b883a 	mov	r5,r3
4008cf7c:	008f8500 	call	4008f850 <_Bfree>
4008cf80:	d8801517 	ldw	r2,84(sp)
4008cf84:	1000041e 	bne	r2,zero,4008cf98 <_dtoa_r+0xe18>
4008cf88:	d9800317 	ldw	r6,12(sp)
4008cf8c:	3000021e 	bne	r6,zero,4008cf98 <_dtoa_r+0xe18>
4008cf90:	d8c00617 	ldw	r3,24(sp)
4008cf94:	18007626 	beq	r3,zero,4008d170 <_dtoa_r+0xff0>
4008cf98:	b0005b16 	blt	r22,zero,4008d108 <_dtoa_r+0xf88>
4008cf9c:	b000041e 	bne	r22,zero,4008cfb0 <_dtoa_r+0xe30>
4008cfa0:	d9000317 	ldw	r4,12(sp)
4008cfa4:	2000021e 	bne	r4,zero,4008cfb0 <_dtoa_r+0xe30>
4008cfa8:	d8c00617 	ldw	r3,24(sp)
4008cfac:	18005626 	beq	r3,zero,4008d108 <_dtoa_r+0xf88>
4008cfb0:	00814d16 	blt	zero,r2,4008d4e8 <_dtoa_r+0x1368>
4008cfb4:	d8c00417 	ldw	r3,16(sp)
4008cfb8:	9d800044 	addi	r22,r19,1
4008cfbc:	9c800005 	stb	r18,0(r19)
4008cfc0:	b02f883a 	mov	r23,r22
4008cfc4:	98c14c26 	beq	r19,r3,4008d4f8 <_dtoa_r+0x1378>
4008cfc8:	e00b883a 	mov	r5,fp
4008cfcc:	8009883a 	mov	r4,r16
4008cfd0:	01800284 	movi	r6,10
4008cfd4:	000f883a 	mov	r7,zero
4008cfd8:	008f8780 	call	4008f878 <__multadd>
4008cfdc:	1039883a 	mov	fp,r2
4008cfe0:	8d006d26 	beq	r17,r20,4008d198 <_dtoa_r+0x1018>
4008cfe4:	880b883a 	mov	r5,r17
4008cfe8:	01800284 	movi	r6,10
4008cfec:	000f883a 	mov	r7,zero
4008cff0:	8009883a 	mov	r4,r16
4008cff4:	008f8780 	call	4008f878 <__multadd>
4008cff8:	a00b883a 	mov	r5,r20
4008cffc:	8009883a 	mov	r4,r16
4008d000:	01800284 	movi	r6,10
4008d004:	000f883a 	mov	r7,zero
4008d008:	1023883a 	mov	r17,r2
4008d00c:	008f8780 	call	4008f878 <__multadd>
4008d010:	1029883a 	mov	r20,r2
4008d014:	b027883a 	mov	r19,r22
4008d018:	003fc006 	br	4008cf1c <__alt_mem_epcs+0xfff4bf1c>
4008d01c:	a005883a 	mov	r2,r20
4008d020:	003ede06 	br	4008cb9c <__alt_mem_epcs+0xfff4bb9c>
4008d024:	01000044 	movi	r4,1
4008d028:	d9000b15 	stw	r4,44(sp)
4008d02c:	d9802217 	ldw	r6,136(sp)
4008d030:	0180dc0e 	bge	zero,r6,4008d3a4 <_dtoa_r+0x1224>
4008d034:	3023883a 	mov	r17,r6
4008d038:	d9800d15 	stw	r6,52(sp)
4008d03c:	d9800615 	stw	r6,24(sp)
4008d040:	003d1e06 	br	4008c4bc <__alt_mem_epcs+0xfff4b4bc>
4008d044:	d8800617 	ldw	r2,24(sp)
4008d048:	00be3716 	blt	zero,r2,4008c928 <__alt_mem_epcs+0xfff4b928>
4008d04c:	1000be1e 	bne	r2,zero,4008d348 <_dtoa_r+0x11c8>
4008d050:	8809883a 	mov	r4,r17
4008d054:	a00b883a 	mov	r5,r20
4008d058:	000d883a 	mov	r6,zero
4008d05c:	01d00534 	movhi	r7,16404
4008d060:	0094df80 	call	40094df8 <__muldf3>
4008d064:	1009883a 	mov	r4,r2
4008d068:	180b883a 	mov	r5,r3
4008d06c:	900d883a 	mov	r6,r18
4008d070:	980f883a 	mov	r7,r19
4008d074:	00890d80 	call	400890d8 <__gedf2>
4008d078:	002b883a 	mov	r21,zero
4008d07c:	0023883a 	mov	r17,zero
4008d080:	10007a16 	blt	r2,zero,4008d26c <_dtoa_r+0x10ec>
4008d084:	d9002217 	ldw	r4,136(sp)
4008d088:	ddc00717 	ldw	r23,28(sp)
4008d08c:	0108303a 	nor	r4,zero,r4
4008d090:	d9000515 	stw	r4,20(sp)
4008d094:	8009883a 	mov	r4,r16
4008d098:	a80b883a 	mov	r5,r21
4008d09c:	008f8500 	call	4008f850 <_Bfree>
4008d0a0:	883f751e 	bne	r17,zero,4008ce78 <__alt_mem_epcs+0xfff4be78>
4008d0a4:	003de406 	br	4008c838 <__alt_mem_epcs+0xfff4b838>
4008d0a8:	e00b883a 	mov	r5,fp
4008d0ac:	8009883a 	mov	r4,r16
4008d0b0:	008fde00 	call	4008fde0 <__pow5mult>
4008d0b4:	1039883a 	mov	fp,r2
4008d0b8:	003ed306 	br	4008cc08 <__alt_mem_epcs+0xfff4bc08>
4008d0bc:	903ee01e 	bne	r18,zero,4008cc40 <__alt_mem_epcs+0xfff4bc40>
4008d0c0:	00800434 	movhi	r2,16
4008d0c4:	10bfffc4 	addi	r2,r2,-1
4008d0c8:	9884703a 	and	r2,r19,r2
4008d0cc:	103f081e 	bne	r2,zero,4008ccf0 <__alt_mem_epcs+0xfff4bcf0>
4008d0d0:	9cdffc2c 	andhi	r19,r19,32752
4008d0d4:	983f0626 	beq	r19,zero,4008ccf0 <__alt_mem_epcs+0xfff4bcf0>
4008d0d8:	d8800817 	ldw	r2,32(sp)
4008d0dc:	b5800044 	addi	r22,r22,1
4008d0e0:	04c00044 	movi	r19,1
4008d0e4:	10800044 	addi	r2,r2,1
4008d0e8:	d8800815 	stw	r2,32(sp)
4008d0ec:	003f0106 	br	4008ccf4 <__alt_mem_epcs+0xfff4bcf4>
4008d0f0:	d9800f17 	ldw	r6,60(sp)
4008d0f4:	30016826 	beq	r6,zero,4008d698 <_dtoa_r+0x1518>
4008d0f8:	10810cc4 	addi	r2,r2,1075
4008d0fc:	dd400917 	ldw	r21,36(sp)
4008d100:	dd000817 	ldw	r20,32(sp)
4008d104:	003e9906 	br	4008cb6c <__alt_mem_epcs+0xfff4bb6c>
4008d108:	9011883a 	mov	r8,r18
4008d10c:	4007883a 	mov	r3,r8
4008d110:	e02d883a 	mov	r22,fp
4008d114:	0080100e 	bge	zero,r2,4008d158 <_dtoa_r+0xfd8>
4008d118:	01800044 	movi	r6,1
4008d11c:	8009883a 	mov	r4,r16
4008d120:	e00b883a 	mov	r5,fp
4008d124:	da001515 	stw	r8,84(sp)
4008d128:	da001715 	stw	r8,92(sp)
4008d12c:	008ff200 	call	4008ff20 <__lshift>
4008d130:	1009883a 	mov	r4,r2
4008d134:	a80b883a 	mov	r5,r21
4008d138:	102d883a 	mov	r22,r2
4008d13c:	00900680 	call	40090068 <__mcmp>
4008d140:	d8c01517 	ldw	r3,84(sp)
4008d144:	da001717 	ldw	r8,92(sp)
4008d148:	0081a50e 	bge	zero,r2,4008d7e0 <_dtoa_r+0x1660>
4008d14c:	00800e44 	movi	r2,57
4008d150:	40817b26 	beq	r8,r2,4008d740 <_dtoa_r+0x15c0>
4008d154:	40c00044 	addi	r3,r8,1
4008d158:	8825883a 	mov	r18,r17
4008d15c:	9dc00044 	addi	r23,r19,1
4008d160:	98c00005 	stb	r3,0(r19)
4008d164:	a023883a 	mov	r17,r20
4008d168:	b039883a 	mov	fp,r22
4008d16c:	003f3906 	br	4008ce54 <__alt_mem_epcs+0xfff4be54>
4008d170:	00800e44 	movi	r2,57
4008d174:	9011883a 	mov	r8,r18
4008d178:	90817226 	beq	r18,r2,4008d744 <_dtoa_r+0x15c4>
4008d17c:	0580010e 	bge	zero,r22,4008d184 <_dtoa_r+0x1004>
4008d180:	ba000c44 	addi	r8,r23,49
4008d184:	8825883a 	mov	r18,r17
4008d188:	9dc00044 	addi	r23,r19,1
4008d18c:	9a000005 	stb	r8,0(r19)
4008d190:	a023883a 	mov	r17,r20
4008d194:	003f2f06 	br	4008ce54 <__alt_mem_epcs+0xfff4be54>
4008d198:	880b883a 	mov	r5,r17
4008d19c:	8009883a 	mov	r4,r16
4008d1a0:	01800284 	movi	r6,10
4008d1a4:	000f883a 	mov	r7,zero
4008d1a8:	008f8780 	call	4008f878 <__multadd>
4008d1ac:	1023883a 	mov	r17,r2
4008d1b0:	1029883a 	mov	r20,r2
4008d1b4:	003f9706 	br	4008d014 <__alt_mem_epcs+0xfff4c014>
4008d1b8:	8009883a 	mov	r4,r16
4008d1bc:	180b883a 	mov	r5,r3
4008d1c0:	008f8500 	call	4008f850 <_Bfree>
4008d1c4:	00800044 	movi	r2,1
4008d1c8:	003f7306 	br	4008cf98 <__alt_mem_epcs+0xfff4bf98>
4008d1cc:	e009883a 	mov	r4,fp
4008d1d0:	a80b883a 	mov	r5,r21
4008d1d4:	00900680 	call	40090068 <__mcmp>
4008d1d8:	103ee60e 	bge	r2,zero,4008cd74 <__alt_mem_epcs+0xfff4bd74>
4008d1dc:	8009883a 	mov	r4,r16
4008d1e0:	e00b883a 	mov	r5,fp
4008d1e4:	01800284 	movi	r6,10
4008d1e8:	000f883a 	mov	r7,zero
4008d1ec:	008f8780 	call	4008f878 <__multadd>
4008d1f0:	d9000517 	ldw	r4,20(sp)
4008d1f4:	d9800b17 	ldw	r6,44(sp)
4008d1f8:	1039883a 	mov	fp,r2
4008d1fc:	213fffc4 	addi	r4,r4,-1
4008d200:	d9000515 	stw	r4,20(sp)
4008d204:	303f2d1e 	bne	r6,zero,4008cebc <__alt_mem_epcs+0xfff4bebc>
4008d208:	d9000d17 	ldw	r4,52(sp)
4008d20c:	0101780e 	bge	zero,r4,4008d7f0 <_dtoa_r+0x1670>
4008d210:	d9000615 	stw	r4,24(sp)
4008d214:	003edb06 	br	4008cd84 <__alt_mem_epcs+0xfff4bd84>
4008d218:	00800084 	movi	r2,2
4008d21c:	30818e1e 	bne	r6,r2,4008d858 <_dtoa_r+0x16d8>
4008d220:	d8000b15 	stw	zero,44(sp)
4008d224:	003f8106 	br	4008d02c <__alt_mem_epcs+0xfff4c02c>
4008d228:	d8800717 	ldw	r2,28(sp)
4008d22c:	003c0306 	br	4008c23c <__alt_mem_epcs+0xfff4b23c>
4008d230:	d9000317 	ldw	r4,12(sp)
4008d234:	00800084 	movi	r2,2
4008d238:	113ed00e 	bge	r2,r4,4008cd7c <__alt_mem_epcs+0xfff4bd7c>
4008d23c:	d8c00617 	ldw	r3,24(sp)
4008d240:	183f901e 	bne	r3,zero,4008d084 <__alt_mem_epcs+0xfff4c084>
4008d244:	a80b883a 	mov	r5,r21
4008d248:	8009883a 	mov	r4,r16
4008d24c:	01800144 	movi	r6,5
4008d250:	000f883a 	mov	r7,zero
4008d254:	008f8780 	call	4008f878 <__multadd>
4008d258:	e009883a 	mov	r4,fp
4008d25c:	100b883a 	mov	r5,r2
4008d260:	102b883a 	mov	r21,r2
4008d264:	00900680 	call	40090068 <__mcmp>
4008d268:	00bf860e 	bge	zero,r2,4008d084 <__alt_mem_epcs+0xfff4c084>
4008d26c:	d9800717 	ldw	r6,28(sp)
4008d270:	00800c44 	movi	r2,49
4008d274:	30800005 	stb	r2,0(r6)
4008d278:	d8800517 	ldw	r2,20(sp)
4008d27c:	35c00044 	addi	r23,r6,1
4008d280:	10800044 	addi	r2,r2,1
4008d284:	d8800515 	stw	r2,20(sp)
4008d288:	003f8206 	br	4008d094 <__alt_mem_epcs+0xfff4c094>
4008d28c:	903e981e 	bne	r18,zero,4008ccf0 <__alt_mem_epcs+0xfff4bcf0>
4008d290:	003f8b06 	br	4008d0c0 <__alt_mem_epcs+0xfff4c0c0>
4008d294:	d9800517 	ldw	r6,20(sp)
4008d298:	d8c00717 	ldw	r3,28(sp)
4008d29c:	00800c44 	movi	r2,49
4008d2a0:	31800044 	addi	r6,r6,1
4008d2a4:	d9800515 	stw	r6,20(sp)
4008d2a8:	18800005 	stb	r2,0(r3)
4008d2ac:	003ee906 	br	4008ce54 <__alt_mem_epcs+0xfff4be54>
4008d2b0:	dc000317 	ldw	r16,12(sp)
4008d2b4:	003d6006 	br	4008c838 <__alt_mem_epcs+0xfff4b838>
4008d2b8:	8809883a 	mov	r4,r17
4008d2bc:	0089b100 	call	40089b10 <__floatsidf>
4008d2c0:	a009883a 	mov	r4,r20
4008d2c4:	a80b883a 	mov	r5,r21
4008d2c8:	100d883a 	mov	r6,r2
4008d2cc:	180f883a 	mov	r7,r3
4008d2d0:	0094df80 	call	40094df8 <__muldf3>
4008d2d4:	1009883a 	mov	r4,r2
4008d2d8:	180b883a 	mov	r5,r3
4008d2dc:	000d883a 	mov	r6,zero
4008d2e0:	01d00734 	movhi	r7,16412
4008d2e4:	0093b2c0 	call	40093b2c <__adddf3>
4008d2e8:	1023883a 	mov	r17,r2
4008d2ec:	00bf3034 	movhi	r2,64704
4008d2f0:	1885883a 	add	r2,r3,r2
4008d2f4:	d8800e15 	stw	r2,56(sp)
4008d2f8:	a009883a 	mov	r4,r20
4008d2fc:	a80b883a 	mov	r5,r21
4008d300:	000d883a 	mov	r6,zero
4008d304:	01d00534 	movhi	r7,16404
4008d308:	00891b80 	call	400891b8 <__subdf3>
4008d30c:	d9c00e17 	ldw	r7,56(sp)
4008d310:	1009883a 	mov	r4,r2
4008d314:	180b883a 	mov	r5,r3
4008d318:	880d883a 	mov	r6,r17
4008d31c:	102b883a 	mov	r21,r2
4008d320:	1829883a 	mov	r20,r3
4008d324:	00890d80 	call	400890d8 <__gedf2>
4008d328:	00807716 	blt	zero,r2,4008d508 <_dtoa_r+0x1388>
4008d32c:	d8800e17 	ldw	r2,56(sp)
4008d330:	a809883a 	mov	r4,r21
4008d334:	a00b883a 	mov	r5,r20
4008d338:	11e0003c 	xorhi	r7,r2,32768
4008d33c:	880d883a 	mov	r6,r17
4008d340:	0094d180 	call	40094d18 <__ledf2>
4008d344:	103d6b0e 	bge	r2,zero,4008c8f4 <__alt_mem_epcs+0xfff4b8f4>
4008d348:	002b883a 	mov	r21,zero
4008d34c:	0023883a 	mov	r17,zero
4008d350:	003f4c06 	br	4008d084 <__alt_mem_epcs+0xfff4c084>
4008d354:	d9800917 	ldw	r6,36(sp)
4008d358:	e00b883a 	mov	r5,fp
4008d35c:	8009883a 	mov	r4,r16
4008d360:	008fde00 	call	4008fde0 <__pow5mult>
4008d364:	1039883a 	mov	fp,r2
4008d368:	003e2706 	br	4008cc08 <__alt_mem_epcs+0xfff4bc08>
4008d36c:	d8000b15 	stw	zero,44(sp)
4008d370:	003c4906 	br	4008c498 <__alt_mem_epcs+0xfff4b498>
4008d374:	d9000917 	ldw	r4,36(sp)
4008d378:	d9800a17 	ldw	r6,40(sp)
4008d37c:	dd400915 	stw	r21,36(sp)
4008d380:	a905c83a 	sub	r2,r21,r4
4008d384:	308d883a 	add	r6,r6,r2
4008d388:	d9800a15 	stw	r6,40(sp)
4008d38c:	002b883a 	mov	r21,zero
4008d390:	003df206 	br	4008cb5c <__alt_mem_epcs+0xfff4bb5c>
4008d394:	dc800e15 	stw	r18,56(sp)
4008d398:	982b883a 	mov	r21,r19
4008d39c:	04400084 	movi	r17,2
4008d3a0:	003c7406 	br	4008c574 <__alt_mem_epcs+0xfff4b574>
4008d3a4:	04400044 	movi	r17,1
4008d3a8:	dc400d15 	stw	r17,52(sp)
4008d3ac:	dc400615 	stw	r17,24(sp)
4008d3b0:	dc402215 	stw	r17,136(sp)
4008d3b4:	80001115 	stw	zero,68(r16)
4008d3b8:	000b883a 	mov	r5,zero
4008d3bc:	003c4a06 	br	4008c4e8 <__alt_mem_epcs+0xfff4b4e8>
4008d3c0:	3023883a 	mov	r17,r6
4008d3c4:	003ffb06 	br	4008d3b4 <__alt_mem_epcs+0xfff4c3b4>
4008d3c8:	1000021e 	bne	r2,zero,4008d3d4 <_dtoa_r+0x1254>
4008d3cc:	4200004c 	andi	r8,r8,1
4008d3d0:	403e8f1e 	bne	r8,zero,4008ce10 <__alt_mem_epcs+0xfff4be10>
4008d3d4:	01000c04 	movi	r4,48
4008d3d8:	00000106 	br	4008d3e0 <_dtoa_r+0x1260>
4008d3dc:	102f883a 	mov	r23,r2
4008d3e0:	b8bfffc4 	addi	r2,r23,-1
4008d3e4:	10c00007 	ldb	r3,0(r2)
4008d3e8:	193ffc26 	beq	r3,r4,4008d3dc <__alt_mem_epcs+0xfff4c3dc>
4008d3ec:	003e9906 	br	4008ce54 <__alt_mem_epcs+0xfff4be54>
4008d3f0:	d9000517 	ldw	r4,20(sp)
4008d3f4:	012fc83a 	sub	r23,zero,r4
4008d3f8:	b800ad26 	beq	r23,zero,4008d6b0 <_dtoa_r+0x1530>
4008d3fc:	b88003cc 	andi	r2,r23,15
4008d400:	100490fa 	slli	r2,r2,3
4008d404:	00d002b4 	movhi	r3,16394
4008d408:	18e88e04 	addi	r3,r3,-24008
4008d40c:	1885883a 	add	r2,r3,r2
4008d410:	11800017 	ldw	r6,0(r2)
4008d414:	11c00117 	ldw	r7,4(r2)
4008d418:	b82fd13a 	srai	r23,r23,4
4008d41c:	9009883a 	mov	r4,r18
4008d420:	980b883a 	mov	r5,r19
4008d424:	0094df80 	call	40094df8 <__muldf3>
4008d428:	1029883a 	mov	r20,r2
4008d42c:	182b883a 	mov	r21,r3
4008d430:	b800f426 	beq	r23,zero,4008d804 <_dtoa_r+0x1684>
4008d434:	021002b4 	movhi	r8,16394
4008d438:	42288404 	addi	r8,r8,-24048
4008d43c:	8029883a 	mov	r20,r16
4008d440:	04400084 	movi	r17,2
4008d444:	4021883a 	mov	r16,r8
4008d448:	b980004c 	andi	r6,r23,1
4008d44c:	1009883a 	mov	r4,r2
4008d450:	b82fd07a 	srai	r23,r23,1
4008d454:	180b883a 	mov	r5,r3
4008d458:	30000426 	beq	r6,zero,4008d46c <_dtoa_r+0x12ec>
4008d45c:	81800017 	ldw	r6,0(r16)
4008d460:	81c00117 	ldw	r7,4(r16)
4008d464:	8c400044 	addi	r17,r17,1
4008d468:	0094df80 	call	40094df8 <__muldf3>
4008d46c:	84000204 	addi	r16,r16,8
4008d470:	b83ff51e 	bne	r23,zero,4008d448 <__alt_mem_epcs+0xfff4c448>
4008d474:	a021883a 	mov	r16,r20
4008d478:	182b883a 	mov	r21,r3
4008d47c:	1029883a 	mov	r20,r2
4008d480:	003c5506 	br	4008c5d8 <__alt_mem_epcs+0xfff4b5d8>
4008d484:	d9800517 	ldw	r6,20(sp)
4008d488:	d9000717 	ldw	r4,28(sp)
4008d48c:	00c00c04 	movi	r3,48
4008d490:	31800044 	addi	r6,r6,1
4008d494:	d9800515 	stw	r6,20(sp)
4008d498:	20c00005 	stb	r3,0(r4)
4008d49c:	02000c44 	movi	r8,49
4008d4a0:	003da206 	br	4008cb2c <__alt_mem_epcs+0xfff4bb2c>
4008d4a4:	89400117 	ldw	r5,4(r17)
4008d4a8:	8009883a 	mov	r4,r16
4008d4ac:	008f7a80 	call	4008f7a8 <_Balloc>
4008d4b0:	89800417 	ldw	r6,16(r17)
4008d4b4:	11000304 	addi	r4,r2,12
4008d4b8:	89400304 	addi	r5,r17,12
4008d4bc:	31800084 	addi	r6,r6,2
4008d4c0:	318d883a 	add	r6,r6,r6
4008d4c4:	318d883a 	add	r6,r6,r6
4008d4c8:	1027883a 	mov	r19,r2
4008d4cc:	008f3f00 	call	4008f3f0 <memcpy>
4008d4d0:	8009883a 	mov	r4,r16
4008d4d4:	980b883a 	mov	r5,r19
4008d4d8:	01800044 	movi	r6,1
4008d4dc:	008ff200 	call	4008ff20 <__lshift>
4008d4e0:	1029883a 	mov	r20,r2
4008d4e4:	003e8606 	br	4008cf00 <__alt_mem_epcs+0xfff4bf00>
4008d4e8:	00800e44 	movi	r2,57
4008d4ec:	90809526 	beq	r18,r2,4008d744 <_dtoa_r+0x15c4>
4008d4f0:	92000044 	addi	r8,r18,1
4008d4f4:	003f2306 	br	4008d184 <__alt_mem_epcs+0xfff4c184>
4008d4f8:	9011883a 	mov	r8,r18
4008d4fc:	8825883a 	mov	r18,r17
4008d500:	a023883a 	mov	r17,r20
4008d504:	003e3706 	br	4008cde4 <__alt_mem_epcs+0xfff4bde4>
4008d508:	002b883a 	mov	r21,zero
4008d50c:	0023883a 	mov	r17,zero
4008d510:	003f5606 	br	4008d26c <__alt_mem_epcs+0xfff4c26c>
4008d514:	51bfffc4 	addi	r6,r10,-1
4008d518:	300490fa 	slli	r2,r6,3
4008d51c:	00d002b4 	movhi	r3,16394
4008d520:	18e88e04 	addi	r3,r3,-24008
4008d524:	1885883a 	add	r2,r3,r2
4008d528:	d9c00e17 	ldw	r7,56(sp)
4008d52c:	11000017 	ldw	r4,0(r2)
4008d530:	11400117 	ldw	r5,4(r2)
4008d534:	d8800717 	ldw	r2,28(sp)
4008d538:	d9801015 	stw	r6,64(sp)
4008d53c:	880d883a 	mov	r6,r17
4008d540:	da801615 	stw	r10,88(sp)
4008d544:	15c00044 	addi	r23,r2,1
4008d548:	0094df80 	call	40094df8 <__muldf3>
4008d54c:	a80b883a 	mov	r5,r21
4008d550:	a009883a 	mov	r4,r20
4008d554:	d8c01115 	stw	r3,68(sp)
4008d558:	d8800e15 	stw	r2,56(sp)
4008d55c:	0089a880 	call	40089a88 <__fixdfsi>
4008d560:	1009883a 	mov	r4,r2
4008d564:	1023883a 	mov	r17,r2
4008d568:	0089b100 	call	40089b10 <__floatsidf>
4008d56c:	a009883a 	mov	r4,r20
4008d570:	a80b883a 	mov	r5,r21
4008d574:	100d883a 	mov	r6,r2
4008d578:	180f883a 	mov	r7,r3
4008d57c:	00891b80 	call	400891b8 <__subdf3>
4008d580:	1813883a 	mov	r9,r3
4008d584:	d8c00717 	ldw	r3,28(sp)
4008d588:	8c400c04 	addi	r17,r17,48
4008d58c:	1011883a 	mov	r8,r2
4008d590:	1c400005 	stb	r17,0(r3)
4008d594:	da801617 	ldw	r10,88(sp)
4008d598:	00800044 	movi	r2,1
4008d59c:	50802326 	beq	r10,r2,4008d62c <_dtoa_r+0x14ac>
4008d5a0:	d8800717 	ldw	r2,28(sp)
4008d5a4:	b82b883a 	mov	r21,r23
4008d5a8:	dc001315 	stw	r16,76(sp)
4008d5ac:	12a9883a 	add	r20,r2,r10
4008d5b0:	4807883a 	mov	r3,r9
4008d5b4:	4005883a 	mov	r2,r8
4008d5b8:	dc801415 	stw	r18,80(sp)
4008d5bc:	000d883a 	mov	r6,zero
4008d5c0:	01d00934 	movhi	r7,16420
4008d5c4:	1009883a 	mov	r4,r2
4008d5c8:	180b883a 	mov	r5,r3
4008d5cc:	0094df80 	call	40094df8 <__muldf3>
4008d5d0:	180b883a 	mov	r5,r3
4008d5d4:	1009883a 	mov	r4,r2
4008d5d8:	1821883a 	mov	r16,r3
4008d5dc:	1025883a 	mov	r18,r2
4008d5e0:	0089a880 	call	40089a88 <__fixdfsi>
4008d5e4:	1009883a 	mov	r4,r2
4008d5e8:	1023883a 	mov	r17,r2
4008d5ec:	0089b100 	call	40089b10 <__floatsidf>
4008d5f0:	9009883a 	mov	r4,r18
4008d5f4:	800b883a 	mov	r5,r16
4008d5f8:	100d883a 	mov	r6,r2
4008d5fc:	180f883a 	mov	r7,r3
4008d600:	8c400c04 	addi	r17,r17,48
4008d604:	00891b80 	call	400891b8 <__subdf3>
4008d608:	ad400044 	addi	r21,r21,1
4008d60c:	ac7fffc5 	stb	r17,-1(r21)
4008d610:	ad3fea1e 	bne	r21,r20,4008d5bc <__alt_mem_epcs+0xfff4c5bc>
4008d614:	1813883a 	mov	r9,r3
4008d618:	d8c01017 	ldw	r3,64(sp)
4008d61c:	dc001317 	ldw	r16,76(sp)
4008d620:	dc801417 	ldw	r18,80(sp)
4008d624:	1011883a 	mov	r8,r2
4008d628:	b8ef883a 	add	r23,r23,r3
4008d62c:	d9000e17 	ldw	r4,56(sp)
4008d630:	d9401117 	ldw	r5,68(sp)
4008d634:	000d883a 	mov	r6,zero
4008d638:	01cff834 	movhi	r7,16352
4008d63c:	da001715 	stw	r8,92(sp)
4008d640:	da401515 	stw	r9,84(sp)
4008d644:	0093b2c0 	call	40093b2c <__adddf3>
4008d648:	da001717 	ldw	r8,92(sp)
4008d64c:	da401517 	ldw	r9,84(sp)
4008d650:	1009883a 	mov	r4,r2
4008d654:	400d883a 	mov	r6,r8
4008d658:	480f883a 	mov	r7,r9
4008d65c:	180b883a 	mov	r5,r3
4008d660:	0094d180 	call	40094d18 <__ledf2>
4008d664:	da001717 	ldw	r8,92(sp)
4008d668:	da401517 	ldw	r9,84(sp)
4008d66c:	10003b0e 	bge	r2,zero,4008d75c <_dtoa_r+0x15dc>
4008d670:	d9001217 	ldw	r4,72(sp)
4008d674:	bd7fffc3 	ldbu	r21,-1(r23)
4008d678:	d9000515 	stw	r4,20(sp)
4008d67c:	003d1c06 	br	4008caf0 <__alt_mem_epcs+0xfff4baf0>
4008d680:	d8c00817 	ldw	r3,32(sp)
4008d684:	18a9c83a 	sub	r20,r3,r2
4008d688:	0005883a 	mov	r2,zero
4008d68c:	003d3706 	br	4008cb6c <__alt_mem_epcs+0xfff4bb6c>
4008d690:	00800044 	movi	r2,1
4008d694:	003dd006 	br	4008cdd8 <__alt_mem_epcs+0xfff4bdd8>
4008d698:	d8c00217 	ldw	r3,8(sp)
4008d69c:	00800d84 	movi	r2,54
4008d6a0:	dd400917 	ldw	r21,36(sp)
4008d6a4:	10c5c83a 	sub	r2,r2,r3
4008d6a8:	dd000817 	ldw	r20,32(sp)
4008d6ac:	003d2f06 	br	4008cb6c <__alt_mem_epcs+0xfff4bb6c>
4008d6b0:	9029883a 	mov	r20,r18
4008d6b4:	982b883a 	mov	r21,r19
4008d6b8:	04400084 	movi	r17,2
4008d6bc:	003bc606 	br	4008c5d8 <__alt_mem_epcs+0xfff4b5d8>
4008d6c0:	d8800617 	ldw	r2,24(sp)
4008d6c4:	103efc26 	beq	r2,zero,4008d2b8 <__alt_mem_epcs+0xfff4c2b8>
4008d6c8:	d8c00d17 	ldw	r3,52(sp)
4008d6cc:	00fc890e 	bge	zero,r3,4008c8f4 <__alt_mem_epcs+0xfff4b8f4>
4008d6d0:	a80b883a 	mov	r5,r21
4008d6d4:	a009883a 	mov	r4,r20
4008d6d8:	000d883a 	mov	r6,zero
4008d6dc:	01d00934 	movhi	r7,16420
4008d6e0:	0094df80 	call	40094df8 <__muldf3>
4008d6e4:	89000044 	addi	r4,r17,1
4008d6e8:	1029883a 	mov	r20,r2
4008d6ec:	182b883a 	mov	r21,r3
4008d6f0:	0089b100 	call	40089b10 <__floatsidf>
4008d6f4:	a009883a 	mov	r4,r20
4008d6f8:	a80b883a 	mov	r5,r21
4008d6fc:	100d883a 	mov	r6,r2
4008d700:	180f883a 	mov	r7,r3
4008d704:	0094df80 	call	40094df8 <__muldf3>
4008d708:	1009883a 	mov	r4,r2
4008d70c:	180b883a 	mov	r5,r3
4008d710:	000d883a 	mov	r6,zero
4008d714:	01d00734 	movhi	r7,16412
4008d718:	0093b2c0 	call	40093b2c <__adddf3>
4008d71c:	d9000517 	ldw	r4,20(sp)
4008d720:	1023883a 	mov	r17,r2
4008d724:	00bf3034 	movhi	r2,64704
4008d728:	213fffc4 	addi	r4,r4,-1
4008d72c:	1885883a 	add	r2,r3,r2
4008d730:	d9001215 	stw	r4,72(sp)
4008d734:	d8800e15 	stw	r2,56(sp)
4008d738:	da800d17 	ldw	r10,52(sp)
4008d73c:	003bc306 	br	4008c64c <__alt_mem_epcs+0xfff4b64c>
4008d740:	b039883a 	mov	fp,r22
4008d744:	01000e44 	movi	r4,57
4008d748:	8825883a 	mov	r18,r17
4008d74c:	9dc00044 	addi	r23,r19,1
4008d750:	99000005 	stb	r4,0(r19)
4008d754:	a023883a 	mov	r17,r20
4008d758:	003dae06 	br	4008ce14 <__alt_mem_epcs+0xfff4be14>
4008d75c:	d9800e17 	ldw	r6,56(sp)
4008d760:	d9c01117 	ldw	r7,68(sp)
4008d764:	0009883a 	mov	r4,zero
4008d768:	014ff834 	movhi	r5,16352
4008d76c:	da001715 	stw	r8,92(sp)
4008d770:	da401515 	stw	r9,84(sp)
4008d774:	00891b80 	call	400891b8 <__subdf3>
4008d778:	da001717 	ldw	r8,92(sp)
4008d77c:	da401517 	ldw	r9,84(sp)
4008d780:	1009883a 	mov	r4,r2
4008d784:	180b883a 	mov	r5,r3
4008d788:	400d883a 	mov	r6,r8
4008d78c:	480f883a 	mov	r7,r9
4008d790:	00890d80 	call	400890d8 <__gedf2>
4008d794:	00bc570e 	bge	zero,r2,4008c8f4 <__alt_mem_epcs+0xfff4b8f4>
4008d798:	01000c04 	movi	r4,48
4008d79c:	00000106 	br	4008d7a4 <_dtoa_r+0x1624>
4008d7a0:	102f883a 	mov	r23,r2
4008d7a4:	b8bfffc4 	addi	r2,r23,-1
4008d7a8:	10c00007 	ldb	r3,0(r2)
4008d7ac:	193ffc26 	beq	r3,r4,4008d7a0 <__alt_mem_epcs+0xfff4c7a0>
4008d7b0:	d9801217 	ldw	r6,72(sp)
4008d7b4:	d9800515 	stw	r6,20(sp)
4008d7b8:	003c1f06 	br	4008c838 <__alt_mem_epcs+0xfff4b838>
4008d7bc:	d8801217 	ldw	r2,72(sp)
4008d7c0:	dc001117 	ldw	r16,68(sp)
4008d7c4:	d8800515 	stw	r2,20(sp)
4008d7c8:	003cc906 	br	4008caf0 <__alt_mem_epcs+0xfff4baf0>
4008d7cc:	dd801317 	ldw	r22,76(sp)
4008d7d0:	dc001117 	ldw	r16,68(sp)
4008d7d4:	dcc01417 	ldw	r19,80(sp)
4008d7d8:	dc801017 	ldw	r18,64(sp)
4008d7dc:	003c4506 	br	4008c8f4 <__alt_mem_epcs+0xfff4b8f4>
4008d7e0:	103e5d1e 	bne	r2,zero,4008d158 <__alt_mem_epcs+0xfff4c158>
4008d7e4:	4080004c 	andi	r2,r8,1
4008d7e8:	103e5b26 	beq	r2,zero,4008d158 <__alt_mem_epcs+0xfff4c158>
4008d7ec:	003e5706 	br	4008d14c <__alt_mem_epcs+0xfff4c14c>
4008d7f0:	d8c00317 	ldw	r3,12(sp)
4008d7f4:	00800084 	movi	r2,2
4008d7f8:	10c00a16 	blt	r2,r3,4008d824 <_dtoa_r+0x16a4>
4008d7fc:	d9000d17 	ldw	r4,52(sp)
4008d800:	003e8306 	br	4008d210 <__alt_mem_epcs+0xfff4c210>
4008d804:	04400084 	movi	r17,2
4008d808:	003b7306 	br	4008c5d8 <__alt_mem_epcs+0xfff4b5d8>
4008d80c:	d9801217 	ldw	r6,72(sp)
4008d810:	d9800515 	stw	r6,20(sp)
4008d814:	003cb606 	br	4008caf0 <__alt_mem_epcs+0xfff4baf0>
4008d818:	d9001217 	ldw	r4,72(sp)
4008d81c:	d9000515 	stw	r4,20(sp)
4008d820:	003c0506 	br	4008c838 <__alt_mem_epcs+0xfff4b838>
4008d824:	d9800d17 	ldw	r6,52(sp)
4008d828:	d9800615 	stw	r6,24(sp)
4008d82c:	003e8306 	br	4008d23c <__alt_mem_epcs+0xfff4c23c>
4008d830:	d9800317 	ldw	r6,12(sp)
4008d834:	00800084 	movi	r2,2
4008d838:	11800216 	blt	r2,r6,4008d844 <_dtoa_r+0x16c4>
4008d83c:	d8800d17 	ldw	r2,52(sp)
4008d840:	003da606 	br	4008cedc <__alt_mem_epcs+0xfff4bedc>
4008d844:	d8800d17 	ldw	r2,52(sp)
4008d848:	d8800615 	stw	r2,24(sp)
4008d84c:	003e7b06 	br	4008d23c <__alt_mem_epcs+0xfff4c23c>
4008d850:	05000044 	movi	r20,1
4008d854:	003b0506 	br	4008c46c <__alt_mem_epcs+0xfff4b46c>
4008d858:	8009883a 	mov	r4,r16
4008d85c:	80001115 	stw	zero,68(r16)
4008d860:	000b883a 	mov	r5,zero
4008d864:	008f7a80 	call	4008f7a8 <_Balloc>
4008d868:	d8800715 	stw	r2,28(sp)
4008d86c:	d8c00717 	ldw	r3,28(sp)
4008d870:	00bfffc4 	movi	r2,-1
4008d874:	01000044 	movi	r4,1
4008d878:	d8800615 	stw	r2,24(sp)
4008d87c:	80c01015 	stw	r3,64(r16)
4008d880:	d9000b15 	stw	r4,44(sp)
4008d884:	d8002215 	stw	zero,136(sp)
4008d888:	d8800d15 	stw	r2,52(sp)
4008d88c:	003c1906 	br	4008c8f4 <__alt_mem_epcs+0xfff4b8f4>
4008d890:	193d2926 	beq	r3,r4,4008cd38 <__alt_mem_epcs+0xfff4bd38>
4008d894:	00c00f04 	movi	r3,60
4008d898:	1885c83a 	sub	r2,r3,r2
4008d89c:	003d7b06 	br	4008ce8c <__alt_mem_epcs+0xfff4be8c>
4008d8a0:	000b883a 	mov	r5,zero
4008d8a4:	003b1006 	br	4008c4e8 <__alt_mem_epcs+0xfff4b4e8>

4008d8a8 <_fflush_r>:
4008d8a8:	defffb04 	addi	sp,sp,-20
4008d8ac:	dcc00315 	stw	r19,12(sp)
4008d8b0:	dc000015 	stw	r16,0(sp)
4008d8b4:	dfc00415 	stw	ra,16(sp)
4008d8b8:	dc800215 	stw	r18,8(sp)
4008d8bc:	dc400115 	stw	r17,4(sp)
4008d8c0:	2027883a 	mov	r19,r4
4008d8c4:	2821883a 	mov	r16,r5
4008d8c8:	20000226 	beq	r4,zero,4008d8d4 <_fflush_r+0x2c>
4008d8cc:	20800e17 	ldw	r2,56(r4)
4008d8d0:	10005326 	beq	r2,zero,4008da20 <_fflush_r+0x178>
4008d8d4:	8080030b 	ldhu	r2,12(r16)
4008d8d8:	10ffffcc 	andi	r3,r2,65535
4008d8dc:	18e0001c 	xori	r3,r3,32768
4008d8e0:	18e00004 	addi	r3,r3,-32768
4008d8e4:	18002c26 	beq	r3,zero,4008d998 <_fflush_r+0xf0>
4008d8e8:	10c0020c 	andi	r3,r2,8
4008d8ec:	1800321e 	bne	r3,zero,4008d9b8 <_fflush_r+0x110>
4008d8f0:	80c00117 	ldw	r3,4(r16)
4008d8f4:	10820014 	ori	r2,r2,2048
4008d8f8:	8080030d 	sth	r2,12(r16)
4008d8fc:	00c0570e 	bge	zero,r3,4008da5c <_fflush_r+0x1b4>
4008d900:	82000a17 	ldw	r8,40(r16)
4008d904:	40002426 	beq	r8,zero,4008d998 <_fflush_r+0xf0>
4008d908:	9c400017 	ldw	r17,0(r19)
4008d90c:	10c4000c 	andi	r3,r2,4096
4008d910:	98000015 	stw	zero,0(r19)
4008d914:	18004626 	beq	r3,zero,4008da30 <_fflush_r+0x188>
4008d918:	81801417 	ldw	r6,80(r16)
4008d91c:	10c0010c 	andi	r3,r2,4
4008d920:	18000626 	beq	r3,zero,4008d93c <_fflush_r+0x94>
4008d924:	80c00117 	ldw	r3,4(r16)
4008d928:	80800c17 	ldw	r2,48(r16)
4008d92c:	30cdc83a 	sub	r6,r6,r3
4008d930:	10000226 	beq	r2,zero,4008d93c <_fflush_r+0x94>
4008d934:	80800f17 	ldw	r2,60(r16)
4008d938:	308dc83a 	sub	r6,r6,r2
4008d93c:	81400717 	ldw	r5,28(r16)
4008d940:	9809883a 	mov	r4,r19
4008d944:	000f883a 	mov	r7,zero
4008d948:	403ee83a 	callr	r8
4008d94c:	00ffffc4 	movi	r3,-1
4008d950:	10c04526 	beq	r2,r3,4008da68 <_fflush_r+0x1c0>
4008d954:	80c0030b 	ldhu	r3,12(r16)
4008d958:	81000417 	ldw	r4,16(r16)
4008d95c:	80000115 	stw	zero,4(r16)
4008d960:	197dffcc 	andi	r5,r3,63487
4008d964:	8140030d 	sth	r5,12(r16)
4008d968:	81000015 	stw	r4,0(r16)
4008d96c:	18c4000c 	andi	r3,r3,4096
4008d970:	18000126 	beq	r3,zero,4008d978 <_fflush_r+0xd0>
4008d974:	80801415 	stw	r2,80(r16)
4008d978:	81400c17 	ldw	r5,48(r16)
4008d97c:	9c400015 	stw	r17,0(r19)
4008d980:	28000526 	beq	r5,zero,4008d998 <_fflush_r+0xf0>
4008d984:	80801004 	addi	r2,r16,64
4008d988:	28800226 	beq	r5,r2,4008d994 <_fflush_r+0xec>
4008d98c:	9809883a 	mov	r4,r19
4008d990:	008dfc40 	call	4008dfc4 <_free_r>
4008d994:	80000c15 	stw	zero,48(r16)
4008d998:	0005883a 	mov	r2,zero
4008d99c:	dfc00417 	ldw	ra,16(sp)
4008d9a0:	dcc00317 	ldw	r19,12(sp)
4008d9a4:	dc800217 	ldw	r18,8(sp)
4008d9a8:	dc400117 	ldw	r17,4(sp)
4008d9ac:	dc000017 	ldw	r16,0(sp)
4008d9b0:	dec00504 	addi	sp,sp,20
4008d9b4:	f800283a 	ret
4008d9b8:	84800417 	ldw	r18,16(r16)
4008d9bc:	903ff626 	beq	r18,zero,4008d998 <__alt_mem_epcs+0xfff4c998>
4008d9c0:	84400017 	ldw	r17,0(r16)
4008d9c4:	108000cc 	andi	r2,r2,3
4008d9c8:	84800015 	stw	r18,0(r16)
4008d9cc:	8ca3c83a 	sub	r17,r17,r18
4008d9d0:	10001526 	beq	r2,zero,4008da28 <_fflush_r+0x180>
4008d9d4:	0005883a 	mov	r2,zero
4008d9d8:	80800215 	stw	r2,8(r16)
4008d9dc:	04400316 	blt	zero,r17,4008d9ec <_fflush_r+0x144>
4008d9e0:	003fed06 	br	4008d998 <__alt_mem_epcs+0xfff4c998>
4008d9e4:	90a5883a 	add	r18,r18,r2
4008d9e8:	047feb0e 	bge	zero,r17,4008d998 <__alt_mem_epcs+0xfff4c998>
4008d9ec:	80800917 	ldw	r2,36(r16)
4008d9f0:	81400717 	ldw	r5,28(r16)
4008d9f4:	880f883a 	mov	r7,r17
4008d9f8:	900d883a 	mov	r6,r18
4008d9fc:	9809883a 	mov	r4,r19
4008da00:	103ee83a 	callr	r2
4008da04:	88a3c83a 	sub	r17,r17,r2
4008da08:	00bff616 	blt	zero,r2,4008d9e4 <__alt_mem_epcs+0xfff4c9e4>
4008da0c:	80c0030b 	ldhu	r3,12(r16)
4008da10:	00bfffc4 	movi	r2,-1
4008da14:	18c01014 	ori	r3,r3,64
4008da18:	80c0030d 	sth	r3,12(r16)
4008da1c:	003fdf06 	br	4008d99c <__alt_mem_epcs+0xfff4c99c>
4008da20:	008de500 	call	4008de50 <__sinit>
4008da24:	003fab06 	br	4008d8d4 <__alt_mem_epcs+0xfff4c8d4>
4008da28:	80800517 	ldw	r2,20(r16)
4008da2c:	003fea06 	br	4008d9d8 <__alt_mem_epcs+0xfff4c9d8>
4008da30:	81400717 	ldw	r5,28(r16)
4008da34:	000d883a 	mov	r6,zero
4008da38:	9809883a 	mov	r4,r19
4008da3c:	01c00044 	movi	r7,1
4008da40:	403ee83a 	callr	r8
4008da44:	100d883a 	mov	r6,r2
4008da48:	00bfffc4 	movi	r2,-1
4008da4c:	30801326 	beq	r6,r2,4008da9c <_fflush_r+0x1f4>
4008da50:	8080030b 	ldhu	r2,12(r16)
4008da54:	82000a17 	ldw	r8,40(r16)
4008da58:	003fb006 	br	4008d91c <__alt_mem_epcs+0xfff4c91c>
4008da5c:	80c00f17 	ldw	r3,60(r16)
4008da60:	00ffa716 	blt	zero,r3,4008d900 <__alt_mem_epcs+0xfff4c900>
4008da64:	003fcc06 	br	4008d998 <__alt_mem_epcs+0xfff4c998>
4008da68:	98c00017 	ldw	r3,0(r19)
4008da6c:	183fb926 	beq	r3,zero,4008d954 <__alt_mem_epcs+0xfff4c954>
4008da70:	01000744 	movi	r4,29
4008da74:	19000226 	beq	r3,r4,4008da80 <_fflush_r+0x1d8>
4008da78:	01000584 	movi	r4,22
4008da7c:	1900101e 	bne	r3,r4,4008dac0 <_fflush_r+0x218>
4008da80:	8080030b 	ldhu	r2,12(r16)
4008da84:	80c00417 	ldw	r3,16(r16)
4008da88:	80000115 	stw	zero,4(r16)
4008da8c:	10bdffcc 	andi	r2,r2,63487
4008da90:	8080030d 	sth	r2,12(r16)
4008da94:	80c00015 	stw	r3,0(r16)
4008da98:	003fb706 	br	4008d978 <__alt_mem_epcs+0xfff4c978>
4008da9c:	98800017 	ldw	r2,0(r19)
4008daa0:	103feb26 	beq	r2,zero,4008da50 <__alt_mem_epcs+0xfff4ca50>
4008daa4:	00c00744 	movi	r3,29
4008daa8:	10c00226 	beq	r2,r3,4008dab4 <_fflush_r+0x20c>
4008daac:	00c00584 	movi	r3,22
4008dab0:	10ffd61e 	bne	r2,r3,4008da0c <__alt_mem_epcs+0xfff4ca0c>
4008dab4:	9c400015 	stw	r17,0(r19)
4008dab8:	0005883a 	mov	r2,zero
4008dabc:	003fb706 	br	4008d99c <__alt_mem_epcs+0xfff4c99c>
4008dac0:	80c0030b 	ldhu	r3,12(r16)
4008dac4:	18c01014 	ori	r3,r3,64
4008dac8:	80c0030d 	sth	r3,12(r16)
4008dacc:	003fb306 	br	4008d99c <__alt_mem_epcs+0xfff4c99c>

4008dad0 <fflush>:
4008dad0:	20000526 	beq	r4,zero,4008dae8 <fflush+0x18>
4008dad4:	009002b4 	movhi	r2,16394
4008dad8:	10afeb04 	addi	r2,r2,-16468
4008dadc:	200b883a 	mov	r5,r4
4008dae0:	11000017 	ldw	r4,0(r2)
4008dae4:	008d8a81 	jmpi	4008d8a8 <_fflush_r>
4008dae8:	009002b4 	movhi	r2,16394
4008daec:	10afea04 	addi	r2,r2,-16472
4008daf0:	11000017 	ldw	r4,0(r2)
4008daf4:	01500274 	movhi	r5,16393
4008daf8:	29762a04 	addi	r5,r5,-10072
4008dafc:	008e8101 	jmpi	4008e810 <_fwalk_reent>

4008db00 <__fp_lock>:
4008db00:	0005883a 	mov	r2,zero
4008db04:	f800283a 	ret

4008db08 <__fp_unlock>:
4008db08:	0005883a 	mov	r2,zero
4008db0c:	f800283a 	ret

4008db10 <_cleanup_r>:
4008db10:	01500274 	movhi	r5,16393
4008db14:	294a5704 	addi	r5,r5,10588
4008db18:	008e7581 	jmpi	4008e758 <_fwalk>

4008db1c <__sinit.part.1>:
4008db1c:	defff604 	addi	sp,sp,-40
4008db20:	00d00274 	movhi	r3,16393
4008db24:	dfc00915 	stw	ra,36(sp)
4008db28:	df000815 	stw	fp,32(sp)
4008db2c:	ddc00715 	stw	r23,28(sp)
4008db30:	dd800615 	stw	r22,24(sp)
4008db34:	dd400515 	stw	r21,20(sp)
4008db38:	dd000415 	stw	r20,16(sp)
4008db3c:	dcc00315 	stw	r19,12(sp)
4008db40:	dc800215 	stw	r18,8(sp)
4008db44:	dc400115 	stw	r17,4(sp)
4008db48:	dc000015 	stw	r16,0(sp)
4008db4c:	18f6c404 	addi	r3,r3,-9456
4008db50:	24000117 	ldw	r16,4(r4)
4008db54:	20c00f15 	stw	r3,60(r4)
4008db58:	07000044 	movi	fp,1
4008db5c:	00c000c4 	movi	r3,3
4008db60:	2080bb04 	addi	r2,r4,748
4008db64:	20c0b915 	stw	r3,740(r4)
4008db68:	27000e15 	stw	fp,56(r4)
4008db6c:	2080ba15 	stw	r2,744(r4)
4008db70:	2000b815 	stw	zero,736(r4)
4008db74:	05c00204 	movi	r23,8
4008db78:	00800104 	movi	r2,4
4008db7c:	2025883a 	mov	r18,r4
4008db80:	b80d883a 	mov	r6,r23
4008db84:	81001704 	addi	r4,r16,92
4008db88:	000b883a 	mov	r5,zero
4008db8c:	80000015 	stw	zero,0(r16)
4008db90:	80000115 	stw	zero,4(r16)
4008db94:	80000215 	stw	zero,8(r16)
4008db98:	8080030d 	sth	r2,12(r16)
4008db9c:	80001915 	stw	zero,100(r16)
4008dba0:	8000038d 	sth	zero,14(r16)
4008dba4:	80000415 	stw	zero,16(r16)
4008dba8:	80000515 	stw	zero,20(r16)
4008dbac:	80000615 	stw	zero,24(r16)
4008dbb0:	008f6840 	call	4008f684 <memset>
4008dbb4:	05900274 	movhi	r22,16393
4008dbb8:	94400217 	ldw	r17,8(r18)
4008dbbc:	05500274 	movhi	r21,16393
4008dbc0:	05100274 	movhi	r20,16393
4008dbc4:	04d00274 	movhi	r19,16393
4008dbc8:	b583c104 	addi	r22,r22,3844
4008dbcc:	ad43d804 	addi	r21,r21,3936
4008dbd0:	a503f704 	addi	r20,r20,4060
4008dbd4:	9cc40e04 	addi	r19,r19,4152
4008dbd8:	85800815 	stw	r22,32(r16)
4008dbdc:	85400915 	stw	r21,36(r16)
4008dbe0:	85000a15 	stw	r20,40(r16)
4008dbe4:	84c00b15 	stw	r19,44(r16)
4008dbe8:	84000715 	stw	r16,28(r16)
4008dbec:	00800284 	movi	r2,10
4008dbf0:	89001704 	addi	r4,r17,92
4008dbf4:	b80d883a 	mov	r6,r23
4008dbf8:	000b883a 	mov	r5,zero
4008dbfc:	88000015 	stw	zero,0(r17)
4008dc00:	88000115 	stw	zero,4(r17)
4008dc04:	88000215 	stw	zero,8(r17)
4008dc08:	8880030d 	sth	r2,12(r17)
4008dc0c:	88001915 	stw	zero,100(r17)
4008dc10:	8f00038d 	sth	fp,14(r17)
4008dc14:	88000415 	stw	zero,16(r17)
4008dc18:	88000515 	stw	zero,20(r17)
4008dc1c:	88000615 	stw	zero,24(r17)
4008dc20:	008f6840 	call	4008f684 <memset>
4008dc24:	94000317 	ldw	r16,12(r18)
4008dc28:	00800484 	movi	r2,18
4008dc2c:	8c400715 	stw	r17,28(r17)
4008dc30:	8d800815 	stw	r22,32(r17)
4008dc34:	8d400915 	stw	r21,36(r17)
4008dc38:	8d000a15 	stw	r20,40(r17)
4008dc3c:	8cc00b15 	stw	r19,44(r17)
4008dc40:	8080030d 	sth	r2,12(r16)
4008dc44:	00800084 	movi	r2,2
4008dc48:	80000015 	stw	zero,0(r16)
4008dc4c:	80000115 	stw	zero,4(r16)
4008dc50:	80000215 	stw	zero,8(r16)
4008dc54:	80001915 	stw	zero,100(r16)
4008dc58:	8080038d 	sth	r2,14(r16)
4008dc5c:	80000415 	stw	zero,16(r16)
4008dc60:	80000515 	stw	zero,20(r16)
4008dc64:	80000615 	stw	zero,24(r16)
4008dc68:	81001704 	addi	r4,r16,92
4008dc6c:	000b883a 	mov	r5,zero
4008dc70:	b80d883a 	mov	r6,r23
4008dc74:	008f6840 	call	4008f684 <memset>
4008dc78:	84000715 	stw	r16,28(r16)
4008dc7c:	85800815 	stw	r22,32(r16)
4008dc80:	85400915 	stw	r21,36(r16)
4008dc84:	85000a15 	stw	r20,40(r16)
4008dc88:	84c00b15 	stw	r19,44(r16)
4008dc8c:	dfc00917 	ldw	ra,36(sp)
4008dc90:	df000817 	ldw	fp,32(sp)
4008dc94:	ddc00717 	ldw	r23,28(sp)
4008dc98:	dd800617 	ldw	r22,24(sp)
4008dc9c:	dd400517 	ldw	r21,20(sp)
4008dca0:	dd000417 	ldw	r20,16(sp)
4008dca4:	dcc00317 	ldw	r19,12(sp)
4008dca8:	dc800217 	ldw	r18,8(sp)
4008dcac:	dc400117 	ldw	r17,4(sp)
4008dcb0:	dc000017 	ldw	r16,0(sp)
4008dcb4:	dec00a04 	addi	sp,sp,40
4008dcb8:	f800283a 	ret

4008dcbc <__sfmoreglue>:
4008dcbc:	defffc04 	addi	sp,sp,-16
4008dcc0:	dc400115 	stw	r17,4(sp)
4008dcc4:	2c401a24 	muli	r17,r5,104
4008dcc8:	dc800215 	stw	r18,8(sp)
4008dccc:	2825883a 	mov	r18,r5
4008dcd0:	89400304 	addi	r5,r17,12
4008dcd4:	dc000015 	stw	r16,0(sp)
4008dcd8:	dfc00315 	stw	ra,12(sp)
4008dcdc:	008eb600 	call	4008eb60 <_malloc_r>
4008dce0:	1021883a 	mov	r16,r2
4008dce4:	10000726 	beq	r2,zero,4008dd04 <__sfmoreglue+0x48>
4008dce8:	11000304 	addi	r4,r2,12
4008dcec:	10000015 	stw	zero,0(r2)
4008dcf0:	14800115 	stw	r18,4(r2)
4008dcf4:	11000215 	stw	r4,8(r2)
4008dcf8:	000b883a 	mov	r5,zero
4008dcfc:	880d883a 	mov	r6,r17
4008dd00:	008f6840 	call	4008f684 <memset>
4008dd04:	8005883a 	mov	r2,r16
4008dd08:	dfc00317 	ldw	ra,12(sp)
4008dd0c:	dc800217 	ldw	r18,8(sp)
4008dd10:	dc400117 	ldw	r17,4(sp)
4008dd14:	dc000017 	ldw	r16,0(sp)
4008dd18:	dec00404 	addi	sp,sp,16
4008dd1c:	f800283a 	ret

4008dd20 <__sfp>:
4008dd20:	009002b4 	movhi	r2,16394
4008dd24:	defffb04 	addi	sp,sp,-20
4008dd28:	10afea04 	addi	r2,r2,-16472
4008dd2c:	dc800215 	stw	r18,8(sp)
4008dd30:	14800017 	ldw	r18,0(r2)
4008dd34:	dcc00315 	stw	r19,12(sp)
4008dd38:	dfc00415 	stw	ra,16(sp)
4008dd3c:	90800e17 	ldw	r2,56(r18)
4008dd40:	dc400115 	stw	r17,4(sp)
4008dd44:	dc000015 	stw	r16,0(sp)
4008dd48:	2027883a 	mov	r19,r4
4008dd4c:	1000021e 	bne	r2,zero,4008dd58 <__sfp+0x38>
4008dd50:	9009883a 	mov	r4,r18
4008dd54:	008db1c0 	call	4008db1c <__sinit.part.1>
4008dd58:	9480b804 	addi	r18,r18,736
4008dd5c:	047fffc4 	movi	r17,-1
4008dd60:	91400117 	ldw	r5,4(r18)
4008dd64:	94000217 	ldw	r16,8(r18)
4008dd68:	297fffc4 	addi	r5,r5,-1
4008dd6c:	28000a16 	blt	r5,zero,4008dd98 <__sfp+0x78>
4008dd70:	8080030f 	ldh	r2,12(r16)
4008dd74:	10000c26 	beq	r2,zero,4008dda8 <__sfp+0x88>
4008dd78:	80c01d04 	addi	r3,r16,116
4008dd7c:	00000206 	br	4008dd88 <__sfp+0x68>
4008dd80:	18bfe60f 	ldh	r2,-104(r3)
4008dd84:	10000826 	beq	r2,zero,4008dda8 <__sfp+0x88>
4008dd88:	297fffc4 	addi	r5,r5,-1
4008dd8c:	1c3ffd04 	addi	r16,r3,-12
4008dd90:	18c01a04 	addi	r3,r3,104
4008dd94:	2c7ffa1e 	bne	r5,r17,4008dd80 <__alt_mem_epcs+0xfff4cd80>
4008dd98:	90800017 	ldw	r2,0(r18)
4008dd9c:	10001d26 	beq	r2,zero,4008de14 <__sfp+0xf4>
4008dda0:	1025883a 	mov	r18,r2
4008dda4:	003fee06 	br	4008dd60 <__alt_mem_epcs+0xfff4cd60>
4008dda8:	00bfffc4 	movi	r2,-1
4008ddac:	8080038d 	sth	r2,14(r16)
4008ddb0:	00800044 	movi	r2,1
4008ddb4:	8080030d 	sth	r2,12(r16)
4008ddb8:	80001915 	stw	zero,100(r16)
4008ddbc:	80000015 	stw	zero,0(r16)
4008ddc0:	80000215 	stw	zero,8(r16)
4008ddc4:	80000115 	stw	zero,4(r16)
4008ddc8:	80000415 	stw	zero,16(r16)
4008ddcc:	80000515 	stw	zero,20(r16)
4008ddd0:	80000615 	stw	zero,24(r16)
4008ddd4:	81001704 	addi	r4,r16,92
4008ddd8:	000b883a 	mov	r5,zero
4008dddc:	01800204 	movi	r6,8
4008dde0:	008f6840 	call	4008f684 <memset>
4008dde4:	8005883a 	mov	r2,r16
4008dde8:	80000c15 	stw	zero,48(r16)
4008ddec:	80000d15 	stw	zero,52(r16)
4008ddf0:	80001115 	stw	zero,68(r16)
4008ddf4:	80001215 	stw	zero,72(r16)
4008ddf8:	dfc00417 	ldw	ra,16(sp)
4008ddfc:	dcc00317 	ldw	r19,12(sp)
4008de00:	dc800217 	ldw	r18,8(sp)
4008de04:	dc400117 	ldw	r17,4(sp)
4008de08:	dc000017 	ldw	r16,0(sp)
4008de0c:	dec00504 	addi	sp,sp,20
4008de10:	f800283a 	ret
4008de14:	9809883a 	mov	r4,r19
4008de18:	01400104 	movi	r5,4
4008de1c:	008dcbc0 	call	4008dcbc <__sfmoreglue>
4008de20:	90800015 	stw	r2,0(r18)
4008de24:	103fde1e 	bne	r2,zero,4008dda0 <__alt_mem_epcs+0xfff4cda0>
4008de28:	00800304 	movi	r2,12
4008de2c:	98800015 	stw	r2,0(r19)
4008de30:	0005883a 	mov	r2,zero
4008de34:	003ff006 	br	4008ddf8 <__alt_mem_epcs+0xfff4cdf8>

4008de38 <_cleanup>:
4008de38:	009002b4 	movhi	r2,16394
4008de3c:	10afea04 	addi	r2,r2,-16472
4008de40:	11000017 	ldw	r4,0(r2)
4008de44:	01500274 	movhi	r5,16393
4008de48:	294a5704 	addi	r5,r5,10588
4008de4c:	008e7581 	jmpi	4008e758 <_fwalk>

4008de50 <__sinit>:
4008de50:	20800e17 	ldw	r2,56(r4)
4008de54:	10000126 	beq	r2,zero,4008de5c <__sinit+0xc>
4008de58:	f800283a 	ret
4008de5c:	008db1c1 	jmpi	4008db1c <__sinit.part.1>

4008de60 <__sfp_lock_acquire>:
4008de60:	f800283a 	ret

4008de64 <__sfp_lock_release>:
4008de64:	f800283a 	ret

4008de68 <__sinit_lock_acquire>:
4008de68:	f800283a 	ret

4008de6c <__sinit_lock_release>:
4008de6c:	f800283a 	ret

4008de70 <__fp_lock_all>:
4008de70:	009002b4 	movhi	r2,16394
4008de74:	10afeb04 	addi	r2,r2,-16468
4008de78:	11000017 	ldw	r4,0(r2)
4008de7c:	01500274 	movhi	r5,16393
4008de80:	2976c004 	addi	r5,r5,-9472
4008de84:	008e7581 	jmpi	4008e758 <_fwalk>

4008de88 <__fp_unlock_all>:
4008de88:	009002b4 	movhi	r2,16394
4008de8c:	10afeb04 	addi	r2,r2,-16468
4008de90:	11000017 	ldw	r4,0(r2)
4008de94:	01500274 	movhi	r5,16393
4008de98:	2976c204 	addi	r5,r5,-9464
4008de9c:	008e7581 	jmpi	4008e758 <_fwalk>

4008dea0 <_malloc_trim_r>:
4008dea0:	defffb04 	addi	sp,sp,-20
4008dea4:	dcc00315 	stw	r19,12(sp)
4008dea8:	04d002b4 	movhi	r19,16394
4008deac:	dc800215 	stw	r18,8(sp)
4008deb0:	dc400115 	stw	r17,4(sp)
4008deb4:	dc000015 	stw	r16,0(sp)
4008deb8:	dfc00415 	stw	ra,16(sp)
4008debc:	2821883a 	mov	r16,r5
4008dec0:	9cea0104 	addi	r19,r19,-22524
4008dec4:	2025883a 	mov	r18,r4
4008dec8:	0095e700 	call	40095e70 <__malloc_lock>
4008decc:	98800217 	ldw	r2,8(r19)
4008ded0:	14400117 	ldw	r17,4(r2)
4008ded4:	00bfff04 	movi	r2,-4
4008ded8:	88a2703a 	and	r17,r17,r2
4008dedc:	8c21c83a 	sub	r16,r17,r16
4008dee0:	8403fbc4 	addi	r16,r16,4079
4008dee4:	8020d33a 	srli	r16,r16,12
4008dee8:	0083ffc4 	movi	r2,4095
4008deec:	843fffc4 	addi	r16,r16,-1
4008def0:	8020933a 	slli	r16,r16,12
4008def4:	1400060e 	bge	r2,r16,4008df10 <_malloc_trim_r+0x70>
4008def8:	9009883a 	mov	r4,r18
4008defc:	000b883a 	mov	r5,zero
4008df00:	0090eb00 	call	40090eb0 <_sbrk_r>
4008df04:	98c00217 	ldw	r3,8(r19)
4008df08:	1c47883a 	add	r3,r3,r17
4008df0c:	10c00a26 	beq	r2,r3,4008df38 <_malloc_trim_r+0x98>
4008df10:	9009883a 	mov	r4,r18
4008df14:	0095e900 	call	40095e90 <__malloc_unlock>
4008df18:	0005883a 	mov	r2,zero
4008df1c:	dfc00417 	ldw	ra,16(sp)
4008df20:	dcc00317 	ldw	r19,12(sp)
4008df24:	dc800217 	ldw	r18,8(sp)
4008df28:	dc400117 	ldw	r17,4(sp)
4008df2c:	dc000017 	ldw	r16,0(sp)
4008df30:	dec00504 	addi	sp,sp,20
4008df34:	f800283a 	ret
4008df38:	9009883a 	mov	r4,r18
4008df3c:	040bc83a 	sub	r5,zero,r16
4008df40:	0090eb00 	call	40090eb0 <_sbrk_r>
4008df44:	00ffffc4 	movi	r3,-1
4008df48:	10c00d26 	beq	r2,r3,4008df80 <_malloc_trim_r+0xe0>
4008df4c:	00d002b4 	movhi	r3,16394
4008df50:	18f74004 	addi	r3,r3,-8960
4008df54:	18800017 	ldw	r2,0(r3)
4008df58:	99000217 	ldw	r4,8(r19)
4008df5c:	8c23c83a 	sub	r17,r17,r16
4008df60:	8c400054 	ori	r17,r17,1
4008df64:	1421c83a 	sub	r16,r2,r16
4008df68:	24400115 	stw	r17,4(r4)
4008df6c:	9009883a 	mov	r4,r18
4008df70:	1c000015 	stw	r16,0(r3)
4008df74:	0095e900 	call	40095e90 <__malloc_unlock>
4008df78:	00800044 	movi	r2,1
4008df7c:	003fe706 	br	4008df1c <__alt_mem_epcs+0xfff4cf1c>
4008df80:	9009883a 	mov	r4,r18
4008df84:	000b883a 	mov	r5,zero
4008df88:	0090eb00 	call	40090eb0 <_sbrk_r>
4008df8c:	99000217 	ldw	r4,8(r19)
4008df90:	014003c4 	movi	r5,15
4008df94:	1107c83a 	sub	r3,r2,r4
4008df98:	28ffdd0e 	bge	r5,r3,4008df10 <__alt_mem_epcs+0xfff4cf10>
4008df9c:	015002b4 	movhi	r5,16394
4008dfa0:	296fed04 	addi	r5,r5,-16460
4008dfa4:	29400017 	ldw	r5,0(r5)
4008dfa8:	18c00054 	ori	r3,r3,1
4008dfac:	20c00115 	stw	r3,4(r4)
4008dfb0:	00d002b4 	movhi	r3,16394
4008dfb4:	1145c83a 	sub	r2,r2,r5
4008dfb8:	18f74004 	addi	r3,r3,-8960
4008dfbc:	18800015 	stw	r2,0(r3)
4008dfc0:	003fd306 	br	4008df10 <__alt_mem_epcs+0xfff4cf10>

4008dfc4 <_free_r>:
4008dfc4:	28004c26 	beq	r5,zero,4008e0f8 <_free_r+0x134>
4008dfc8:	defffd04 	addi	sp,sp,-12
4008dfcc:	dc400115 	stw	r17,4(sp)
4008dfd0:	dc000015 	stw	r16,0(sp)
4008dfd4:	2023883a 	mov	r17,r4
4008dfd8:	2821883a 	mov	r16,r5
4008dfdc:	dfc00215 	stw	ra,8(sp)
4008dfe0:	0095e700 	call	40095e70 <__malloc_lock>
4008dfe4:	813fff17 	ldw	r4,-4(r16)
4008dfe8:	00bfff84 	movi	r2,-2
4008dfec:	025002b4 	movhi	r9,16394
4008dff0:	81bffe04 	addi	r6,r16,-8
4008dff4:	2084703a 	and	r2,r4,r2
4008dff8:	4a6a0104 	addi	r9,r9,-22524
4008dffc:	308b883a 	add	r5,r6,r2
4008e000:	2a000117 	ldw	r8,4(r5)
4008e004:	49c00217 	ldw	r7,8(r9)
4008e008:	00ffff04 	movi	r3,-4
4008e00c:	40c6703a 	and	r3,r8,r3
4008e010:	39405326 	beq	r7,r5,4008e160 <_free_r+0x19c>
4008e014:	28c00115 	stw	r3,4(r5)
4008e018:	2100004c 	andi	r4,r4,1
4008e01c:	2000091e 	bne	r4,zero,4008e044 <_free_r+0x80>
4008e020:	81fffe17 	ldw	r7,-8(r16)
4008e024:	4a000204 	addi	r8,r9,8
4008e028:	31cdc83a 	sub	r6,r6,r7
4008e02c:	31000217 	ldw	r4,8(r6)
4008e030:	11c5883a 	add	r2,r2,r7
4008e034:	22006126 	beq	r4,r8,4008e1bc <_free_r+0x1f8>
4008e038:	31c00317 	ldw	r7,12(r6)
4008e03c:	21c00315 	stw	r7,12(r4)
4008e040:	39000215 	stw	r4,8(r7)
4008e044:	28c9883a 	add	r4,r5,r3
4008e048:	21c00117 	ldw	r7,4(r4)
4008e04c:	39c0004c 	andi	r7,r7,1
4008e050:	38000d1e 	bne	r7,zero,4008e088 <_free_r+0xc4>
4008e054:	29000217 	ldw	r4,8(r5)
4008e058:	10c5883a 	add	r2,r2,r3
4008e05c:	00d002b4 	movhi	r3,16394
4008e060:	18ea0304 	addi	r3,r3,-22516
4008e064:	20c07526 	beq	r4,r3,4008e23c <_free_r+0x278>
4008e068:	29c00317 	ldw	r7,12(r5)
4008e06c:	11400054 	ori	r5,r2,1
4008e070:	3087883a 	add	r3,r6,r2
4008e074:	21c00315 	stw	r7,12(r4)
4008e078:	39000215 	stw	r4,8(r7)
4008e07c:	31400115 	stw	r5,4(r6)
4008e080:	18800015 	stw	r2,0(r3)
4008e084:	00000406 	br	4008e098 <_free_r+0xd4>
4008e088:	10c00054 	ori	r3,r2,1
4008e08c:	30c00115 	stw	r3,4(r6)
4008e090:	3087883a 	add	r3,r6,r2
4008e094:	18800015 	stw	r2,0(r3)
4008e098:	00c07fc4 	movi	r3,511
4008e09c:	18801736 	bltu	r3,r2,4008e0fc <_free_r+0x138>
4008e0a0:	1004d0fa 	srli	r2,r2,3
4008e0a4:	01400044 	movi	r5,1
4008e0a8:	49000117 	ldw	r4,4(r9)
4008e0ac:	1087883a 	add	r3,r2,r2
4008e0b0:	18c7883a 	add	r3,r3,r3
4008e0b4:	1005d0ba 	srai	r2,r2,2
4008e0b8:	18c7883a 	add	r3,r3,r3
4008e0bc:	1a47883a 	add	r3,r3,r9
4008e0c0:	19c00217 	ldw	r7,8(r3)
4008e0c4:	2884983a 	sll	r2,r5,r2
4008e0c8:	30c00315 	stw	r3,12(r6)
4008e0cc:	31c00215 	stw	r7,8(r6)
4008e0d0:	1104b03a 	or	r2,r2,r4
4008e0d4:	19800215 	stw	r6,8(r3)
4008e0d8:	48800115 	stw	r2,4(r9)
4008e0dc:	39800315 	stw	r6,12(r7)
4008e0e0:	8809883a 	mov	r4,r17
4008e0e4:	dfc00217 	ldw	ra,8(sp)
4008e0e8:	dc400117 	ldw	r17,4(sp)
4008e0ec:	dc000017 	ldw	r16,0(sp)
4008e0f0:	dec00304 	addi	sp,sp,12
4008e0f4:	0095e901 	jmpi	40095e90 <__malloc_unlock>
4008e0f8:	f800283a 	ret
4008e0fc:	1006d27a 	srli	r3,r2,9
4008e100:	01000104 	movi	r4,4
4008e104:	20c04036 	bltu	r4,r3,4008e208 <_free_r+0x244>
4008e108:	1006d1ba 	srli	r3,r2,6
4008e10c:	19400e04 	addi	r5,r3,56
4008e110:	2947883a 	add	r3,r5,r5
4008e114:	18c7883a 	add	r3,r3,r3
4008e118:	18c7883a 	add	r3,r3,r3
4008e11c:	1a49883a 	add	r4,r3,r9
4008e120:	20c00217 	ldw	r3,8(r4)
4008e124:	01d002b4 	movhi	r7,16394
4008e128:	39ea0104 	addi	r7,r7,-22524
4008e12c:	19003b26 	beq	r3,r4,4008e21c <_free_r+0x258>
4008e130:	01ffff04 	movi	r7,-4
4008e134:	19400117 	ldw	r5,4(r3)
4008e138:	29ca703a 	and	r5,r5,r7
4008e13c:	1140022e 	bgeu	r2,r5,4008e148 <_free_r+0x184>
4008e140:	18c00217 	ldw	r3,8(r3)
4008e144:	20fffb1e 	bne	r4,r3,4008e134 <__alt_mem_epcs+0xfff4d134>
4008e148:	18800317 	ldw	r2,12(r3)
4008e14c:	30800315 	stw	r2,12(r6)
4008e150:	30c00215 	stw	r3,8(r6)
4008e154:	11800215 	stw	r6,8(r2)
4008e158:	19800315 	stw	r6,12(r3)
4008e15c:	003fe006 	br	4008e0e0 <__alt_mem_epcs+0xfff4d0e0>
4008e160:	2100004c 	andi	r4,r4,1
4008e164:	1885883a 	add	r2,r3,r2
4008e168:	2000071e 	bne	r4,zero,4008e188 <_free_r+0x1c4>
4008e16c:	817ffe17 	ldw	r5,-8(r16)
4008e170:	314dc83a 	sub	r6,r6,r5
4008e174:	30c00317 	ldw	r3,12(r6)
4008e178:	31000217 	ldw	r4,8(r6)
4008e17c:	1145883a 	add	r2,r2,r5
4008e180:	20c00315 	stw	r3,12(r4)
4008e184:	19000215 	stw	r4,8(r3)
4008e188:	10c00054 	ori	r3,r2,1
4008e18c:	30c00115 	stw	r3,4(r6)
4008e190:	00d002b4 	movhi	r3,16394
4008e194:	18efee04 	addi	r3,r3,-16456
4008e198:	18c00017 	ldw	r3,0(r3)
4008e19c:	49800215 	stw	r6,8(r9)
4008e1a0:	10ffcf36 	bltu	r2,r3,4008e0e0 <__alt_mem_epcs+0xfff4d0e0>
4008e1a4:	009002b4 	movhi	r2,16394
4008e1a8:	10b73204 	addi	r2,r2,-9016
4008e1ac:	11400017 	ldw	r5,0(r2)
4008e1b0:	8809883a 	mov	r4,r17
4008e1b4:	008dea00 	call	4008dea0 <_malloc_trim_r>
4008e1b8:	003fc906 	br	4008e0e0 <__alt_mem_epcs+0xfff4d0e0>
4008e1bc:	28c9883a 	add	r4,r5,r3
4008e1c0:	21000117 	ldw	r4,4(r4)
4008e1c4:	2100004c 	andi	r4,r4,1
4008e1c8:	20000a1e 	bne	r4,zero,4008e1f4 <_free_r+0x230>
4008e1cc:	29000317 	ldw	r4,12(r5)
4008e1d0:	29400217 	ldw	r5,8(r5)
4008e1d4:	10c5883a 	add	r2,r2,r3
4008e1d8:	10c00054 	ori	r3,r2,1
4008e1dc:	29000315 	stw	r4,12(r5)
4008e1e0:	21400215 	stw	r5,8(r4)
4008e1e4:	30c00115 	stw	r3,4(r6)
4008e1e8:	308d883a 	add	r6,r6,r2
4008e1ec:	30800015 	stw	r2,0(r6)
4008e1f0:	003fbb06 	br	4008e0e0 <__alt_mem_epcs+0xfff4d0e0>
4008e1f4:	10c00054 	ori	r3,r2,1
4008e1f8:	30c00115 	stw	r3,4(r6)
4008e1fc:	308d883a 	add	r6,r6,r2
4008e200:	30800015 	stw	r2,0(r6)
4008e204:	003fb606 	br	4008e0e0 <__alt_mem_epcs+0xfff4d0e0>
4008e208:	01000504 	movi	r4,20
4008e20c:	20c01436 	bltu	r4,r3,4008e260 <_free_r+0x29c>
4008e210:	194016c4 	addi	r5,r3,91
4008e214:	2947883a 	add	r3,r5,r5
4008e218:	003fbe06 	br	4008e114 <__alt_mem_epcs+0xfff4d114>
4008e21c:	280bd0ba 	srai	r5,r5,2
4008e220:	00800044 	movi	r2,1
4008e224:	39000117 	ldw	r4,4(r7)
4008e228:	114a983a 	sll	r5,r2,r5
4008e22c:	1805883a 	mov	r2,r3
4008e230:	2908b03a 	or	r4,r5,r4
4008e234:	39000115 	stw	r4,4(r7)
4008e238:	003fc406 	br	4008e14c <__alt_mem_epcs+0xfff4d14c>
4008e23c:	49800515 	stw	r6,20(r9)
4008e240:	49800415 	stw	r6,16(r9)
4008e244:	10c00054 	ori	r3,r2,1
4008e248:	31000315 	stw	r4,12(r6)
4008e24c:	31000215 	stw	r4,8(r6)
4008e250:	30c00115 	stw	r3,4(r6)
4008e254:	308d883a 	add	r6,r6,r2
4008e258:	30800015 	stw	r2,0(r6)
4008e25c:	003fa006 	br	4008e0e0 <__alt_mem_epcs+0xfff4d0e0>
4008e260:	01001504 	movi	r4,84
4008e264:	20c00436 	bltu	r4,r3,4008e278 <_free_r+0x2b4>
4008e268:	1006d33a 	srli	r3,r2,12
4008e26c:	19401b84 	addi	r5,r3,110
4008e270:	2947883a 	add	r3,r5,r5
4008e274:	003fa706 	br	4008e114 <__alt_mem_epcs+0xfff4d114>
4008e278:	01005504 	movi	r4,340
4008e27c:	20c00436 	bltu	r4,r3,4008e290 <_free_r+0x2cc>
4008e280:	1006d3fa 	srli	r3,r2,15
4008e284:	19401dc4 	addi	r5,r3,119
4008e288:	2947883a 	add	r3,r5,r5
4008e28c:	003fa106 	br	4008e114 <__alt_mem_epcs+0xfff4d114>
4008e290:	01015504 	movi	r4,1364
4008e294:	20c00436 	bltu	r4,r3,4008e2a8 <_free_r+0x2e4>
4008e298:	1006d4ba 	srli	r3,r2,18
4008e29c:	19401f04 	addi	r5,r3,124
4008e2a0:	2947883a 	add	r3,r5,r5
4008e2a4:	003f9b06 	br	4008e114 <__alt_mem_epcs+0xfff4d114>
4008e2a8:	00c03f04 	movi	r3,252
4008e2ac:	01401f84 	movi	r5,126
4008e2b0:	003f9806 	br	4008e114 <__alt_mem_epcs+0xfff4d114>

4008e2b4 <__sfvwrite_r>:
4008e2b4:	30800217 	ldw	r2,8(r6)
4008e2b8:	10004526 	beq	r2,zero,4008e3d0 <__sfvwrite_r+0x11c>
4008e2bc:	28c0030b 	ldhu	r3,12(r5)
4008e2c0:	defff404 	addi	sp,sp,-48
4008e2c4:	dd400715 	stw	r21,28(sp)
4008e2c8:	dcc00515 	stw	r19,20(sp)
4008e2cc:	dc000215 	stw	r16,8(sp)
4008e2d0:	dfc00b15 	stw	ra,44(sp)
4008e2d4:	df000a15 	stw	fp,40(sp)
4008e2d8:	ddc00915 	stw	r23,36(sp)
4008e2dc:	dd800815 	stw	r22,32(sp)
4008e2e0:	dd000615 	stw	r20,24(sp)
4008e2e4:	dc800415 	stw	r18,16(sp)
4008e2e8:	dc400315 	stw	r17,12(sp)
4008e2ec:	1880020c 	andi	r2,r3,8
4008e2f0:	2821883a 	mov	r16,r5
4008e2f4:	202b883a 	mov	r21,r4
4008e2f8:	3027883a 	mov	r19,r6
4008e2fc:	10002526 	beq	r2,zero,4008e394 <__sfvwrite_r+0xe0>
4008e300:	28800417 	ldw	r2,16(r5)
4008e304:	10002326 	beq	r2,zero,4008e394 <__sfvwrite_r+0xe0>
4008e308:	1880008c 	andi	r2,r3,2
4008e30c:	9c400017 	ldw	r17,0(r19)
4008e310:	10003126 	beq	r2,zero,4008e3d8 <__sfvwrite_r+0x124>
4008e314:	0029883a 	mov	r20,zero
4008e318:	0025883a 	mov	r18,zero
4008e31c:	05810004 	movi	r22,1024
4008e320:	a00d883a 	mov	r6,r20
4008e324:	a809883a 	mov	r4,r21
4008e328:	90002526 	beq	r18,zero,4008e3c0 <__sfvwrite_r+0x10c>
4008e32c:	900f883a 	mov	r7,r18
4008e330:	81400717 	ldw	r5,28(r16)
4008e334:	b480012e 	bgeu	r22,r18,4008e33c <__sfvwrite_r+0x88>
4008e338:	01c10004 	movi	r7,1024
4008e33c:	80800917 	ldw	r2,36(r16)
4008e340:	103ee83a 	callr	r2
4008e344:	0080510e 	bge	zero,r2,4008e48c <__sfvwrite_r+0x1d8>
4008e348:	98c00217 	ldw	r3,8(r19)
4008e34c:	a0a9883a 	add	r20,r20,r2
4008e350:	90a5c83a 	sub	r18,r18,r2
4008e354:	1885c83a 	sub	r2,r3,r2
4008e358:	98800215 	stw	r2,8(r19)
4008e35c:	103ff01e 	bne	r2,zero,4008e320 <__alt_mem_epcs+0xfff4d320>
4008e360:	0005883a 	mov	r2,zero
4008e364:	dfc00b17 	ldw	ra,44(sp)
4008e368:	df000a17 	ldw	fp,40(sp)
4008e36c:	ddc00917 	ldw	r23,36(sp)
4008e370:	dd800817 	ldw	r22,32(sp)
4008e374:	dd400717 	ldw	r21,28(sp)
4008e378:	dd000617 	ldw	r20,24(sp)
4008e37c:	dcc00517 	ldw	r19,20(sp)
4008e380:	dc800417 	ldw	r18,16(sp)
4008e384:	dc400317 	ldw	r17,12(sp)
4008e388:	dc000217 	ldw	r16,8(sp)
4008e38c:	dec00c04 	addi	sp,sp,48
4008e390:	f800283a 	ret
4008e394:	a809883a 	mov	r4,r21
4008e398:	800b883a 	mov	r5,r16
4008e39c:	008be500 	call	4008be50 <__swsetup_r>
4008e3a0:	80c0030b 	ldhu	r3,12(r16)
4008e3a4:	103fd826 	beq	r2,zero,4008e308 <__alt_mem_epcs+0xfff4d308>
4008e3a8:	18c01014 	ori	r3,r3,64
4008e3ac:	80c0030d 	sth	r3,12(r16)
4008e3b0:	00c00244 	movi	r3,9
4008e3b4:	00bfffc4 	movi	r2,-1
4008e3b8:	a8c00015 	stw	r3,0(r21)
4008e3bc:	003fe906 	br	4008e364 <__alt_mem_epcs+0xfff4d364>
4008e3c0:	8d000017 	ldw	r20,0(r17)
4008e3c4:	8c800117 	ldw	r18,4(r17)
4008e3c8:	8c400204 	addi	r17,r17,8
4008e3cc:	003fd406 	br	4008e320 <__alt_mem_epcs+0xfff4d320>
4008e3d0:	0005883a 	mov	r2,zero
4008e3d4:	f800283a 	ret
4008e3d8:	1880004c 	andi	r2,r3,1
4008e3dc:	1000301e 	bne	r2,zero,4008e4a0 <__sfvwrite_r+0x1ec>
4008e3e0:	002f883a 	mov	r23,zero
4008e3e4:	0025883a 	mov	r18,zero
4008e3e8:	90001c26 	beq	r18,zero,4008e45c <__sfvwrite_r+0x1a8>
4008e3ec:	1880800c 	andi	r2,r3,512
4008e3f0:	85000217 	ldw	r20,8(r16)
4008e3f4:	10006c26 	beq	r2,zero,4008e5a8 <__sfvwrite_r+0x2f4>
4008e3f8:	a02d883a 	mov	r22,r20
4008e3fc:	95008536 	bltu	r18,r20,4008e614 <__sfvwrite_r+0x360>
4008e400:	1881200c 	andi	r2,r3,1152
4008e404:	10009d1e 	bne	r2,zero,4008e67c <__sfvwrite_r+0x3c8>
4008e408:	81000017 	ldw	r4,0(r16)
4008e40c:	a039883a 	mov	fp,r20
4008e410:	9029883a 	mov	r20,r18
4008e414:	b80b883a 	mov	r5,r23
4008e418:	b00d883a 	mov	r6,r22
4008e41c:	008f5280 	call	4008f528 <memmove>
4008e420:	80c00217 	ldw	r3,8(r16)
4008e424:	81000017 	ldw	r4,0(r16)
4008e428:	9005883a 	mov	r2,r18
4008e42c:	1f39c83a 	sub	fp,r3,fp
4008e430:	258f883a 	add	r7,r4,r22
4008e434:	87000215 	stw	fp,8(r16)
4008e438:	81c00015 	stw	r7,0(r16)
4008e43c:	98c00217 	ldw	r3,8(r19)
4008e440:	b8af883a 	add	r23,r23,r2
4008e444:	90a5c83a 	sub	r18,r18,r2
4008e448:	1d05c83a 	sub	r2,r3,r20
4008e44c:	98800215 	stw	r2,8(r19)
4008e450:	103fc326 	beq	r2,zero,4008e360 <__alt_mem_epcs+0xfff4d360>
4008e454:	80c0030b 	ldhu	r3,12(r16)
4008e458:	903fe41e 	bne	r18,zero,4008e3ec <__alt_mem_epcs+0xfff4d3ec>
4008e45c:	8dc00017 	ldw	r23,0(r17)
4008e460:	8c800117 	ldw	r18,4(r17)
4008e464:	8c400204 	addi	r17,r17,8
4008e468:	003fdf06 	br	4008e3e8 <__alt_mem_epcs+0xfff4d3e8>
4008e46c:	009089c0 	call	4009089c <_realloc_r>
4008e470:	102d883a 	mov	r22,r2
4008e474:	1000a01e 	bne	r2,zero,4008e6f8 <__sfvwrite_r+0x444>
4008e478:	81400417 	ldw	r5,16(r16)
4008e47c:	a809883a 	mov	r4,r21
4008e480:	008dfc40 	call	4008dfc4 <_free_r>
4008e484:	00800304 	movi	r2,12
4008e488:	a8800015 	stw	r2,0(r21)
4008e48c:	80c0030b 	ldhu	r3,12(r16)
4008e490:	00bfffc4 	movi	r2,-1
4008e494:	18c01014 	ori	r3,r3,64
4008e498:	80c0030d 	sth	r3,12(r16)
4008e49c:	003fb106 	br	4008e364 <__alt_mem_epcs+0xfff4d364>
4008e4a0:	0029883a 	mov	r20,zero
4008e4a4:	0011883a 	mov	r8,zero
4008e4a8:	0039883a 	mov	fp,zero
4008e4ac:	0025883a 	mov	r18,zero
4008e4b0:	90001f26 	beq	r18,zero,4008e530 <__sfvwrite_r+0x27c>
4008e4b4:	40006826 	beq	r8,zero,4008e658 <__sfvwrite_r+0x3a4>
4008e4b8:	a02f883a 	mov	r23,r20
4008e4bc:	9500012e 	bgeu	r18,r20,4008e4c4 <__sfvwrite_r+0x210>
4008e4c0:	902f883a 	mov	r23,r18
4008e4c4:	81000017 	ldw	r4,0(r16)
4008e4c8:	80800417 	ldw	r2,16(r16)
4008e4cc:	b82d883a 	mov	r22,r23
4008e4d0:	81800217 	ldw	r6,8(r16)
4008e4d4:	81c00517 	ldw	r7,20(r16)
4008e4d8:	1100022e 	bgeu	r2,r4,4008e4e4 <__sfvwrite_r+0x230>
4008e4dc:	31c7883a 	add	r3,r6,r7
4008e4e0:	1dc01816 	blt	r3,r23,4008e544 <__sfvwrite_r+0x290>
4008e4e4:	b9c03f16 	blt	r23,r7,4008e5e4 <__sfvwrite_r+0x330>
4008e4e8:	80800917 	ldw	r2,36(r16)
4008e4ec:	81400717 	ldw	r5,28(r16)
4008e4f0:	a809883a 	mov	r4,r21
4008e4f4:	da000115 	stw	r8,4(sp)
4008e4f8:	e00d883a 	mov	r6,fp
4008e4fc:	103ee83a 	callr	r2
4008e500:	102d883a 	mov	r22,r2
4008e504:	da000117 	ldw	r8,4(sp)
4008e508:	00bfe00e 	bge	zero,r2,4008e48c <__alt_mem_epcs+0xfff4d48c>
4008e50c:	a5a9c83a 	sub	r20,r20,r22
4008e510:	a0001f26 	beq	r20,zero,4008e590 <__sfvwrite_r+0x2dc>
4008e514:	98800217 	ldw	r2,8(r19)
4008e518:	e5b9883a 	add	fp,fp,r22
4008e51c:	95a5c83a 	sub	r18,r18,r22
4008e520:	15adc83a 	sub	r22,r2,r22
4008e524:	9d800215 	stw	r22,8(r19)
4008e528:	b03f8d26 	beq	r22,zero,4008e360 <__alt_mem_epcs+0xfff4d360>
4008e52c:	903fe11e 	bne	r18,zero,4008e4b4 <__alt_mem_epcs+0xfff4d4b4>
4008e530:	8f000017 	ldw	fp,0(r17)
4008e534:	8c800117 	ldw	r18,4(r17)
4008e538:	0011883a 	mov	r8,zero
4008e53c:	8c400204 	addi	r17,r17,8
4008e540:	003fdb06 	br	4008e4b0 <__alt_mem_epcs+0xfff4d4b0>
4008e544:	180d883a 	mov	r6,r3
4008e548:	e00b883a 	mov	r5,fp
4008e54c:	da000115 	stw	r8,4(sp)
4008e550:	d8c00015 	stw	r3,0(sp)
4008e554:	008f5280 	call	4008f528 <memmove>
4008e558:	d8c00017 	ldw	r3,0(sp)
4008e55c:	80800017 	ldw	r2,0(r16)
4008e560:	a809883a 	mov	r4,r21
4008e564:	800b883a 	mov	r5,r16
4008e568:	10c5883a 	add	r2,r2,r3
4008e56c:	80800015 	stw	r2,0(r16)
4008e570:	d8c00015 	stw	r3,0(sp)
4008e574:	008d8a80 	call	4008d8a8 <_fflush_r>
4008e578:	d8c00017 	ldw	r3,0(sp)
4008e57c:	da000117 	ldw	r8,4(sp)
4008e580:	103fc21e 	bne	r2,zero,4008e48c <__alt_mem_epcs+0xfff4d48c>
4008e584:	182d883a 	mov	r22,r3
4008e588:	a5a9c83a 	sub	r20,r20,r22
4008e58c:	a03fe11e 	bne	r20,zero,4008e514 <__alt_mem_epcs+0xfff4d514>
4008e590:	a809883a 	mov	r4,r21
4008e594:	800b883a 	mov	r5,r16
4008e598:	008d8a80 	call	4008d8a8 <_fflush_r>
4008e59c:	103fbb1e 	bne	r2,zero,4008e48c <__alt_mem_epcs+0xfff4d48c>
4008e5a0:	0011883a 	mov	r8,zero
4008e5a4:	003fdb06 	br	4008e514 <__alt_mem_epcs+0xfff4d514>
4008e5a8:	81000017 	ldw	r4,0(r16)
4008e5ac:	80800417 	ldw	r2,16(r16)
4008e5b0:	1100012e 	bgeu	r2,r4,4008e5b8 <__sfvwrite_r+0x304>
4008e5b4:	a4805a36 	bltu	r20,r18,4008e720 <__sfvwrite_r+0x46c>
4008e5b8:	81c00517 	ldw	r7,20(r16)
4008e5bc:	91c01a36 	bltu	r18,r7,4008e628 <__sfvwrite_r+0x374>
4008e5c0:	80800917 	ldw	r2,36(r16)
4008e5c4:	81400717 	ldw	r5,28(r16)
4008e5c8:	a809883a 	mov	r4,r21
4008e5cc:	b80d883a 	mov	r6,r23
4008e5d0:	103ee83a 	callr	r2
4008e5d4:	1029883a 	mov	r20,r2
4008e5d8:	00bfac0e 	bge	zero,r2,4008e48c <__alt_mem_epcs+0xfff4d48c>
4008e5dc:	a005883a 	mov	r2,r20
4008e5e0:	003f9606 	br	4008e43c <__alt_mem_epcs+0xfff4d43c>
4008e5e4:	b80d883a 	mov	r6,r23
4008e5e8:	e00b883a 	mov	r5,fp
4008e5ec:	da000115 	stw	r8,4(sp)
4008e5f0:	008f5280 	call	4008f528 <memmove>
4008e5f4:	80800217 	ldw	r2,8(r16)
4008e5f8:	80c00017 	ldw	r3,0(r16)
4008e5fc:	da000117 	ldw	r8,4(sp)
4008e600:	15c5c83a 	sub	r2,r2,r23
4008e604:	1def883a 	add	r23,r3,r23
4008e608:	80800215 	stw	r2,8(r16)
4008e60c:	85c00015 	stw	r23,0(r16)
4008e610:	003fbe06 	br	4008e50c <__alt_mem_epcs+0xfff4d50c>
4008e614:	81000017 	ldw	r4,0(r16)
4008e618:	9039883a 	mov	fp,r18
4008e61c:	9029883a 	mov	r20,r18
4008e620:	902d883a 	mov	r22,r18
4008e624:	003f7b06 	br	4008e414 <__alt_mem_epcs+0xfff4d414>
4008e628:	b80b883a 	mov	r5,r23
4008e62c:	900d883a 	mov	r6,r18
4008e630:	008f5280 	call	4008f528 <memmove>
4008e634:	80c00217 	ldw	r3,8(r16)
4008e638:	80800017 	ldw	r2,0(r16)
4008e63c:	9029883a 	mov	r20,r18
4008e640:	1c87c83a 	sub	r3,r3,r18
4008e644:	1485883a 	add	r2,r2,r18
4008e648:	80800015 	stw	r2,0(r16)
4008e64c:	80c00215 	stw	r3,8(r16)
4008e650:	9005883a 	mov	r2,r18
4008e654:	003f7906 	br	4008e43c <__alt_mem_epcs+0xfff4d43c>
4008e658:	e009883a 	mov	r4,fp
4008e65c:	01400284 	movi	r5,10
4008e660:	900d883a 	mov	r6,r18
4008e664:	008f3080 	call	4008f308 <memchr>
4008e668:	10003826 	beq	r2,zero,4008e74c <__sfvwrite_r+0x498>
4008e66c:	10800044 	addi	r2,r2,1
4008e670:	1729c83a 	sub	r20,r2,fp
4008e674:	02000044 	movi	r8,1
4008e678:	003f8f06 	br	4008e4b8 <__alt_mem_epcs+0xfff4d4b8>
4008e67c:	80800517 	ldw	r2,20(r16)
4008e680:	81400417 	ldw	r5,16(r16)
4008e684:	87000017 	ldw	fp,0(r16)
4008e688:	10a9883a 	add	r20,r2,r2
4008e68c:	a085883a 	add	r2,r20,r2
4008e690:	1028d7fa 	srli	r20,r2,31
4008e694:	e179c83a 	sub	fp,fp,r5
4008e698:	e1000044 	addi	r4,fp,1
4008e69c:	a085883a 	add	r2,r20,r2
4008e6a0:	1029d07a 	srai	r20,r2,1
4008e6a4:	2485883a 	add	r2,r4,r18
4008e6a8:	a00d883a 	mov	r6,r20
4008e6ac:	a080022e 	bgeu	r20,r2,4008e6b8 <__sfvwrite_r+0x404>
4008e6b0:	1029883a 	mov	r20,r2
4008e6b4:	100d883a 	mov	r6,r2
4008e6b8:	18c1000c 	andi	r3,r3,1024
4008e6bc:	a809883a 	mov	r4,r21
4008e6c0:	183f6a26 	beq	r3,zero,4008e46c <__alt_mem_epcs+0xfff4d46c>
4008e6c4:	300b883a 	mov	r5,r6
4008e6c8:	008eb600 	call	4008eb60 <_malloc_r>
4008e6cc:	102d883a 	mov	r22,r2
4008e6d0:	103f6c26 	beq	r2,zero,4008e484 <__alt_mem_epcs+0xfff4d484>
4008e6d4:	81400417 	ldw	r5,16(r16)
4008e6d8:	1009883a 	mov	r4,r2
4008e6dc:	e00d883a 	mov	r6,fp
4008e6e0:	008f3f00 	call	4008f3f0 <memcpy>
4008e6e4:	8080030b 	ldhu	r2,12(r16)
4008e6e8:	00fedfc4 	movi	r3,-1153
4008e6ec:	10c4703a 	and	r2,r2,r3
4008e6f0:	10802014 	ori	r2,r2,128
4008e6f4:	8080030d 	sth	r2,12(r16)
4008e6f8:	b709883a 	add	r4,r22,fp
4008e6fc:	a707c83a 	sub	r3,r20,fp
4008e700:	85800415 	stw	r22,16(r16)
4008e704:	85000515 	stw	r20,20(r16)
4008e708:	81000015 	stw	r4,0(r16)
4008e70c:	9039883a 	mov	fp,r18
4008e710:	80c00215 	stw	r3,8(r16)
4008e714:	9029883a 	mov	r20,r18
4008e718:	902d883a 	mov	r22,r18
4008e71c:	003f3d06 	br	4008e414 <__alt_mem_epcs+0xfff4d414>
4008e720:	b80b883a 	mov	r5,r23
4008e724:	a00d883a 	mov	r6,r20
4008e728:	008f5280 	call	4008f528 <memmove>
4008e72c:	80800017 	ldw	r2,0(r16)
4008e730:	a809883a 	mov	r4,r21
4008e734:	800b883a 	mov	r5,r16
4008e738:	1505883a 	add	r2,r2,r20
4008e73c:	80800015 	stw	r2,0(r16)
4008e740:	008d8a80 	call	4008d8a8 <_fflush_r>
4008e744:	103fa526 	beq	r2,zero,4008e5dc <__alt_mem_epcs+0xfff4d5dc>
4008e748:	003f5006 	br	4008e48c <__alt_mem_epcs+0xfff4d48c>
4008e74c:	95000044 	addi	r20,r18,1
4008e750:	02000044 	movi	r8,1
4008e754:	003f5806 	br	4008e4b8 <__alt_mem_epcs+0xfff4d4b8>

4008e758 <_fwalk>:
4008e758:	defff804 	addi	sp,sp,-32
4008e75c:	dd400515 	stw	r21,20(sp)
4008e760:	2540b804 	addi	r21,r4,736
4008e764:	dd800615 	stw	r22,24(sp)
4008e768:	dd000415 	stw	r20,16(sp)
4008e76c:	dfc00715 	stw	ra,28(sp)
4008e770:	dcc00315 	stw	r19,12(sp)
4008e774:	dc800215 	stw	r18,8(sp)
4008e778:	dc400115 	stw	r17,4(sp)
4008e77c:	dc000015 	stw	r16,0(sp)
4008e780:	2829883a 	mov	r20,r5
4008e784:	002d883a 	mov	r22,zero
4008e788:	008de600 	call	4008de60 <__sfp_lock_acquire>
4008e78c:	a8001426 	beq	r21,zero,4008e7e0 <_fwalk+0x88>
4008e790:	04ffffc4 	movi	r19,-1
4008e794:	ac400117 	ldw	r17,4(r21)
4008e798:	ac800217 	ldw	r18,8(r21)
4008e79c:	8c7fffc4 	addi	r17,r17,-1
4008e7a0:	88000d16 	blt	r17,zero,4008e7d8 <_fwalk+0x80>
4008e7a4:	94000304 	addi	r16,r18,12
4008e7a8:	94800384 	addi	r18,r18,14
4008e7ac:	80c0000f 	ldh	r3,0(r16)
4008e7b0:	8c7fffc4 	addi	r17,r17,-1
4008e7b4:	813ffd04 	addi	r4,r16,-12
4008e7b8:	18000426 	beq	r3,zero,4008e7cc <_fwalk+0x74>
4008e7bc:	90c0000f 	ldh	r3,0(r18)
4008e7c0:	1cc00226 	beq	r3,r19,4008e7cc <_fwalk+0x74>
4008e7c4:	a03ee83a 	callr	r20
4008e7c8:	b0acb03a 	or	r22,r22,r2
4008e7cc:	84001a04 	addi	r16,r16,104
4008e7d0:	94801a04 	addi	r18,r18,104
4008e7d4:	8cfff51e 	bne	r17,r19,4008e7ac <__alt_mem_epcs+0xfff4d7ac>
4008e7d8:	ad400017 	ldw	r21,0(r21)
4008e7dc:	a83fed1e 	bne	r21,zero,4008e794 <__alt_mem_epcs+0xfff4d794>
4008e7e0:	008de640 	call	4008de64 <__sfp_lock_release>
4008e7e4:	b005883a 	mov	r2,r22
4008e7e8:	dfc00717 	ldw	ra,28(sp)
4008e7ec:	dd800617 	ldw	r22,24(sp)
4008e7f0:	dd400517 	ldw	r21,20(sp)
4008e7f4:	dd000417 	ldw	r20,16(sp)
4008e7f8:	dcc00317 	ldw	r19,12(sp)
4008e7fc:	dc800217 	ldw	r18,8(sp)
4008e800:	dc400117 	ldw	r17,4(sp)
4008e804:	dc000017 	ldw	r16,0(sp)
4008e808:	dec00804 	addi	sp,sp,32
4008e80c:	f800283a 	ret

4008e810 <_fwalk_reent>:
4008e810:	defff804 	addi	sp,sp,-32
4008e814:	dd400515 	stw	r21,20(sp)
4008e818:	2540b804 	addi	r21,r4,736
4008e81c:	dd800615 	stw	r22,24(sp)
4008e820:	dd000415 	stw	r20,16(sp)
4008e824:	dcc00315 	stw	r19,12(sp)
4008e828:	dfc00715 	stw	ra,28(sp)
4008e82c:	dc800215 	stw	r18,8(sp)
4008e830:	dc400115 	stw	r17,4(sp)
4008e834:	dc000015 	stw	r16,0(sp)
4008e838:	2027883a 	mov	r19,r4
4008e83c:	2829883a 	mov	r20,r5
4008e840:	002d883a 	mov	r22,zero
4008e844:	008de600 	call	4008de60 <__sfp_lock_acquire>
4008e848:	a8001326 	beq	r21,zero,4008e898 <_fwalk_reent+0x88>
4008e84c:	04bfffc4 	movi	r18,-1
4008e850:	ac400117 	ldw	r17,4(r21)
4008e854:	ac000217 	ldw	r16,8(r21)
4008e858:	8c7fffc4 	addi	r17,r17,-1
4008e85c:	88000c16 	blt	r17,zero,4008e890 <_fwalk_reent+0x80>
4008e860:	84000304 	addi	r16,r16,12
4008e864:	80c0000f 	ldh	r3,0(r16)
4008e868:	8c7fffc4 	addi	r17,r17,-1
4008e86c:	817ffd04 	addi	r5,r16,-12
4008e870:	18000526 	beq	r3,zero,4008e888 <_fwalk_reent+0x78>
4008e874:	80c0008f 	ldh	r3,2(r16)
4008e878:	9809883a 	mov	r4,r19
4008e87c:	1c800226 	beq	r3,r18,4008e888 <_fwalk_reent+0x78>
4008e880:	a03ee83a 	callr	r20
4008e884:	b0acb03a 	or	r22,r22,r2
4008e888:	84001a04 	addi	r16,r16,104
4008e88c:	8cbff51e 	bne	r17,r18,4008e864 <__alt_mem_epcs+0xfff4d864>
4008e890:	ad400017 	ldw	r21,0(r21)
4008e894:	a83fee1e 	bne	r21,zero,4008e850 <__alt_mem_epcs+0xfff4d850>
4008e898:	008de640 	call	4008de64 <__sfp_lock_release>
4008e89c:	b005883a 	mov	r2,r22
4008e8a0:	dfc00717 	ldw	ra,28(sp)
4008e8a4:	dd800617 	ldw	r22,24(sp)
4008e8a8:	dd400517 	ldw	r21,20(sp)
4008e8ac:	dd000417 	ldw	r20,16(sp)
4008e8b0:	dcc00317 	ldw	r19,12(sp)
4008e8b4:	dc800217 	ldw	r18,8(sp)
4008e8b8:	dc400117 	ldw	r17,4(sp)
4008e8bc:	dc000017 	ldw	r16,0(sp)
4008e8c0:	dec00804 	addi	sp,sp,32
4008e8c4:	f800283a 	ret

4008e8c8 <_setlocale_r>:
4008e8c8:	30001b26 	beq	r6,zero,4008e938 <_setlocale_r+0x70>
4008e8cc:	015002b4 	movhi	r5,16394
4008e8d0:	defffe04 	addi	sp,sp,-8
4008e8d4:	29687404 	addi	r5,r5,-24112
4008e8d8:	3009883a 	mov	r4,r6
4008e8dc:	dc000015 	stw	r16,0(sp)
4008e8e0:	dfc00115 	stw	ra,4(sp)
4008e8e4:	3021883a 	mov	r16,r6
4008e8e8:	00910400 	call	40091040 <strcmp>
4008e8ec:	1000061e 	bne	r2,zero,4008e908 <_setlocale_r+0x40>
4008e8f0:	009002b4 	movhi	r2,16394
4008e8f4:	10a87304 	addi	r2,r2,-24116
4008e8f8:	dfc00117 	ldw	ra,4(sp)
4008e8fc:	dc000017 	ldw	r16,0(sp)
4008e900:	dec00204 	addi	sp,sp,8
4008e904:	f800283a 	ret
4008e908:	015002b4 	movhi	r5,16394
4008e90c:	29687304 	addi	r5,r5,-24116
4008e910:	8009883a 	mov	r4,r16
4008e914:	00910400 	call	40091040 <strcmp>
4008e918:	103ff526 	beq	r2,zero,4008e8f0 <__alt_mem_epcs+0xfff4d8f0>
4008e91c:	015002b4 	movhi	r5,16394
4008e920:	29685e04 	addi	r5,r5,-24200
4008e924:	8009883a 	mov	r4,r16
4008e928:	00910400 	call	40091040 <strcmp>
4008e92c:	103ff026 	beq	r2,zero,4008e8f0 <__alt_mem_epcs+0xfff4d8f0>
4008e930:	0005883a 	mov	r2,zero
4008e934:	003ff006 	br	4008e8f8 <__alt_mem_epcs+0xfff4d8f8>
4008e938:	009002b4 	movhi	r2,16394
4008e93c:	10a87304 	addi	r2,r2,-24116
4008e940:	f800283a 	ret

4008e944 <__locale_charset>:
4008e944:	009002b4 	movhi	r2,16394
4008e948:	10a9eb04 	addi	r2,r2,-22612
4008e94c:	f800283a 	ret

4008e950 <__locale_mb_cur_max>:
4008e950:	009002b4 	movhi	r2,16394
4008e954:	10afec04 	addi	r2,r2,-16464
4008e958:	10800017 	ldw	r2,0(r2)
4008e95c:	f800283a 	ret

4008e960 <__locale_msgcharset>:
4008e960:	009002b4 	movhi	r2,16394
4008e964:	10a9e304 	addi	r2,r2,-22644
4008e968:	f800283a 	ret

4008e96c <__locale_cjk_lang>:
4008e96c:	0005883a 	mov	r2,zero
4008e970:	f800283a 	ret

4008e974 <_localeconv_r>:
4008e974:	009002b4 	movhi	r2,16394
4008e978:	10a9f304 	addi	r2,r2,-22580
4008e97c:	f800283a 	ret

4008e980 <setlocale>:
4008e980:	00d002b4 	movhi	r3,16394
4008e984:	18efeb04 	addi	r3,r3,-16468
4008e988:	2005883a 	mov	r2,r4
4008e98c:	19000017 	ldw	r4,0(r3)
4008e990:	280d883a 	mov	r6,r5
4008e994:	100b883a 	mov	r5,r2
4008e998:	008e8c81 	jmpi	4008e8c8 <_setlocale_r>

4008e99c <localeconv>:
4008e99c:	009002b4 	movhi	r2,16394
4008e9a0:	10a9f304 	addi	r2,r2,-22580
4008e9a4:	f800283a 	ret

4008e9a8 <__smakebuf_r>:
4008e9a8:	2880030b 	ldhu	r2,12(r5)
4008e9ac:	10c0008c 	andi	r3,r2,2
4008e9b0:	1800401e 	bne	r3,zero,4008eab4 <__smakebuf_r+0x10c>
4008e9b4:	deffec04 	addi	sp,sp,-80
4008e9b8:	dc000f15 	stw	r16,60(sp)
4008e9bc:	2821883a 	mov	r16,r5
4008e9c0:	2940038f 	ldh	r5,14(r5)
4008e9c4:	dc401015 	stw	r17,64(sp)
4008e9c8:	dfc01315 	stw	ra,76(sp)
4008e9cc:	dcc01215 	stw	r19,72(sp)
4008e9d0:	dc801115 	stw	r18,68(sp)
4008e9d4:	2023883a 	mov	r17,r4
4008e9d8:	28001b16 	blt	r5,zero,4008ea48 <__smakebuf_r+0xa0>
4008e9dc:	d80d883a 	mov	r6,sp
4008e9e0:	0092b4c0 	call	40092b4c <_fstat_r>
4008e9e4:	10001716 	blt	r2,zero,4008ea44 <__smakebuf_r+0x9c>
4008e9e8:	d8800117 	ldw	r2,4(sp)
4008e9ec:	00e00014 	movui	r3,32768
4008e9f0:	10bc000c 	andi	r2,r2,61440
4008e9f4:	10c03726 	beq	r2,r3,4008ead4 <__smakebuf_r+0x12c>
4008e9f8:	80c0030b 	ldhu	r3,12(r16)
4008e9fc:	18c20014 	ori	r3,r3,2048
4008ea00:	80c0030d 	sth	r3,12(r16)
4008ea04:	00c80004 	movi	r3,8192
4008ea08:	10c03c1e 	bne	r2,r3,4008eafc <__smakebuf_r+0x154>
4008ea0c:	8140038f 	ldh	r5,14(r16)
4008ea10:	8809883a 	mov	r4,r17
4008ea14:	0092ba40 	call	40092ba4 <_isatty_r>
4008ea18:	10004e26 	beq	r2,zero,4008eb54 <__smakebuf_r+0x1ac>
4008ea1c:	8080030b 	ldhu	r2,12(r16)
4008ea20:	04c00044 	movi	r19,1
4008ea24:	80c010c4 	addi	r3,r16,67
4008ea28:	14c4b03a 	or	r2,r2,r19
4008ea2c:	8080030d 	sth	r2,12(r16)
4008ea30:	80c00015 	stw	r3,0(r16)
4008ea34:	80c00415 	stw	r3,16(r16)
4008ea38:	84c00515 	stw	r19,20(r16)
4008ea3c:	04810004 	movi	r18,1024
4008ea40:	00000706 	br	4008ea60 <__smakebuf_r+0xb8>
4008ea44:	8080030b 	ldhu	r2,12(r16)
4008ea48:	10c0200c 	andi	r3,r2,128
4008ea4c:	18001f1e 	bne	r3,zero,4008eacc <__smakebuf_r+0x124>
4008ea50:	04810004 	movi	r18,1024
4008ea54:	10820014 	ori	r2,r2,2048
4008ea58:	8080030d 	sth	r2,12(r16)
4008ea5c:	0027883a 	mov	r19,zero
4008ea60:	8809883a 	mov	r4,r17
4008ea64:	900b883a 	mov	r5,r18
4008ea68:	008eb600 	call	4008eb60 <_malloc_r>
4008ea6c:	10002e26 	beq	r2,zero,4008eb28 <__smakebuf_r+0x180>
4008ea70:	80c0030b 	ldhu	r3,12(r16)
4008ea74:	01100274 	movhi	r4,16393
4008ea78:	2136c404 	addi	r4,r4,-9456
4008ea7c:	89000f15 	stw	r4,60(r17)
4008ea80:	18c02014 	ori	r3,r3,128
4008ea84:	80c0030d 	sth	r3,12(r16)
4008ea88:	80800015 	stw	r2,0(r16)
4008ea8c:	80800415 	stw	r2,16(r16)
4008ea90:	84800515 	stw	r18,20(r16)
4008ea94:	98001c1e 	bne	r19,zero,4008eb08 <__smakebuf_r+0x160>
4008ea98:	dfc01317 	ldw	ra,76(sp)
4008ea9c:	dcc01217 	ldw	r19,72(sp)
4008eaa0:	dc801117 	ldw	r18,68(sp)
4008eaa4:	dc401017 	ldw	r17,64(sp)
4008eaa8:	dc000f17 	ldw	r16,60(sp)
4008eaac:	dec01404 	addi	sp,sp,80
4008eab0:	f800283a 	ret
4008eab4:	288010c4 	addi	r2,r5,67
4008eab8:	28800015 	stw	r2,0(r5)
4008eabc:	28800415 	stw	r2,16(r5)
4008eac0:	00800044 	movi	r2,1
4008eac4:	28800515 	stw	r2,20(r5)
4008eac8:	f800283a 	ret
4008eacc:	04801004 	movi	r18,64
4008ead0:	003fe006 	br	4008ea54 <__alt_mem_epcs+0xfff4da54>
4008ead4:	81000a17 	ldw	r4,40(r16)
4008ead8:	00d00274 	movhi	r3,16393
4008eadc:	18c3f704 	addi	r3,r3,4060
4008eae0:	20ffc51e 	bne	r4,r3,4008e9f8 <__alt_mem_epcs+0xfff4d9f8>
4008eae4:	80c0030b 	ldhu	r3,12(r16)
4008eae8:	01010004 	movi	r4,1024
4008eaec:	81001315 	stw	r4,76(r16)
4008eaf0:	1906b03a 	or	r3,r3,r4
4008eaf4:	80c0030d 	sth	r3,12(r16)
4008eaf8:	003fc206 	br	4008ea04 <__alt_mem_epcs+0xfff4da04>
4008eafc:	0027883a 	mov	r19,zero
4008eb00:	04810004 	movi	r18,1024
4008eb04:	003fd606 	br	4008ea60 <__alt_mem_epcs+0xfff4da60>
4008eb08:	8140038f 	ldh	r5,14(r16)
4008eb0c:	8809883a 	mov	r4,r17
4008eb10:	0092ba40 	call	40092ba4 <_isatty_r>
4008eb14:	103fe026 	beq	r2,zero,4008ea98 <__alt_mem_epcs+0xfff4da98>
4008eb18:	8080030b 	ldhu	r2,12(r16)
4008eb1c:	10800054 	ori	r2,r2,1
4008eb20:	8080030d 	sth	r2,12(r16)
4008eb24:	003fdc06 	br	4008ea98 <__alt_mem_epcs+0xfff4da98>
4008eb28:	8080030b 	ldhu	r2,12(r16)
4008eb2c:	10c0800c 	andi	r3,r2,512
4008eb30:	183fd91e 	bne	r3,zero,4008ea98 <__alt_mem_epcs+0xfff4da98>
4008eb34:	10800094 	ori	r2,r2,2
4008eb38:	80c010c4 	addi	r3,r16,67
4008eb3c:	8080030d 	sth	r2,12(r16)
4008eb40:	00800044 	movi	r2,1
4008eb44:	80c00015 	stw	r3,0(r16)
4008eb48:	80c00415 	stw	r3,16(r16)
4008eb4c:	80800515 	stw	r2,20(r16)
4008eb50:	003fd106 	br	4008ea98 <__alt_mem_epcs+0xfff4da98>
4008eb54:	04c00044 	movi	r19,1
4008eb58:	04810004 	movi	r18,1024
4008eb5c:	003fc006 	br	4008ea60 <__alt_mem_epcs+0xfff4da60>

4008eb60 <_malloc_r>:
4008eb60:	defff504 	addi	sp,sp,-44
4008eb64:	dc800315 	stw	r18,12(sp)
4008eb68:	dfc00a15 	stw	ra,40(sp)
4008eb6c:	df000915 	stw	fp,36(sp)
4008eb70:	ddc00815 	stw	r23,32(sp)
4008eb74:	dd800715 	stw	r22,28(sp)
4008eb78:	dd400615 	stw	r21,24(sp)
4008eb7c:	dd000515 	stw	r20,20(sp)
4008eb80:	dcc00415 	stw	r19,16(sp)
4008eb84:	dc400215 	stw	r17,8(sp)
4008eb88:	dc000115 	stw	r16,4(sp)
4008eb8c:	288002c4 	addi	r2,r5,11
4008eb90:	00c00584 	movi	r3,22
4008eb94:	2025883a 	mov	r18,r4
4008eb98:	18802a2e 	bgeu	r3,r2,4008ec44 <_malloc_r+0xe4>
4008eb9c:	047ffe04 	movi	r17,-8
4008eba0:	1462703a 	and	r17,r2,r17
4008eba4:	88009e16 	blt	r17,zero,4008ee20 <_malloc_r+0x2c0>
4008eba8:	89409d36 	bltu	r17,r5,4008ee20 <_malloc_r+0x2c0>
4008ebac:	0095e700 	call	40095e70 <__malloc_lock>
4008ebb0:	00807dc4 	movi	r2,503
4008ebb4:	14402736 	bltu	r2,r17,4008ec54 <_malloc_r+0xf4>
4008ebb8:	8806d0fa 	srli	r3,r17,3
4008ebbc:	04d002b4 	movhi	r19,16394
4008ebc0:	9cea0104 	addi	r19,r19,-22524
4008ebc4:	18c5883a 	add	r2,r3,r3
4008ebc8:	1085883a 	add	r2,r2,r2
4008ebcc:	1085883a 	add	r2,r2,r2
4008ebd0:	9885883a 	add	r2,r19,r2
4008ebd4:	14000317 	ldw	r16,12(r2)
4008ebd8:	80814a26 	beq	r16,r2,4008f104 <_malloc_r+0x5a4>
4008ebdc:	80c00117 	ldw	r3,4(r16)
4008ebe0:	81000317 	ldw	r4,12(r16)
4008ebe4:	00bfff04 	movi	r2,-4
4008ebe8:	1884703a 	and	r2,r3,r2
4008ebec:	81400217 	ldw	r5,8(r16)
4008ebf0:	8085883a 	add	r2,r16,r2
4008ebf4:	10c00117 	ldw	r3,4(r2)
4008ebf8:	29000315 	stw	r4,12(r5)
4008ebfc:	21400215 	stw	r5,8(r4)
4008ec00:	18c00054 	ori	r3,r3,1
4008ec04:	10c00115 	stw	r3,4(r2)
4008ec08:	9009883a 	mov	r4,r18
4008ec0c:	0095e900 	call	40095e90 <__malloc_unlock>
4008ec10:	80800204 	addi	r2,r16,8
4008ec14:	dfc00a17 	ldw	ra,40(sp)
4008ec18:	df000917 	ldw	fp,36(sp)
4008ec1c:	ddc00817 	ldw	r23,32(sp)
4008ec20:	dd800717 	ldw	r22,28(sp)
4008ec24:	dd400617 	ldw	r21,24(sp)
4008ec28:	dd000517 	ldw	r20,20(sp)
4008ec2c:	dcc00417 	ldw	r19,16(sp)
4008ec30:	dc800317 	ldw	r18,12(sp)
4008ec34:	dc400217 	ldw	r17,8(sp)
4008ec38:	dc000117 	ldw	r16,4(sp)
4008ec3c:	dec00b04 	addi	sp,sp,44
4008ec40:	f800283a 	ret
4008ec44:	04400404 	movi	r17,16
4008ec48:	89407536 	bltu	r17,r5,4008ee20 <_malloc_r+0x2c0>
4008ec4c:	0095e700 	call	40095e70 <__malloc_lock>
4008ec50:	003fd906 	br	4008ebb8 <__alt_mem_epcs+0xfff4dbb8>
4008ec54:	8806d27a 	srli	r3,r17,9
4008ec58:	18007526 	beq	r3,zero,4008ee30 <_malloc_r+0x2d0>
4008ec5c:	00800104 	movi	r2,4
4008ec60:	10c0ef36 	bltu	r2,r3,4008f020 <_malloc_r+0x4c0>
4008ec64:	8806d1ba 	srli	r3,r17,6
4008ec68:	19c00e04 	addi	r7,r3,56
4008ec6c:	39cb883a 	add	r5,r7,r7
4008ec70:	04d002b4 	movhi	r19,16394
4008ec74:	294b883a 	add	r5,r5,r5
4008ec78:	9cea0104 	addi	r19,r19,-22524
4008ec7c:	294b883a 	add	r5,r5,r5
4008ec80:	994b883a 	add	r5,r19,r5
4008ec84:	2c000317 	ldw	r16,12(r5)
4008ec88:	2c000e26 	beq	r5,r16,4008ecc4 <_malloc_r+0x164>
4008ec8c:	80800117 	ldw	r2,4(r16)
4008ec90:	01bfff04 	movi	r6,-4
4008ec94:	010003c4 	movi	r4,15
4008ec98:	1184703a 	and	r2,r2,r6
4008ec9c:	1447c83a 	sub	r3,r2,r17
4008eca0:	20c00716 	blt	r4,r3,4008ecc0 <_malloc_r+0x160>
4008eca4:	1800650e 	bge	r3,zero,4008ee3c <_malloc_r+0x2dc>
4008eca8:	84000317 	ldw	r16,12(r16)
4008ecac:	2c000526 	beq	r5,r16,4008ecc4 <_malloc_r+0x164>
4008ecb0:	80800117 	ldw	r2,4(r16)
4008ecb4:	1184703a 	and	r2,r2,r6
4008ecb8:	1447c83a 	sub	r3,r2,r17
4008ecbc:	20fff90e 	bge	r4,r3,4008eca4 <__alt_mem_epcs+0xfff4dca4>
4008ecc0:	39ffffc4 	addi	r7,r7,-1
4008ecc4:	38c00044 	addi	r3,r7,1
4008ecc8:	019002b4 	movhi	r6,16394
4008eccc:	9c000417 	ldw	r16,16(r19)
4008ecd0:	31aa0104 	addi	r6,r6,-22524
4008ecd4:	32400204 	addi	r9,r6,8
4008ecd8:	82410326 	beq	r16,r9,4008f0e8 <_malloc_r+0x588>
4008ecdc:	81000117 	ldw	r4,4(r16)
4008ece0:	00bfff04 	movi	r2,-4
4008ece4:	208e703a 	and	r7,r4,r2
4008ece8:	3c45c83a 	sub	r2,r7,r17
4008ecec:	010003c4 	movi	r4,15
4008ecf0:	2080ee16 	blt	r4,r2,4008f0ac <_malloc_r+0x54c>
4008ecf4:	32400515 	stw	r9,20(r6)
4008ecf8:	32400415 	stw	r9,16(r6)
4008ecfc:	1000510e 	bge	r2,zero,4008ee44 <_malloc_r+0x2e4>
4008ed00:	00807fc4 	movi	r2,511
4008ed04:	11c0ce36 	bltu	r2,r7,4008f040 <_malloc_r+0x4e0>
4008ed08:	3808d0fa 	srli	r4,r7,3
4008ed0c:	01c00044 	movi	r7,1
4008ed10:	30800117 	ldw	r2,4(r6)
4008ed14:	210b883a 	add	r5,r4,r4
4008ed18:	294b883a 	add	r5,r5,r5
4008ed1c:	2009d0ba 	srai	r4,r4,2
4008ed20:	294b883a 	add	r5,r5,r5
4008ed24:	298b883a 	add	r5,r5,r6
4008ed28:	2a000217 	ldw	r8,8(r5)
4008ed2c:	3908983a 	sll	r4,r7,r4
4008ed30:	81400315 	stw	r5,12(r16)
4008ed34:	82000215 	stw	r8,8(r16)
4008ed38:	2088b03a 	or	r4,r4,r2
4008ed3c:	2c000215 	stw	r16,8(r5)
4008ed40:	31000115 	stw	r4,4(r6)
4008ed44:	44000315 	stw	r16,12(r8)
4008ed48:	1805d0ba 	srai	r2,r3,2
4008ed4c:	01400044 	movi	r5,1
4008ed50:	288a983a 	sll	r5,r5,r2
4008ed54:	21404336 	bltu	r4,r5,4008ee64 <_malloc_r+0x304>
4008ed58:	2144703a 	and	r2,r4,r5
4008ed5c:	10000a1e 	bne	r2,zero,4008ed88 <_malloc_r+0x228>
4008ed60:	00bfff04 	movi	r2,-4
4008ed64:	294b883a 	add	r5,r5,r5
4008ed68:	1886703a 	and	r3,r3,r2
4008ed6c:	2144703a 	and	r2,r4,r5
4008ed70:	18c00104 	addi	r3,r3,4
4008ed74:	1000041e 	bne	r2,zero,4008ed88 <_malloc_r+0x228>
4008ed78:	294b883a 	add	r5,r5,r5
4008ed7c:	2144703a 	and	r2,r4,r5
4008ed80:	18c00104 	addi	r3,r3,4
4008ed84:	103ffc26 	beq	r2,zero,4008ed78 <__alt_mem_epcs+0xfff4dd78>
4008ed88:	023fff04 	movi	r8,-4
4008ed8c:	01c003c4 	movi	r7,15
4008ed90:	18c5883a 	add	r2,r3,r3
4008ed94:	1085883a 	add	r2,r2,r2
4008ed98:	1085883a 	add	r2,r2,r2
4008ed9c:	9895883a 	add	r10,r19,r2
4008eda0:	52c00304 	addi	r11,r10,12
4008eda4:	1819883a 	mov	r12,r3
4008eda8:	5c000017 	ldw	r16,0(r11)
4008edac:	59bffd04 	addi	r6,r11,-12
4008edb0:	8180041e 	bne	r16,r6,4008edc4 <_malloc_r+0x264>
4008edb4:	0000ce06 	br	4008f0f0 <_malloc_r+0x590>
4008edb8:	2000d70e 	bge	r4,zero,4008f118 <_malloc_r+0x5b8>
4008edbc:	84000317 	ldw	r16,12(r16)
4008edc0:	8180cb26 	beq	r16,r6,4008f0f0 <_malloc_r+0x590>
4008edc4:	80800117 	ldw	r2,4(r16)
4008edc8:	1204703a 	and	r2,r2,r8
4008edcc:	1449c83a 	sub	r4,r2,r17
4008edd0:	393ff90e 	bge	r7,r4,4008edb8 <__alt_mem_epcs+0xfff4ddb8>
4008edd4:	80800317 	ldw	r2,12(r16)
4008edd8:	80c00217 	ldw	r3,8(r16)
4008eddc:	89400054 	ori	r5,r17,1
4008ede0:	81400115 	stw	r5,4(r16)
4008ede4:	18800315 	stw	r2,12(r3)
4008ede8:	10c00215 	stw	r3,8(r2)
4008edec:	8463883a 	add	r17,r16,r17
4008edf0:	9c400515 	stw	r17,20(r19)
4008edf4:	9c400415 	stw	r17,16(r19)
4008edf8:	20800054 	ori	r2,r4,1
4008edfc:	88800115 	stw	r2,4(r17)
4008ee00:	8a400315 	stw	r9,12(r17)
4008ee04:	8a400215 	stw	r9,8(r17)
4008ee08:	8923883a 	add	r17,r17,r4
4008ee0c:	89000015 	stw	r4,0(r17)
4008ee10:	9009883a 	mov	r4,r18
4008ee14:	0095e900 	call	40095e90 <__malloc_unlock>
4008ee18:	80800204 	addi	r2,r16,8
4008ee1c:	003f7d06 	br	4008ec14 <__alt_mem_epcs+0xfff4dc14>
4008ee20:	00800304 	movi	r2,12
4008ee24:	90800015 	stw	r2,0(r18)
4008ee28:	0005883a 	mov	r2,zero
4008ee2c:	003f7906 	br	4008ec14 <__alt_mem_epcs+0xfff4dc14>
4008ee30:	01401f84 	movi	r5,126
4008ee34:	01c00fc4 	movi	r7,63
4008ee38:	003f8d06 	br	4008ec70 <__alt_mem_epcs+0xfff4dc70>
4008ee3c:	81000317 	ldw	r4,12(r16)
4008ee40:	003f6a06 	br	4008ebec <__alt_mem_epcs+0xfff4dbec>
4008ee44:	81c5883a 	add	r2,r16,r7
4008ee48:	10c00117 	ldw	r3,4(r2)
4008ee4c:	9009883a 	mov	r4,r18
4008ee50:	18c00054 	ori	r3,r3,1
4008ee54:	10c00115 	stw	r3,4(r2)
4008ee58:	0095e900 	call	40095e90 <__malloc_unlock>
4008ee5c:	80800204 	addi	r2,r16,8
4008ee60:	003f6c06 	br	4008ec14 <__alt_mem_epcs+0xfff4dc14>
4008ee64:	9c000217 	ldw	r16,8(r19)
4008ee68:	00bfff04 	movi	r2,-4
4008ee6c:	85800117 	ldw	r22,4(r16)
4008ee70:	b0ac703a 	and	r22,r22,r2
4008ee74:	b4400336 	bltu	r22,r17,4008ee84 <_malloc_r+0x324>
4008ee78:	b445c83a 	sub	r2,r22,r17
4008ee7c:	00c003c4 	movi	r3,15
4008ee80:	18805d16 	blt	r3,r2,4008eff8 <_malloc_r+0x498>
4008ee84:	05d002b4 	movhi	r23,16394
4008ee88:	009002b4 	movhi	r2,16394
4008ee8c:	bdefed04 	addi	r23,r23,-16460
4008ee90:	10b73204 	addi	r2,r2,-9016
4008ee94:	15400017 	ldw	r21,0(r2)
4008ee98:	b9000017 	ldw	r4,0(r23)
4008ee9c:	00ffffc4 	movi	r3,-1
4008eea0:	858d883a 	add	r6,r16,r22
4008eea4:	8d6b883a 	add	r21,r17,r21
4008eea8:	20c0e426 	beq	r4,r3,4008f23c <_malloc_r+0x6dc>
4008eeac:	ad4403c4 	addi	r21,r21,4111
4008eeb0:	00fc0004 	movi	r3,-4096
4008eeb4:	a8ea703a 	and	r21,r21,r3
4008eeb8:	9009883a 	mov	r4,r18
4008eebc:	a80b883a 	mov	r5,r21
4008eec0:	d9800015 	stw	r6,0(sp)
4008eec4:	0090eb00 	call	40090eb0 <_sbrk_r>
4008eec8:	00ffffc4 	movi	r3,-1
4008eecc:	1029883a 	mov	r20,r2
4008eed0:	d9800017 	ldw	r6,0(sp)
4008eed4:	10c0a426 	beq	r2,r3,4008f168 <_malloc_r+0x608>
4008eed8:	1180a236 	bltu	r2,r6,4008f164 <_malloc_r+0x604>
4008eedc:	071002b4 	movhi	fp,16394
4008eee0:	e7374004 	addi	fp,fp,-8960
4008eee4:	e0c00017 	ldw	r3,0(fp)
4008eee8:	a8c7883a 	add	r3,r21,r3
4008eeec:	e0c00015 	stw	r3,0(fp)
4008eef0:	3500da26 	beq	r6,r20,4008f25c <_malloc_r+0x6fc>
4008eef4:	b9000017 	ldw	r4,0(r23)
4008eef8:	00bfffc4 	movi	r2,-1
4008eefc:	2080e426 	beq	r4,r2,4008f290 <_malloc_r+0x730>
4008ef00:	a185c83a 	sub	r2,r20,r6
4008ef04:	1885883a 	add	r2,r3,r2
4008ef08:	e0800015 	stw	r2,0(fp)
4008ef0c:	a0c001cc 	andi	r3,r20,7
4008ef10:	1800b526 	beq	r3,zero,4008f1e8 <_malloc_r+0x688>
4008ef14:	a0e9c83a 	sub	r20,r20,r3
4008ef18:	00840204 	movi	r2,4104
4008ef1c:	a5000204 	addi	r20,r20,8
4008ef20:	10c7c83a 	sub	r3,r2,r3
4008ef24:	a545883a 	add	r2,r20,r21
4008ef28:	1083ffcc 	andi	r2,r2,4095
4008ef2c:	18abc83a 	sub	r21,r3,r2
4008ef30:	9009883a 	mov	r4,r18
4008ef34:	a80b883a 	mov	r5,r21
4008ef38:	0090eb00 	call	40090eb0 <_sbrk_r>
4008ef3c:	00ffffc4 	movi	r3,-1
4008ef40:	10c0d026 	beq	r2,r3,4008f284 <_malloc_r+0x724>
4008ef44:	1507c83a 	sub	r3,r2,r20
4008ef48:	a8c7883a 	add	r3,r21,r3
4008ef4c:	18c00054 	ori	r3,r3,1
4008ef50:	e0800017 	ldw	r2,0(fp)
4008ef54:	9d000215 	stw	r20,8(r19)
4008ef58:	a0c00115 	stw	r3,4(r20)
4008ef5c:	a887883a 	add	r3,r21,r2
4008ef60:	e0c00015 	stw	r3,0(fp)
4008ef64:	84c00e26 	beq	r16,r19,4008efa0 <_malloc_r+0x440>
4008ef68:	018003c4 	movi	r6,15
4008ef6c:	3580a02e 	bgeu	r6,r22,4008f1f0 <_malloc_r+0x690>
4008ef70:	81400117 	ldw	r5,4(r16)
4008ef74:	013ffe04 	movi	r4,-8
4008ef78:	b0bffd04 	addi	r2,r22,-12
4008ef7c:	1104703a 	and	r2,r2,r4
4008ef80:	2900004c 	andi	r4,r5,1
4008ef84:	1108b03a 	or	r4,r2,r4
4008ef88:	81000115 	stw	r4,4(r16)
4008ef8c:	01400144 	movi	r5,5
4008ef90:	8089883a 	add	r4,r16,r2
4008ef94:	21400115 	stw	r5,4(r4)
4008ef98:	21400215 	stw	r5,8(r4)
4008ef9c:	3080c036 	bltu	r6,r2,4008f2a0 <_malloc_r+0x740>
4008efa0:	009002b4 	movhi	r2,16394
4008efa4:	10b73104 	addi	r2,r2,-9020
4008efa8:	11000017 	ldw	r4,0(r2)
4008efac:	20c0012e 	bgeu	r4,r3,4008efb4 <_malloc_r+0x454>
4008efb0:	10c00015 	stw	r3,0(r2)
4008efb4:	009002b4 	movhi	r2,16394
4008efb8:	10b73004 	addi	r2,r2,-9024
4008efbc:	11000017 	ldw	r4,0(r2)
4008efc0:	9c000217 	ldw	r16,8(r19)
4008efc4:	20c0012e 	bgeu	r4,r3,4008efcc <_malloc_r+0x46c>
4008efc8:	10c00015 	stw	r3,0(r2)
4008efcc:	80c00117 	ldw	r3,4(r16)
4008efd0:	00bfff04 	movi	r2,-4
4008efd4:	1886703a 	and	r3,r3,r2
4008efd8:	1c45c83a 	sub	r2,r3,r17
4008efdc:	1c400236 	bltu	r3,r17,4008efe8 <_malloc_r+0x488>
4008efe0:	00c003c4 	movi	r3,15
4008efe4:	18800416 	blt	r3,r2,4008eff8 <_malloc_r+0x498>
4008efe8:	9009883a 	mov	r4,r18
4008efec:	0095e900 	call	40095e90 <__malloc_unlock>
4008eff0:	0005883a 	mov	r2,zero
4008eff4:	003f0706 	br	4008ec14 <__alt_mem_epcs+0xfff4dc14>
4008eff8:	88c00054 	ori	r3,r17,1
4008effc:	80c00115 	stw	r3,4(r16)
4008f000:	8463883a 	add	r17,r16,r17
4008f004:	10800054 	ori	r2,r2,1
4008f008:	9c400215 	stw	r17,8(r19)
4008f00c:	88800115 	stw	r2,4(r17)
4008f010:	9009883a 	mov	r4,r18
4008f014:	0095e900 	call	40095e90 <__malloc_unlock>
4008f018:	80800204 	addi	r2,r16,8
4008f01c:	003efd06 	br	4008ec14 <__alt_mem_epcs+0xfff4dc14>
4008f020:	00800504 	movi	r2,20
4008f024:	10c0482e 	bgeu	r2,r3,4008f148 <_malloc_r+0x5e8>
4008f028:	00801504 	movi	r2,84
4008f02c:	10c06836 	bltu	r2,r3,4008f1d0 <_malloc_r+0x670>
4008f030:	8806d33a 	srli	r3,r17,12
4008f034:	19c01b84 	addi	r7,r3,110
4008f038:	39cb883a 	add	r5,r7,r7
4008f03c:	003f0c06 	br	4008ec70 <__alt_mem_epcs+0xfff4dc70>
4008f040:	3804d27a 	srli	r2,r7,9
4008f044:	01000104 	movi	r4,4
4008f048:	2080422e 	bgeu	r4,r2,4008f154 <_malloc_r+0x5f4>
4008f04c:	01000504 	movi	r4,20
4008f050:	20807c36 	bltu	r4,r2,4008f244 <_malloc_r+0x6e4>
4008f054:	110016c4 	addi	r4,r2,91
4008f058:	210b883a 	add	r5,r4,r4
4008f05c:	294b883a 	add	r5,r5,r5
4008f060:	294b883a 	add	r5,r5,r5
4008f064:	994b883a 	add	r5,r19,r5
4008f068:	28800217 	ldw	r2,8(r5)
4008f06c:	021002b4 	movhi	r8,16394
4008f070:	422a0104 	addi	r8,r8,-22524
4008f074:	11406326 	beq	r2,r5,4008f204 <_malloc_r+0x6a4>
4008f078:	01bfff04 	movi	r6,-4
4008f07c:	11000117 	ldw	r4,4(r2)
4008f080:	2188703a 	and	r4,r4,r6
4008f084:	3900022e 	bgeu	r7,r4,4008f090 <_malloc_r+0x530>
4008f088:	10800217 	ldw	r2,8(r2)
4008f08c:	28bffb1e 	bne	r5,r2,4008f07c <__alt_mem_epcs+0xfff4e07c>
4008f090:	11800317 	ldw	r6,12(r2)
4008f094:	99000117 	ldw	r4,4(r19)
4008f098:	81800315 	stw	r6,12(r16)
4008f09c:	80800215 	stw	r2,8(r16)
4008f0a0:	34000215 	stw	r16,8(r6)
4008f0a4:	14000315 	stw	r16,12(r2)
4008f0a8:	003f2706 	br	4008ed48 <__alt_mem_epcs+0xfff4dd48>
4008f0ac:	88c00054 	ori	r3,r17,1
4008f0b0:	80c00115 	stw	r3,4(r16)
4008f0b4:	8463883a 	add	r17,r16,r17
4008f0b8:	34400515 	stw	r17,20(r6)
4008f0bc:	34400415 	stw	r17,16(r6)
4008f0c0:	10c00054 	ori	r3,r2,1
4008f0c4:	8a400315 	stw	r9,12(r17)
4008f0c8:	8a400215 	stw	r9,8(r17)
4008f0cc:	88c00115 	stw	r3,4(r17)
4008f0d0:	88a3883a 	add	r17,r17,r2
4008f0d4:	88800015 	stw	r2,0(r17)
4008f0d8:	9009883a 	mov	r4,r18
4008f0dc:	0095e900 	call	40095e90 <__malloc_unlock>
4008f0e0:	80800204 	addi	r2,r16,8
4008f0e4:	003ecb06 	br	4008ec14 <__alt_mem_epcs+0xfff4dc14>
4008f0e8:	31000117 	ldw	r4,4(r6)
4008f0ec:	003f1606 	br	4008ed48 <__alt_mem_epcs+0xfff4dd48>
4008f0f0:	63000044 	addi	r12,r12,1
4008f0f4:	608000cc 	andi	r2,r12,3
4008f0f8:	5ac00204 	addi	r11,r11,8
4008f0fc:	103f2a1e 	bne	r2,zero,4008eda8 <__alt_mem_epcs+0xfff4dda8>
4008f100:	00002106 	br	4008f188 <_malloc_r+0x628>
4008f104:	80800204 	addi	r2,r16,8
4008f108:	84000517 	ldw	r16,20(r16)
4008f10c:	143eb31e 	bne	r2,r16,4008ebdc <__alt_mem_epcs+0xfff4dbdc>
4008f110:	18c00084 	addi	r3,r3,2
4008f114:	003eec06 	br	4008ecc8 <__alt_mem_epcs+0xfff4dcc8>
4008f118:	8085883a 	add	r2,r16,r2
4008f11c:	10c00117 	ldw	r3,4(r2)
4008f120:	81000317 	ldw	r4,12(r16)
4008f124:	81400217 	ldw	r5,8(r16)
4008f128:	18c00054 	ori	r3,r3,1
4008f12c:	10c00115 	stw	r3,4(r2)
4008f130:	29000315 	stw	r4,12(r5)
4008f134:	21400215 	stw	r5,8(r4)
4008f138:	9009883a 	mov	r4,r18
4008f13c:	0095e900 	call	40095e90 <__malloc_unlock>
4008f140:	80800204 	addi	r2,r16,8
4008f144:	003eb306 	br	4008ec14 <__alt_mem_epcs+0xfff4dc14>
4008f148:	19c016c4 	addi	r7,r3,91
4008f14c:	39cb883a 	add	r5,r7,r7
4008f150:	003ec706 	br	4008ec70 <__alt_mem_epcs+0xfff4dc70>
4008f154:	3804d1ba 	srli	r2,r7,6
4008f158:	11000e04 	addi	r4,r2,56
4008f15c:	210b883a 	add	r5,r4,r4
4008f160:	003fbe06 	br	4008f05c <__alt_mem_epcs+0xfff4e05c>
4008f164:	84ff5d26 	beq	r16,r19,4008eedc <__alt_mem_epcs+0xfff4dedc>
4008f168:	9c000217 	ldw	r16,8(r19)
4008f16c:	00bfff04 	movi	r2,-4
4008f170:	80c00117 	ldw	r3,4(r16)
4008f174:	1886703a 	and	r3,r3,r2
4008f178:	003f9706 	br	4008efd8 <__alt_mem_epcs+0xfff4dfd8>
4008f17c:	52800017 	ldw	r10,0(r10)
4008f180:	18ffffc4 	addi	r3,r3,-1
4008f184:	50805c1e 	bne	r10,r2,4008f2f8 <_malloc_r+0x798>
4008f188:	190000cc 	andi	r4,r3,3
4008f18c:	50bffe04 	addi	r2,r10,-8
4008f190:	203ffa1e 	bne	r4,zero,4008f17c <__alt_mem_epcs+0xfff4e17c>
4008f194:	98800117 	ldw	r2,4(r19)
4008f198:	0146303a 	nor	r3,zero,r5
4008f19c:	1884703a 	and	r2,r3,r2
4008f1a0:	98800115 	stw	r2,4(r19)
4008f1a4:	294b883a 	add	r5,r5,r5
4008f1a8:	117f2e36 	bltu	r2,r5,4008ee64 <__alt_mem_epcs+0xfff4de64>
4008f1ac:	283f2d26 	beq	r5,zero,4008ee64 <__alt_mem_epcs+0xfff4de64>
4008f1b0:	1146703a 	and	r3,r2,r5
4008f1b4:	1800521e 	bne	r3,zero,4008f300 <_malloc_r+0x7a0>
4008f1b8:	6007883a 	mov	r3,r12
4008f1bc:	294b883a 	add	r5,r5,r5
4008f1c0:	1148703a 	and	r4,r2,r5
4008f1c4:	18c00104 	addi	r3,r3,4
4008f1c8:	203ffc26 	beq	r4,zero,4008f1bc <__alt_mem_epcs+0xfff4e1bc>
4008f1cc:	003ef006 	br	4008ed90 <__alt_mem_epcs+0xfff4dd90>
4008f1d0:	00805504 	movi	r2,340
4008f1d4:	10c01336 	bltu	r2,r3,4008f224 <_malloc_r+0x6c4>
4008f1d8:	8806d3fa 	srli	r3,r17,15
4008f1dc:	19c01dc4 	addi	r7,r3,119
4008f1e0:	39cb883a 	add	r5,r7,r7
4008f1e4:	003ea206 	br	4008ec70 <__alt_mem_epcs+0xfff4dc70>
4008f1e8:	00c40004 	movi	r3,4096
4008f1ec:	003f4d06 	br	4008ef24 <__alt_mem_epcs+0xfff4df24>
4008f1f0:	00800044 	movi	r2,1
4008f1f4:	a0800115 	stw	r2,4(r20)
4008f1f8:	a021883a 	mov	r16,r20
4008f1fc:	0007883a 	mov	r3,zero
4008f200:	003f7506 	br	4008efd8 <__alt_mem_epcs+0xfff4dfd8>
4008f204:	200bd0ba 	srai	r5,r4,2
4008f208:	01800044 	movi	r6,1
4008f20c:	41000117 	ldw	r4,4(r8)
4008f210:	314a983a 	sll	r5,r6,r5
4008f214:	100d883a 	mov	r6,r2
4008f218:	2908b03a 	or	r4,r5,r4
4008f21c:	41000115 	stw	r4,4(r8)
4008f220:	003f9d06 	br	4008f098 <__alt_mem_epcs+0xfff4e098>
4008f224:	00815504 	movi	r2,1364
4008f228:	10c01336 	bltu	r2,r3,4008f278 <_malloc_r+0x718>
4008f22c:	8806d4ba 	srli	r3,r17,18
4008f230:	19c01f04 	addi	r7,r3,124
4008f234:	39cb883a 	add	r5,r7,r7
4008f238:	003e8d06 	br	4008ec70 <__alt_mem_epcs+0xfff4dc70>
4008f23c:	ad400404 	addi	r21,r21,16
4008f240:	003f1d06 	br	4008eeb8 <__alt_mem_epcs+0xfff4deb8>
4008f244:	01001504 	movi	r4,84
4008f248:	20801c36 	bltu	r4,r2,4008f2bc <_malloc_r+0x75c>
4008f24c:	3804d33a 	srli	r2,r7,12
4008f250:	11001b84 	addi	r4,r2,110
4008f254:	210b883a 	add	r5,r4,r4
4008f258:	003f8006 	br	4008f05c <__alt_mem_epcs+0xfff4e05c>
4008f25c:	3083ffcc 	andi	r2,r6,4095
4008f260:	103f241e 	bne	r2,zero,4008eef4 <__alt_mem_epcs+0xfff4def4>
4008f264:	99000217 	ldw	r4,8(r19)
4008f268:	ad85883a 	add	r2,r21,r22
4008f26c:	10800054 	ori	r2,r2,1
4008f270:	20800115 	stw	r2,4(r4)
4008f274:	003f4a06 	br	4008efa0 <__alt_mem_epcs+0xfff4dfa0>
4008f278:	01403f04 	movi	r5,252
4008f27c:	01c01f84 	movi	r7,126
4008f280:	003e7b06 	br	4008ec70 <__alt_mem_epcs+0xfff4dc70>
4008f284:	00c00044 	movi	r3,1
4008f288:	002b883a 	mov	r21,zero
4008f28c:	003f3006 	br	4008ef50 <__alt_mem_epcs+0xfff4df50>
4008f290:	009002b4 	movhi	r2,16394
4008f294:	10afed04 	addi	r2,r2,-16460
4008f298:	15000015 	stw	r20,0(r2)
4008f29c:	003f1b06 	br	4008ef0c <__alt_mem_epcs+0xfff4df0c>
4008f2a0:	9009883a 	mov	r4,r18
4008f2a4:	81400204 	addi	r5,r16,8
4008f2a8:	008dfc40 	call	4008dfc4 <_free_r>
4008f2ac:	009002b4 	movhi	r2,16394
4008f2b0:	10b74004 	addi	r2,r2,-8960
4008f2b4:	10c00017 	ldw	r3,0(r2)
4008f2b8:	003f3906 	br	4008efa0 <__alt_mem_epcs+0xfff4dfa0>
4008f2bc:	01005504 	movi	r4,340
4008f2c0:	20800436 	bltu	r4,r2,4008f2d4 <_malloc_r+0x774>
4008f2c4:	3804d3fa 	srli	r2,r7,15
4008f2c8:	11001dc4 	addi	r4,r2,119
4008f2cc:	210b883a 	add	r5,r4,r4
4008f2d0:	003f6206 	br	4008f05c <__alt_mem_epcs+0xfff4e05c>
4008f2d4:	01015504 	movi	r4,1364
4008f2d8:	20800436 	bltu	r4,r2,4008f2ec <_malloc_r+0x78c>
4008f2dc:	3804d4ba 	srli	r2,r7,18
4008f2e0:	11001f04 	addi	r4,r2,124
4008f2e4:	210b883a 	add	r5,r4,r4
4008f2e8:	003f5c06 	br	4008f05c <__alt_mem_epcs+0xfff4e05c>
4008f2ec:	01403f04 	movi	r5,252
4008f2f0:	01001f84 	movi	r4,126
4008f2f4:	003f5906 	br	4008f05c <__alt_mem_epcs+0xfff4e05c>
4008f2f8:	98800117 	ldw	r2,4(r19)
4008f2fc:	003fa906 	br	4008f1a4 <__alt_mem_epcs+0xfff4e1a4>
4008f300:	6007883a 	mov	r3,r12
4008f304:	003ea206 	br	4008ed90 <__alt_mem_epcs+0xfff4dd90>

4008f308 <memchr>:
4008f308:	208000cc 	andi	r2,r4,3
4008f30c:	280f883a 	mov	r7,r5
4008f310:	10003526 	beq	r2,zero,4008f3e8 <memchr+0xe0>
4008f314:	30bfffc4 	addi	r2,r6,-1
4008f318:	30001b26 	beq	r6,zero,4008f388 <memchr+0x80>
4008f31c:	21800003 	ldbu	r6,0(r4)
4008f320:	28c03fcc 	andi	r3,r5,255
4008f324:	30c01a26 	beq	r6,r3,4008f390 <memchr+0x88>
4008f328:	180d883a 	mov	r6,r3
4008f32c:	00000406 	br	4008f340 <memchr+0x38>
4008f330:	10001526 	beq	r2,zero,4008f388 <memchr+0x80>
4008f334:	20c00003 	ldbu	r3,0(r4)
4008f338:	10bfffc4 	addi	r2,r2,-1
4008f33c:	19801426 	beq	r3,r6,4008f390 <memchr+0x88>
4008f340:	21000044 	addi	r4,r4,1
4008f344:	20c000cc 	andi	r3,r4,3
4008f348:	183ff91e 	bne	r3,zero,4008f330 <__alt_mem_epcs+0xfff4e330>
4008f34c:	024000c4 	movi	r9,3
4008f350:	48801136 	bltu	r9,r2,4008f398 <memchr+0x90>
4008f354:	10000c26 	beq	r2,zero,4008f388 <memchr+0x80>
4008f358:	20c00003 	ldbu	r3,0(r4)
4008f35c:	29403fcc 	andi	r5,r5,255
4008f360:	19400b26 	beq	r3,r5,4008f390 <memchr+0x88>
4008f364:	20c00044 	addi	r3,r4,1
4008f368:	2085883a 	add	r2,r4,r2
4008f36c:	39803fcc 	andi	r6,r7,255
4008f370:	00000306 	br	4008f380 <memchr+0x78>
4008f374:	18c00044 	addi	r3,r3,1
4008f378:	197fffc3 	ldbu	r5,-1(r3)
4008f37c:	29800426 	beq	r5,r6,4008f390 <memchr+0x88>
4008f380:	1809883a 	mov	r4,r3
4008f384:	18bffb1e 	bne	r3,r2,4008f374 <__alt_mem_epcs+0xfff4e374>
4008f388:	0005883a 	mov	r2,zero
4008f38c:	f800283a 	ret
4008f390:	2005883a 	mov	r2,r4
4008f394:	f800283a 	ret
4008f398:	28c03fcc 	andi	r3,r5,255
4008f39c:	1810923a 	slli	r8,r3,8
4008f3a0:	02ffbff4 	movhi	r11,65279
4008f3a4:	02a02074 	movhi	r10,32897
4008f3a8:	40c6b03a 	or	r3,r8,r3
4008f3ac:	1810943a 	slli	r8,r3,16
4008f3b0:	5affbfc4 	addi	r11,r11,-257
4008f3b4:	52a02004 	addi	r10,r10,-32640
4008f3b8:	40d0b03a 	or	r8,r8,r3
4008f3bc:	20c00017 	ldw	r3,0(r4)
4008f3c0:	40c6f03a 	xor	r3,r8,r3
4008f3c4:	1acd883a 	add	r6,r3,r11
4008f3c8:	00c6303a 	nor	r3,zero,r3
4008f3cc:	30c6703a 	and	r3,r6,r3
4008f3d0:	1a86703a 	and	r3,r3,r10
4008f3d4:	183fdf1e 	bne	r3,zero,4008f354 <__alt_mem_epcs+0xfff4e354>
4008f3d8:	10bfff04 	addi	r2,r2,-4
4008f3dc:	21000104 	addi	r4,r4,4
4008f3e0:	48bff636 	bltu	r9,r2,4008f3bc <__alt_mem_epcs+0xfff4e3bc>
4008f3e4:	003fdb06 	br	4008f354 <__alt_mem_epcs+0xfff4e354>
4008f3e8:	3005883a 	mov	r2,r6
4008f3ec:	003fd706 	br	4008f34c <__alt_mem_epcs+0xfff4e34c>

4008f3f0 <memcpy>:
4008f3f0:	deffff04 	addi	sp,sp,-4
4008f3f4:	dc000015 	stw	r16,0(sp)
4008f3f8:	00c003c4 	movi	r3,15
4008f3fc:	2005883a 	mov	r2,r4
4008f400:	1980432e 	bgeu	r3,r6,4008f510 <memcpy+0x120>
4008f404:	2146b03a 	or	r3,r4,r5
4008f408:	18c000cc 	andi	r3,r3,3
4008f40c:	1800421e 	bne	r3,zero,4008f518 <memcpy+0x128>
4008f410:	343ffc04 	addi	r16,r6,-16
4008f414:	8020d13a 	srli	r16,r16,4
4008f418:	28c00104 	addi	r3,r5,4
4008f41c:	23400104 	addi	r13,r4,4
4008f420:	801e913a 	slli	r15,r16,4
4008f424:	2b000204 	addi	r12,r5,8
4008f428:	22c00204 	addi	r11,r4,8
4008f42c:	7bc00504 	addi	r15,r15,20
4008f430:	2a800304 	addi	r10,r5,12
4008f434:	22400304 	addi	r9,r4,12
4008f438:	2bdf883a 	add	r15,r5,r15
4008f43c:	2811883a 	mov	r8,r5
4008f440:	200f883a 	mov	r7,r4
4008f444:	41000017 	ldw	r4,0(r8)
4008f448:	39c00404 	addi	r7,r7,16
4008f44c:	18c00404 	addi	r3,r3,16
4008f450:	393ffc15 	stw	r4,-16(r7)
4008f454:	1bbffc17 	ldw	r14,-16(r3)
4008f458:	6b400404 	addi	r13,r13,16
4008f45c:	5ac00404 	addi	r11,r11,16
4008f460:	6bbffc15 	stw	r14,-16(r13)
4008f464:	63800017 	ldw	r14,0(r12)
4008f468:	4a400404 	addi	r9,r9,16
4008f46c:	42000404 	addi	r8,r8,16
4008f470:	5bbffc15 	stw	r14,-16(r11)
4008f474:	53800017 	ldw	r14,0(r10)
4008f478:	63000404 	addi	r12,r12,16
4008f47c:	52800404 	addi	r10,r10,16
4008f480:	4bbffc15 	stw	r14,-16(r9)
4008f484:	1bffef1e 	bne	r3,r15,4008f444 <__alt_mem_epcs+0xfff4e444>
4008f488:	81c00044 	addi	r7,r16,1
4008f48c:	380e913a 	slli	r7,r7,4
4008f490:	310003cc 	andi	r4,r6,15
4008f494:	02c000c4 	movi	r11,3
4008f498:	11c7883a 	add	r3,r2,r7
4008f49c:	29cb883a 	add	r5,r5,r7
4008f4a0:	59001f2e 	bgeu	r11,r4,4008f520 <memcpy+0x130>
4008f4a4:	1813883a 	mov	r9,r3
4008f4a8:	2811883a 	mov	r8,r5
4008f4ac:	200f883a 	mov	r7,r4
4008f4b0:	42800017 	ldw	r10,0(r8)
4008f4b4:	4a400104 	addi	r9,r9,4
4008f4b8:	39ffff04 	addi	r7,r7,-4
4008f4bc:	4abfff15 	stw	r10,-4(r9)
4008f4c0:	42000104 	addi	r8,r8,4
4008f4c4:	59fffa36 	bltu	r11,r7,4008f4b0 <__alt_mem_epcs+0xfff4e4b0>
4008f4c8:	213fff04 	addi	r4,r4,-4
4008f4cc:	2008d0ba 	srli	r4,r4,2
4008f4d0:	318000cc 	andi	r6,r6,3
4008f4d4:	21000044 	addi	r4,r4,1
4008f4d8:	2109883a 	add	r4,r4,r4
4008f4dc:	2109883a 	add	r4,r4,r4
4008f4e0:	1907883a 	add	r3,r3,r4
4008f4e4:	290b883a 	add	r5,r5,r4
4008f4e8:	30000626 	beq	r6,zero,4008f504 <memcpy+0x114>
4008f4ec:	198d883a 	add	r6,r3,r6
4008f4f0:	29c00003 	ldbu	r7,0(r5)
4008f4f4:	18c00044 	addi	r3,r3,1
4008f4f8:	29400044 	addi	r5,r5,1
4008f4fc:	19ffffc5 	stb	r7,-1(r3)
4008f500:	19bffb1e 	bne	r3,r6,4008f4f0 <__alt_mem_epcs+0xfff4e4f0>
4008f504:	dc000017 	ldw	r16,0(sp)
4008f508:	dec00104 	addi	sp,sp,4
4008f50c:	f800283a 	ret
4008f510:	2007883a 	mov	r3,r4
4008f514:	003ff406 	br	4008f4e8 <__alt_mem_epcs+0xfff4e4e8>
4008f518:	2007883a 	mov	r3,r4
4008f51c:	003ff306 	br	4008f4ec <__alt_mem_epcs+0xfff4e4ec>
4008f520:	200d883a 	mov	r6,r4
4008f524:	003ff006 	br	4008f4e8 <__alt_mem_epcs+0xfff4e4e8>

4008f528 <memmove>:
4008f528:	2005883a 	mov	r2,r4
4008f52c:	29000b2e 	bgeu	r5,r4,4008f55c <memmove+0x34>
4008f530:	298f883a 	add	r7,r5,r6
4008f534:	21c0092e 	bgeu	r4,r7,4008f55c <memmove+0x34>
4008f538:	2187883a 	add	r3,r4,r6
4008f53c:	198bc83a 	sub	r5,r3,r6
4008f540:	30004b26 	beq	r6,zero,4008f670 <memmove+0x148>
4008f544:	39ffffc4 	addi	r7,r7,-1
4008f548:	39000003 	ldbu	r4,0(r7)
4008f54c:	18ffffc4 	addi	r3,r3,-1
4008f550:	19000005 	stb	r4,0(r3)
4008f554:	197ffb1e 	bne	r3,r5,4008f544 <__alt_mem_epcs+0xfff4e544>
4008f558:	f800283a 	ret
4008f55c:	00c003c4 	movi	r3,15
4008f560:	1980412e 	bgeu	r3,r6,4008f668 <memmove+0x140>
4008f564:	1146b03a 	or	r3,r2,r5
4008f568:	18c000cc 	andi	r3,r3,3
4008f56c:	1800411e 	bne	r3,zero,4008f674 <memmove+0x14c>
4008f570:	33fffc04 	addi	r15,r6,-16
4008f574:	781ed13a 	srli	r15,r15,4
4008f578:	28c00104 	addi	r3,r5,4
4008f57c:	13400104 	addi	r13,r2,4
4008f580:	781c913a 	slli	r14,r15,4
4008f584:	2b000204 	addi	r12,r5,8
4008f588:	12c00204 	addi	r11,r2,8
4008f58c:	73800504 	addi	r14,r14,20
4008f590:	2a800304 	addi	r10,r5,12
4008f594:	12400304 	addi	r9,r2,12
4008f598:	2b9d883a 	add	r14,r5,r14
4008f59c:	2811883a 	mov	r8,r5
4008f5a0:	100f883a 	mov	r7,r2
4008f5a4:	41000017 	ldw	r4,0(r8)
4008f5a8:	39c00404 	addi	r7,r7,16
4008f5ac:	18c00404 	addi	r3,r3,16
4008f5b0:	393ffc15 	stw	r4,-16(r7)
4008f5b4:	193ffc17 	ldw	r4,-16(r3)
4008f5b8:	6b400404 	addi	r13,r13,16
4008f5bc:	5ac00404 	addi	r11,r11,16
4008f5c0:	693ffc15 	stw	r4,-16(r13)
4008f5c4:	61000017 	ldw	r4,0(r12)
4008f5c8:	4a400404 	addi	r9,r9,16
4008f5cc:	42000404 	addi	r8,r8,16
4008f5d0:	593ffc15 	stw	r4,-16(r11)
4008f5d4:	51000017 	ldw	r4,0(r10)
4008f5d8:	63000404 	addi	r12,r12,16
4008f5dc:	52800404 	addi	r10,r10,16
4008f5e0:	493ffc15 	stw	r4,-16(r9)
4008f5e4:	1bbfef1e 	bne	r3,r14,4008f5a4 <__alt_mem_epcs+0xfff4e5a4>
4008f5e8:	79000044 	addi	r4,r15,1
4008f5ec:	2008913a 	slli	r4,r4,4
4008f5f0:	328003cc 	andi	r10,r6,15
4008f5f4:	02c000c4 	movi	r11,3
4008f5f8:	1107883a 	add	r3,r2,r4
4008f5fc:	290b883a 	add	r5,r5,r4
4008f600:	5a801e2e 	bgeu	r11,r10,4008f67c <memmove+0x154>
4008f604:	1813883a 	mov	r9,r3
4008f608:	2811883a 	mov	r8,r5
4008f60c:	500f883a 	mov	r7,r10
4008f610:	41000017 	ldw	r4,0(r8)
4008f614:	4a400104 	addi	r9,r9,4
4008f618:	39ffff04 	addi	r7,r7,-4
4008f61c:	493fff15 	stw	r4,-4(r9)
4008f620:	42000104 	addi	r8,r8,4
4008f624:	59fffa36 	bltu	r11,r7,4008f610 <__alt_mem_epcs+0xfff4e610>
4008f628:	513fff04 	addi	r4,r10,-4
4008f62c:	2008d0ba 	srli	r4,r4,2
4008f630:	318000cc 	andi	r6,r6,3
4008f634:	21000044 	addi	r4,r4,1
4008f638:	2109883a 	add	r4,r4,r4
4008f63c:	2109883a 	add	r4,r4,r4
4008f640:	1907883a 	add	r3,r3,r4
4008f644:	290b883a 	add	r5,r5,r4
4008f648:	30000926 	beq	r6,zero,4008f670 <memmove+0x148>
4008f64c:	198d883a 	add	r6,r3,r6
4008f650:	29c00003 	ldbu	r7,0(r5)
4008f654:	18c00044 	addi	r3,r3,1
4008f658:	29400044 	addi	r5,r5,1
4008f65c:	19ffffc5 	stb	r7,-1(r3)
4008f660:	19bffb1e 	bne	r3,r6,4008f650 <__alt_mem_epcs+0xfff4e650>
4008f664:	f800283a 	ret
4008f668:	1007883a 	mov	r3,r2
4008f66c:	003ff606 	br	4008f648 <__alt_mem_epcs+0xfff4e648>
4008f670:	f800283a 	ret
4008f674:	1007883a 	mov	r3,r2
4008f678:	003ff406 	br	4008f64c <__alt_mem_epcs+0xfff4e64c>
4008f67c:	500d883a 	mov	r6,r10
4008f680:	003ff106 	br	4008f648 <__alt_mem_epcs+0xfff4e648>

4008f684 <memset>:
4008f684:	20c000cc 	andi	r3,r4,3
4008f688:	2005883a 	mov	r2,r4
4008f68c:	18004326 	beq	r3,zero,4008f79c <memset+0x118>
4008f690:	31ffffc4 	addi	r7,r6,-1
4008f694:	30004026 	beq	r6,zero,4008f798 <memset+0x114>
4008f698:	2813883a 	mov	r9,r5
4008f69c:	200d883a 	mov	r6,r4
4008f6a0:	2007883a 	mov	r3,r4
4008f6a4:	00000406 	br	4008f6b8 <memset+0x34>
4008f6a8:	3a3fffc4 	addi	r8,r7,-1
4008f6ac:	31800044 	addi	r6,r6,1
4008f6b0:	38003926 	beq	r7,zero,4008f798 <memset+0x114>
4008f6b4:	400f883a 	mov	r7,r8
4008f6b8:	18c00044 	addi	r3,r3,1
4008f6bc:	32400005 	stb	r9,0(r6)
4008f6c0:	1a0000cc 	andi	r8,r3,3
4008f6c4:	403ff81e 	bne	r8,zero,4008f6a8 <__alt_mem_epcs+0xfff4e6a8>
4008f6c8:	010000c4 	movi	r4,3
4008f6cc:	21c02d2e 	bgeu	r4,r7,4008f784 <memset+0x100>
4008f6d0:	29803fcc 	andi	r6,r5,255
4008f6d4:	3008923a 	slli	r4,r6,8
4008f6d8:	218cb03a 	or	r6,r4,r6
4008f6dc:	3008943a 	slli	r4,r6,16
4008f6e0:	218cb03a 	or	r6,r4,r6
4008f6e4:	010003c4 	movi	r4,15
4008f6e8:	21c0182e 	bgeu	r4,r7,4008f74c <memset+0xc8>
4008f6ec:	3b3ffc04 	addi	r12,r7,-16
4008f6f0:	6018d13a 	srli	r12,r12,4
4008f6f4:	1a000104 	addi	r8,r3,4
4008f6f8:	1ac00204 	addi	r11,r3,8
4008f6fc:	6008913a 	slli	r4,r12,4
4008f700:	1a800304 	addi	r10,r3,12
4008f704:	1813883a 	mov	r9,r3
4008f708:	21000504 	addi	r4,r4,20
4008f70c:	1909883a 	add	r4,r3,r4
4008f710:	49800015 	stw	r6,0(r9)
4008f714:	41800015 	stw	r6,0(r8)
4008f718:	59800015 	stw	r6,0(r11)
4008f71c:	51800015 	stw	r6,0(r10)
4008f720:	42000404 	addi	r8,r8,16
4008f724:	4a400404 	addi	r9,r9,16
4008f728:	5ac00404 	addi	r11,r11,16
4008f72c:	52800404 	addi	r10,r10,16
4008f730:	413ff71e 	bne	r8,r4,4008f710 <__alt_mem_epcs+0xfff4e710>
4008f734:	63000044 	addi	r12,r12,1
4008f738:	6018913a 	slli	r12,r12,4
4008f73c:	39c003cc 	andi	r7,r7,15
4008f740:	010000c4 	movi	r4,3
4008f744:	1b07883a 	add	r3,r3,r12
4008f748:	21c00e2e 	bgeu	r4,r7,4008f784 <memset+0x100>
4008f74c:	1813883a 	mov	r9,r3
4008f750:	3811883a 	mov	r8,r7
4008f754:	010000c4 	movi	r4,3
4008f758:	49800015 	stw	r6,0(r9)
4008f75c:	423fff04 	addi	r8,r8,-4
4008f760:	4a400104 	addi	r9,r9,4
4008f764:	223ffc36 	bltu	r4,r8,4008f758 <__alt_mem_epcs+0xfff4e758>
4008f768:	393fff04 	addi	r4,r7,-4
4008f76c:	2008d0ba 	srli	r4,r4,2
4008f770:	39c000cc 	andi	r7,r7,3
4008f774:	21000044 	addi	r4,r4,1
4008f778:	2109883a 	add	r4,r4,r4
4008f77c:	2109883a 	add	r4,r4,r4
4008f780:	1907883a 	add	r3,r3,r4
4008f784:	38000426 	beq	r7,zero,4008f798 <memset+0x114>
4008f788:	19cf883a 	add	r7,r3,r7
4008f78c:	19400005 	stb	r5,0(r3)
4008f790:	18c00044 	addi	r3,r3,1
4008f794:	19fffd1e 	bne	r3,r7,4008f78c <__alt_mem_epcs+0xfff4e78c>
4008f798:	f800283a 	ret
4008f79c:	2007883a 	mov	r3,r4
4008f7a0:	300f883a 	mov	r7,r6
4008f7a4:	003fc806 	br	4008f6c8 <__alt_mem_epcs+0xfff4e6c8>

4008f7a8 <_Balloc>:
4008f7a8:	20801317 	ldw	r2,76(r4)
4008f7ac:	defffc04 	addi	sp,sp,-16
4008f7b0:	dc400115 	stw	r17,4(sp)
4008f7b4:	dc000015 	stw	r16,0(sp)
4008f7b8:	dfc00315 	stw	ra,12(sp)
4008f7bc:	dc800215 	stw	r18,8(sp)
4008f7c0:	2023883a 	mov	r17,r4
4008f7c4:	2821883a 	mov	r16,r5
4008f7c8:	10000f26 	beq	r2,zero,4008f808 <_Balloc+0x60>
4008f7cc:	8407883a 	add	r3,r16,r16
4008f7d0:	18c7883a 	add	r3,r3,r3
4008f7d4:	10c7883a 	add	r3,r2,r3
4008f7d8:	18800017 	ldw	r2,0(r3)
4008f7dc:	10001126 	beq	r2,zero,4008f824 <_Balloc+0x7c>
4008f7e0:	11000017 	ldw	r4,0(r2)
4008f7e4:	19000015 	stw	r4,0(r3)
4008f7e8:	10000415 	stw	zero,16(r2)
4008f7ec:	10000315 	stw	zero,12(r2)
4008f7f0:	dfc00317 	ldw	ra,12(sp)
4008f7f4:	dc800217 	ldw	r18,8(sp)
4008f7f8:	dc400117 	ldw	r17,4(sp)
4008f7fc:	dc000017 	ldw	r16,0(sp)
4008f800:	dec00404 	addi	sp,sp,16
4008f804:	f800283a 	ret
4008f808:	01400104 	movi	r5,4
4008f80c:	01800844 	movi	r6,33
4008f810:	00927980 	call	40092798 <_calloc_r>
4008f814:	88801315 	stw	r2,76(r17)
4008f818:	103fec1e 	bne	r2,zero,4008f7cc <__alt_mem_epcs+0xfff4e7cc>
4008f81c:	0005883a 	mov	r2,zero
4008f820:	003ff306 	br	4008f7f0 <__alt_mem_epcs+0xfff4e7f0>
4008f824:	01400044 	movi	r5,1
4008f828:	2c24983a 	sll	r18,r5,r16
4008f82c:	8809883a 	mov	r4,r17
4008f830:	91800144 	addi	r6,r18,5
4008f834:	318d883a 	add	r6,r6,r6
4008f838:	318d883a 	add	r6,r6,r6
4008f83c:	00927980 	call	40092798 <_calloc_r>
4008f840:	103ff626 	beq	r2,zero,4008f81c <__alt_mem_epcs+0xfff4e81c>
4008f844:	14000115 	stw	r16,4(r2)
4008f848:	14800215 	stw	r18,8(r2)
4008f84c:	003fe606 	br	4008f7e8 <__alt_mem_epcs+0xfff4e7e8>

4008f850 <_Bfree>:
4008f850:	28000826 	beq	r5,zero,4008f874 <_Bfree+0x24>
4008f854:	28c00117 	ldw	r3,4(r5)
4008f858:	20801317 	ldw	r2,76(r4)
4008f85c:	18c7883a 	add	r3,r3,r3
4008f860:	18c7883a 	add	r3,r3,r3
4008f864:	10c5883a 	add	r2,r2,r3
4008f868:	10c00017 	ldw	r3,0(r2)
4008f86c:	28c00015 	stw	r3,0(r5)
4008f870:	11400015 	stw	r5,0(r2)
4008f874:	f800283a 	ret

4008f878 <__multadd>:
4008f878:	defffa04 	addi	sp,sp,-24
4008f87c:	dc000115 	stw	r16,4(sp)
4008f880:	2c000417 	ldw	r16,16(r5)
4008f884:	dc800315 	stw	r18,12(sp)
4008f888:	dc400215 	stw	r17,8(sp)
4008f88c:	dfc00515 	stw	ra,20(sp)
4008f890:	dcc00415 	stw	r19,16(sp)
4008f894:	2823883a 	mov	r17,r5
4008f898:	2025883a 	mov	r18,r4
4008f89c:	2a400504 	addi	r9,r5,20
4008f8a0:	0015883a 	mov	r10,zero
4008f8a4:	4a000017 	ldw	r8,0(r9)
4008f8a8:	4a400104 	addi	r9,r9,4
4008f8ac:	52800044 	addi	r10,r10,1
4008f8b0:	40ffffcc 	andi	r3,r8,65535
4008f8b4:	1987383a 	mul	r3,r3,r6
4008f8b8:	4010d43a 	srli	r8,r8,16
4008f8bc:	19cf883a 	add	r7,r3,r7
4008f8c0:	4191383a 	mul	r8,r8,r6
4008f8c4:	3816d43a 	srli	r11,r7,16
4008f8c8:	38ffffcc 	andi	r3,r7,65535
4008f8cc:	5a0f883a 	add	r7,r11,r8
4008f8d0:	3810943a 	slli	r8,r7,16
4008f8d4:	380ed43a 	srli	r7,r7,16
4008f8d8:	40c7883a 	add	r3,r8,r3
4008f8dc:	48ffff15 	stw	r3,-4(r9)
4008f8e0:	543ff016 	blt	r10,r16,4008f8a4 <__alt_mem_epcs+0xfff4e8a4>
4008f8e4:	38000926 	beq	r7,zero,4008f90c <__multadd+0x94>
4008f8e8:	88800217 	ldw	r2,8(r17)
4008f8ec:	80800f0e 	bge	r16,r2,4008f92c <__multadd+0xb4>
4008f8f0:	80800144 	addi	r2,r16,5
4008f8f4:	1085883a 	add	r2,r2,r2
4008f8f8:	1085883a 	add	r2,r2,r2
4008f8fc:	8885883a 	add	r2,r17,r2
4008f900:	11c00015 	stw	r7,0(r2)
4008f904:	84000044 	addi	r16,r16,1
4008f908:	8c000415 	stw	r16,16(r17)
4008f90c:	8805883a 	mov	r2,r17
4008f910:	dfc00517 	ldw	ra,20(sp)
4008f914:	dcc00417 	ldw	r19,16(sp)
4008f918:	dc800317 	ldw	r18,12(sp)
4008f91c:	dc400217 	ldw	r17,8(sp)
4008f920:	dc000117 	ldw	r16,4(sp)
4008f924:	dec00604 	addi	sp,sp,24
4008f928:	f800283a 	ret
4008f92c:	89400117 	ldw	r5,4(r17)
4008f930:	9009883a 	mov	r4,r18
4008f934:	d9c00015 	stw	r7,0(sp)
4008f938:	29400044 	addi	r5,r5,1
4008f93c:	008f7a80 	call	4008f7a8 <_Balloc>
4008f940:	89800417 	ldw	r6,16(r17)
4008f944:	89400304 	addi	r5,r17,12
4008f948:	11000304 	addi	r4,r2,12
4008f94c:	31800084 	addi	r6,r6,2
4008f950:	318d883a 	add	r6,r6,r6
4008f954:	318d883a 	add	r6,r6,r6
4008f958:	1027883a 	mov	r19,r2
4008f95c:	008f3f00 	call	4008f3f0 <memcpy>
4008f960:	89000117 	ldw	r4,4(r17)
4008f964:	90c01317 	ldw	r3,76(r18)
4008f968:	d9c00017 	ldw	r7,0(sp)
4008f96c:	2109883a 	add	r4,r4,r4
4008f970:	2109883a 	add	r4,r4,r4
4008f974:	1907883a 	add	r3,r3,r4
4008f978:	18800017 	ldw	r2,0(r3)
4008f97c:	88800015 	stw	r2,0(r17)
4008f980:	1c400015 	stw	r17,0(r3)
4008f984:	9823883a 	mov	r17,r19
4008f988:	003fd906 	br	4008f8f0 <__alt_mem_epcs+0xfff4e8f0>

4008f98c <__s2b>:
4008f98c:	defff904 	addi	sp,sp,-28
4008f990:	dc400115 	stw	r17,4(sp)
4008f994:	dc000015 	stw	r16,0(sp)
4008f998:	2023883a 	mov	r17,r4
4008f99c:	2821883a 	mov	r16,r5
4008f9a0:	39000204 	addi	r4,r7,8
4008f9a4:	01400244 	movi	r5,9
4008f9a8:	dcc00315 	stw	r19,12(sp)
4008f9ac:	dc800215 	stw	r18,8(sp)
4008f9b0:	dfc00615 	stw	ra,24(sp)
4008f9b4:	dd400515 	stw	r21,20(sp)
4008f9b8:	dd000415 	stw	r20,16(sp)
4008f9bc:	3825883a 	mov	r18,r7
4008f9c0:	3027883a 	mov	r19,r6
4008f9c4:	0093a6c0 	call	40093a6c <__divsi3>
4008f9c8:	00c00044 	movi	r3,1
4008f9cc:	000b883a 	mov	r5,zero
4008f9d0:	1880030e 	bge	r3,r2,4008f9e0 <__s2b+0x54>
4008f9d4:	18c7883a 	add	r3,r3,r3
4008f9d8:	29400044 	addi	r5,r5,1
4008f9dc:	18bffd16 	blt	r3,r2,4008f9d4 <__alt_mem_epcs+0xfff4e9d4>
4008f9e0:	8809883a 	mov	r4,r17
4008f9e4:	008f7a80 	call	4008f7a8 <_Balloc>
4008f9e8:	d8c00717 	ldw	r3,28(sp)
4008f9ec:	10c00515 	stw	r3,20(r2)
4008f9f0:	00c00044 	movi	r3,1
4008f9f4:	10c00415 	stw	r3,16(r2)
4008f9f8:	00c00244 	movi	r3,9
4008f9fc:	1cc0210e 	bge	r3,r19,4008fa84 <__s2b+0xf8>
4008fa00:	80eb883a 	add	r21,r16,r3
4008fa04:	a829883a 	mov	r20,r21
4008fa08:	84e1883a 	add	r16,r16,r19
4008fa0c:	a1c00007 	ldb	r7,0(r20)
4008fa10:	8809883a 	mov	r4,r17
4008fa14:	a5000044 	addi	r20,r20,1
4008fa18:	100b883a 	mov	r5,r2
4008fa1c:	01800284 	movi	r6,10
4008fa20:	39fff404 	addi	r7,r7,-48
4008fa24:	008f8780 	call	4008f878 <__multadd>
4008fa28:	a43ff81e 	bne	r20,r16,4008fa0c <__alt_mem_epcs+0xfff4ea0c>
4008fa2c:	ace1883a 	add	r16,r21,r19
4008fa30:	843ffe04 	addi	r16,r16,-8
4008fa34:	9c800a0e 	bge	r19,r18,4008fa60 <__s2b+0xd4>
4008fa38:	94e5c83a 	sub	r18,r18,r19
4008fa3c:	84a5883a 	add	r18,r16,r18
4008fa40:	81c00007 	ldb	r7,0(r16)
4008fa44:	8809883a 	mov	r4,r17
4008fa48:	84000044 	addi	r16,r16,1
4008fa4c:	100b883a 	mov	r5,r2
4008fa50:	01800284 	movi	r6,10
4008fa54:	39fff404 	addi	r7,r7,-48
4008fa58:	008f8780 	call	4008f878 <__multadd>
4008fa5c:	84bff81e 	bne	r16,r18,4008fa40 <__alt_mem_epcs+0xfff4ea40>
4008fa60:	dfc00617 	ldw	ra,24(sp)
4008fa64:	dd400517 	ldw	r21,20(sp)
4008fa68:	dd000417 	ldw	r20,16(sp)
4008fa6c:	dcc00317 	ldw	r19,12(sp)
4008fa70:	dc800217 	ldw	r18,8(sp)
4008fa74:	dc400117 	ldw	r17,4(sp)
4008fa78:	dc000017 	ldw	r16,0(sp)
4008fa7c:	dec00704 	addi	sp,sp,28
4008fa80:	f800283a 	ret
4008fa84:	84000284 	addi	r16,r16,10
4008fa88:	1827883a 	mov	r19,r3
4008fa8c:	003fe906 	br	4008fa34 <__alt_mem_epcs+0xfff4ea34>

4008fa90 <__hi0bits>:
4008fa90:	20bfffec 	andhi	r2,r4,65535
4008fa94:	1000141e 	bne	r2,zero,4008fae8 <__hi0bits+0x58>
4008fa98:	2008943a 	slli	r4,r4,16
4008fa9c:	00800404 	movi	r2,16
4008faa0:	20ffc02c 	andhi	r3,r4,65280
4008faa4:	1800021e 	bne	r3,zero,4008fab0 <__hi0bits+0x20>
4008faa8:	2008923a 	slli	r4,r4,8
4008faac:	10800204 	addi	r2,r2,8
4008fab0:	20fc002c 	andhi	r3,r4,61440
4008fab4:	1800021e 	bne	r3,zero,4008fac0 <__hi0bits+0x30>
4008fab8:	2008913a 	slli	r4,r4,4
4008fabc:	10800104 	addi	r2,r2,4
4008fac0:	20f0002c 	andhi	r3,r4,49152
4008fac4:	1800031e 	bne	r3,zero,4008fad4 <__hi0bits+0x44>
4008fac8:	2109883a 	add	r4,r4,r4
4008facc:	10800084 	addi	r2,r2,2
4008fad0:	2109883a 	add	r4,r4,r4
4008fad4:	20000316 	blt	r4,zero,4008fae4 <__hi0bits+0x54>
4008fad8:	2110002c 	andhi	r4,r4,16384
4008fadc:	2000041e 	bne	r4,zero,4008faf0 <__hi0bits+0x60>
4008fae0:	00800804 	movi	r2,32
4008fae4:	f800283a 	ret
4008fae8:	0005883a 	mov	r2,zero
4008faec:	003fec06 	br	4008faa0 <__alt_mem_epcs+0xfff4eaa0>
4008faf0:	10800044 	addi	r2,r2,1
4008faf4:	f800283a 	ret

4008faf8 <__lo0bits>:
4008faf8:	20c00017 	ldw	r3,0(r4)
4008fafc:	188001cc 	andi	r2,r3,7
4008fb00:	10000826 	beq	r2,zero,4008fb24 <__lo0bits+0x2c>
4008fb04:	1880004c 	andi	r2,r3,1
4008fb08:	1000211e 	bne	r2,zero,4008fb90 <__lo0bits+0x98>
4008fb0c:	1880008c 	andi	r2,r3,2
4008fb10:	1000211e 	bne	r2,zero,4008fb98 <__lo0bits+0xa0>
4008fb14:	1806d0ba 	srli	r3,r3,2
4008fb18:	00800084 	movi	r2,2
4008fb1c:	20c00015 	stw	r3,0(r4)
4008fb20:	f800283a 	ret
4008fb24:	18bfffcc 	andi	r2,r3,65535
4008fb28:	10001326 	beq	r2,zero,4008fb78 <__lo0bits+0x80>
4008fb2c:	0005883a 	mov	r2,zero
4008fb30:	19403fcc 	andi	r5,r3,255
4008fb34:	2800021e 	bne	r5,zero,4008fb40 <__lo0bits+0x48>
4008fb38:	1806d23a 	srli	r3,r3,8
4008fb3c:	10800204 	addi	r2,r2,8
4008fb40:	194003cc 	andi	r5,r3,15
4008fb44:	2800021e 	bne	r5,zero,4008fb50 <__lo0bits+0x58>
4008fb48:	1806d13a 	srli	r3,r3,4
4008fb4c:	10800104 	addi	r2,r2,4
4008fb50:	194000cc 	andi	r5,r3,3
4008fb54:	2800021e 	bne	r5,zero,4008fb60 <__lo0bits+0x68>
4008fb58:	1806d0ba 	srli	r3,r3,2
4008fb5c:	10800084 	addi	r2,r2,2
4008fb60:	1940004c 	andi	r5,r3,1
4008fb64:	2800081e 	bne	r5,zero,4008fb88 <__lo0bits+0x90>
4008fb68:	1806d07a 	srli	r3,r3,1
4008fb6c:	1800051e 	bne	r3,zero,4008fb84 <__lo0bits+0x8c>
4008fb70:	00800804 	movi	r2,32
4008fb74:	f800283a 	ret
4008fb78:	1806d43a 	srli	r3,r3,16
4008fb7c:	00800404 	movi	r2,16
4008fb80:	003feb06 	br	4008fb30 <__alt_mem_epcs+0xfff4eb30>
4008fb84:	10800044 	addi	r2,r2,1
4008fb88:	20c00015 	stw	r3,0(r4)
4008fb8c:	f800283a 	ret
4008fb90:	0005883a 	mov	r2,zero
4008fb94:	f800283a 	ret
4008fb98:	1806d07a 	srli	r3,r3,1
4008fb9c:	00800044 	movi	r2,1
4008fba0:	20c00015 	stw	r3,0(r4)
4008fba4:	f800283a 	ret

4008fba8 <__i2b>:
4008fba8:	defffd04 	addi	sp,sp,-12
4008fbac:	dc000015 	stw	r16,0(sp)
4008fbb0:	04000044 	movi	r16,1
4008fbb4:	dc400115 	stw	r17,4(sp)
4008fbb8:	2823883a 	mov	r17,r5
4008fbbc:	800b883a 	mov	r5,r16
4008fbc0:	dfc00215 	stw	ra,8(sp)
4008fbc4:	008f7a80 	call	4008f7a8 <_Balloc>
4008fbc8:	14400515 	stw	r17,20(r2)
4008fbcc:	14000415 	stw	r16,16(r2)
4008fbd0:	dfc00217 	ldw	ra,8(sp)
4008fbd4:	dc400117 	ldw	r17,4(sp)
4008fbd8:	dc000017 	ldw	r16,0(sp)
4008fbdc:	dec00304 	addi	sp,sp,12
4008fbe0:	f800283a 	ret

4008fbe4 <__multiply>:
4008fbe4:	defffa04 	addi	sp,sp,-24
4008fbe8:	dcc00315 	stw	r19,12(sp)
4008fbec:	dc800215 	stw	r18,8(sp)
4008fbf0:	2cc00417 	ldw	r19,16(r5)
4008fbf4:	34800417 	ldw	r18,16(r6)
4008fbf8:	dd000415 	stw	r20,16(sp)
4008fbfc:	dc400115 	stw	r17,4(sp)
4008fc00:	dfc00515 	stw	ra,20(sp)
4008fc04:	dc000015 	stw	r16,0(sp)
4008fc08:	2829883a 	mov	r20,r5
4008fc0c:	3023883a 	mov	r17,r6
4008fc10:	9c807016 	blt	r19,r18,4008fdd4 <__multiply+0x1f0>
4008fc14:	9005883a 	mov	r2,r18
4008fc18:	9825883a 	mov	r18,r19
4008fc1c:	1027883a 	mov	r19,r2
4008fc20:	a0800217 	ldw	r2,8(r20)
4008fc24:	94e1883a 	add	r16,r18,r19
4008fc28:	a1400117 	ldw	r5,4(r20)
4008fc2c:	1400010e 	bge	r2,r16,4008fc34 <__multiply+0x50>
4008fc30:	29400044 	addi	r5,r5,1
4008fc34:	008f7a80 	call	4008f7a8 <_Balloc>
4008fc38:	8417883a 	add	r11,r16,r16
4008fc3c:	13000504 	addi	r12,r2,20
4008fc40:	5ad7883a 	add	r11,r11,r11
4008fc44:	62d7883a 	add	r11,r12,r11
4008fc48:	6007883a 	mov	r3,r12
4008fc4c:	62c0032e 	bgeu	r12,r11,4008fc5c <__multiply+0x78>
4008fc50:	18000015 	stw	zero,0(r3)
4008fc54:	18c00104 	addi	r3,r3,4
4008fc58:	1afffd36 	bltu	r3,r11,4008fc50 <__alt_mem_epcs+0xfff4ec50>
4008fc5c:	9ce7883a 	add	r19,r19,r19
4008fc60:	94a5883a 	add	r18,r18,r18
4008fc64:	89800504 	addi	r6,r17,20
4008fc68:	9ce7883a 	add	r19,r19,r19
4008fc6c:	a3800504 	addi	r14,r20,20
4008fc70:	94a5883a 	add	r18,r18,r18
4008fc74:	34db883a 	add	r13,r6,r19
4008fc78:	7495883a 	add	r10,r14,r18
4008fc7c:	3340422e 	bgeu	r6,r13,4008fd88 <__multiply+0x1a4>
4008fc80:	34400017 	ldw	r17,0(r6)
4008fc84:	8cbfffcc 	andi	r18,r17,65535
4008fc88:	90001b26 	beq	r18,zero,4008fcf8 <__multiply+0x114>
4008fc8c:	6013883a 	mov	r9,r12
4008fc90:	7023883a 	mov	r17,r14
4008fc94:	0011883a 	mov	r8,zero
4008fc98:	88c00017 	ldw	r3,0(r17)
4008fc9c:	4bc00017 	ldw	r15,0(r9)
4008fca0:	8c400104 	addi	r17,r17,4
4008fca4:	19ffffcc 	andi	r7,r3,65535
4008fca8:	3c8f383a 	mul	r7,r7,r18
4008fcac:	1808d43a 	srli	r4,r3,16
4008fcb0:	797fffcc 	andi	r5,r15,65535
4008fcb4:	29cb883a 	add	r5,r5,r7
4008fcb8:	2a0b883a 	add	r5,r5,r8
4008fcbc:	2489383a 	mul	r4,r4,r18
4008fcc0:	7806d43a 	srli	r3,r15,16
4008fcc4:	2810d43a 	srli	r8,r5,16
4008fcc8:	297fffcc 	andi	r5,r5,65535
4008fccc:	1907883a 	add	r3,r3,r4
4008fcd0:	1a07883a 	add	r3,r3,r8
4008fcd4:	1808943a 	slli	r4,r3,16
4008fcd8:	480f883a 	mov	r7,r9
4008fcdc:	1810d43a 	srli	r8,r3,16
4008fce0:	214ab03a 	or	r5,r4,r5
4008fce4:	49400015 	stw	r5,0(r9)
4008fce8:	4a400104 	addi	r9,r9,4
4008fcec:	8abfea36 	bltu	r17,r10,4008fc98 <__alt_mem_epcs+0xfff4ec98>
4008fcf0:	3a000115 	stw	r8,4(r7)
4008fcf4:	34400017 	ldw	r17,0(r6)
4008fcf8:	8822d43a 	srli	r17,r17,16
4008fcfc:	88001f26 	beq	r17,zero,4008fd7c <__multiply+0x198>
4008fd00:	60c00017 	ldw	r3,0(r12)
4008fd04:	7013883a 	mov	r9,r14
4008fd08:	601f883a 	mov	r15,r12
4008fd0c:	1811883a 	mov	r8,r3
4008fd10:	6027883a 	mov	r19,r12
4008fd14:	000f883a 	mov	r7,zero
4008fd18:	00000106 	br	4008fd20 <__multiply+0x13c>
4008fd1c:	9027883a 	mov	r19,r18
4008fd20:	4940000b 	ldhu	r5,0(r9)
4008fd24:	4010d43a 	srli	r8,r8,16
4008fd28:	193fffcc 	andi	r4,r3,65535
4008fd2c:	2c4b383a 	mul	r5,r5,r17
4008fd30:	7bc00104 	addi	r15,r15,4
4008fd34:	4a400104 	addi	r9,r9,4
4008fd38:	2a0b883a 	add	r5,r5,r8
4008fd3c:	29cb883a 	add	r5,r5,r7
4008fd40:	2806943a 	slli	r3,r5,16
4008fd44:	9c800104 	addi	r18,r19,4
4008fd48:	280ad43a 	srli	r5,r5,16
4008fd4c:	1908b03a 	or	r4,r3,r4
4008fd50:	793fff15 	stw	r4,-4(r15)
4008fd54:	48ffff17 	ldw	r3,-4(r9)
4008fd58:	92000017 	ldw	r8,0(r18)
4008fd5c:	1806d43a 	srli	r3,r3,16
4008fd60:	413fffcc 	andi	r4,r8,65535
4008fd64:	1c47383a 	mul	r3,r3,r17
4008fd68:	1907883a 	add	r3,r3,r4
4008fd6c:	1947883a 	add	r3,r3,r5
4008fd70:	180ed43a 	srli	r7,r3,16
4008fd74:	4abfe936 	bltu	r9,r10,4008fd1c <__alt_mem_epcs+0xfff4ed1c>
4008fd78:	98c00115 	stw	r3,4(r19)
4008fd7c:	31800104 	addi	r6,r6,4
4008fd80:	63000104 	addi	r12,r12,4
4008fd84:	337fbe36 	bltu	r6,r13,4008fc80 <__alt_mem_epcs+0xfff4ec80>
4008fd88:	0400090e 	bge	zero,r16,4008fdb0 <__multiply+0x1cc>
4008fd8c:	58ffff17 	ldw	r3,-4(r11)
4008fd90:	5affff04 	addi	r11,r11,-4
4008fd94:	18000326 	beq	r3,zero,4008fda4 <__multiply+0x1c0>
4008fd98:	00000506 	br	4008fdb0 <__multiply+0x1cc>
4008fd9c:	58c00017 	ldw	r3,0(r11)
4008fda0:	1800031e 	bne	r3,zero,4008fdb0 <__multiply+0x1cc>
4008fda4:	843fffc4 	addi	r16,r16,-1
4008fda8:	5affff04 	addi	r11,r11,-4
4008fdac:	803ffb1e 	bne	r16,zero,4008fd9c <__alt_mem_epcs+0xfff4ed9c>
4008fdb0:	14000415 	stw	r16,16(r2)
4008fdb4:	dfc00517 	ldw	ra,20(sp)
4008fdb8:	dd000417 	ldw	r20,16(sp)
4008fdbc:	dcc00317 	ldw	r19,12(sp)
4008fdc0:	dc800217 	ldw	r18,8(sp)
4008fdc4:	dc400117 	ldw	r17,4(sp)
4008fdc8:	dc000017 	ldw	r16,0(sp)
4008fdcc:	dec00604 	addi	sp,sp,24
4008fdd0:	f800283a 	ret
4008fdd4:	3029883a 	mov	r20,r6
4008fdd8:	2823883a 	mov	r17,r5
4008fddc:	003f9006 	br	4008fc20 <__alt_mem_epcs+0xfff4ec20>

4008fde0 <__pow5mult>:
4008fde0:	defffa04 	addi	sp,sp,-24
4008fde4:	dcc00315 	stw	r19,12(sp)
4008fde8:	dc800215 	stw	r18,8(sp)
4008fdec:	dc000015 	stw	r16,0(sp)
4008fdf0:	dfc00515 	stw	ra,20(sp)
4008fdf4:	dd000415 	stw	r20,16(sp)
4008fdf8:	dc400115 	stw	r17,4(sp)
4008fdfc:	308000cc 	andi	r2,r6,3
4008fe00:	3021883a 	mov	r16,r6
4008fe04:	2027883a 	mov	r19,r4
4008fe08:	2825883a 	mov	r18,r5
4008fe0c:	10002e1e 	bne	r2,zero,4008fec8 <__pow5mult+0xe8>
4008fe10:	8021d0ba 	srai	r16,r16,2
4008fe14:	80001a26 	beq	r16,zero,4008fe80 <__pow5mult+0xa0>
4008fe18:	9c401217 	ldw	r17,72(r19)
4008fe1c:	8800061e 	bne	r17,zero,4008fe38 <__pow5mult+0x58>
4008fe20:	00003406 	br	4008fef4 <__pow5mult+0x114>
4008fe24:	8021d07a 	srai	r16,r16,1
4008fe28:	80001526 	beq	r16,zero,4008fe80 <__pow5mult+0xa0>
4008fe2c:	88800017 	ldw	r2,0(r17)
4008fe30:	10001c26 	beq	r2,zero,4008fea4 <__pow5mult+0xc4>
4008fe34:	1023883a 	mov	r17,r2
4008fe38:	80c0004c 	andi	r3,r16,1
4008fe3c:	183ff926 	beq	r3,zero,4008fe24 <__alt_mem_epcs+0xfff4ee24>
4008fe40:	900b883a 	mov	r5,r18
4008fe44:	880d883a 	mov	r6,r17
4008fe48:	9809883a 	mov	r4,r19
4008fe4c:	008fbe40 	call	4008fbe4 <__multiply>
4008fe50:	90001b26 	beq	r18,zero,4008fec0 <__pow5mult+0xe0>
4008fe54:	91c00117 	ldw	r7,4(r18)
4008fe58:	98c01317 	ldw	r3,76(r19)
4008fe5c:	8021d07a 	srai	r16,r16,1
4008fe60:	39cf883a 	add	r7,r7,r7
4008fe64:	39cf883a 	add	r7,r7,r7
4008fe68:	19c7883a 	add	r3,r3,r7
4008fe6c:	19000017 	ldw	r4,0(r3)
4008fe70:	91000015 	stw	r4,0(r18)
4008fe74:	1c800015 	stw	r18,0(r3)
4008fe78:	1025883a 	mov	r18,r2
4008fe7c:	803feb1e 	bne	r16,zero,4008fe2c <__alt_mem_epcs+0xfff4ee2c>
4008fe80:	9005883a 	mov	r2,r18
4008fe84:	dfc00517 	ldw	ra,20(sp)
4008fe88:	dd000417 	ldw	r20,16(sp)
4008fe8c:	dcc00317 	ldw	r19,12(sp)
4008fe90:	dc800217 	ldw	r18,8(sp)
4008fe94:	dc400117 	ldw	r17,4(sp)
4008fe98:	dc000017 	ldw	r16,0(sp)
4008fe9c:	dec00604 	addi	sp,sp,24
4008fea0:	f800283a 	ret
4008fea4:	9809883a 	mov	r4,r19
4008fea8:	880b883a 	mov	r5,r17
4008feac:	880d883a 	mov	r6,r17
4008feb0:	008fbe40 	call	4008fbe4 <__multiply>
4008feb4:	88800015 	stw	r2,0(r17)
4008feb8:	10000015 	stw	zero,0(r2)
4008febc:	003fdd06 	br	4008fe34 <__alt_mem_epcs+0xfff4ee34>
4008fec0:	1025883a 	mov	r18,r2
4008fec4:	003fd706 	br	4008fe24 <__alt_mem_epcs+0xfff4ee24>
4008fec8:	10bfffc4 	addi	r2,r2,-1
4008fecc:	1085883a 	add	r2,r2,r2
4008fed0:	00d002b4 	movhi	r3,16394
4008fed4:	18e87704 	addi	r3,r3,-24100
4008fed8:	1085883a 	add	r2,r2,r2
4008fedc:	1885883a 	add	r2,r3,r2
4008fee0:	11800017 	ldw	r6,0(r2)
4008fee4:	000f883a 	mov	r7,zero
4008fee8:	008f8780 	call	4008f878 <__multadd>
4008feec:	1025883a 	mov	r18,r2
4008fef0:	003fc706 	br	4008fe10 <__alt_mem_epcs+0xfff4ee10>
4008fef4:	05000044 	movi	r20,1
4008fef8:	9809883a 	mov	r4,r19
4008fefc:	a00b883a 	mov	r5,r20
4008ff00:	008f7a80 	call	4008f7a8 <_Balloc>
4008ff04:	1023883a 	mov	r17,r2
4008ff08:	00809c44 	movi	r2,625
4008ff0c:	88800515 	stw	r2,20(r17)
4008ff10:	8d000415 	stw	r20,16(r17)
4008ff14:	9c401215 	stw	r17,72(r19)
4008ff18:	88000015 	stw	zero,0(r17)
4008ff1c:	003fc606 	br	4008fe38 <__alt_mem_epcs+0xfff4ee38>

4008ff20 <__lshift>:
4008ff20:	defff904 	addi	sp,sp,-28
4008ff24:	dd000415 	stw	r20,16(sp)
4008ff28:	dcc00315 	stw	r19,12(sp)
4008ff2c:	3029d17a 	srai	r20,r6,5
4008ff30:	2cc00417 	ldw	r19,16(r5)
4008ff34:	28800217 	ldw	r2,8(r5)
4008ff38:	dd400515 	stw	r21,20(sp)
4008ff3c:	a4e7883a 	add	r19,r20,r19
4008ff40:	dc800215 	stw	r18,8(sp)
4008ff44:	dc400115 	stw	r17,4(sp)
4008ff48:	dc000015 	stw	r16,0(sp)
4008ff4c:	dfc00615 	stw	ra,24(sp)
4008ff50:	9c000044 	addi	r16,r19,1
4008ff54:	2823883a 	mov	r17,r5
4008ff58:	302b883a 	mov	r21,r6
4008ff5c:	2025883a 	mov	r18,r4
4008ff60:	29400117 	ldw	r5,4(r5)
4008ff64:	1400030e 	bge	r2,r16,4008ff74 <__lshift+0x54>
4008ff68:	1085883a 	add	r2,r2,r2
4008ff6c:	29400044 	addi	r5,r5,1
4008ff70:	143ffd16 	blt	r2,r16,4008ff68 <__alt_mem_epcs+0xfff4ef68>
4008ff74:	9009883a 	mov	r4,r18
4008ff78:	008f7a80 	call	4008f7a8 <_Balloc>
4008ff7c:	11c00504 	addi	r7,r2,20
4008ff80:	0500090e 	bge	zero,r20,4008ffa8 <__lshift+0x88>
4008ff84:	3811883a 	mov	r8,r7
4008ff88:	0007883a 	mov	r3,zero
4008ff8c:	40000015 	stw	zero,0(r8)
4008ff90:	18c00044 	addi	r3,r3,1
4008ff94:	42000104 	addi	r8,r8,4
4008ff98:	1d3ffc1e 	bne	r3,r20,4008ff8c <__alt_mem_epcs+0xfff4ef8c>
4008ff9c:	18c7883a 	add	r3,r3,r3
4008ffa0:	18c7883a 	add	r3,r3,r3
4008ffa4:	38cf883a 	add	r7,r7,r3
4008ffa8:	89000417 	ldw	r4,16(r17)
4008ffac:	88c00504 	addi	r3,r17,20
4008ffb0:	a98007cc 	andi	r6,r21,31
4008ffb4:	2109883a 	add	r4,r4,r4
4008ffb8:	2109883a 	add	r4,r4,r4
4008ffbc:	1909883a 	add	r4,r3,r4
4008ffc0:	30002326 	beq	r6,zero,40090050 <__lshift+0x130>
4008ffc4:	01400804 	movi	r5,32
4008ffc8:	298bc83a 	sub	r5,r5,r6
4008ffcc:	0013883a 	mov	r9,zero
4008ffd0:	1a000017 	ldw	r8,0(r3)
4008ffd4:	3815883a 	mov	r10,r7
4008ffd8:	39c00104 	addi	r7,r7,4
4008ffdc:	4190983a 	sll	r8,r8,r6
4008ffe0:	18c00104 	addi	r3,r3,4
4008ffe4:	4a10b03a 	or	r8,r9,r8
4008ffe8:	3a3fff15 	stw	r8,-4(r7)
4008ffec:	1a3fff17 	ldw	r8,-4(r3)
4008fff0:	4152d83a 	srl	r9,r8,r5
4008fff4:	193ff636 	bltu	r3,r4,4008ffd0 <__alt_mem_epcs+0xfff4efd0>
4008fff8:	52400115 	stw	r9,4(r10)
4008fffc:	48000126 	beq	r9,zero,40090004 <__lshift+0xe4>
40090000:	9c000084 	addi	r16,r19,2
40090004:	89000117 	ldw	r4,4(r17)
40090008:	90c01317 	ldw	r3,76(r18)
4009000c:	843fffc4 	addi	r16,r16,-1
40090010:	2109883a 	add	r4,r4,r4
40090014:	2109883a 	add	r4,r4,r4
40090018:	1907883a 	add	r3,r3,r4
4009001c:	19000017 	ldw	r4,0(r3)
40090020:	14000415 	stw	r16,16(r2)
40090024:	89000015 	stw	r4,0(r17)
40090028:	1c400015 	stw	r17,0(r3)
4009002c:	dfc00617 	ldw	ra,24(sp)
40090030:	dd400517 	ldw	r21,20(sp)
40090034:	dd000417 	ldw	r20,16(sp)
40090038:	dcc00317 	ldw	r19,12(sp)
4009003c:	dc800217 	ldw	r18,8(sp)
40090040:	dc400117 	ldw	r17,4(sp)
40090044:	dc000017 	ldw	r16,0(sp)
40090048:	dec00704 	addi	sp,sp,28
4009004c:	f800283a 	ret
40090050:	19400017 	ldw	r5,0(r3)
40090054:	39c00104 	addi	r7,r7,4
40090058:	18c00104 	addi	r3,r3,4
4009005c:	397fff15 	stw	r5,-4(r7)
40090060:	193ffb36 	bltu	r3,r4,40090050 <__alt_mem_epcs+0xfff4f050>
40090064:	003fe706 	br	40090004 <__alt_mem_epcs+0xfff4f004>

40090068 <__mcmp>:
40090068:	20800417 	ldw	r2,16(r4)
4009006c:	28c00417 	ldw	r3,16(r5)
40090070:	10c5c83a 	sub	r2,r2,r3
40090074:	1000111e 	bne	r2,zero,400900bc <__mcmp+0x54>
40090078:	18c7883a 	add	r3,r3,r3
4009007c:	18c7883a 	add	r3,r3,r3
40090080:	21000504 	addi	r4,r4,20
40090084:	29400504 	addi	r5,r5,20
40090088:	20c5883a 	add	r2,r4,r3
4009008c:	28cb883a 	add	r5,r5,r3
40090090:	00000106 	br	40090098 <__mcmp+0x30>
40090094:	20800a2e 	bgeu	r4,r2,400900c0 <__mcmp+0x58>
40090098:	10bfff04 	addi	r2,r2,-4
4009009c:	297fff04 	addi	r5,r5,-4
400900a0:	11800017 	ldw	r6,0(r2)
400900a4:	28c00017 	ldw	r3,0(r5)
400900a8:	30fffa26 	beq	r6,r3,40090094 <__alt_mem_epcs+0xfff4f094>
400900ac:	30c00236 	bltu	r6,r3,400900b8 <__mcmp+0x50>
400900b0:	00800044 	movi	r2,1
400900b4:	f800283a 	ret
400900b8:	00bfffc4 	movi	r2,-1
400900bc:	f800283a 	ret
400900c0:	0005883a 	mov	r2,zero
400900c4:	f800283a 	ret

400900c8 <__mdiff>:
400900c8:	defffb04 	addi	sp,sp,-20
400900cc:	dc000015 	stw	r16,0(sp)
400900d0:	2821883a 	mov	r16,r5
400900d4:	dcc00315 	stw	r19,12(sp)
400900d8:	300b883a 	mov	r5,r6
400900dc:	2027883a 	mov	r19,r4
400900e0:	8009883a 	mov	r4,r16
400900e4:	dc800215 	stw	r18,8(sp)
400900e8:	dfc00415 	stw	ra,16(sp)
400900ec:	dc400115 	stw	r17,4(sp)
400900f0:	3025883a 	mov	r18,r6
400900f4:	00900680 	call	40090068 <__mcmp>
400900f8:	10005226 	beq	r2,zero,40090244 <__mdiff+0x17c>
400900fc:	10004c16 	blt	r2,zero,40090230 <__mdiff+0x168>
40090100:	0023883a 	mov	r17,zero
40090104:	81400117 	ldw	r5,4(r16)
40090108:	9809883a 	mov	r4,r19
4009010c:	008f7a80 	call	4008f7a8 <_Balloc>
40090110:	83400417 	ldw	r13,16(r16)
40090114:	93800417 	ldw	r14,16(r18)
40090118:	81000504 	addi	r4,r16,20
4009011c:	6b59883a 	add	r12,r13,r13
40090120:	739d883a 	add	r14,r14,r14
40090124:	6319883a 	add	r12,r12,r12
40090128:	91800504 	addi	r6,r18,20
4009012c:	739d883a 	add	r14,r14,r14
40090130:	14400315 	stw	r17,12(r2)
40090134:	2319883a 	add	r12,r4,r12
40090138:	339d883a 	add	r14,r6,r14
4009013c:	12400504 	addi	r9,r2,20
40090140:	0007883a 	mov	r3,zero
40090144:	22000017 	ldw	r8,0(r4)
40090148:	32800017 	ldw	r10,0(r6)
4009014c:	4ac00104 	addi	r11,r9,4
40090150:	41ffffcc 	andi	r7,r8,65535
40090154:	38c7883a 	add	r3,r7,r3
40090158:	51ffffcc 	andi	r7,r10,65535
4009015c:	19cfc83a 	sub	r7,r3,r7
40090160:	4010d43a 	srli	r8,r8,16
40090164:	5014d43a 	srli	r10,r10,16
40090168:	3807d43a 	srai	r3,r7,16
4009016c:	39ffffcc 	andi	r7,r7,65535
40090170:	4291c83a 	sub	r8,r8,r10
40090174:	40c7883a 	add	r3,r8,r3
40090178:	1810943a 	slli	r8,r3,16
4009017c:	31800104 	addi	r6,r6,4
40090180:	21000104 	addi	r4,r4,4
40090184:	41ceb03a 	or	r7,r8,r7
40090188:	49c00015 	stw	r7,0(r9)
4009018c:	1807d43a 	srai	r3,r3,16
40090190:	580b883a 	mov	r5,r11
40090194:	5813883a 	mov	r9,r11
40090198:	33bfea36 	bltu	r6,r14,40090144 <__alt_mem_epcs+0xfff4f144>
4009019c:	2011883a 	mov	r8,r4
400901a0:	2300152e 	bgeu	r4,r12,400901f8 <__mdiff+0x130>
400901a4:	21400017 	ldw	r5,0(r4)
400901a8:	4a400104 	addi	r9,r9,4
400901ac:	21000104 	addi	r4,r4,4
400901b0:	29ffffcc 	andi	r7,r5,65535
400901b4:	38c7883a 	add	r3,r7,r3
400901b8:	280ad43a 	srli	r5,r5,16
400901bc:	180dd43a 	srai	r6,r3,16
400901c0:	19ffffcc 	andi	r7,r3,65535
400901c4:	3147883a 	add	r3,r6,r5
400901c8:	180a943a 	slli	r5,r3,16
400901cc:	1807d43a 	srai	r3,r3,16
400901d0:	29ceb03a 	or	r7,r5,r7
400901d4:	49ffff15 	stw	r7,-4(r9)
400901d8:	233ff236 	bltu	r4,r12,400901a4 <__alt_mem_epcs+0xfff4f1a4>
400901dc:	0206303a 	nor	r3,zero,r8
400901e0:	1b07883a 	add	r3,r3,r12
400901e4:	1806d0ba 	srli	r3,r3,2
400901e8:	18c00044 	addi	r3,r3,1
400901ec:	18c7883a 	add	r3,r3,r3
400901f0:	18c7883a 	add	r3,r3,r3
400901f4:	58cb883a 	add	r5,r11,r3
400901f8:	28ffff04 	addi	r3,r5,-4
400901fc:	3800041e 	bne	r7,zero,40090210 <__mdiff+0x148>
40090200:	18ffff04 	addi	r3,r3,-4
40090204:	19000017 	ldw	r4,0(r3)
40090208:	6b7fffc4 	addi	r13,r13,-1
4009020c:	203ffc26 	beq	r4,zero,40090200 <__alt_mem_epcs+0xfff4f200>
40090210:	13400415 	stw	r13,16(r2)
40090214:	dfc00417 	ldw	ra,16(sp)
40090218:	dcc00317 	ldw	r19,12(sp)
4009021c:	dc800217 	ldw	r18,8(sp)
40090220:	dc400117 	ldw	r17,4(sp)
40090224:	dc000017 	ldw	r16,0(sp)
40090228:	dec00504 	addi	sp,sp,20
4009022c:	f800283a 	ret
40090230:	8005883a 	mov	r2,r16
40090234:	04400044 	movi	r17,1
40090238:	9021883a 	mov	r16,r18
4009023c:	1025883a 	mov	r18,r2
40090240:	003fb006 	br	40090104 <__alt_mem_epcs+0xfff4f104>
40090244:	9809883a 	mov	r4,r19
40090248:	000b883a 	mov	r5,zero
4009024c:	008f7a80 	call	4008f7a8 <_Balloc>
40090250:	00c00044 	movi	r3,1
40090254:	10c00415 	stw	r3,16(r2)
40090258:	10000515 	stw	zero,20(r2)
4009025c:	003fed06 	br	40090214 <__alt_mem_epcs+0xfff4f214>

40090260 <__ulp>:
40090260:	295ffc2c 	andhi	r5,r5,32752
40090264:	00bf3034 	movhi	r2,64704
40090268:	2887883a 	add	r3,r5,r2
4009026c:	00c0020e 	bge	zero,r3,40090278 <__ulp+0x18>
40090270:	0005883a 	mov	r2,zero
40090274:	f800283a 	ret
40090278:	00c7c83a 	sub	r3,zero,r3
4009027c:	180bd53a 	srai	r5,r3,20
40090280:	008004c4 	movi	r2,19
40090284:	11400a0e 	bge	r2,r5,400902b0 <__ulp+0x50>
40090288:	00800c84 	movi	r2,50
4009028c:	0007883a 	mov	r3,zero
40090290:	11400516 	blt	r2,r5,400902a8 <__ulp+0x48>
40090294:	00800cc4 	movi	r2,51
40090298:	114bc83a 	sub	r5,r2,r5
4009029c:	00800044 	movi	r2,1
400902a0:	1144983a 	sll	r2,r2,r5
400902a4:	f800283a 	ret
400902a8:	00800044 	movi	r2,1
400902ac:	f800283a 	ret
400902b0:	00800234 	movhi	r2,8
400902b4:	1147d83a 	sra	r3,r2,r5
400902b8:	0005883a 	mov	r2,zero
400902bc:	f800283a 	ret

400902c0 <__b2d>:
400902c0:	defffa04 	addi	sp,sp,-24
400902c4:	dc000015 	stw	r16,0(sp)
400902c8:	24000417 	ldw	r16,16(r4)
400902cc:	dc400115 	stw	r17,4(sp)
400902d0:	24400504 	addi	r17,r4,20
400902d4:	8421883a 	add	r16,r16,r16
400902d8:	8421883a 	add	r16,r16,r16
400902dc:	8c21883a 	add	r16,r17,r16
400902e0:	dc800215 	stw	r18,8(sp)
400902e4:	84bfff17 	ldw	r18,-4(r16)
400902e8:	dd000415 	stw	r20,16(sp)
400902ec:	dcc00315 	stw	r19,12(sp)
400902f0:	9009883a 	mov	r4,r18
400902f4:	2829883a 	mov	r20,r5
400902f8:	dfc00515 	stw	ra,20(sp)
400902fc:	008fa900 	call	4008fa90 <__hi0bits>
40090300:	00c00804 	movi	r3,32
40090304:	1887c83a 	sub	r3,r3,r2
40090308:	a0c00015 	stw	r3,0(r20)
4009030c:	00c00284 	movi	r3,10
40090310:	84ffff04 	addi	r19,r16,-4
40090314:	18801216 	blt	r3,r2,40090360 <__b2d+0xa0>
40090318:	014002c4 	movi	r5,11
4009031c:	2889c83a 	sub	r4,r5,r2
40090320:	9106d83a 	srl	r3,r18,r4
40090324:	18cffc34 	orhi	r3,r3,16368
40090328:	8cc0282e 	bgeu	r17,r19,400903cc <__b2d+0x10c>
4009032c:	817ffe17 	ldw	r5,-8(r16)
40090330:	290ad83a 	srl	r5,r5,r4
40090334:	10800544 	addi	r2,r2,21
40090338:	9084983a 	sll	r2,r18,r2
4009033c:	2884b03a 	or	r2,r5,r2
40090340:	dfc00517 	ldw	ra,20(sp)
40090344:	dd000417 	ldw	r20,16(sp)
40090348:	dcc00317 	ldw	r19,12(sp)
4009034c:	dc800217 	ldw	r18,8(sp)
40090350:	dc400117 	ldw	r17,4(sp)
40090354:	dc000017 	ldw	r16,0(sp)
40090358:	dec00604 	addi	sp,sp,24
4009035c:	f800283a 	ret
40090360:	113ffd44 	addi	r4,r2,-11
40090364:	8cc00f2e 	bgeu	r17,r19,400903a4 <__b2d+0xe4>
40090368:	81bffe04 	addi	r6,r16,-8
4009036c:	817ffe17 	ldw	r5,-8(r16)
40090370:	20001326 	beq	r4,zero,400903c0 <__b2d+0x100>
40090374:	00c00ac4 	movi	r3,43
40090378:	1885c83a 	sub	r2,r3,r2
4009037c:	2886d83a 	srl	r3,r5,r2
40090380:	9124983a 	sll	r18,r18,r4
40090384:	90e4b03a 	or	r18,r18,r3
40090388:	90cffc34 	orhi	r3,r18,16368
4009038c:	8980112e 	bgeu	r17,r6,400903d4 <__b2d+0x114>
40090390:	81bffd17 	ldw	r6,-12(r16)
40090394:	308cd83a 	srl	r6,r6,r2
40090398:	2904983a 	sll	r2,r5,r4
4009039c:	1184b03a 	or	r2,r2,r6
400903a0:	003fe706 	br	40090340 <__alt_mem_epcs+0xfff4f340>
400903a4:	20000526 	beq	r4,zero,400903bc <__b2d+0xfc>
400903a8:	9124983a 	sll	r18,r18,r4
400903ac:	000d883a 	mov	r6,zero
400903b0:	000b883a 	mov	r5,zero
400903b4:	90cffc34 	orhi	r3,r18,16368
400903b8:	003ff706 	br	40090398 <__alt_mem_epcs+0xfff4f398>
400903bc:	000b883a 	mov	r5,zero
400903c0:	90cffc34 	orhi	r3,r18,16368
400903c4:	2805883a 	mov	r2,r5
400903c8:	003fdd06 	br	40090340 <__alt_mem_epcs+0xfff4f340>
400903cc:	000b883a 	mov	r5,zero
400903d0:	003fd806 	br	40090334 <__alt_mem_epcs+0xfff4f334>
400903d4:	000d883a 	mov	r6,zero
400903d8:	003fef06 	br	40090398 <__alt_mem_epcs+0xfff4f398>

400903dc <__d2b>:
400903dc:	defff704 	addi	sp,sp,-36
400903e0:	dc000215 	stw	r16,8(sp)
400903e4:	3021883a 	mov	r16,r6
400903e8:	dc400315 	stw	r17,12(sp)
400903ec:	8022907a 	slli	r17,r16,1
400903f0:	dd400715 	stw	r21,28(sp)
400903f4:	282b883a 	mov	r21,r5
400903f8:	01400044 	movi	r5,1
400903fc:	dd000615 	stw	r20,24(sp)
40090400:	dcc00515 	stw	r19,20(sp)
40090404:	dc800415 	stw	r18,16(sp)
40090408:	dfc00815 	stw	ra,32(sp)
4009040c:	3829883a 	mov	r20,r7
40090410:	dc800917 	ldw	r18,36(sp)
40090414:	8822d57a 	srli	r17,r17,21
40090418:	008f7a80 	call	4008f7a8 <_Balloc>
4009041c:	1027883a 	mov	r19,r2
40090420:	00800434 	movhi	r2,16
40090424:	10bfffc4 	addi	r2,r2,-1
40090428:	808c703a 	and	r6,r16,r2
4009042c:	88000126 	beq	r17,zero,40090434 <__d2b+0x58>
40090430:	31800434 	orhi	r6,r6,16
40090434:	d9800015 	stw	r6,0(sp)
40090438:	a8001f26 	beq	r21,zero,400904b8 <__d2b+0xdc>
4009043c:	d9000104 	addi	r4,sp,4
40090440:	dd400115 	stw	r21,4(sp)
40090444:	008faf80 	call	4008faf8 <__lo0bits>
40090448:	d8c00017 	ldw	r3,0(sp)
4009044c:	1000291e 	bne	r2,zero,400904f4 <__d2b+0x118>
40090450:	d9000117 	ldw	r4,4(sp)
40090454:	99000515 	stw	r4,20(r19)
40090458:	1820c03a 	cmpne	r16,r3,zero
4009045c:	84000044 	addi	r16,r16,1
40090460:	98c00615 	stw	r3,24(r19)
40090464:	9c000415 	stw	r16,16(r19)
40090468:	88001b1e 	bne	r17,zero,400904d8 <__d2b+0xfc>
4009046c:	800690ba 	slli	r3,r16,2
40090470:	10bef384 	addi	r2,r2,-1074
40090474:	a0800015 	stw	r2,0(r20)
40090478:	98c5883a 	add	r2,r19,r3
4009047c:	11000417 	ldw	r4,16(r2)
40090480:	8020917a 	slli	r16,r16,5
40090484:	008fa900 	call	4008fa90 <__hi0bits>
40090488:	8085c83a 	sub	r2,r16,r2
4009048c:	90800015 	stw	r2,0(r18)
40090490:	9805883a 	mov	r2,r19
40090494:	dfc00817 	ldw	ra,32(sp)
40090498:	dd400717 	ldw	r21,28(sp)
4009049c:	dd000617 	ldw	r20,24(sp)
400904a0:	dcc00517 	ldw	r19,20(sp)
400904a4:	dc800417 	ldw	r18,16(sp)
400904a8:	dc400317 	ldw	r17,12(sp)
400904ac:	dc000217 	ldw	r16,8(sp)
400904b0:	dec00904 	addi	sp,sp,36
400904b4:	f800283a 	ret
400904b8:	d809883a 	mov	r4,sp
400904bc:	008faf80 	call	4008faf8 <__lo0bits>
400904c0:	d8c00017 	ldw	r3,0(sp)
400904c4:	04000044 	movi	r16,1
400904c8:	9c000415 	stw	r16,16(r19)
400904cc:	98c00515 	stw	r3,20(r19)
400904d0:	10800804 	addi	r2,r2,32
400904d4:	883fe526 	beq	r17,zero,4009046c <__alt_mem_epcs+0xfff4f46c>
400904d8:	8c7ef344 	addi	r17,r17,-1075
400904dc:	88a3883a 	add	r17,r17,r2
400904e0:	00c00d44 	movi	r3,53
400904e4:	a4400015 	stw	r17,0(r20)
400904e8:	1885c83a 	sub	r2,r3,r2
400904ec:	90800015 	stw	r2,0(r18)
400904f0:	003fe706 	br	40090490 <__alt_mem_epcs+0xfff4f490>
400904f4:	01000804 	movi	r4,32
400904f8:	2089c83a 	sub	r4,r4,r2
400904fc:	1908983a 	sll	r4,r3,r4
40090500:	d9400117 	ldw	r5,4(sp)
40090504:	1886d83a 	srl	r3,r3,r2
40090508:	2148b03a 	or	r4,r4,r5
4009050c:	99000515 	stw	r4,20(r19)
40090510:	d8c00015 	stw	r3,0(sp)
40090514:	003fd006 	br	40090458 <__alt_mem_epcs+0xfff4f458>

40090518 <__ratio>:
40090518:	defff904 	addi	sp,sp,-28
4009051c:	dc400315 	stw	r17,12(sp)
40090520:	2823883a 	mov	r17,r5
40090524:	d9400104 	addi	r5,sp,4
40090528:	dfc00615 	stw	ra,24(sp)
4009052c:	dcc00515 	stw	r19,20(sp)
40090530:	dc800415 	stw	r18,16(sp)
40090534:	2027883a 	mov	r19,r4
40090538:	dc000215 	stw	r16,8(sp)
4009053c:	00902c00 	call	400902c0 <__b2d>
40090540:	8809883a 	mov	r4,r17
40090544:	d80b883a 	mov	r5,sp
40090548:	1025883a 	mov	r18,r2
4009054c:	1821883a 	mov	r16,r3
40090550:	00902c00 	call	400902c0 <__b2d>
40090554:	8a400417 	ldw	r9,16(r17)
40090558:	9a000417 	ldw	r8,16(r19)
4009055c:	100d883a 	mov	r6,r2
40090560:	d8800017 	ldw	r2,0(sp)
40090564:	4251c83a 	sub	r8,r8,r9
40090568:	4012917a 	slli	r9,r8,5
4009056c:	da000117 	ldw	r8,4(sp)
40090570:	4091c83a 	sub	r8,r8,r2
40090574:	4251883a 	add	r8,r8,r9
40090578:	02000d0e 	bge	zero,r8,400905b0 <__ratio+0x98>
4009057c:	4010953a 	slli	r8,r8,20
40090580:	4421883a 	add	r16,r8,r16
40090584:	9009883a 	mov	r4,r18
40090588:	800b883a 	mov	r5,r16
4009058c:	180f883a 	mov	r7,r3
40090590:	00943c80 	call	400943c8 <__divdf3>
40090594:	dfc00617 	ldw	ra,24(sp)
40090598:	dcc00517 	ldw	r19,20(sp)
4009059c:	dc800417 	ldw	r18,16(sp)
400905a0:	dc400317 	ldw	r17,12(sp)
400905a4:	dc000217 	ldw	r16,8(sp)
400905a8:	dec00704 	addi	sp,sp,28
400905ac:	f800283a 	ret
400905b0:	4010953a 	slli	r8,r8,20
400905b4:	1a07c83a 	sub	r3,r3,r8
400905b8:	003ff206 	br	40090584 <__alt_mem_epcs+0xfff4f584>

400905bc <_mprec_log10>:
400905bc:	defffe04 	addi	sp,sp,-8
400905c0:	dc000015 	stw	r16,0(sp)
400905c4:	dfc00115 	stw	ra,4(sp)
400905c8:	008005c4 	movi	r2,23
400905cc:	2021883a 	mov	r16,r4
400905d0:	11000d0e 	bge	r2,r4,40090608 <_mprec_log10+0x4c>
400905d4:	0005883a 	mov	r2,zero
400905d8:	00cffc34 	movhi	r3,16368
400905dc:	843fffc4 	addi	r16,r16,-1
400905e0:	1009883a 	mov	r4,r2
400905e4:	180b883a 	mov	r5,r3
400905e8:	000d883a 	mov	r6,zero
400905ec:	01d00934 	movhi	r7,16420
400905f0:	0094df80 	call	40094df8 <__muldf3>
400905f4:	803ff91e 	bne	r16,zero,400905dc <__alt_mem_epcs+0xfff4f5dc>
400905f8:	dfc00117 	ldw	ra,4(sp)
400905fc:	dc000017 	ldw	r16,0(sp)
40090600:	dec00204 	addi	sp,sp,8
40090604:	f800283a 	ret
40090608:	202090fa 	slli	r16,r4,3
4009060c:	009002b4 	movhi	r2,16394
40090610:	10a88e04 	addi	r2,r2,-24008
40090614:	1421883a 	add	r16,r2,r16
40090618:	80800017 	ldw	r2,0(r16)
4009061c:	80c00117 	ldw	r3,4(r16)
40090620:	dfc00117 	ldw	ra,4(sp)
40090624:	dc000017 	ldw	r16,0(sp)
40090628:	dec00204 	addi	sp,sp,8
4009062c:	f800283a 	ret

40090630 <__copybits>:
40090630:	297fffc4 	addi	r5,r5,-1
40090634:	280fd17a 	srai	r7,r5,5
40090638:	30c00417 	ldw	r3,16(r6)
4009063c:	30800504 	addi	r2,r6,20
40090640:	39c00044 	addi	r7,r7,1
40090644:	18c7883a 	add	r3,r3,r3
40090648:	39cf883a 	add	r7,r7,r7
4009064c:	18c7883a 	add	r3,r3,r3
40090650:	39cf883a 	add	r7,r7,r7
40090654:	10c7883a 	add	r3,r2,r3
40090658:	21cf883a 	add	r7,r4,r7
4009065c:	10c00d2e 	bgeu	r2,r3,40090694 <__copybits+0x64>
40090660:	200b883a 	mov	r5,r4
40090664:	12000017 	ldw	r8,0(r2)
40090668:	29400104 	addi	r5,r5,4
4009066c:	10800104 	addi	r2,r2,4
40090670:	2a3fff15 	stw	r8,-4(r5)
40090674:	10fffb36 	bltu	r2,r3,40090664 <__alt_mem_epcs+0xfff4f664>
40090678:	1985c83a 	sub	r2,r3,r6
4009067c:	10bffac4 	addi	r2,r2,-21
40090680:	1004d0ba 	srli	r2,r2,2
40090684:	10800044 	addi	r2,r2,1
40090688:	1085883a 	add	r2,r2,r2
4009068c:	1085883a 	add	r2,r2,r2
40090690:	2089883a 	add	r4,r4,r2
40090694:	21c0032e 	bgeu	r4,r7,400906a4 <__copybits+0x74>
40090698:	20000015 	stw	zero,0(r4)
4009069c:	21000104 	addi	r4,r4,4
400906a0:	21fffd36 	bltu	r4,r7,40090698 <__alt_mem_epcs+0xfff4f698>
400906a4:	f800283a 	ret

400906a8 <__any_on>:
400906a8:	20c00417 	ldw	r3,16(r4)
400906ac:	2805d17a 	srai	r2,r5,5
400906b0:	21000504 	addi	r4,r4,20
400906b4:	18800d0e 	bge	r3,r2,400906ec <__any_on+0x44>
400906b8:	18c7883a 	add	r3,r3,r3
400906bc:	18c7883a 	add	r3,r3,r3
400906c0:	20c7883a 	add	r3,r4,r3
400906c4:	20c0192e 	bgeu	r4,r3,4009072c <__any_on+0x84>
400906c8:	18bfff17 	ldw	r2,-4(r3)
400906cc:	18ffff04 	addi	r3,r3,-4
400906d0:	1000041e 	bne	r2,zero,400906e4 <__any_on+0x3c>
400906d4:	20c0142e 	bgeu	r4,r3,40090728 <__any_on+0x80>
400906d8:	18ffff04 	addi	r3,r3,-4
400906dc:	19400017 	ldw	r5,0(r3)
400906e0:	283ffc26 	beq	r5,zero,400906d4 <__alt_mem_epcs+0xfff4f6d4>
400906e4:	00800044 	movi	r2,1
400906e8:	f800283a 	ret
400906ec:	10c00a0e 	bge	r2,r3,40090718 <__any_on+0x70>
400906f0:	1085883a 	add	r2,r2,r2
400906f4:	1085883a 	add	r2,r2,r2
400906f8:	294007cc 	andi	r5,r5,31
400906fc:	2087883a 	add	r3,r4,r2
40090700:	283ff026 	beq	r5,zero,400906c4 <__alt_mem_epcs+0xfff4f6c4>
40090704:	19800017 	ldw	r6,0(r3)
40090708:	3144d83a 	srl	r2,r6,r5
4009070c:	114a983a 	sll	r5,r2,r5
40090710:	29bff41e 	bne	r5,r6,400906e4 <__alt_mem_epcs+0xfff4f6e4>
40090714:	003feb06 	br	400906c4 <__alt_mem_epcs+0xfff4f6c4>
40090718:	1085883a 	add	r2,r2,r2
4009071c:	1085883a 	add	r2,r2,r2
40090720:	2087883a 	add	r3,r4,r2
40090724:	003fe706 	br	400906c4 <__alt_mem_epcs+0xfff4f6c4>
40090728:	f800283a 	ret
4009072c:	0005883a 	mov	r2,zero
40090730:	f800283a 	ret

40090734 <_putc_r>:
40090734:	defffc04 	addi	sp,sp,-16
40090738:	dc000215 	stw	r16,8(sp)
4009073c:	dfc00315 	stw	ra,12(sp)
40090740:	2021883a 	mov	r16,r4
40090744:	20000226 	beq	r4,zero,40090750 <_putc_r+0x1c>
40090748:	20800e17 	ldw	r2,56(r4)
4009074c:	10001b26 	beq	r2,zero,400907bc <_putc_r+0x88>
40090750:	30800217 	ldw	r2,8(r6)
40090754:	10bfffc4 	addi	r2,r2,-1
40090758:	30800215 	stw	r2,8(r6)
4009075c:	10000a16 	blt	r2,zero,40090788 <_putc_r+0x54>
40090760:	30800017 	ldw	r2,0(r6)
40090764:	11400005 	stb	r5,0(r2)
40090768:	30800017 	ldw	r2,0(r6)
4009076c:	10c00044 	addi	r3,r2,1
40090770:	30c00015 	stw	r3,0(r6)
40090774:	10800003 	ldbu	r2,0(r2)
40090778:	dfc00317 	ldw	ra,12(sp)
4009077c:	dc000217 	ldw	r16,8(sp)
40090780:	dec00404 	addi	sp,sp,16
40090784:	f800283a 	ret
40090788:	30c00617 	ldw	r3,24(r6)
4009078c:	10c00616 	blt	r2,r3,400907a8 <_putc_r+0x74>
40090790:	30800017 	ldw	r2,0(r6)
40090794:	00c00284 	movi	r3,10
40090798:	11400005 	stb	r5,0(r2)
4009079c:	30800017 	ldw	r2,0(r6)
400907a0:	11400003 	ldbu	r5,0(r2)
400907a4:	28fff11e 	bne	r5,r3,4009076c <__alt_mem_epcs+0xfff4f76c>
400907a8:	8009883a 	mov	r4,r16
400907ac:	dfc00317 	ldw	ra,12(sp)
400907b0:	dc000217 	ldw	r16,8(sp)
400907b4:	dec00404 	addi	sp,sp,16
400907b8:	00925781 	jmpi	40092578 <__swbuf_r>
400907bc:	d9400015 	stw	r5,0(sp)
400907c0:	d9800115 	stw	r6,4(sp)
400907c4:	008de500 	call	4008de50 <__sinit>
400907c8:	d9800117 	ldw	r6,4(sp)
400907cc:	d9400017 	ldw	r5,0(sp)
400907d0:	003fdf06 	br	40090750 <__alt_mem_epcs+0xfff4f750>

400907d4 <putc>:
400907d4:	defffc04 	addi	sp,sp,-16
400907d8:	dc400115 	stw	r17,4(sp)
400907dc:	045002b4 	movhi	r17,16394
400907e0:	8c6feb04 	addi	r17,r17,-16468
400907e4:	dc800215 	stw	r18,8(sp)
400907e8:	2025883a 	mov	r18,r4
400907ec:	89000017 	ldw	r4,0(r17)
400907f0:	dc000015 	stw	r16,0(sp)
400907f4:	dfc00315 	stw	ra,12(sp)
400907f8:	2821883a 	mov	r16,r5
400907fc:	20000226 	beq	r4,zero,40090808 <putc+0x34>
40090800:	20c00e17 	ldw	r3,56(r4)
40090804:	18001a26 	beq	r3,zero,40090870 <putc+0x9c>
40090808:	80800217 	ldw	r2,8(r16)
4009080c:	10bfffc4 	addi	r2,r2,-1
40090810:	80800215 	stw	r2,8(r16)
40090814:	10000c16 	blt	r2,zero,40090848 <putc+0x74>
40090818:	80800017 	ldw	r2,0(r16)
4009081c:	14800005 	stb	r18,0(r2)
40090820:	80800017 	ldw	r2,0(r16)
40090824:	10c00044 	addi	r3,r2,1
40090828:	80c00015 	stw	r3,0(r16)
4009082c:	10800003 	ldbu	r2,0(r2)
40090830:	dfc00317 	ldw	ra,12(sp)
40090834:	dc800217 	ldw	r18,8(sp)
40090838:	dc400117 	ldw	r17,4(sp)
4009083c:	dc000017 	ldw	r16,0(sp)
40090840:	dec00404 	addi	sp,sp,16
40090844:	f800283a 	ret
40090848:	80c00617 	ldw	r3,24(r16)
4009084c:	10c00a16 	blt	r2,r3,40090878 <putc+0xa4>
40090850:	80800017 	ldw	r2,0(r16)
40090854:	00c00284 	movi	r3,10
40090858:	14800005 	stb	r18,0(r2)
4009085c:	80800017 	ldw	r2,0(r16)
40090860:	11400003 	ldbu	r5,0(r2)
40090864:	28ffef1e 	bne	r5,r3,40090824 <__alt_mem_epcs+0xfff4f824>
40090868:	89000017 	ldw	r4,0(r17)
4009086c:	00000406 	br	40090880 <putc+0xac>
40090870:	008de500 	call	4008de50 <__sinit>
40090874:	003fe406 	br	40090808 <__alt_mem_epcs+0xfff4f808>
40090878:	89000017 	ldw	r4,0(r17)
4009087c:	900b883a 	mov	r5,r18
40090880:	800d883a 	mov	r6,r16
40090884:	dfc00317 	ldw	ra,12(sp)
40090888:	dc800217 	ldw	r18,8(sp)
4009088c:	dc400117 	ldw	r17,4(sp)
40090890:	dc000017 	ldw	r16,0(sp)
40090894:	dec00404 	addi	sp,sp,16
40090898:	00925781 	jmpi	40092578 <__swbuf_r>

4009089c <_realloc_r>:
4009089c:	defff604 	addi	sp,sp,-40
400908a0:	dcc00315 	stw	r19,12(sp)
400908a4:	dc400115 	stw	r17,4(sp)
400908a8:	dfc00915 	stw	ra,36(sp)
400908ac:	df000815 	stw	fp,32(sp)
400908b0:	ddc00715 	stw	r23,28(sp)
400908b4:	dd800615 	stw	r22,24(sp)
400908b8:	dd400515 	stw	r21,20(sp)
400908bc:	dd000415 	stw	r20,16(sp)
400908c0:	dc800215 	stw	r18,8(sp)
400908c4:	dc000015 	stw	r16,0(sp)
400908c8:	2827883a 	mov	r19,r5
400908cc:	3023883a 	mov	r17,r6
400908d0:	2800bf26 	beq	r5,zero,40090bd0 <_realloc_r+0x334>
400908d4:	2025883a 	mov	r18,r4
400908d8:	0095e700 	call	40095e70 <__malloc_lock>
400908dc:	98ffff17 	ldw	r3,-4(r19)
400908e0:	01bfff04 	movi	r6,-4
400908e4:	890002c4 	addi	r4,r17,11
400908e8:	01c00584 	movi	r7,22
400908ec:	9d7ffe04 	addi	r21,r19,-8
400908f0:	19a0703a 	and	r16,r3,r6
400908f4:	39003f2e 	bgeu	r7,r4,400909f4 <_realloc_r+0x158>
400908f8:	053ffe04 	movi	r20,-8
400908fc:	2528703a 	and	r20,r4,r20
40090900:	a00f883a 	mov	r7,r20
40090904:	a0008216 	blt	r20,zero,40090b10 <_realloc_r+0x274>
40090908:	a4408136 	bltu	r20,r17,40090b10 <_realloc_r+0x274>
4009090c:	81c03c0e 	bge	r16,r7,40090a00 <_realloc_r+0x164>
40090910:	071002b4 	movhi	fp,16394
40090914:	e72a0104 	addi	fp,fp,-22524
40090918:	e1000217 	ldw	r4,8(fp)
4009091c:	ac05883a 	add	r2,r21,r16
40090920:	2080bf26 	beq	r4,r2,40090c20 <_realloc_r+0x384>
40090924:	11000117 	ldw	r4,4(r2)
40090928:	023fff84 	movi	r8,-2
4009092c:	2210703a 	and	r8,r4,r8
40090930:	1211883a 	add	r8,r2,r8
40090934:	41400117 	ldw	r5,4(r8)
40090938:	2940004c 	andi	r5,r5,1
4009093c:	28004a1e 	bne	r5,zero,40090a68 <_realloc_r+0x1cc>
40090940:	017fff04 	movi	r5,-4
40090944:	2148703a 	and	r4,r4,r5
40090948:	2409883a 	add	r4,r4,r16
4009094c:	21c0ad0e 	bge	r4,r7,40090c04 <_realloc_r+0x368>
40090950:	18c0004c 	andi	r3,r3,1
40090954:	18007f1e 	bne	r3,zero,40090b54 <_realloc_r+0x2b8>
40090958:	9dfffe17 	ldw	r23,-8(r19)
4009095c:	adefc83a 	sub	r23,r21,r23
40090960:	bd800117 	ldw	r22,4(r23)
40090964:	b14a703a 	and	r5,r22,r5
40090968:	216d883a 	add	r22,r4,r5
4009096c:	b1c04516 	blt	r22,r7,40090a84 <_realloc_r+0x1e8>
40090970:	10c00317 	ldw	r3,12(r2)
40090974:	10800217 	ldw	r2,8(r2)
40090978:	81bfff04 	addi	r6,r16,-4
4009097c:	bc400204 	addi	r17,r23,8
40090980:	10c00315 	stw	r3,12(r2)
40090984:	18800215 	stw	r2,8(r3)
40090988:	b9400217 	ldw	r5,8(r23)
4009098c:	b8c00317 	ldw	r3,12(r23)
40090990:	00800904 	movi	r2,36
40090994:	28c00315 	stw	r3,12(r5)
40090998:	19400215 	stw	r5,8(r3)
4009099c:	1180ef36 	bltu	r2,r6,40090d5c <_realloc_r+0x4c0>
400909a0:	008004c4 	movi	r2,19
400909a4:	1180da2e 	bgeu	r2,r6,40090d10 <_realloc_r+0x474>
400909a8:	98800017 	ldw	r2,0(r19)
400909ac:	b8800215 	stw	r2,8(r23)
400909b0:	98800117 	ldw	r2,4(r19)
400909b4:	b8800315 	stw	r2,12(r23)
400909b8:	008006c4 	movi	r2,27
400909bc:	1180fc2e 	bgeu	r2,r6,40090db0 <_realloc_r+0x514>
400909c0:	98800217 	ldw	r2,8(r19)
400909c4:	b8800415 	stw	r2,16(r23)
400909c8:	98800317 	ldw	r2,12(r19)
400909cc:	b8800515 	stw	r2,20(r23)
400909d0:	00800904 	movi	r2,36
400909d4:	3080421e 	bne	r6,r2,40090ae0 <_realloc_r+0x244>
400909d8:	98800417 	ldw	r2,16(r19)
400909dc:	9cc00604 	addi	r19,r19,24
400909e0:	b8c00804 	addi	r3,r23,32
400909e4:	b8800615 	stw	r2,24(r23)
400909e8:	98bfff17 	ldw	r2,-4(r19)
400909ec:	b8800715 	stw	r2,28(r23)
400909f0:	00003d06 	br	40090ae8 <_realloc_r+0x24c>
400909f4:	01c00404 	movi	r7,16
400909f8:	3829883a 	mov	r20,r7
400909fc:	003fc206 	br	40090908 <__alt_mem_epcs+0xfff4f908>
40090a00:	9823883a 	mov	r17,r19
40090a04:	850fc83a 	sub	r7,r16,r20
40090a08:	008003c4 	movi	r2,15
40090a0c:	18c0004c 	andi	r3,r3,1
40090a10:	11c04336 	bltu	r2,r7,40090b20 <_realloc_r+0x284>
40090a14:	1c06b03a 	or	r3,r3,r16
40090a18:	a8c00115 	stw	r3,4(r21)
40090a1c:	ac21883a 	add	r16,r21,r16
40090a20:	80c00117 	ldw	r3,4(r16)
40090a24:	18c00054 	ori	r3,r3,1
40090a28:	80c00115 	stw	r3,4(r16)
40090a2c:	9009883a 	mov	r4,r18
40090a30:	0095e900 	call	40095e90 <__malloc_unlock>
40090a34:	8805883a 	mov	r2,r17
40090a38:	dfc00917 	ldw	ra,36(sp)
40090a3c:	df000817 	ldw	fp,32(sp)
40090a40:	ddc00717 	ldw	r23,28(sp)
40090a44:	dd800617 	ldw	r22,24(sp)
40090a48:	dd400517 	ldw	r21,20(sp)
40090a4c:	dd000417 	ldw	r20,16(sp)
40090a50:	dcc00317 	ldw	r19,12(sp)
40090a54:	dc800217 	ldw	r18,8(sp)
40090a58:	dc400117 	ldw	r17,4(sp)
40090a5c:	dc000017 	ldw	r16,0(sp)
40090a60:	dec00a04 	addi	sp,sp,40
40090a64:	f800283a 	ret
40090a68:	18c0004c 	andi	r3,r3,1
40090a6c:	1800391e 	bne	r3,zero,40090b54 <_realloc_r+0x2b8>
40090a70:	9dfffe17 	ldw	r23,-8(r19)
40090a74:	00bfff04 	movi	r2,-4
40090a78:	adefc83a 	sub	r23,r21,r23
40090a7c:	b9400117 	ldw	r5,4(r23)
40090a80:	288a703a 	and	r5,r5,r2
40090a84:	2c2d883a 	add	r22,r5,r16
40090a88:	b1c03216 	blt	r22,r7,40090b54 <_realloc_r+0x2b8>
40090a8c:	b8800317 	ldw	r2,12(r23)
40090a90:	b8c00217 	ldw	r3,8(r23)
40090a94:	81bfff04 	addi	r6,r16,-4
40090a98:	01000904 	movi	r4,36
40090a9c:	18800315 	stw	r2,12(r3)
40090aa0:	10c00215 	stw	r3,8(r2)
40090aa4:	bc400204 	addi	r17,r23,8
40090aa8:	2180ac36 	bltu	r4,r6,40090d5c <_realloc_r+0x4c0>
40090aac:	008004c4 	movi	r2,19
40090ab0:	1180972e 	bgeu	r2,r6,40090d10 <_realloc_r+0x474>
40090ab4:	98800017 	ldw	r2,0(r19)
40090ab8:	b8800215 	stw	r2,8(r23)
40090abc:	98800117 	ldw	r2,4(r19)
40090ac0:	b8800315 	stw	r2,12(r23)
40090ac4:	008006c4 	movi	r2,27
40090ac8:	1180b92e 	bgeu	r2,r6,40090db0 <_realloc_r+0x514>
40090acc:	98800217 	ldw	r2,8(r19)
40090ad0:	b8800415 	stw	r2,16(r23)
40090ad4:	98800317 	ldw	r2,12(r19)
40090ad8:	b8800515 	stw	r2,20(r23)
40090adc:	313fbe26 	beq	r6,r4,400909d8 <__alt_mem_epcs+0xfff4f9d8>
40090ae0:	b8c00604 	addi	r3,r23,24
40090ae4:	9cc00404 	addi	r19,r19,16
40090ae8:	98800017 	ldw	r2,0(r19)
40090aec:	b021883a 	mov	r16,r22
40090af0:	b82b883a 	mov	r21,r23
40090af4:	18800015 	stw	r2,0(r3)
40090af8:	98800117 	ldw	r2,4(r19)
40090afc:	18800115 	stw	r2,4(r3)
40090b00:	98800217 	ldw	r2,8(r19)
40090b04:	18800215 	stw	r2,8(r3)
40090b08:	b8c00117 	ldw	r3,4(r23)
40090b0c:	003fbd06 	br	40090a04 <__alt_mem_epcs+0xfff4fa04>
40090b10:	00800304 	movi	r2,12
40090b14:	90800015 	stw	r2,0(r18)
40090b18:	0005883a 	mov	r2,zero
40090b1c:	003fc606 	br	40090a38 <__alt_mem_epcs+0xfff4fa38>
40090b20:	1d06b03a 	or	r3,r3,r20
40090b24:	ad0b883a 	add	r5,r21,r20
40090b28:	a8c00115 	stw	r3,4(r21)
40090b2c:	38800054 	ori	r2,r7,1
40090b30:	28800115 	stw	r2,4(r5)
40090b34:	29cf883a 	add	r7,r5,r7
40090b38:	38800117 	ldw	r2,4(r7)
40090b3c:	9009883a 	mov	r4,r18
40090b40:	29400204 	addi	r5,r5,8
40090b44:	10800054 	ori	r2,r2,1
40090b48:	38800115 	stw	r2,4(r7)
40090b4c:	008dfc40 	call	4008dfc4 <_free_r>
40090b50:	003fb606 	br	40090a2c <__alt_mem_epcs+0xfff4fa2c>
40090b54:	880b883a 	mov	r5,r17
40090b58:	9009883a 	mov	r4,r18
40090b5c:	008eb600 	call	4008eb60 <_malloc_r>
40090b60:	1023883a 	mov	r17,r2
40090b64:	1000aa26 	beq	r2,zero,40090e10 <_realloc_r+0x574>
40090b68:	98ffff17 	ldw	r3,-4(r19)
40090b6c:	113ffe04 	addi	r4,r2,-8
40090b70:	00bfff84 	movi	r2,-2
40090b74:	1884703a 	and	r2,r3,r2
40090b78:	a885883a 	add	r2,r21,r2
40090b7c:	20808626 	beq	r4,r2,40090d98 <_realloc_r+0x4fc>
40090b80:	81bfff04 	addi	r6,r16,-4
40090b84:	00800904 	movi	r2,36
40090b88:	11807036 	bltu	r2,r6,40090d4c <_realloc_r+0x4b0>
40090b8c:	00c004c4 	movi	r3,19
40090b90:	19805636 	bltu	r3,r6,40090cec <_realloc_r+0x450>
40090b94:	8805883a 	mov	r2,r17
40090b98:	9807883a 	mov	r3,r19
40090b9c:	19000017 	ldw	r4,0(r3)
40090ba0:	11000015 	stw	r4,0(r2)
40090ba4:	19000117 	ldw	r4,4(r3)
40090ba8:	11000115 	stw	r4,4(r2)
40090bac:	18c00217 	ldw	r3,8(r3)
40090bb0:	10c00215 	stw	r3,8(r2)
40090bb4:	980b883a 	mov	r5,r19
40090bb8:	9009883a 	mov	r4,r18
40090bbc:	008dfc40 	call	4008dfc4 <_free_r>
40090bc0:	9009883a 	mov	r4,r18
40090bc4:	0095e900 	call	40095e90 <__malloc_unlock>
40090bc8:	8805883a 	mov	r2,r17
40090bcc:	003f9a06 	br	40090a38 <__alt_mem_epcs+0xfff4fa38>
40090bd0:	300b883a 	mov	r5,r6
40090bd4:	dfc00917 	ldw	ra,36(sp)
40090bd8:	df000817 	ldw	fp,32(sp)
40090bdc:	ddc00717 	ldw	r23,28(sp)
40090be0:	dd800617 	ldw	r22,24(sp)
40090be4:	dd400517 	ldw	r21,20(sp)
40090be8:	dd000417 	ldw	r20,16(sp)
40090bec:	dcc00317 	ldw	r19,12(sp)
40090bf0:	dc800217 	ldw	r18,8(sp)
40090bf4:	dc400117 	ldw	r17,4(sp)
40090bf8:	dc000017 	ldw	r16,0(sp)
40090bfc:	dec00a04 	addi	sp,sp,40
40090c00:	008eb601 	jmpi	4008eb60 <_malloc_r>
40090c04:	11400317 	ldw	r5,12(r2)
40090c08:	10800217 	ldw	r2,8(r2)
40090c0c:	9823883a 	mov	r17,r19
40090c10:	2021883a 	mov	r16,r4
40090c14:	11400315 	stw	r5,12(r2)
40090c18:	28800215 	stw	r2,8(r5)
40090c1c:	003f7906 	br	40090a04 <__alt_mem_epcs+0xfff4fa04>
40090c20:	21000117 	ldw	r4,4(r4)
40090c24:	00bfff04 	movi	r2,-4
40090c28:	a1800404 	addi	r6,r20,16
40090c2c:	2088703a 	and	r4,r4,r2
40090c30:	2409883a 	add	r4,r4,r16
40090c34:	2180380e 	bge	r4,r6,40090d18 <_realloc_r+0x47c>
40090c38:	18c0004c 	andi	r3,r3,1
40090c3c:	183fc51e 	bne	r3,zero,40090b54 <__alt_mem_epcs+0xfff4fb54>
40090c40:	9dfffe17 	ldw	r23,-8(r19)
40090c44:	adefc83a 	sub	r23,r21,r23
40090c48:	b9400117 	ldw	r5,4(r23)
40090c4c:	288a703a 	and	r5,r5,r2
40090c50:	216d883a 	add	r22,r4,r5
40090c54:	b1bf8b16 	blt	r22,r6,40090a84 <__alt_mem_epcs+0xfff4fa84>
40090c58:	b8800317 	ldw	r2,12(r23)
40090c5c:	b8c00217 	ldw	r3,8(r23)
40090c60:	81bfff04 	addi	r6,r16,-4
40090c64:	01000904 	movi	r4,36
40090c68:	18800315 	stw	r2,12(r3)
40090c6c:	10c00215 	stw	r3,8(r2)
40090c70:	bc400204 	addi	r17,r23,8
40090c74:	21805a36 	bltu	r4,r6,40090de0 <_realloc_r+0x544>
40090c78:	008004c4 	movi	r2,19
40090c7c:	1180562e 	bgeu	r2,r6,40090dd8 <_realloc_r+0x53c>
40090c80:	98800017 	ldw	r2,0(r19)
40090c84:	b8800215 	stw	r2,8(r23)
40090c88:	98800117 	ldw	r2,4(r19)
40090c8c:	b8800315 	stw	r2,12(r23)
40090c90:	008006c4 	movi	r2,27
40090c94:	11805636 	bltu	r2,r6,40090df0 <_realloc_r+0x554>
40090c98:	b8800404 	addi	r2,r23,16
40090c9c:	9cc00204 	addi	r19,r19,8
40090ca0:	98c00017 	ldw	r3,0(r19)
40090ca4:	10c00015 	stw	r3,0(r2)
40090ca8:	98c00117 	ldw	r3,4(r19)
40090cac:	10c00115 	stw	r3,4(r2)
40090cb0:	98c00217 	ldw	r3,8(r19)
40090cb4:	10c00215 	stw	r3,8(r2)
40090cb8:	bd07883a 	add	r3,r23,r20
40090cbc:	b505c83a 	sub	r2,r22,r20
40090cc0:	e0c00215 	stw	r3,8(fp)
40090cc4:	10800054 	ori	r2,r2,1
40090cc8:	18800115 	stw	r2,4(r3)
40090ccc:	b8800117 	ldw	r2,4(r23)
40090cd0:	9009883a 	mov	r4,r18
40090cd4:	1080004c 	andi	r2,r2,1
40090cd8:	a0a8b03a 	or	r20,r20,r2
40090cdc:	bd000115 	stw	r20,4(r23)
40090ce0:	0095e900 	call	40095e90 <__malloc_unlock>
40090ce4:	8805883a 	mov	r2,r17
40090ce8:	003f5306 	br	40090a38 <__alt_mem_epcs+0xfff4fa38>
40090cec:	98c00017 	ldw	r3,0(r19)
40090cf0:	88c00015 	stw	r3,0(r17)
40090cf4:	98c00117 	ldw	r3,4(r19)
40090cf8:	88c00115 	stw	r3,4(r17)
40090cfc:	00c006c4 	movi	r3,27
40090d00:	19801d36 	bltu	r3,r6,40090d78 <_realloc_r+0x4dc>
40090d04:	88800204 	addi	r2,r17,8
40090d08:	98c00204 	addi	r3,r19,8
40090d0c:	003fa306 	br	40090b9c <__alt_mem_epcs+0xfff4fb9c>
40090d10:	8807883a 	mov	r3,r17
40090d14:	003f7406 	br	40090ae8 <__alt_mem_epcs+0xfff4fae8>
40090d18:	ad2b883a 	add	r21,r21,r20
40090d1c:	2505c83a 	sub	r2,r4,r20
40090d20:	e5400215 	stw	r21,8(fp)
40090d24:	10800054 	ori	r2,r2,1
40090d28:	a8800115 	stw	r2,4(r21)
40090d2c:	98bfff17 	ldw	r2,-4(r19)
40090d30:	9009883a 	mov	r4,r18
40090d34:	1080004c 	andi	r2,r2,1
40090d38:	a0a8b03a 	or	r20,r20,r2
40090d3c:	9d3fff15 	stw	r20,-4(r19)
40090d40:	0095e900 	call	40095e90 <__malloc_unlock>
40090d44:	9805883a 	mov	r2,r19
40090d48:	003f3b06 	br	40090a38 <__alt_mem_epcs+0xfff4fa38>
40090d4c:	8809883a 	mov	r4,r17
40090d50:	980b883a 	mov	r5,r19
40090d54:	008f5280 	call	4008f528 <memmove>
40090d58:	003f9606 	br	40090bb4 <__alt_mem_epcs+0xfff4fbb4>
40090d5c:	8809883a 	mov	r4,r17
40090d60:	980b883a 	mov	r5,r19
40090d64:	008f5280 	call	4008f528 <memmove>
40090d68:	b8c00117 	ldw	r3,4(r23)
40090d6c:	b021883a 	mov	r16,r22
40090d70:	b82b883a 	mov	r21,r23
40090d74:	003f2306 	br	40090a04 <__alt_mem_epcs+0xfff4fa04>
40090d78:	98c00217 	ldw	r3,8(r19)
40090d7c:	88c00215 	stw	r3,8(r17)
40090d80:	98c00317 	ldw	r3,12(r19)
40090d84:	88c00315 	stw	r3,12(r17)
40090d88:	30800c26 	beq	r6,r2,40090dbc <_realloc_r+0x520>
40090d8c:	88800404 	addi	r2,r17,16
40090d90:	98c00404 	addi	r3,r19,16
40090d94:	003f8106 	br	40090b9c <__alt_mem_epcs+0xfff4fb9c>
40090d98:	893fff17 	ldw	r4,-4(r17)
40090d9c:	00bfff04 	movi	r2,-4
40090da0:	9823883a 	mov	r17,r19
40090da4:	2084703a 	and	r2,r4,r2
40090da8:	80a1883a 	add	r16,r16,r2
40090dac:	003f1506 	br	40090a04 <__alt_mem_epcs+0xfff4fa04>
40090db0:	b8c00404 	addi	r3,r23,16
40090db4:	9cc00204 	addi	r19,r19,8
40090db8:	003f4b06 	br	40090ae8 <__alt_mem_epcs+0xfff4fae8>
40090dbc:	99000417 	ldw	r4,16(r19)
40090dc0:	88800604 	addi	r2,r17,24
40090dc4:	98c00604 	addi	r3,r19,24
40090dc8:	89000415 	stw	r4,16(r17)
40090dcc:	99000517 	ldw	r4,20(r19)
40090dd0:	89000515 	stw	r4,20(r17)
40090dd4:	003f7106 	br	40090b9c <__alt_mem_epcs+0xfff4fb9c>
40090dd8:	8805883a 	mov	r2,r17
40090ddc:	003fb006 	br	40090ca0 <__alt_mem_epcs+0xfff4fca0>
40090de0:	8809883a 	mov	r4,r17
40090de4:	980b883a 	mov	r5,r19
40090de8:	008f5280 	call	4008f528 <memmove>
40090dec:	003fb206 	br	40090cb8 <__alt_mem_epcs+0xfff4fcb8>
40090df0:	98800217 	ldw	r2,8(r19)
40090df4:	b8800415 	stw	r2,16(r23)
40090df8:	98800317 	ldw	r2,12(r19)
40090dfc:	b8800515 	stw	r2,20(r23)
40090e00:	31000726 	beq	r6,r4,40090e20 <_realloc_r+0x584>
40090e04:	b8800604 	addi	r2,r23,24
40090e08:	9cc00404 	addi	r19,r19,16
40090e0c:	003fa406 	br	40090ca0 <__alt_mem_epcs+0xfff4fca0>
40090e10:	9009883a 	mov	r4,r18
40090e14:	0095e900 	call	40095e90 <__malloc_unlock>
40090e18:	0005883a 	mov	r2,zero
40090e1c:	003f0606 	br	40090a38 <__alt_mem_epcs+0xfff4fa38>
40090e20:	98c00417 	ldw	r3,16(r19)
40090e24:	9cc00604 	addi	r19,r19,24
40090e28:	b8800804 	addi	r2,r23,32
40090e2c:	b8c00615 	stw	r3,24(r23)
40090e30:	98ffff17 	ldw	r3,-4(r19)
40090e34:	b8c00715 	stw	r3,28(r23)
40090e38:	003f9906 	br	40090ca0 <__alt_mem_epcs+0xfff4fca0>

40090e3c <__fpclassifyd>:
40090e3c:	00a00034 	movhi	r2,32768
40090e40:	10bfffc4 	addi	r2,r2,-1
40090e44:	2884703a 	and	r2,r5,r2
40090e48:	10000726 	beq	r2,zero,40090e68 <__fpclassifyd+0x2c>
40090e4c:	00fffc34 	movhi	r3,65520
40090e50:	019ff834 	movhi	r6,32736
40090e54:	28c7883a 	add	r3,r5,r3
40090e58:	31bfffc4 	addi	r6,r6,-1
40090e5c:	30c00536 	bltu	r6,r3,40090e74 <__fpclassifyd+0x38>
40090e60:	00800104 	movi	r2,4
40090e64:	f800283a 	ret
40090e68:	2000021e 	bne	r4,zero,40090e74 <__fpclassifyd+0x38>
40090e6c:	00800084 	movi	r2,2
40090e70:	f800283a 	ret
40090e74:	00dffc34 	movhi	r3,32752
40090e78:	019ff834 	movhi	r6,32736
40090e7c:	28cb883a 	add	r5,r5,r3
40090e80:	31bfffc4 	addi	r6,r6,-1
40090e84:	317ff62e 	bgeu	r6,r5,40090e60 <__alt_mem_epcs+0xfff4fe60>
40090e88:	01400434 	movhi	r5,16
40090e8c:	297fffc4 	addi	r5,r5,-1
40090e90:	28800236 	bltu	r5,r2,40090e9c <__fpclassifyd+0x60>
40090e94:	008000c4 	movi	r2,3
40090e98:	f800283a 	ret
40090e9c:	10c00226 	beq	r2,r3,40090ea8 <__fpclassifyd+0x6c>
40090ea0:	0005883a 	mov	r2,zero
40090ea4:	f800283a 	ret
40090ea8:	2005003a 	cmpeq	r2,r4,zero
40090eac:	f800283a 	ret

40090eb0 <_sbrk_r>:
40090eb0:	defffd04 	addi	sp,sp,-12
40090eb4:	dc000015 	stw	r16,0(sp)
40090eb8:	041002b4 	movhi	r16,16394
40090ebc:	dc400115 	stw	r17,4(sp)
40090ec0:	84373304 	addi	r16,r16,-9012
40090ec4:	2023883a 	mov	r17,r4
40090ec8:	2809883a 	mov	r4,r5
40090ecc:	dfc00215 	stw	ra,8(sp)
40090ed0:	80000015 	stw	zero,0(r16)
40090ed4:	009605c0 	call	4009605c <sbrk>
40090ed8:	00ffffc4 	movi	r3,-1
40090edc:	10c00526 	beq	r2,r3,40090ef4 <_sbrk_r+0x44>
40090ee0:	dfc00217 	ldw	ra,8(sp)
40090ee4:	dc400117 	ldw	r17,4(sp)
40090ee8:	dc000017 	ldw	r16,0(sp)
40090eec:	dec00304 	addi	sp,sp,12
40090ef0:	f800283a 	ret
40090ef4:	80c00017 	ldw	r3,0(r16)
40090ef8:	183ff926 	beq	r3,zero,40090ee0 <__alt_mem_epcs+0xfff4fee0>
40090efc:	88c00015 	stw	r3,0(r17)
40090f00:	003ff706 	br	40090ee0 <__alt_mem_epcs+0xfff4fee0>

40090f04 <__sread>:
40090f04:	defffe04 	addi	sp,sp,-8
40090f08:	dc000015 	stw	r16,0(sp)
40090f0c:	2821883a 	mov	r16,r5
40090f10:	2940038f 	ldh	r5,14(r5)
40090f14:	dfc00115 	stw	ra,4(sp)
40090f18:	0092c540 	call	40092c54 <_read_r>
40090f1c:	10000716 	blt	r2,zero,40090f3c <__sread+0x38>
40090f20:	80c01417 	ldw	r3,80(r16)
40090f24:	1887883a 	add	r3,r3,r2
40090f28:	80c01415 	stw	r3,80(r16)
40090f2c:	dfc00117 	ldw	ra,4(sp)
40090f30:	dc000017 	ldw	r16,0(sp)
40090f34:	dec00204 	addi	sp,sp,8
40090f38:	f800283a 	ret
40090f3c:	80c0030b 	ldhu	r3,12(r16)
40090f40:	18fbffcc 	andi	r3,r3,61439
40090f44:	80c0030d 	sth	r3,12(r16)
40090f48:	dfc00117 	ldw	ra,4(sp)
40090f4c:	dc000017 	ldw	r16,0(sp)
40090f50:	dec00204 	addi	sp,sp,8
40090f54:	f800283a 	ret

40090f58 <__seofread>:
40090f58:	0005883a 	mov	r2,zero
40090f5c:	f800283a 	ret

40090f60 <__swrite>:
40090f60:	2880030b 	ldhu	r2,12(r5)
40090f64:	defffb04 	addi	sp,sp,-20
40090f68:	dcc00315 	stw	r19,12(sp)
40090f6c:	dc800215 	stw	r18,8(sp)
40090f70:	dc400115 	stw	r17,4(sp)
40090f74:	dc000015 	stw	r16,0(sp)
40090f78:	dfc00415 	stw	ra,16(sp)
40090f7c:	10c0400c 	andi	r3,r2,256
40090f80:	2821883a 	mov	r16,r5
40090f84:	2027883a 	mov	r19,r4
40090f88:	3025883a 	mov	r18,r6
40090f8c:	3823883a 	mov	r17,r7
40090f90:	18000526 	beq	r3,zero,40090fa8 <__swrite+0x48>
40090f94:	2940038f 	ldh	r5,14(r5)
40090f98:	000d883a 	mov	r6,zero
40090f9c:	01c00084 	movi	r7,2
40090fa0:	0092bf80 	call	40092bf8 <_lseek_r>
40090fa4:	8080030b 	ldhu	r2,12(r16)
40090fa8:	8140038f 	ldh	r5,14(r16)
40090fac:	10bbffcc 	andi	r2,r2,61439
40090fb0:	9809883a 	mov	r4,r19
40090fb4:	900d883a 	mov	r6,r18
40090fb8:	880f883a 	mov	r7,r17
40090fbc:	8080030d 	sth	r2,12(r16)
40090fc0:	dfc00417 	ldw	ra,16(sp)
40090fc4:	dcc00317 	ldw	r19,12(sp)
40090fc8:	dc800217 	ldw	r18,8(sp)
40090fcc:	dc400117 	ldw	r17,4(sp)
40090fd0:	dc000017 	ldw	r16,0(sp)
40090fd4:	dec00504 	addi	sp,sp,20
40090fd8:	00926e81 	jmpi	400926e8 <_write_r>

40090fdc <__sseek>:
40090fdc:	defffe04 	addi	sp,sp,-8
40090fe0:	dc000015 	stw	r16,0(sp)
40090fe4:	2821883a 	mov	r16,r5
40090fe8:	2940038f 	ldh	r5,14(r5)
40090fec:	dfc00115 	stw	ra,4(sp)
40090ff0:	0092bf80 	call	40092bf8 <_lseek_r>
40090ff4:	00ffffc4 	movi	r3,-1
40090ff8:	10c00826 	beq	r2,r3,4009101c <__sseek+0x40>
40090ffc:	80c0030b 	ldhu	r3,12(r16)
40091000:	80801415 	stw	r2,80(r16)
40091004:	18c40014 	ori	r3,r3,4096
40091008:	80c0030d 	sth	r3,12(r16)
4009100c:	dfc00117 	ldw	ra,4(sp)
40091010:	dc000017 	ldw	r16,0(sp)
40091014:	dec00204 	addi	sp,sp,8
40091018:	f800283a 	ret
4009101c:	80c0030b 	ldhu	r3,12(r16)
40091020:	18fbffcc 	andi	r3,r3,61439
40091024:	80c0030d 	sth	r3,12(r16)
40091028:	dfc00117 	ldw	ra,4(sp)
4009102c:	dc000017 	ldw	r16,0(sp)
40091030:	dec00204 	addi	sp,sp,8
40091034:	f800283a 	ret

40091038 <__sclose>:
40091038:	2940038f 	ldh	r5,14(r5)
4009103c:	00927441 	jmpi	40092744 <_close_r>

40091040 <strcmp>:
40091040:	2144b03a 	or	r2,r4,r5
40091044:	108000cc 	andi	r2,r2,3
40091048:	1000171e 	bne	r2,zero,400910a8 <strcmp+0x68>
4009104c:	20800017 	ldw	r2,0(r4)
40091050:	28c00017 	ldw	r3,0(r5)
40091054:	10c0141e 	bne	r2,r3,400910a8 <strcmp+0x68>
40091058:	027fbff4 	movhi	r9,65279
4009105c:	4a7fbfc4 	addi	r9,r9,-257
40091060:	0086303a 	nor	r3,zero,r2
40091064:	02202074 	movhi	r8,32897
40091068:	1245883a 	add	r2,r2,r9
4009106c:	42202004 	addi	r8,r8,-32640
40091070:	10c4703a 	and	r2,r2,r3
40091074:	1204703a 	and	r2,r2,r8
40091078:	10000226 	beq	r2,zero,40091084 <strcmp+0x44>
4009107c:	00001706 	br	400910dc <strcmp+0x9c>
40091080:	1000161e 	bne	r2,zero,400910dc <strcmp+0x9c>
40091084:	21000104 	addi	r4,r4,4
40091088:	20c00017 	ldw	r3,0(r4)
4009108c:	29400104 	addi	r5,r5,4
40091090:	29800017 	ldw	r6,0(r5)
40091094:	1a4f883a 	add	r7,r3,r9
40091098:	00c4303a 	nor	r2,zero,r3
4009109c:	3884703a 	and	r2,r7,r2
400910a0:	1204703a 	and	r2,r2,r8
400910a4:	19bff626 	beq	r3,r6,40091080 <__alt_mem_epcs+0xfff50080>
400910a8:	20800007 	ldb	r2,0(r4)
400910ac:	1000051e 	bne	r2,zero,400910c4 <strcmp+0x84>
400910b0:	00000606 	br	400910cc <strcmp+0x8c>
400910b4:	21000044 	addi	r4,r4,1
400910b8:	20800007 	ldb	r2,0(r4)
400910bc:	29400044 	addi	r5,r5,1
400910c0:	10000226 	beq	r2,zero,400910cc <strcmp+0x8c>
400910c4:	28c00007 	ldb	r3,0(r5)
400910c8:	10fffa26 	beq	r2,r3,400910b4 <__alt_mem_epcs+0xfff500b4>
400910cc:	20800003 	ldbu	r2,0(r4)
400910d0:	28c00003 	ldbu	r3,0(r5)
400910d4:	10c5c83a 	sub	r2,r2,r3
400910d8:	f800283a 	ret
400910dc:	0005883a 	mov	r2,zero
400910e0:	f800283a 	ret

400910e4 <__sprint_r.part.0>:
400910e4:	28801917 	ldw	r2,100(r5)
400910e8:	defff604 	addi	sp,sp,-40
400910ec:	dd400515 	stw	r21,20(sp)
400910f0:	dcc00315 	stw	r19,12(sp)
400910f4:	dfc00915 	stw	ra,36(sp)
400910f8:	df000815 	stw	fp,32(sp)
400910fc:	ddc00715 	stw	r23,28(sp)
40091100:	dd800615 	stw	r22,24(sp)
40091104:	dd000415 	stw	r20,16(sp)
40091108:	dc800215 	stw	r18,8(sp)
4009110c:	dc400115 	stw	r17,4(sp)
40091110:	dc000015 	stw	r16,0(sp)
40091114:	1088000c 	andi	r2,r2,8192
40091118:	2827883a 	mov	r19,r5
4009111c:	302b883a 	mov	r21,r6
40091120:	10002d26 	beq	r2,zero,400911d8 <__sprint_r.part.0+0xf4>
40091124:	30800217 	ldw	r2,8(r6)
40091128:	35800017 	ldw	r22,0(r6)
4009112c:	10002826 	beq	r2,zero,400911d0 <__sprint_r.part.0+0xec>
40091130:	2029883a 	mov	r20,r4
40091134:	b5c00104 	addi	r23,r22,4
40091138:	04bfffc4 	movi	r18,-1
4009113c:	bc400017 	ldw	r17,0(r23)
40091140:	b4000017 	ldw	r16,0(r22)
40091144:	0039883a 	mov	fp,zero
40091148:	8822d0ba 	srli	r17,r17,2
4009114c:	04400316 	blt	zero,r17,4009115c <__sprint_r.part.0+0x78>
40091150:	00001706 	br	400911b0 <__sprint_r.part.0+0xcc>
40091154:	84000104 	addi	r16,r16,4
40091158:	8f001526 	beq	r17,fp,400911b0 <__sprint_r.part.0+0xcc>
4009115c:	81400017 	ldw	r5,0(r16)
40091160:	a009883a 	mov	r4,r20
40091164:	980d883a 	mov	r6,r19
40091168:	00929700 	call	40092970 <_fputwc_r>
4009116c:	e7000044 	addi	fp,fp,1
40091170:	14bff81e 	bne	r2,r18,40091154 <__alt_mem_epcs+0xfff50154>
40091174:	9005883a 	mov	r2,r18
40091178:	a8000215 	stw	zero,8(r21)
4009117c:	a8000115 	stw	zero,4(r21)
40091180:	dfc00917 	ldw	ra,36(sp)
40091184:	df000817 	ldw	fp,32(sp)
40091188:	ddc00717 	ldw	r23,28(sp)
4009118c:	dd800617 	ldw	r22,24(sp)
40091190:	dd400517 	ldw	r21,20(sp)
40091194:	dd000417 	ldw	r20,16(sp)
40091198:	dcc00317 	ldw	r19,12(sp)
4009119c:	dc800217 	ldw	r18,8(sp)
400911a0:	dc400117 	ldw	r17,4(sp)
400911a4:	dc000017 	ldw	r16,0(sp)
400911a8:	dec00a04 	addi	sp,sp,40
400911ac:	f800283a 	ret
400911b0:	a8c00217 	ldw	r3,8(r21)
400911b4:	8c63883a 	add	r17,r17,r17
400911b8:	8c63883a 	add	r17,r17,r17
400911bc:	1c45c83a 	sub	r2,r3,r17
400911c0:	a8800215 	stw	r2,8(r21)
400911c4:	b5800204 	addi	r22,r22,8
400911c8:	bdc00204 	addi	r23,r23,8
400911cc:	103fdb1e 	bne	r2,zero,4009113c <__alt_mem_epcs+0xfff5013c>
400911d0:	0005883a 	mov	r2,zero
400911d4:	003fe806 	br	40091178 <__alt_mem_epcs+0xfff50178>
400911d8:	008e2b40 	call	4008e2b4 <__sfvwrite_r>
400911dc:	003fe606 	br	40091178 <__alt_mem_epcs+0xfff50178>

400911e0 <__sprint_r>:
400911e0:	30c00217 	ldw	r3,8(r6)
400911e4:	18000126 	beq	r3,zero,400911ec <__sprint_r+0xc>
400911e8:	00910e41 	jmpi	400910e4 <__sprint_r.part.0>
400911ec:	30000115 	stw	zero,4(r6)
400911f0:	0005883a 	mov	r2,zero
400911f4:	f800283a 	ret

400911f8 <___vfiprintf_internal_r>:
400911f8:	defeca04 	addi	sp,sp,-1240
400911fc:	dd813215 	stw	r22,1224(sp)
40091200:	dd013015 	stw	r20,1216(sp)
40091204:	dfc13515 	stw	ra,1236(sp)
40091208:	df013415 	stw	fp,1232(sp)
4009120c:	ddc13315 	stw	r23,1228(sp)
40091210:	dd413115 	stw	r21,1220(sp)
40091214:	dcc12f15 	stw	r19,1212(sp)
40091218:	dc812e15 	stw	r18,1208(sp)
4009121c:	dc412d15 	stw	r17,1204(sp)
40091220:	dc012c15 	stw	r16,1200(sp)
40091224:	d9012015 	stw	r4,1152(sp)
40091228:	d9c12115 	stw	r7,1156(sp)
4009122c:	2829883a 	mov	r20,r5
40091230:	302d883a 	mov	r22,r6
40091234:	20000226 	beq	r4,zero,40091240 <___vfiprintf_internal_r+0x48>
40091238:	20800e17 	ldw	r2,56(r4)
4009123c:	1001d326 	beq	r2,zero,4009198c <___vfiprintf_internal_r+0x794>
40091240:	a0c0030b 	ldhu	r3,12(r20)
40091244:	1908000c 	andi	r4,r3,8192
40091248:	1805883a 	mov	r2,r3
4009124c:	2000071e 	bne	r4,zero,4009126c <___vfiprintf_internal_r+0x74>
40091250:	a1001917 	ldw	r4,100(r20)
40091254:	18880014 	ori	r2,r3,8192
40091258:	00f7ffc4 	movi	r3,-8193
4009125c:	20c8703a 	and	r4,r4,r3
40091260:	a080030d 	sth	r2,12(r20)
40091264:	1007883a 	mov	r3,r2
40091268:	a1001915 	stw	r4,100(r20)
4009126c:	1100020c 	andi	r4,r2,8
40091270:	20018926 	beq	r4,zero,40091898 <___vfiprintf_internal_r+0x6a0>
40091274:	a1000417 	ldw	r4,16(r20)
40091278:	20018726 	beq	r4,zero,40091898 <___vfiprintf_internal_r+0x6a0>
4009127c:	1080068c 	andi	r2,r2,26
40091280:	01000284 	movi	r4,10
40091284:	11018d26 	beq	r2,r4,400918bc <___vfiprintf_internal_r+0x6c4>
40091288:	da810a04 	addi	r10,sp,1064
4009128c:	dac109c4 	addi	r11,sp,1063
40091290:	071002b4 	movhi	fp,16394
40091294:	05d002b4 	movhi	r23,16394
40091298:	da811e15 	stw	r10,1144(sp)
4009129c:	52d5c83a 	sub	r10,r10,r11
400912a0:	e728c404 	addi	fp,fp,-23792
400912a4:	bde8c004 	addi	r23,r23,-23808
400912a8:	dac11f15 	stw	r11,1148(sp)
400912ac:	dec11a15 	stw	sp,1128(sp)
400912b0:	d8011c15 	stw	zero,1136(sp)
400912b4:	d8011b15 	stw	zero,1132(sp)
400912b8:	d8012615 	stw	zero,1176(sp)
400912bc:	d8012215 	stw	zero,1160(sp)
400912c0:	da812715 	stw	r10,1180(sp)
400912c4:	d811883a 	mov	r8,sp
400912c8:	b021883a 	mov	r16,r22
400912cc:	80800007 	ldb	r2,0(r16)
400912d0:	10039c26 	beq	r2,zero,40092144 <___vfiprintf_internal_r+0xf4c>
400912d4:	01000944 	movi	r4,37
400912d8:	11039a26 	beq	r2,r4,40092144 <___vfiprintf_internal_r+0xf4c>
400912dc:	8005883a 	mov	r2,r16
400912e0:	00000106 	br	400912e8 <___vfiprintf_internal_r+0xf0>
400912e4:	19000326 	beq	r3,r4,400912f4 <___vfiprintf_internal_r+0xfc>
400912e8:	10800044 	addi	r2,r2,1
400912ec:	10c00007 	ldb	r3,0(r2)
400912f0:	183ffc1e 	bne	r3,zero,400912e4 <__alt_mem_epcs+0xfff502e4>
400912f4:	1425c83a 	sub	r18,r2,r16
400912f8:	1023883a 	mov	r17,r2
400912fc:	90001026 	beq	r18,zero,40091340 <___vfiprintf_internal_r+0x148>
40091300:	d8c11c17 	ldw	r3,1136(sp)
40091304:	d8811b17 	ldw	r2,1132(sp)
40091308:	44000015 	stw	r16,0(r8)
4009130c:	90c7883a 	add	r3,r18,r3
40091310:	10800044 	addi	r2,r2,1
40091314:	44800115 	stw	r18,4(r8)
40091318:	d8c11c15 	stw	r3,1136(sp)
4009131c:	d8811b15 	stw	r2,1132(sp)
40091320:	010001c4 	movi	r4,7
40091324:	2080750e 	bge	r4,r2,400914fc <___vfiprintf_internal_r+0x304>
40091328:	18039d1e 	bne	r3,zero,400921a0 <___vfiprintf_internal_r+0xfa8>
4009132c:	dac12217 	ldw	r11,1160(sp)
40091330:	d8011b15 	stw	zero,1132(sp)
40091334:	d811883a 	mov	r8,sp
40091338:	5c97883a 	add	r11,r11,r18
4009133c:	dac12215 	stw	r11,1160(sp)
40091340:	88800007 	ldb	r2,0(r17)
40091344:	1002e026 	beq	r2,zero,40091ec8 <___vfiprintf_internal_r+0xcd0>
40091348:	88c00047 	ldb	r3,1(r17)
4009134c:	8c000044 	addi	r16,r17,1
40091350:	d8011d85 	stb	zero,1142(sp)
40091354:	000d883a 	mov	r6,zero
40091358:	027fffc4 	movi	r9,-1
4009135c:	0027883a 	mov	r19,zero
40091360:	002b883a 	mov	r21,zero
40091364:	01001604 	movi	r4,88
40091368:	01400244 	movi	r5,9
4009136c:	03000a84 	movi	r12,42
40091370:	01c01b04 	movi	r7,108
40091374:	84000044 	addi	r16,r16,1
40091378:	18bff804 	addi	r2,r3,-32
4009137c:	20825f36 	bltu	r4,r2,40091cfc <___vfiprintf_internal_r+0xb04>
40091380:	100490ba 	slli	r2,r2,2
40091384:	02900274 	movhi	r10,16393
40091388:	5284e604 	addi	r10,r10,5016
4009138c:	1285883a 	add	r2,r2,r10
40091390:	10800017 	ldw	r2,0(r2)
40091394:	1000683a 	jmp	r2
40091398:	40091b6c 	andhi	zero,r8,9325
4009139c:	40091cfc 	xorhi	zero,r8,9331
400913a0:	40091cfc 	xorhi	zero,r8,9331
400913a4:	40091cf0 	cmpltui	zero,r8,9331
400913a8:	40091cfc 	xorhi	zero,r8,9331
400913ac:	40091cfc 	xorhi	zero,r8,9331
400913b0:	40091cfc 	xorhi	zero,r8,9331
400913b4:	40091cfc 	xorhi	zero,r8,9331
400913b8:	40091cfc 	xorhi	zero,r8,9331
400913bc:	40091cfc 	xorhi	zero,r8,9331
400913c0:	40091cc8 	cmpgei	zero,r8,9331
400913c4:	40091ce4 	muli	zero,r8,9331
400913c8:	40091cfc 	xorhi	zero,r8,9331
400913cc:	4009199c 	xori	zero,r8,9318
400913d0:	40091afc 	xorhi	zero,r8,9323
400913d4:	40091cfc 	xorhi	zero,r8,9331
400913d8:	40091a80 	call	440091a8 <__alt_mem_epcs+0x3ec81a8>
400913dc:	40091a8c 	andi	zero,r8,9322
400913e0:	40091a8c 	andi	zero,r8,9322
400913e4:	40091a8c 	andi	zero,r8,9322
400913e8:	40091a8c 	andi	zero,r8,9322
400913ec:	40091a8c 	andi	zero,r8,9322
400913f0:	40091a8c 	andi	zero,r8,9322
400913f4:	40091a8c 	andi	zero,r8,9322
400913f8:	40091a8c 	andi	zero,r8,9322
400913fc:	40091a8c 	andi	zero,r8,9322
40091400:	40091cfc 	xorhi	zero,r8,9331
40091404:	40091cfc 	xorhi	zero,r8,9331
40091408:	40091cfc 	xorhi	zero,r8,9331
4009140c:	40091cfc 	xorhi	zero,r8,9331
40091410:	40091cfc 	xorhi	zero,r8,9331
40091414:	40091cfc 	xorhi	zero,r8,9331
40091418:	40091cfc 	xorhi	zero,r8,9331
4009141c:	40091cfc 	xorhi	zero,r8,9331
40091420:	40091cfc 	xorhi	zero,r8,9331
40091424:	40091cfc 	xorhi	zero,r8,9331
40091428:	40091ab8 	rdprs	zero,r8,9322
4009142c:	40091cfc 	xorhi	zero,r8,9331
40091430:	40091cfc 	xorhi	zero,r8,9331
40091434:	40091cfc 	xorhi	zero,r8,9331
40091438:	40091cfc 	xorhi	zero,r8,9331
4009143c:	40091cfc 	xorhi	zero,r8,9331
40091440:	40091cfc 	xorhi	zero,r8,9331
40091444:	40091cfc 	xorhi	zero,r8,9331
40091448:	40091cfc 	xorhi	zero,r8,9331
4009144c:	40091cfc 	xorhi	zero,r8,9331
40091450:	40091cfc 	xorhi	zero,r8,9331
40091454:	4009154c 	andi	zero,r8,9301
40091458:	40091cfc 	xorhi	zero,r8,9331
4009145c:	40091cfc 	xorhi	zero,r8,9331
40091460:	40091cfc 	xorhi	zero,r8,9331
40091464:	40091cfc 	xorhi	zero,r8,9331
40091468:	40091cfc 	xorhi	zero,r8,9331
4009146c:	40091510 	cmplti	zero,r8,9300
40091470:	40091cfc 	xorhi	zero,r8,9331
40091474:	40091cfc 	xorhi	zero,r8,9331
40091478:	400919f8 	rdprs	zero,r8,9319
4009147c:	40091cfc 	xorhi	zero,r8,9331
40091480:	40091cfc 	xorhi	zero,r8,9331
40091484:	40091cfc 	xorhi	zero,r8,9331
40091488:	40091cfc 	xorhi	zero,r8,9331
4009148c:	40091cfc 	xorhi	zero,r8,9331
40091490:	40091cfc 	xorhi	zero,r8,9331
40091494:	40091cfc 	xorhi	zero,r8,9331
40091498:	40091cfc 	xorhi	zero,r8,9331
4009149c:	40091cfc 	xorhi	zero,r8,9331
400914a0:	40091cfc 	xorhi	zero,r8,9331
400914a4:	40091a50 	cmplti	zero,r8,9321
400914a8:	40091be8 	cmpgeui	zero,r8,9327
400914ac:	40091cfc 	xorhi	zero,r8,9331
400914b0:	40091cfc 	xorhi	zero,r8,9331
400914b4:	40091cfc 	xorhi	zero,r8,9331
400914b8:	40091c70 	cmpltui	zero,r8,9329
400914bc:	40091be8 	cmpgeui	zero,r8,9327
400914c0:	40091cfc 	xorhi	zero,r8,9331
400914c4:	40091cfc 	xorhi	zero,r8,9331
400914c8:	40091c7c 	xorhi	zero,r8,9329
400914cc:	40091cfc 	xorhi	zero,r8,9331
400914d0:	40091b3c 	xorhi	zero,r8,9324
400914d4:	40091550 	cmplti	zero,r8,9301
400914d8:	40091c24 	muli	zero,r8,9328
400914dc:	40091c64 	muli	zero,r8,9329
400914e0:	40091cfc 	xorhi	zero,r8,9331
400914e4:	40091b88 	cmpgei	zero,r8,9326
400914e8:	40091cfc 	xorhi	zero,r8,9331
400914ec:	40091514 	ori	zero,r8,9300
400914f0:	40091cfc 	xorhi	zero,r8,9331
400914f4:	40091cfc 	xorhi	zero,r8,9331
400914f8:	40091c8c 	andi	zero,r8,9330
400914fc:	42000204 	addi	r8,r8,8
40091500:	dac12217 	ldw	r11,1160(sp)
40091504:	5c97883a 	add	r11,r11,r18
40091508:	dac12215 	stw	r11,1160(sp)
4009150c:	003f8c06 	br	40091340 <__alt_mem_epcs+0xfff50340>
40091510:	ad400414 	ori	r21,r21,16
40091514:	a880080c 	andi	r2,r21,32
40091518:	10012f1e 	bne	r2,zero,400919d8 <___vfiprintf_internal_r+0x7e0>
4009151c:	a880040c 	andi	r2,r21,16
40091520:	1001ff1e 	bne	r2,zero,40091d20 <___vfiprintf_internal_r+0xb28>
40091524:	a880100c 	andi	r2,r21,64
40091528:	1001fd26 	beq	r2,zero,40091d20 <___vfiprintf_internal_r+0xb28>
4009152c:	da812117 	ldw	r10,1156(sp)
40091530:	002d883a 	mov	r22,zero
40091534:	00800044 	movi	r2,1
40091538:	5480000b 	ldhu	r18,0(r10)
4009153c:	52800104 	addi	r10,r10,4
40091540:	da812115 	stw	r10,1156(sp)
40091544:	9009883a 	mov	r4,r18
40091548:	00000a06 	br	40091574 <___vfiprintf_internal_r+0x37c>
4009154c:	ad400414 	ori	r21,r21,16
40091550:	a880080c 	andi	r2,r21,32
40091554:	10011426 	beq	r2,zero,400919a8 <___vfiprintf_internal_r+0x7b0>
40091558:	da812117 	ldw	r10,1156(sp)
4009155c:	0005883a 	mov	r2,zero
40091560:	54800017 	ldw	r18,0(r10)
40091564:	55800117 	ldw	r22,4(r10)
40091568:	52800204 	addi	r10,r10,8
4009156c:	da812115 	stw	r10,1156(sp)
40091570:	9588b03a 	or	r4,r18,r22
40091574:	d8011d85 	stb	zero,1142(sp)
40091578:	4823883a 	mov	r17,r9
4009157c:	0019883a 	mov	r12,zero
40091580:	48000216 	blt	r9,zero,4009158c <___vfiprintf_internal_r+0x394>
40091584:	00ffdfc4 	movi	r3,-129
40091588:	a8ea703a 	and	r21,r21,r3
4009158c:	2002221e 	bne	r4,zero,40091e18 <___vfiprintf_internal_r+0xc20>
40091590:	4802c726 	beq	r9,zero,400920b0 <___vfiprintf_internal_r+0xeb8>
40091594:	10803fcc 	andi	r2,r2,255
40091598:	00c00044 	movi	r3,1
4009159c:	10c24426 	beq	r2,r3,40091eb0 <___vfiprintf_internal_r+0xcb8>
400915a0:	00c00084 	movi	r3,2
400915a4:	10c2cc26 	beq	r2,r3,400920d8 <___vfiprintf_internal_r+0xee0>
400915a8:	d8c10a04 	addi	r3,sp,1064
400915ac:	9008d0fa 	srli	r4,r18,3
400915b0:	b00a977a 	slli	r5,r22,29
400915b4:	b02cd0fa 	srli	r22,r22,3
400915b8:	948001cc 	andi	r18,r18,7
400915bc:	90800c04 	addi	r2,r18,48
400915c0:	18ffffc4 	addi	r3,r3,-1
400915c4:	2924b03a 	or	r18,r5,r4
400915c8:	18800005 	stb	r2,0(r3)
400915cc:	9588b03a 	or	r4,r18,r22
400915d0:	203ff61e 	bne	r4,zero,400915ac <__alt_mem_epcs+0xfff505ac>
400915d4:	a900004c 	andi	r4,r21,1
400915d8:	d8c12415 	stw	r3,1168(sp)
400915dc:	2002fb1e 	bne	r4,zero,400921cc <___vfiprintf_internal_r+0xfd4>
400915e0:	da811e17 	ldw	r10,1144(sp)
400915e4:	50e3c83a 	sub	r17,r10,r3
400915e8:	8825883a 	mov	r18,r17
400915ec:	8a40010e 	bge	r17,r9,400915f4 <___vfiprintf_internal_r+0x3fc>
400915f0:	4825883a 	mov	r18,r9
400915f4:	63003fcc 	andi	r12,r12,255
400915f8:	6300201c 	xori	r12,r12,128
400915fc:	633fe004 	addi	r12,r12,-128
40091600:	60000126 	beq	r12,zero,40091608 <___vfiprintf_internal_r+0x410>
40091604:	94800044 	addi	r18,r18,1
40091608:	ab80008c 	andi	r14,r21,2
4009160c:	70000126 	beq	r14,zero,40091614 <___vfiprintf_internal_r+0x41c>
40091610:	94800084 	addi	r18,r18,2
40091614:	ad80210c 	andi	r22,r21,132
40091618:	b001df1e 	bne	r22,zero,40091d98 <___vfiprintf_internal_r+0xba0>
4009161c:	9c8fc83a 	sub	r7,r19,r18
40091620:	01c1dd0e 	bge	zero,r7,40091d98 <___vfiprintf_internal_r+0xba0>
40091624:	03000404 	movi	r12,16
40091628:	d8811c17 	ldw	r2,1136(sp)
4009162c:	61c3920e 	bge	r12,r7,40092478 <___vfiprintf_internal_r+0x1280>
40091630:	029002b4 	movhi	r10,16394
40091634:	52a8c404 	addi	r10,r10,-23792
40091638:	dc012915 	stw	r16,1188(sp)
4009163c:	d9811b17 	ldw	r6,1132(sp)
40091640:	da812315 	stw	r10,1164(sp)
40091644:	00c001c4 	movi	r3,7
40091648:	da412515 	stw	r9,1172(sp)
4009164c:	db812815 	stw	r14,1184(sp)
40091650:	3821883a 	mov	r16,r7
40091654:	00000506 	br	4009166c <___vfiprintf_internal_r+0x474>
40091658:	31400084 	addi	r5,r6,2
4009165c:	42000204 	addi	r8,r8,8
40091660:	200d883a 	mov	r6,r4
40091664:	843ffc04 	addi	r16,r16,-16
40091668:	64000d0e 	bge	r12,r16,400916a0 <___vfiprintf_internal_r+0x4a8>
4009166c:	10800404 	addi	r2,r2,16
40091670:	31000044 	addi	r4,r6,1
40091674:	47000015 	stw	fp,0(r8)
40091678:	43000115 	stw	r12,4(r8)
4009167c:	d8811c15 	stw	r2,1136(sp)
40091680:	d9011b15 	stw	r4,1132(sp)
40091684:	193ff40e 	bge	r3,r4,40091658 <__alt_mem_epcs+0xfff50658>
40091688:	1001b51e 	bne	r2,zero,40091d60 <___vfiprintf_internal_r+0xb68>
4009168c:	843ffc04 	addi	r16,r16,-16
40091690:	000d883a 	mov	r6,zero
40091694:	01400044 	movi	r5,1
40091698:	d811883a 	mov	r8,sp
4009169c:	643ff316 	blt	r12,r16,4009166c <__alt_mem_epcs+0xfff5066c>
400916a0:	800f883a 	mov	r7,r16
400916a4:	da412517 	ldw	r9,1172(sp)
400916a8:	db812817 	ldw	r14,1184(sp)
400916ac:	dc012917 	ldw	r16,1188(sp)
400916b0:	dac12317 	ldw	r11,1164(sp)
400916b4:	3887883a 	add	r3,r7,r2
400916b8:	41c00115 	stw	r7,4(r8)
400916bc:	42c00015 	stw	r11,0(r8)
400916c0:	d8c11c15 	stw	r3,1136(sp)
400916c4:	d9411b15 	stw	r5,1132(sp)
400916c8:	008001c4 	movi	r2,7
400916cc:	11429316 	blt	r2,r5,4009211c <___vfiprintf_internal_r+0xf24>
400916d0:	d9011d87 	ldb	r4,1142(sp)
400916d4:	42000204 	addi	r8,r8,8
400916d8:	28800044 	addi	r2,r5,1
400916dc:	2001b31e 	bne	r4,zero,40091dac <___vfiprintf_internal_r+0xbb4>
400916e0:	70000c26 	beq	r14,zero,40091714 <___vfiprintf_internal_r+0x51c>
400916e4:	d9011d04 	addi	r4,sp,1140
400916e8:	18c00084 	addi	r3,r3,2
400916ec:	41000015 	stw	r4,0(r8)
400916f0:	01000084 	movi	r4,2
400916f4:	41000115 	stw	r4,4(r8)
400916f8:	d8c11c15 	stw	r3,1136(sp)
400916fc:	d8811b15 	stw	r2,1132(sp)
40091700:	010001c4 	movi	r4,7
40091704:	20826516 	blt	r4,r2,4009209c <___vfiprintf_internal_r+0xea4>
40091708:	100b883a 	mov	r5,r2
4009170c:	42000204 	addi	r8,r8,8
40091710:	10800044 	addi	r2,r2,1
40091714:	01002004 	movi	r4,128
40091718:	b1021a26 	beq	r22,r4,40091f84 <___vfiprintf_internal_r+0xd8c>
4009171c:	4c6dc83a 	sub	r22,r9,r17
40091720:	0580230e 	bge	zero,r22,400917b0 <___vfiprintf_internal_r+0x5b8>
40091724:	01c00404 	movi	r7,16
40091728:	3d83300e 	bge	r7,r22,400923ec <___vfiprintf_internal_r+0x11f4>
4009172c:	009002b4 	movhi	r2,16394
40091730:	10a8c004 	addi	r2,r2,-23808
40091734:	d8812315 	stw	r2,1164(sp)
40091738:	030001c4 	movi	r12,7
4009173c:	00000506 	br	40091754 <___vfiprintf_internal_r+0x55c>
40091740:	28800084 	addi	r2,r5,2
40091744:	42000204 	addi	r8,r8,8
40091748:	200b883a 	mov	r5,r4
4009174c:	b5bffc04 	addi	r22,r22,-16
40091750:	3d800d0e 	bge	r7,r22,40091788 <___vfiprintf_internal_r+0x590>
40091754:	18c00404 	addi	r3,r3,16
40091758:	29000044 	addi	r4,r5,1
4009175c:	45c00015 	stw	r23,0(r8)
40091760:	41c00115 	stw	r7,4(r8)
40091764:	d8c11c15 	stw	r3,1136(sp)
40091768:	d9011b15 	stw	r4,1132(sp)
4009176c:	613ff40e 	bge	r12,r4,40091740 <__alt_mem_epcs+0xfff50740>
40091770:	18019b1e 	bne	r3,zero,40091de0 <___vfiprintf_internal_r+0xbe8>
40091774:	b5bffc04 	addi	r22,r22,-16
40091778:	000b883a 	mov	r5,zero
4009177c:	00800044 	movi	r2,1
40091780:	d811883a 	mov	r8,sp
40091784:	3dbff316 	blt	r7,r22,40091754 <__alt_mem_epcs+0xfff50754>
40091788:	da812317 	ldw	r10,1164(sp)
4009178c:	1d87883a 	add	r3,r3,r22
40091790:	45800115 	stw	r22,4(r8)
40091794:	42800015 	stw	r10,0(r8)
40091798:	d8c11c15 	stw	r3,1136(sp)
4009179c:	d8811b15 	stw	r2,1132(sp)
400917a0:	010001c4 	movi	r4,7
400917a4:	2081dd16 	blt	r4,r2,40091f1c <___vfiprintf_internal_r+0xd24>
400917a8:	42000204 	addi	r8,r8,8
400917ac:	10800044 	addi	r2,r2,1
400917b0:	da812417 	ldw	r10,1168(sp)
400917b4:	1c47883a 	add	r3,r3,r17
400917b8:	44400115 	stw	r17,4(r8)
400917bc:	42800015 	stw	r10,0(r8)
400917c0:	d8c11c15 	stw	r3,1136(sp)
400917c4:	d8811b15 	stw	r2,1132(sp)
400917c8:	010001c4 	movi	r4,7
400917cc:	2081dc0e 	bge	r4,r2,40091f40 <___vfiprintf_internal_r+0xd48>
400917d0:	1802611e 	bne	r3,zero,40092158 <___vfiprintf_internal_r+0xf60>
400917d4:	d8011b15 	stw	zero,1132(sp)
400917d8:	aac0010c 	andi	r11,r21,4
400917dc:	58002726 	beq	r11,zero,4009187c <___vfiprintf_internal_r+0x684>
400917e0:	9ca3c83a 	sub	r17,r19,r18
400917e4:	d811883a 	mov	r8,sp
400917e8:	0443510e 	bge	zero,r17,40092530 <___vfiprintf_internal_r+0x1338>
400917ec:	01c00404 	movi	r7,16
400917f0:	3c43320e 	bge	r7,r17,400924bc <___vfiprintf_internal_r+0x12c4>
400917f4:	009002b4 	movhi	r2,16394
400917f8:	10a8c404 	addi	r2,r2,-23792
400917fc:	d9011b17 	ldw	r4,1132(sp)
40091800:	d8812315 	stw	r2,1164(sp)
40091804:	382d883a 	mov	r22,r7
40091808:	054001c4 	movi	r21,7
4009180c:	00000506 	br	40091824 <___vfiprintf_internal_r+0x62c>
40091810:	21400084 	addi	r5,r4,2
40091814:	42000204 	addi	r8,r8,8
40091818:	1009883a 	mov	r4,r2
4009181c:	8c7ffc04 	addi	r17,r17,-16
40091820:	b4400d0e 	bge	r22,r17,40091858 <___vfiprintf_internal_r+0x660>
40091824:	18c00404 	addi	r3,r3,16
40091828:	20800044 	addi	r2,r4,1
4009182c:	47000015 	stw	fp,0(r8)
40091830:	45800115 	stw	r22,4(r8)
40091834:	d8c11c15 	stw	r3,1136(sp)
40091838:	d8811b15 	stw	r2,1132(sp)
4009183c:	a8bff40e 	bge	r21,r2,40091810 <__alt_mem_epcs+0xfff50810>
40091840:	1801ac1e 	bne	r3,zero,40091ef4 <___vfiprintf_internal_r+0xcfc>
40091844:	8c7ffc04 	addi	r17,r17,-16
40091848:	0009883a 	mov	r4,zero
4009184c:	01400044 	movi	r5,1
40091850:	d811883a 	mov	r8,sp
40091854:	b47ff316 	blt	r22,r17,40091824 <__alt_mem_epcs+0xfff50824>
40091858:	da812317 	ldw	r10,1164(sp)
4009185c:	1c47883a 	add	r3,r3,r17
40091860:	44400115 	stw	r17,4(r8)
40091864:	42800015 	stw	r10,0(r8)
40091868:	d8c11c15 	stw	r3,1136(sp)
4009186c:	d9411b15 	stw	r5,1132(sp)
40091870:	008001c4 	movi	r2,7
40091874:	1141b70e 	bge	r2,r5,40091f54 <___vfiprintf_internal_r+0xd5c>
40091878:	1802cf1e 	bne	r3,zero,400923b8 <___vfiprintf_internal_r+0x11c0>
4009187c:	94c2ca16 	blt	r18,r19,400923a8 <___vfiprintf_internal_r+0x11b0>
40091880:	dac12217 	ldw	r11,1160(sp)
40091884:	5c97883a 	add	r11,r11,r18
40091888:	dac12215 	stw	r11,1160(sp)
4009188c:	d8011b15 	stw	zero,1132(sp)
40091890:	d811883a 	mov	r8,sp
40091894:	003e8d06 	br	400912cc <__alt_mem_epcs+0xfff502cc>
40091898:	d9012017 	ldw	r4,1152(sp)
4009189c:	a00b883a 	mov	r5,r20
400918a0:	008be500 	call	4008be50 <__swsetup_r>
400918a4:	10002c1e 	bne	r2,zero,40091958 <___vfiprintf_internal_r+0x760>
400918a8:	a0c0030b 	ldhu	r3,12(r20)
400918ac:	01000284 	movi	r4,10
400918b0:	1805883a 	mov	r2,r3
400918b4:	1080068c 	andi	r2,r2,26
400918b8:	113e731e 	bne	r2,r4,40091288 <__alt_mem_epcs+0xfff50288>
400918bc:	a080038b 	ldhu	r2,14(r20)
400918c0:	113fffcc 	andi	r4,r2,65535
400918c4:	2120001c 	xori	r4,r4,32768
400918c8:	21200004 	addi	r4,r4,-32768
400918cc:	203e6e16 	blt	r4,zero,40091288 <__alt_mem_epcs+0xfff50288>
400918d0:	a3001917 	ldw	r12,100(r20)
400918d4:	a2c00717 	ldw	r11,28(r20)
400918d8:	a2800917 	ldw	r10,36(r20)
400918dc:	d9012017 	ldw	r4,1152(sp)
400918e0:	d9c12117 	ldw	r7,1156(sp)
400918e4:	02410004 	movi	r9,1024
400918e8:	18ffff4c 	andi	r3,r3,65533
400918ec:	da4b883a 	add	r5,sp,r9
400918f0:	b00d883a 	mov	r6,r22
400918f4:	d8c1030d 	sth	r3,1036(sp)
400918f8:	db011915 	stw	r12,1124(sp)
400918fc:	d881038d 	sth	r2,1038(sp)
40091900:	dac10715 	stw	r11,1052(sp)
40091904:	da810915 	stw	r10,1060(sp)
40091908:	dec10015 	stw	sp,1024(sp)
4009190c:	dec10415 	stw	sp,1040(sp)
40091910:	da410215 	stw	r9,1032(sp)
40091914:	da410515 	stw	r9,1044(sp)
40091918:	d8010615 	stw	zero,1048(sp)
4009191c:	00911f80 	call	400911f8 <___vfiprintf_internal_r>
40091920:	1021883a 	mov	r16,r2
40091924:	10000416 	blt	r2,zero,40091938 <___vfiprintf_internal_r+0x740>
40091928:	d9012017 	ldw	r4,1152(sp)
4009192c:	d9410004 	addi	r5,sp,1024
40091930:	008d8a80 	call	4008d8a8 <_fflush_r>
40091934:	1002fc1e 	bne	r2,zero,40092528 <___vfiprintf_internal_r+0x1330>
40091938:	d881030b 	ldhu	r2,1036(sp)
4009193c:	1080100c 	andi	r2,r2,64
40091940:	10000326 	beq	r2,zero,40091950 <___vfiprintf_internal_r+0x758>
40091944:	a080030b 	ldhu	r2,12(r20)
40091948:	10801014 	ori	r2,r2,64
4009194c:	a080030d 	sth	r2,12(r20)
40091950:	8005883a 	mov	r2,r16
40091954:	00000106 	br	4009195c <___vfiprintf_internal_r+0x764>
40091958:	00bfffc4 	movi	r2,-1
4009195c:	dfc13517 	ldw	ra,1236(sp)
40091960:	df013417 	ldw	fp,1232(sp)
40091964:	ddc13317 	ldw	r23,1228(sp)
40091968:	dd813217 	ldw	r22,1224(sp)
4009196c:	dd413117 	ldw	r21,1220(sp)
40091970:	dd013017 	ldw	r20,1216(sp)
40091974:	dcc12f17 	ldw	r19,1212(sp)
40091978:	dc812e17 	ldw	r18,1208(sp)
4009197c:	dc412d17 	ldw	r17,1204(sp)
40091980:	dc012c17 	ldw	r16,1200(sp)
40091984:	dec13604 	addi	sp,sp,1240
40091988:	f800283a 	ret
4009198c:	008de500 	call	4008de50 <__sinit>
40091990:	003e2b06 	br	40091240 <__alt_mem_epcs+0xfff50240>
40091994:	04e7c83a 	sub	r19,zero,r19
40091998:	d8812115 	stw	r2,1156(sp)
4009199c:	ad400114 	ori	r21,r21,4
400919a0:	80c00007 	ldb	r3,0(r16)
400919a4:	003e7306 	br	40091374 <__alt_mem_epcs+0xfff50374>
400919a8:	a880040c 	andi	r2,r21,16
400919ac:	1000e41e 	bne	r2,zero,40091d40 <___vfiprintf_internal_r+0xb48>
400919b0:	a880100c 	andi	r2,r21,64
400919b4:	1000e226 	beq	r2,zero,40091d40 <___vfiprintf_internal_r+0xb48>
400919b8:	da812117 	ldw	r10,1156(sp)
400919bc:	002d883a 	mov	r22,zero
400919c0:	0005883a 	mov	r2,zero
400919c4:	5480000b 	ldhu	r18,0(r10)
400919c8:	52800104 	addi	r10,r10,4
400919cc:	da812115 	stw	r10,1156(sp)
400919d0:	9009883a 	mov	r4,r18
400919d4:	003ee706 	br	40091574 <__alt_mem_epcs+0xfff50574>
400919d8:	da812117 	ldw	r10,1156(sp)
400919dc:	00800044 	movi	r2,1
400919e0:	54800017 	ldw	r18,0(r10)
400919e4:	55800117 	ldw	r22,4(r10)
400919e8:	52800204 	addi	r10,r10,8
400919ec:	da812115 	stw	r10,1156(sp)
400919f0:	9588b03a 	or	r4,r18,r22
400919f4:	003edf06 	br	40091574 <__alt_mem_epcs+0xfff50574>
400919f8:	02d002b4 	movhi	r11,16394
400919fc:	5ae85a04 	addi	r11,r11,-24216
40091a00:	d9811d85 	stb	r6,1142(sp)
40091a04:	dac12615 	stw	r11,1176(sp)
40091a08:	a900080c 	andi	r4,r21,32
40091a0c:	d8812117 	ldw	r2,1156(sp)
40091a10:	2000a526 	beq	r4,zero,40091ca8 <___vfiprintf_internal_r+0xab0>
40091a14:	da812117 	ldw	r10,1156(sp)
40091a18:	14800017 	ldw	r18,0(r2)
40091a1c:	15800117 	ldw	r22,4(r2)
40091a20:	52800204 	addi	r10,r10,8
40091a24:	da812115 	stw	r10,1156(sp)
40091a28:	a880004c 	andi	r2,r21,1
40091a2c:	1001d926 	beq	r2,zero,40092194 <___vfiprintf_internal_r+0xf9c>
40091a30:	9588b03a 	or	r4,r18,r22
40091a34:	20024426 	beq	r4,zero,40092348 <___vfiprintf_internal_r+0x1150>
40091a38:	00800c04 	movi	r2,48
40091a3c:	d8811d05 	stb	r2,1140(sp)
40091a40:	d8c11d45 	stb	r3,1141(sp)
40091a44:	ad400094 	ori	r21,r21,2
40091a48:	00800084 	movi	r2,2
40091a4c:	003ec906 	br	40091574 <__alt_mem_epcs+0xfff50574>
40091a50:	da812117 	ldw	r10,1156(sp)
40091a54:	04800044 	movi	r18,1
40091a58:	dac10004 	addi	r11,sp,1024
40091a5c:	50800017 	ldw	r2,0(r10)
40091a60:	52800104 	addi	r10,r10,4
40091a64:	d8011d85 	stb	zero,1142(sp)
40091a68:	d8810005 	stb	r2,1024(sp)
40091a6c:	da812115 	stw	r10,1156(sp)
40091a70:	9023883a 	mov	r17,r18
40091a74:	dac12415 	stw	r11,1168(sp)
40091a78:	0013883a 	mov	r9,zero
40091a7c:	003ee206 	br	40091608 <__alt_mem_epcs+0xfff50608>
40091a80:	ad402014 	ori	r21,r21,128
40091a84:	80c00007 	ldb	r3,0(r16)
40091a88:	003e3a06 	br	40091374 <__alt_mem_epcs+0xfff50374>
40091a8c:	8015883a 	mov	r10,r16
40091a90:	0027883a 	mov	r19,zero
40091a94:	18bff404 	addi	r2,r3,-48
40091a98:	50c00007 	ldb	r3,0(r10)
40091a9c:	9cc002a4 	muli	r19,r19,10
40091aa0:	84000044 	addi	r16,r16,1
40091aa4:	8015883a 	mov	r10,r16
40091aa8:	98a7883a 	add	r19,r19,r2
40091aac:	18bff404 	addi	r2,r3,-48
40091ab0:	28bff92e 	bgeu	r5,r2,40091a98 <__alt_mem_epcs+0xfff50a98>
40091ab4:	003e3006 	br	40091378 <__alt_mem_epcs+0xfff50378>
40091ab8:	ad400414 	ori	r21,r21,16
40091abc:	d9811d85 	stb	r6,1142(sp)
40091ac0:	a880080c 	andi	r2,r21,32
40091ac4:	d8c12117 	ldw	r3,1156(sp)
40091ac8:	10004b26 	beq	r2,zero,40091bf8 <___vfiprintf_internal_r+0xa00>
40091acc:	da812117 	ldw	r10,1156(sp)
40091ad0:	18800117 	ldw	r2,4(r3)
40091ad4:	1c800017 	ldw	r18,0(r3)
40091ad8:	52800204 	addi	r10,r10,8
40091adc:	da812115 	stw	r10,1156(sp)
40091ae0:	102d883a 	mov	r22,r2
40091ae4:	1001f116 	blt	r2,zero,400922ac <___vfiprintf_internal_r+0x10b4>
40091ae8:	db011d83 	ldbu	r12,1142(sp)
40091aec:	4823883a 	mov	r17,r9
40091af0:	00800044 	movi	r2,1
40091af4:	9588b03a 	or	r4,r18,r22
40091af8:	003ea106 	br	40091580 <__alt_mem_epcs+0xfff50580>
40091afc:	80c00007 	ldb	r3,0(r16)
40091b00:	82800044 	addi	r10,r16,1
40091b04:	1b027f26 	beq	r3,r12,40092504 <___vfiprintf_internal_r+0x130c>
40091b08:	18bff404 	addi	r2,r3,-48
40091b0c:	5021883a 	mov	r16,r10
40091b10:	0013883a 	mov	r9,zero
40091b14:	28be1836 	bltu	r5,r2,40091378 <__alt_mem_epcs+0xfff50378>
40091b18:	80c00007 	ldb	r3,0(r16)
40091b1c:	4a4002a4 	muli	r9,r9,10
40091b20:	84000044 	addi	r16,r16,1
40091b24:	1253883a 	add	r9,r2,r9
40091b28:	18bff404 	addi	r2,r3,-48
40091b2c:	28bffa2e 	bgeu	r5,r2,40091b18 <__alt_mem_epcs+0xfff50b18>
40091b30:	483e110e 	bge	r9,zero,40091378 <__alt_mem_epcs+0xfff50378>
40091b34:	027fffc4 	movi	r9,-1
40091b38:	003e0f06 	br	40091378 <__alt_mem_epcs+0xfff50378>
40091b3c:	d9811d85 	stb	r6,1142(sp)
40091b40:	a880080c 	andi	r2,r21,32
40091b44:	1001ee26 	beq	r2,zero,40092300 <___vfiprintf_internal_r+0x1108>
40091b48:	da812117 	ldw	r10,1156(sp)
40091b4c:	dac12217 	ldw	r11,1160(sp)
40091b50:	50800017 	ldw	r2,0(r10)
40091b54:	5807d7fa 	srai	r3,r11,31
40091b58:	52800104 	addi	r10,r10,4
40091b5c:	da812115 	stw	r10,1156(sp)
40091b60:	12c00015 	stw	r11,0(r2)
40091b64:	10c00115 	stw	r3,4(r2)
40091b68:	003dd806 	br	400912cc <__alt_mem_epcs+0xfff502cc>
40091b6c:	30803fcc 	andi	r2,r6,255
40091b70:	1080201c 	xori	r2,r2,128
40091b74:	10bfe004 	addi	r2,r2,-128
40091b78:	1001df1e 	bne	r2,zero,400922f8 <___vfiprintf_internal_r+0x1100>
40091b7c:	01800804 	movi	r6,32
40091b80:	80c00007 	ldb	r3,0(r16)
40091b84:	003dfb06 	br	40091374 <__alt_mem_epcs+0xfff50374>
40091b88:	da812117 	ldw	r10,1156(sp)
40091b8c:	dac12117 	ldw	r11,1156(sp)
40091b90:	d8011d85 	stb	zero,1142(sp)
40091b94:	52800017 	ldw	r10,0(r10)
40091b98:	5d800104 	addi	r22,r11,4
40091b9c:	da812415 	stw	r10,1168(sp)
40091ba0:	50023b26 	beq	r10,zero,40092490 <___vfiprintf_internal_r+0x1298>
40091ba4:	d9012417 	ldw	r4,1168(sp)
40091ba8:	48021f16 	blt	r9,zero,40092428 <___vfiprintf_internal_r+0x1230>
40091bac:	480d883a 	mov	r6,r9
40091bb0:	000b883a 	mov	r5,zero
40091bb4:	da012a15 	stw	r8,1192(sp)
40091bb8:	da412b15 	stw	r9,1196(sp)
40091bbc:	008f3080 	call	4008f308 <memchr>
40091bc0:	da012a17 	ldw	r8,1192(sp)
40091bc4:	da412b17 	ldw	r9,1196(sp)
40091bc8:	10024726 	beq	r2,zero,400924e8 <___vfiprintf_internal_r+0x12f0>
40091bcc:	d8c12417 	ldw	r3,1168(sp)
40091bd0:	10e3c83a 	sub	r17,r2,r3
40091bd4:	4c41f616 	blt	r9,r17,400923b0 <___vfiprintf_internal_r+0x11b8>
40091bd8:	db011d83 	ldbu	r12,1142(sp)
40091bdc:	dd812115 	stw	r22,1156(sp)
40091be0:	0013883a 	mov	r9,zero
40091be4:	003e8006 	br	400915e8 <__alt_mem_epcs+0xfff505e8>
40091be8:	d9811d85 	stb	r6,1142(sp)
40091bec:	a880080c 	andi	r2,r21,32
40091bf0:	d8c12117 	ldw	r3,1156(sp)
40091bf4:	103fb51e 	bne	r2,zero,40091acc <__alt_mem_epcs+0xfff50acc>
40091bf8:	a880040c 	andi	r2,r21,16
40091bfc:	10015e1e 	bne	r2,zero,40092178 <___vfiprintf_internal_r+0xf80>
40091c00:	a880100c 	andi	r2,r21,64
40091c04:	10015c26 	beq	r2,zero,40092178 <___vfiprintf_internal_r+0xf80>
40091c08:	1c80000f 	ldh	r18,0(r3)
40091c0c:	da812117 	ldw	r10,1156(sp)
40091c10:	902dd7fa 	srai	r22,r18,31
40091c14:	52800104 	addi	r10,r10,4
40091c18:	da812115 	stw	r10,1156(sp)
40091c1c:	b005883a 	mov	r2,r22
40091c20:	003fb006 	br	40091ae4 <__alt_mem_epcs+0xfff50ae4>
40091c24:	da812117 	ldw	r10,1156(sp)
40091c28:	00800c04 	movi	r2,48
40091c2c:	02d002b4 	movhi	r11,16394
40091c30:	54800017 	ldw	r18,0(r10)
40091c34:	d8811d05 	stb	r2,1140(sp)
40091c38:	52800104 	addi	r10,r10,4
40091c3c:	00801e04 	movi	r2,120
40091c40:	5ae85f04 	addi	r11,r11,-24196
40091c44:	d8811d45 	stb	r2,1141(sp)
40091c48:	002d883a 	mov	r22,zero
40091c4c:	ad400094 	ori	r21,r21,2
40091c50:	da812115 	stw	r10,1156(sp)
40091c54:	dac12615 	stw	r11,1176(sp)
40091c58:	00800084 	movi	r2,2
40091c5c:	9009883a 	mov	r4,r18
40091c60:	003e4406 	br	40091574 <__alt_mem_epcs+0xfff50574>
40091c64:	ad400814 	ori	r21,r21,32
40091c68:	80c00007 	ldb	r3,0(r16)
40091c6c:	003dc106 	br	40091374 <__alt_mem_epcs+0xfff50374>
40091c70:	ad401014 	ori	r21,r21,64
40091c74:	80c00007 	ldb	r3,0(r16)
40091c78:	003dbe06 	br	40091374 <__alt_mem_epcs+0xfff50374>
40091c7c:	80c00007 	ldb	r3,0(r16)
40091c80:	19c1de26 	beq	r3,r7,400923fc <___vfiprintf_internal_r+0x1204>
40091c84:	ad400414 	ori	r21,r21,16
40091c88:	003dba06 	br	40091374 <__alt_mem_epcs+0xfff50374>
40091c8c:	009002b4 	movhi	r2,16394
40091c90:	10a85f04 	addi	r2,r2,-24196
40091c94:	d8812615 	stw	r2,1176(sp)
40091c98:	d9811d85 	stb	r6,1142(sp)
40091c9c:	a900080c 	andi	r4,r21,32
40091ca0:	d8812117 	ldw	r2,1156(sp)
40091ca4:	203f5b1e 	bne	r4,zero,40091a14 <__alt_mem_epcs+0xfff50a14>
40091ca8:	a900040c 	andi	r4,r21,16
40091cac:	2001a826 	beq	r4,zero,40092350 <___vfiprintf_internal_r+0x1158>
40091cb0:	dac12117 	ldw	r11,1156(sp)
40091cb4:	14800017 	ldw	r18,0(r2)
40091cb8:	002d883a 	mov	r22,zero
40091cbc:	5ac00104 	addi	r11,r11,4
40091cc0:	dac12115 	stw	r11,1156(sp)
40091cc4:	003f5806 	br	40091a28 <__alt_mem_epcs+0xfff50a28>
40091cc8:	da812117 	ldw	r10,1156(sp)
40091ccc:	54c00017 	ldw	r19,0(r10)
40091cd0:	50800104 	addi	r2,r10,4
40091cd4:	983f2f16 	blt	r19,zero,40091994 <__alt_mem_epcs+0xfff50994>
40091cd8:	d8812115 	stw	r2,1156(sp)
40091cdc:	80c00007 	ldb	r3,0(r16)
40091ce0:	003da406 	br	40091374 <__alt_mem_epcs+0xfff50374>
40091ce4:	01800ac4 	movi	r6,43
40091ce8:	80c00007 	ldb	r3,0(r16)
40091cec:	003da106 	br	40091374 <__alt_mem_epcs+0xfff50374>
40091cf0:	ad400054 	ori	r21,r21,1
40091cf4:	80c00007 	ldb	r3,0(r16)
40091cf8:	003d9e06 	br	40091374 <__alt_mem_epcs+0xfff50374>
40091cfc:	d9811d85 	stb	r6,1142(sp)
40091d00:	18007126 	beq	r3,zero,40091ec8 <___vfiprintf_internal_r+0xcd0>
40091d04:	04800044 	movi	r18,1
40091d08:	d8c10005 	stb	r3,1024(sp)
40091d0c:	d8c10004 	addi	r3,sp,1024
40091d10:	d8011d85 	stb	zero,1142(sp)
40091d14:	9023883a 	mov	r17,r18
40091d18:	d8c12415 	stw	r3,1168(sp)
40091d1c:	003f5606 	br	40091a78 <__alt_mem_epcs+0xfff50a78>
40091d20:	dac12117 	ldw	r11,1156(sp)
40091d24:	002d883a 	mov	r22,zero
40091d28:	00800044 	movi	r2,1
40091d2c:	5c800017 	ldw	r18,0(r11)
40091d30:	5ac00104 	addi	r11,r11,4
40091d34:	dac12115 	stw	r11,1156(sp)
40091d38:	9009883a 	mov	r4,r18
40091d3c:	003e0d06 	br	40091574 <__alt_mem_epcs+0xfff50574>
40091d40:	dac12117 	ldw	r11,1156(sp)
40091d44:	002d883a 	mov	r22,zero
40091d48:	0005883a 	mov	r2,zero
40091d4c:	5c800017 	ldw	r18,0(r11)
40091d50:	5ac00104 	addi	r11,r11,4
40091d54:	dac12115 	stw	r11,1156(sp)
40091d58:	9009883a 	mov	r4,r18
40091d5c:	003e0506 	br	40091574 <__alt_mem_epcs+0xfff50574>
40091d60:	d9012017 	ldw	r4,1152(sp)
40091d64:	a00b883a 	mov	r5,r20
40091d68:	d9811a04 	addi	r6,sp,1128
40091d6c:	d8c12a15 	stw	r3,1192(sp)
40091d70:	db012b15 	stw	r12,1196(sp)
40091d74:	00910e40 	call	400910e4 <__sprint_r.part.0>
40091d78:	d8c12a17 	ldw	r3,1192(sp)
40091d7c:	db012b17 	ldw	r12,1196(sp)
40091d80:	1000571e 	bne	r2,zero,40091ee0 <___vfiprintf_internal_r+0xce8>
40091d84:	d9811b17 	ldw	r6,1132(sp)
40091d88:	d8811c17 	ldw	r2,1136(sp)
40091d8c:	d811883a 	mov	r8,sp
40091d90:	31400044 	addi	r5,r6,1
40091d94:	003e3306 	br	40091664 <__alt_mem_epcs+0xfff50664>
40091d98:	d9411b17 	ldw	r5,1132(sp)
40091d9c:	d8c11c17 	ldw	r3,1136(sp)
40091da0:	28800044 	addi	r2,r5,1
40091da4:	d9011d87 	ldb	r4,1142(sp)
40091da8:	203e4d26 	beq	r4,zero,400916e0 <__alt_mem_epcs+0xfff506e0>
40091dac:	01000044 	movi	r4,1
40091db0:	d9411d84 	addi	r5,sp,1142
40091db4:	1907883a 	add	r3,r3,r4
40091db8:	41400015 	stw	r5,0(r8)
40091dbc:	41000115 	stw	r4,4(r8)
40091dc0:	d8c11c15 	stw	r3,1136(sp)
40091dc4:	d8811b15 	stw	r2,1132(sp)
40091dc8:	014001c4 	movi	r5,7
40091dcc:	2880aa16 	blt	r5,r2,40092078 <___vfiprintf_internal_r+0xe80>
40091dd0:	100b883a 	mov	r5,r2
40091dd4:	42000204 	addi	r8,r8,8
40091dd8:	10800044 	addi	r2,r2,1
40091ddc:	003e4006 	br	400916e0 <__alt_mem_epcs+0xfff506e0>
40091de0:	d9012017 	ldw	r4,1152(sp)
40091de4:	a00b883a 	mov	r5,r20
40091de8:	d9811a04 	addi	r6,sp,1128
40091dec:	d9c12a15 	stw	r7,1192(sp)
40091df0:	db012b15 	stw	r12,1196(sp)
40091df4:	00910e40 	call	400910e4 <__sprint_r.part.0>
40091df8:	d9c12a17 	ldw	r7,1192(sp)
40091dfc:	db012b17 	ldw	r12,1196(sp)
40091e00:	1000371e 	bne	r2,zero,40091ee0 <___vfiprintf_internal_r+0xce8>
40091e04:	d9411b17 	ldw	r5,1132(sp)
40091e08:	d8c11c17 	ldw	r3,1136(sp)
40091e0c:	d811883a 	mov	r8,sp
40091e10:	28800044 	addi	r2,r5,1
40091e14:	003e4d06 	br	4009174c <__alt_mem_epcs+0xfff5074c>
40091e18:	10803fcc 	andi	r2,r2,255
40091e1c:	00c00044 	movi	r3,1
40091e20:	10fddf1e 	bne	r2,r3,400915a0 <__alt_mem_epcs+0xfff505a0>
40091e24:	b000021e 	bne	r22,zero,40091e30 <___vfiprintf_internal_r+0xc38>
40091e28:	00800244 	movi	r2,9
40091e2c:	1480202e 	bgeu	r2,r18,40091eb0 <___vfiprintf_internal_r+0xcb8>
40091e30:	dc012515 	stw	r16,1172(sp)
40091e34:	dc410a04 	addi	r17,sp,1064
40091e38:	9021883a 	mov	r16,r18
40091e3c:	da012415 	stw	r8,1168(sp)
40091e40:	b025883a 	mov	r18,r22
40091e44:	da412315 	stw	r9,1164(sp)
40091e48:	602d883a 	mov	r22,r12
40091e4c:	8009883a 	mov	r4,r16
40091e50:	900b883a 	mov	r5,r18
40091e54:	01800284 	movi	r6,10
40091e58:	000f883a 	mov	r7,zero
40091e5c:	00934700 	call	40093470 <__umoddi3>
40091e60:	10800c04 	addi	r2,r2,48
40091e64:	8c7fffc4 	addi	r17,r17,-1
40091e68:	8009883a 	mov	r4,r16
40091e6c:	900b883a 	mov	r5,r18
40091e70:	01800284 	movi	r6,10
40091e74:	000f883a 	mov	r7,zero
40091e78:	88800005 	stb	r2,0(r17)
40091e7c:	0092eb00 	call	40092eb0 <__udivdi3>
40091e80:	1021883a 	mov	r16,r2
40091e84:	10c4b03a 	or	r2,r2,r3
40091e88:	1825883a 	mov	r18,r3
40091e8c:	103fef1e 	bne	r2,zero,40091e4c <__alt_mem_epcs+0xfff50e4c>
40091e90:	da811e17 	ldw	r10,1144(sp)
40091e94:	da012417 	ldw	r8,1168(sp)
40091e98:	da412317 	ldw	r9,1164(sp)
40091e9c:	dc412415 	stw	r17,1168(sp)
40091ea0:	b019883a 	mov	r12,r22
40091ea4:	dc012517 	ldw	r16,1172(sp)
40091ea8:	5463c83a 	sub	r17,r10,r17
40091eac:	003dce06 	br	400915e8 <__alt_mem_epcs+0xfff505e8>
40091eb0:	94800c04 	addi	r18,r18,48
40091eb4:	d8c109c4 	addi	r3,sp,1063
40091eb8:	dc8109c5 	stb	r18,1063(sp)
40091ebc:	dc412717 	ldw	r17,1180(sp)
40091ec0:	d8c12415 	stw	r3,1168(sp)
40091ec4:	003dc806 	br	400915e8 <__alt_mem_epcs+0xfff505e8>
40091ec8:	d8811c17 	ldw	r2,1136(sp)
40091ecc:	10000426 	beq	r2,zero,40091ee0 <___vfiprintf_internal_r+0xce8>
40091ed0:	d9012017 	ldw	r4,1152(sp)
40091ed4:	a00b883a 	mov	r5,r20
40091ed8:	d9811a04 	addi	r6,sp,1128
40091edc:	00910e40 	call	400910e4 <__sprint_r.part.0>
40091ee0:	a080030b 	ldhu	r2,12(r20)
40091ee4:	1080100c 	andi	r2,r2,64
40091ee8:	103e9b1e 	bne	r2,zero,40091958 <__alt_mem_epcs+0xfff50958>
40091eec:	d8812217 	ldw	r2,1160(sp)
40091ef0:	003e9a06 	br	4009195c <__alt_mem_epcs+0xfff5095c>
40091ef4:	d9012017 	ldw	r4,1152(sp)
40091ef8:	a00b883a 	mov	r5,r20
40091efc:	d9811a04 	addi	r6,sp,1128
40091f00:	00910e40 	call	400910e4 <__sprint_r.part.0>
40091f04:	103ff61e 	bne	r2,zero,40091ee0 <__alt_mem_epcs+0xfff50ee0>
40091f08:	d9011b17 	ldw	r4,1132(sp)
40091f0c:	d8c11c17 	ldw	r3,1136(sp)
40091f10:	d811883a 	mov	r8,sp
40091f14:	21400044 	addi	r5,r4,1
40091f18:	003e4006 	br	4009181c <__alt_mem_epcs+0xfff5081c>
40091f1c:	1800d61e 	bne	r3,zero,40092278 <___vfiprintf_internal_r+0x1080>
40091f20:	dac12417 	ldw	r11,1168(sp)
40091f24:	00800044 	movi	r2,1
40091f28:	dc400115 	stw	r17,4(sp)
40091f2c:	dac00015 	stw	r11,0(sp)
40091f30:	dc411c15 	stw	r17,1136(sp)
40091f34:	d8811b15 	stw	r2,1132(sp)
40091f38:	8807883a 	mov	r3,r17
40091f3c:	d811883a 	mov	r8,sp
40091f40:	42000204 	addi	r8,r8,8
40091f44:	aac0010c 	andi	r11,r21,4
40091f48:	58000226 	beq	r11,zero,40091f54 <___vfiprintf_internal_r+0xd5c>
40091f4c:	9ca3c83a 	sub	r17,r19,r18
40091f50:	047e2616 	blt	zero,r17,400917ec <__alt_mem_epcs+0xfff507ec>
40091f54:	94c0010e 	bge	r18,r19,40091f5c <___vfiprintf_internal_r+0xd64>
40091f58:	9825883a 	mov	r18,r19
40091f5c:	da812217 	ldw	r10,1160(sp)
40091f60:	5495883a 	add	r10,r10,r18
40091f64:	da812215 	stw	r10,1160(sp)
40091f68:	183e4826 	beq	r3,zero,4009188c <__alt_mem_epcs+0xfff5088c>
40091f6c:	d9012017 	ldw	r4,1152(sp)
40091f70:	a00b883a 	mov	r5,r20
40091f74:	d9811a04 	addi	r6,sp,1128
40091f78:	00910e40 	call	400910e4 <__sprint_r.part.0>
40091f7c:	103e4326 	beq	r2,zero,4009188c <__alt_mem_epcs+0xfff5088c>
40091f80:	003fd706 	br	40091ee0 <__alt_mem_epcs+0xfff50ee0>
40091f84:	9cadc83a 	sub	r22,r19,r18
40091f88:	05bde40e 	bge	zero,r22,4009171c <__alt_mem_epcs+0xfff5071c>
40091f8c:	03000404 	movi	r12,16
40091f90:	6581500e 	bge	r12,r22,400924d4 <___vfiprintf_internal_r+0x12dc>
40091f94:	009002b4 	movhi	r2,16394
40091f98:	10a8c004 	addi	r2,r2,-23808
40091f9c:	d8812315 	stw	r2,1164(sp)
40091fa0:	8005883a 	mov	r2,r16
40091fa4:	038001c4 	movi	r14,7
40091fa8:	b021883a 	mov	r16,r22
40091fac:	da412515 	stw	r9,1172(sp)
40091fb0:	102d883a 	mov	r22,r2
40091fb4:	00000506 	br	40091fcc <___vfiprintf_internal_r+0xdd4>
40091fb8:	29000084 	addi	r4,r5,2
40091fbc:	42000204 	addi	r8,r8,8
40091fc0:	100b883a 	mov	r5,r2
40091fc4:	843ffc04 	addi	r16,r16,-16
40091fc8:	64000d0e 	bge	r12,r16,40092000 <___vfiprintf_internal_r+0xe08>
40091fcc:	18c00404 	addi	r3,r3,16
40091fd0:	28800044 	addi	r2,r5,1
40091fd4:	45c00015 	stw	r23,0(r8)
40091fd8:	43000115 	stw	r12,4(r8)
40091fdc:	d8c11c15 	stw	r3,1136(sp)
40091fe0:	d8811b15 	stw	r2,1132(sp)
40091fe4:	70bff40e 	bge	r14,r2,40091fb8 <__alt_mem_epcs+0xfff50fb8>
40091fe8:	1800151e 	bne	r3,zero,40092040 <___vfiprintf_internal_r+0xe48>
40091fec:	843ffc04 	addi	r16,r16,-16
40091ff0:	000b883a 	mov	r5,zero
40091ff4:	01000044 	movi	r4,1
40091ff8:	d811883a 	mov	r8,sp
40091ffc:	643ff316 	blt	r12,r16,40091fcc <__alt_mem_epcs+0xfff50fcc>
40092000:	da412517 	ldw	r9,1172(sp)
40092004:	b005883a 	mov	r2,r22
40092008:	802d883a 	mov	r22,r16
4009200c:	1021883a 	mov	r16,r2
40092010:	da812317 	ldw	r10,1164(sp)
40092014:	1d87883a 	add	r3,r3,r22
40092018:	45800115 	stw	r22,4(r8)
4009201c:	42800015 	stw	r10,0(r8)
40092020:	d8c11c15 	stw	r3,1136(sp)
40092024:	d9011b15 	stw	r4,1132(sp)
40092028:	008001c4 	movi	r2,7
4009202c:	11008d16 	blt	r2,r4,40092264 <___vfiprintf_internal_r+0x106c>
40092030:	42000204 	addi	r8,r8,8
40092034:	20800044 	addi	r2,r4,1
40092038:	200b883a 	mov	r5,r4
4009203c:	003db706 	br	4009171c <__alt_mem_epcs+0xfff5071c>
40092040:	d9012017 	ldw	r4,1152(sp)
40092044:	a00b883a 	mov	r5,r20
40092048:	d9811a04 	addi	r6,sp,1128
4009204c:	db012b15 	stw	r12,1196(sp)
40092050:	db812a15 	stw	r14,1192(sp)
40092054:	00910e40 	call	400910e4 <__sprint_r.part.0>
40092058:	db012b17 	ldw	r12,1196(sp)
4009205c:	db812a17 	ldw	r14,1192(sp)
40092060:	103f9f1e 	bne	r2,zero,40091ee0 <__alt_mem_epcs+0xfff50ee0>
40092064:	d9411b17 	ldw	r5,1132(sp)
40092068:	d8c11c17 	ldw	r3,1136(sp)
4009206c:	d811883a 	mov	r8,sp
40092070:	29000044 	addi	r4,r5,1
40092074:	003fd306 	br	40091fc4 <__alt_mem_epcs+0xfff50fc4>
40092078:	18006c1e 	bne	r3,zero,4009222c <___vfiprintf_internal_r+0x1034>
4009207c:	70004f26 	beq	r14,zero,400921bc <___vfiprintf_internal_r+0xfc4>
40092080:	d8811d04 	addi	r2,sp,1140
40092084:	00c00084 	movi	r3,2
40092088:	d8800015 	stw	r2,0(sp)
4009208c:	d8c00115 	stw	r3,4(sp)
40092090:	2005883a 	mov	r2,r4
40092094:	d811883a 	mov	r8,sp
40092098:	003d9b06 	br	40091708 <__alt_mem_epcs+0xfff50708>
4009209c:	1800571e 	bne	r3,zero,400921fc <___vfiprintf_internal_r+0x1004>
400920a0:	000b883a 	mov	r5,zero
400920a4:	00800044 	movi	r2,1
400920a8:	d811883a 	mov	r8,sp
400920ac:	003d9906 	br	40091714 <__alt_mem_epcs+0xfff50714>
400920b0:	10803fcc 	andi	r2,r2,255
400920b4:	1000251e 	bne	r2,zero,4009214c <___vfiprintf_internal_r+0xf54>
400920b8:	a880004c 	andi	r2,r21,1
400920bc:	10007826 	beq	r2,zero,400922a0 <___vfiprintf_internal_r+0x10a8>
400920c0:	00800c04 	movi	r2,48
400920c4:	d8c109c4 	addi	r3,sp,1063
400920c8:	d88109c5 	stb	r2,1063(sp)
400920cc:	dc412717 	ldw	r17,1180(sp)
400920d0:	d8c12415 	stw	r3,1168(sp)
400920d4:	003d4406 	br	400915e8 <__alt_mem_epcs+0xfff505e8>
400920d8:	d9012617 	ldw	r4,1176(sp)
400920dc:	dc410a04 	addi	r17,sp,1064
400920e0:	908003cc 	andi	r2,r18,15
400920e4:	b006973a 	slli	r3,r22,28
400920e8:	2085883a 	add	r2,r4,r2
400920ec:	9024d13a 	srli	r18,r18,4
400920f0:	10800003 	ldbu	r2,0(r2)
400920f4:	b02cd13a 	srli	r22,r22,4
400920f8:	8c7fffc4 	addi	r17,r17,-1
400920fc:	1ca4b03a 	or	r18,r3,r18
40092100:	88800005 	stb	r2,0(r17)
40092104:	9584b03a 	or	r2,r18,r22
40092108:	103ff51e 	bne	r2,zero,400920e0 <__alt_mem_epcs+0xfff510e0>
4009210c:	dac11e17 	ldw	r11,1144(sp)
40092110:	dc412415 	stw	r17,1168(sp)
40092114:	5c63c83a 	sub	r17,r11,r17
40092118:	003d3306 	br	400915e8 <__alt_mem_epcs+0xfff505e8>
4009211c:	1800941e 	bne	r3,zero,40092370 <___vfiprintf_internal_r+0x1178>
40092120:	d8811d87 	ldb	r2,1142(sp)
40092124:	10006b26 	beq	r2,zero,400922d4 <___vfiprintf_internal_r+0x10dc>
40092128:	00c00044 	movi	r3,1
4009212c:	d9011d84 	addi	r4,sp,1142
40092130:	1805883a 	mov	r2,r3
40092134:	d9000015 	stw	r4,0(sp)
40092138:	d8c00115 	stw	r3,4(sp)
4009213c:	d811883a 	mov	r8,sp
40092140:	003f2306 	br	40091dd0 <__alt_mem_epcs+0xfff50dd0>
40092144:	8023883a 	mov	r17,r16
40092148:	003c7d06 	br	40091340 <__alt_mem_epcs+0xfff50340>
4009214c:	da810a04 	addi	r10,sp,1064
40092150:	da812415 	stw	r10,1168(sp)
40092154:	003d2406 	br	400915e8 <__alt_mem_epcs+0xfff505e8>
40092158:	d9012017 	ldw	r4,1152(sp)
4009215c:	a00b883a 	mov	r5,r20
40092160:	d9811a04 	addi	r6,sp,1128
40092164:	00910e40 	call	400910e4 <__sprint_r.part.0>
40092168:	103f5d1e 	bne	r2,zero,40091ee0 <__alt_mem_epcs+0xfff50ee0>
4009216c:	d8c11c17 	ldw	r3,1136(sp)
40092170:	d811883a 	mov	r8,sp
40092174:	003f7306 	br	40091f44 <__alt_mem_epcs+0xfff50f44>
40092178:	1c800017 	ldw	r18,0(r3)
4009217c:	dac12117 	ldw	r11,1156(sp)
40092180:	902dd7fa 	srai	r22,r18,31
40092184:	5ac00104 	addi	r11,r11,4
40092188:	dac12115 	stw	r11,1156(sp)
4009218c:	b005883a 	mov	r2,r22
40092190:	003e5406 	br	40091ae4 <__alt_mem_epcs+0xfff50ae4>
40092194:	00800084 	movi	r2,2
40092198:	9588b03a 	or	r4,r18,r22
4009219c:	003cf506 	br	40091574 <__alt_mem_epcs+0xfff50574>
400921a0:	d9012017 	ldw	r4,1152(sp)
400921a4:	a00b883a 	mov	r5,r20
400921a8:	d9811a04 	addi	r6,sp,1128
400921ac:	00910e40 	call	400910e4 <__sprint_r.part.0>
400921b0:	103f4b1e 	bne	r2,zero,40091ee0 <__alt_mem_epcs+0xfff50ee0>
400921b4:	d811883a 	mov	r8,sp
400921b8:	003cd106 	br	40091500 <__alt_mem_epcs+0xfff50500>
400921bc:	000b883a 	mov	r5,zero
400921c0:	2005883a 	mov	r2,r4
400921c4:	d811883a 	mov	r8,sp
400921c8:	003d5206 	br	40091714 <__alt_mem_epcs+0xfff50714>
400921cc:	10803fcc 	andi	r2,r2,255
400921d0:	1080201c 	xori	r2,r2,128
400921d4:	10bfe004 	addi	r2,r2,-128
400921d8:	01000c04 	movi	r4,48
400921dc:	11008e26 	beq	r2,r4,40092418 <___vfiprintf_internal_r+0x1220>
400921e0:	da812417 	ldw	r10,1168(sp)
400921e4:	dac11e17 	ldw	r11,1144(sp)
400921e8:	193fffc5 	stb	r4,-1(r3)
400921ec:	52bfffc4 	addi	r10,r10,-1
400921f0:	da812415 	stw	r10,1168(sp)
400921f4:	5aa3c83a 	sub	r17,r11,r10
400921f8:	003cfb06 	br	400915e8 <__alt_mem_epcs+0xfff505e8>
400921fc:	d9012017 	ldw	r4,1152(sp)
40092200:	a00b883a 	mov	r5,r20
40092204:	d9811a04 	addi	r6,sp,1128
40092208:	da412b15 	stw	r9,1196(sp)
4009220c:	00910e40 	call	400910e4 <__sprint_r.part.0>
40092210:	da412b17 	ldw	r9,1196(sp)
40092214:	103f321e 	bne	r2,zero,40091ee0 <__alt_mem_epcs+0xfff50ee0>
40092218:	d9411b17 	ldw	r5,1132(sp)
4009221c:	d8c11c17 	ldw	r3,1136(sp)
40092220:	d811883a 	mov	r8,sp
40092224:	28800044 	addi	r2,r5,1
40092228:	003d3a06 	br	40091714 <__alt_mem_epcs+0xfff50714>
4009222c:	d9012017 	ldw	r4,1152(sp)
40092230:	a00b883a 	mov	r5,r20
40092234:	d9811a04 	addi	r6,sp,1128
40092238:	da412b15 	stw	r9,1196(sp)
4009223c:	db812a15 	stw	r14,1192(sp)
40092240:	00910e40 	call	400910e4 <__sprint_r.part.0>
40092244:	da412b17 	ldw	r9,1196(sp)
40092248:	db812a17 	ldw	r14,1192(sp)
4009224c:	103f241e 	bne	r2,zero,40091ee0 <__alt_mem_epcs+0xfff50ee0>
40092250:	d9411b17 	ldw	r5,1132(sp)
40092254:	d8c11c17 	ldw	r3,1136(sp)
40092258:	d811883a 	mov	r8,sp
4009225c:	28800044 	addi	r2,r5,1
40092260:	003d1f06 	br	400916e0 <__alt_mem_epcs+0xfff506e0>
40092264:	1800781e 	bne	r3,zero,40092448 <___vfiprintf_internal_r+0x1250>
40092268:	000b883a 	mov	r5,zero
4009226c:	00800044 	movi	r2,1
40092270:	d811883a 	mov	r8,sp
40092274:	003d2906 	br	4009171c <__alt_mem_epcs+0xfff5071c>
40092278:	d9012017 	ldw	r4,1152(sp)
4009227c:	a00b883a 	mov	r5,r20
40092280:	d9811a04 	addi	r6,sp,1128
40092284:	00910e40 	call	400910e4 <__sprint_r.part.0>
40092288:	103f151e 	bne	r2,zero,40091ee0 <__alt_mem_epcs+0xfff50ee0>
4009228c:	d8811b17 	ldw	r2,1132(sp)
40092290:	d8c11c17 	ldw	r3,1136(sp)
40092294:	d811883a 	mov	r8,sp
40092298:	10800044 	addi	r2,r2,1
4009229c:	003d4406 	br	400917b0 <__alt_mem_epcs+0xfff507b0>
400922a0:	dac10a04 	addi	r11,sp,1064
400922a4:	dac12415 	stw	r11,1168(sp)
400922a8:	003ccf06 	br	400915e8 <__alt_mem_epcs+0xfff505e8>
400922ac:	04a5c83a 	sub	r18,zero,r18
400922b0:	9004c03a 	cmpne	r2,r18,zero
400922b4:	05adc83a 	sub	r22,zero,r22
400922b8:	b0adc83a 	sub	r22,r22,r2
400922bc:	03000b44 	movi	r12,45
400922c0:	db011d85 	stb	r12,1142(sp)
400922c4:	4823883a 	mov	r17,r9
400922c8:	00800044 	movi	r2,1
400922cc:	9588b03a 	or	r4,r18,r22
400922d0:	003cab06 	br	40091580 <__alt_mem_epcs+0xfff50580>
400922d4:	000b883a 	mov	r5,zero
400922d8:	00800044 	movi	r2,1
400922dc:	d811883a 	mov	r8,sp
400922e0:	703d0c26 	beq	r14,zero,40091714 <__alt_mem_epcs+0xfff50714>
400922e4:	00c00084 	movi	r3,2
400922e8:	d9011d04 	addi	r4,sp,1140
400922ec:	d9000015 	stw	r4,0(sp)
400922f0:	d8c00115 	stw	r3,4(sp)
400922f4:	003d0406 	br	40091708 <__alt_mem_epcs+0xfff50708>
400922f8:	80c00007 	ldb	r3,0(r16)
400922fc:	003c1d06 	br	40091374 <__alt_mem_epcs+0xfff50374>
40092300:	a880040c 	andi	r2,r21,16
40092304:	1000091e 	bne	r2,zero,4009232c <___vfiprintf_internal_r+0x1134>
40092308:	aac0100c 	andi	r11,r21,64
4009230c:	58000726 	beq	r11,zero,4009232c <___vfiprintf_internal_r+0x1134>
40092310:	da812117 	ldw	r10,1156(sp)
40092314:	dac12217 	ldw	r11,1160(sp)
40092318:	50800017 	ldw	r2,0(r10)
4009231c:	52800104 	addi	r10,r10,4
40092320:	da812115 	stw	r10,1156(sp)
40092324:	12c0000d 	sth	r11,0(r2)
40092328:	003be806 	br	400912cc <__alt_mem_epcs+0xfff502cc>
4009232c:	da812117 	ldw	r10,1156(sp)
40092330:	dac12217 	ldw	r11,1160(sp)
40092334:	50800017 	ldw	r2,0(r10)
40092338:	52800104 	addi	r10,r10,4
4009233c:	da812115 	stw	r10,1156(sp)
40092340:	12c00015 	stw	r11,0(r2)
40092344:	003be106 	br	400912cc <__alt_mem_epcs+0xfff502cc>
40092348:	00800084 	movi	r2,2
4009234c:	003c8906 	br	40091574 <__alt_mem_epcs+0xfff50574>
40092350:	a900100c 	andi	r4,r21,64
40092354:	20001f26 	beq	r4,zero,400923d4 <___vfiprintf_internal_r+0x11dc>
40092358:	da812117 	ldw	r10,1156(sp)
4009235c:	1480000b 	ldhu	r18,0(r2)
40092360:	002d883a 	mov	r22,zero
40092364:	52800104 	addi	r10,r10,4
40092368:	da812115 	stw	r10,1156(sp)
4009236c:	003dae06 	br	40091a28 <__alt_mem_epcs+0xfff50a28>
40092370:	d9012017 	ldw	r4,1152(sp)
40092374:	a00b883a 	mov	r5,r20
40092378:	d9811a04 	addi	r6,sp,1128
4009237c:	da412b15 	stw	r9,1196(sp)
40092380:	db812a15 	stw	r14,1192(sp)
40092384:	00910e40 	call	400910e4 <__sprint_r.part.0>
40092388:	da412b17 	ldw	r9,1196(sp)
4009238c:	db812a17 	ldw	r14,1192(sp)
40092390:	103ed31e 	bne	r2,zero,40091ee0 <__alt_mem_epcs+0xfff50ee0>
40092394:	d9411b17 	ldw	r5,1132(sp)
40092398:	d8c11c17 	ldw	r3,1136(sp)
4009239c:	d811883a 	mov	r8,sp
400923a0:	28800044 	addi	r2,r5,1
400923a4:	003e7f06 	br	40091da4 <__alt_mem_epcs+0xfff50da4>
400923a8:	9825883a 	mov	r18,r19
400923ac:	003d3406 	br	40091880 <__alt_mem_epcs+0xfff50880>
400923b0:	4823883a 	mov	r17,r9
400923b4:	003e0806 	br	40091bd8 <__alt_mem_epcs+0xfff50bd8>
400923b8:	d9012017 	ldw	r4,1152(sp)
400923bc:	a00b883a 	mov	r5,r20
400923c0:	d9811a04 	addi	r6,sp,1128
400923c4:	00910e40 	call	400910e4 <__sprint_r.part.0>
400923c8:	103ec51e 	bne	r2,zero,40091ee0 <__alt_mem_epcs+0xfff50ee0>
400923cc:	d8c11c17 	ldw	r3,1136(sp)
400923d0:	003ee006 	br	40091f54 <__alt_mem_epcs+0xfff50f54>
400923d4:	dac12117 	ldw	r11,1156(sp)
400923d8:	14800017 	ldw	r18,0(r2)
400923dc:	002d883a 	mov	r22,zero
400923e0:	5ac00104 	addi	r11,r11,4
400923e4:	dac12115 	stw	r11,1156(sp)
400923e8:	003d8f06 	br	40091a28 <__alt_mem_epcs+0xfff50a28>
400923ec:	02d002b4 	movhi	r11,16394
400923f0:	5ae8c004 	addi	r11,r11,-23808
400923f4:	dac12315 	stw	r11,1164(sp)
400923f8:	003ce306 	br	40091788 <__alt_mem_epcs+0xfff50788>
400923fc:	80c00043 	ldbu	r3,1(r16)
40092400:	ad400814 	ori	r21,r21,32
40092404:	84000044 	addi	r16,r16,1
40092408:	18c03fcc 	andi	r3,r3,255
4009240c:	18c0201c 	xori	r3,r3,128
40092410:	18ffe004 	addi	r3,r3,-128
40092414:	003bd706 	br	40091374 <__alt_mem_epcs+0xfff50374>
40092418:	dac11e17 	ldw	r11,1144(sp)
4009241c:	d8c12417 	ldw	r3,1168(sp)
40092420:	58e3c83a 	sub	r17,r11,r3
40092424:	003c7006 	br	400915e8 <__alt_mem_epcs+0xfff505e8>
40092428:	da012a15 	stw	r8,1192(sp)
4009242c:	0089d980 	call	40089d98 <strlen>
40092430:	1023883a 	mov	r17,r2
40092434:	db011d83 	ldbu	r12,1142(sp)
40092438:	dd812115 	stw	r22,1156(sp)
4009243c:	0013883a 	mov	r9,zero
40092440:	da012a17 	ldw	r8,1192(sp)
40092444:	003c6806 	br	400915e8 <__alt_mem_epcs+0xfff505e8>
40092448:	d9012017 	ldw	r4,1152(sp)
4009244c:	a00b883a 	mov	r5,r20
40092450:	d9811a04 	addi	r6,sp,1128
40092454:	da412b15 	stw	r9,1196(sp)
40092458:	00910e40 	call	400910e4 <__sprint_r.part.0>
4009245c:	da412b17 	ldw	r9,1196(sp)
40092460:	103e9f1e 	bne	r2,zero,40091ee0 <__alt_mem_epcs+0xfff50ee0>
40092464:	d9411b17 	ldw	r5,1132(sp)
40092468:	d8c11c17 	ldw	r3,1136(sp)
4009246c:	d811883a 	mov	r8,sp
40092470:	28800044 	addi	r2,r5,1
40092474:	003ca906 	br	4009171c <__alt_mem_epcs+0xfff5071c>
40092478:	d9411b17 	ldw	r5,1132(sp)
4009247c:	011002b4 	movhi	r4,16394
40092480:	2128c404 	addi	r4,r4,-23792
40092484:	d9012315 	stw	r4,1164(sp)
40092488:	29400044 	addi	r5,r5,1
4009248c:	003c8806 	br	400916b0 <__alt_mem_epcs+0xfff506b0>
40092490:	00800184 	movi	r2,6
40092494:	1240012e 	bgeu	r2,r9,4009249c <___vfiprintf_internal_r+0x12a4>
40092498:	1013883a 	mov	r9,r2
4009249c:	4823883a 	mov	r17,r9
400924a0:	4825883a 	mov	r18,r9
400924a4:	48001516 	blt	r9,zero,400924fc <___vfiprintf_internal_r+0x1304>
400924a8:	009002b4 	movhi	r2,16394
400924ac:	10a86404 	addi	r2,r2,-24176
400924b0:	dd812115 	stw	r22,1156(sp)
400924b4:	d8812415 	stw	r2,1168(sp)
400924b8:	003d6f06 	br	40091a78 <__alt_mem_epcs+0xfff50a78>
400924bc:	d9411b17 	ldw	r5,1132(sp)
400924c0:	02d002b4 	movhi	r11,16394
400924c4:	5ae8c404 	addi	r11,r11,-23792
400924c8:	dac12315 	stw	r11,1164(sp)
400924cc:	29400044 	addi	r5,r5,1
400924d0:	003ce106 	br	40091858 <__alt_mem_epcs+0xfff50858>
400924d4:	011002b4 	movhi	r4,16394
400924d8:	2128c004 	addi	r4,r4,-23808
400924dc:	d9012315 	stw	r4,1164(sp)
400924e0:	1009883a 	mov	r4,r2
400924e4:	003eca06 	br	40092010 <__alt_mem_epcs+0xfff51010>
400924e8:	4823883a 	mov	r17,r9
400924ec:	db011d83 	ldbu	r12,1142(sp)
400924f0:	dd812115 	stw	r22,1156(sp)
400924f4:	0013883a 	mov	r9,zero
400924f8:	003c3b06 	br	400915e8 <__alt_mem_epcs+0xfff505e8>
400924fc:	0025883a 	mov	r18,zero
40092500:	003fe906 	br	400924a8 <__alt_mem_epcs+0xfff514a8>
40092504:	dac12117 	ldw	r11,1156(sp)
40092508:	8005883a 	mov	r2,r16
4009250c:	5021883a 	mov	r16,r10
40092510:	5a400017 	ldw	r9,0(r11)
40092514:	58c00104 	addi	r3,r11,4
40092518:	d8c12115 	stw	r3,1156(sp)
4009251c:	48000a16 	blt	r9,zero,40092548 <___vfiprintf_internal_r+0x1350>
40092520:	10c00047 	ldb	r3,1(r2)
40092524:	003b9306 	br	40091374 <__alt_mem_epcs+0xfff50374>
40092528:	043fffc4 	movi	r16,-1
4009252c:	003d0206 	br	40091938 <__alt_mem_epcs+0xfff50938>
40092530:	94c0010e 	bge	r18,r19,40092538 <___vfiprintf_internal_r+0x1340>
40092534:	9825883a 	mov	r18,r19
40092538:	da812217 	ldw	r10,1160(sp)
4009253c:	5495883a 	add	r10,r10,r18
40092540:	da812215 	stw	r10,1160(sp)
40092544:	003cd106 	br	4009188c <__alt_mem_epcs+0xfff5088c>
40092548:	027fffc4 	movi	r9,-1
4009254c:	10c00047 	ldb	r3,1(r2)
40092550:	003b8806 	br	40091374 <__alt_mem_epcs+0xfff50374>

40092554 <__vfiprintf_internal>:
40092554:	2007883a 	mov	r3,r4
40092558:	011002b4 	movhi	r4,16394
4009255c:	212feb04 	addi	r4,r4,-16468
40092560:	21000017 	ldw	r4,0(r4)
40092564:	2805883a 	mov	r2,r5
40092568:	300f883a 	mov	r7,r6
4009256c:	180b883a 	mov	r5,r3
40092570:	100d883a 	mov	r6,r2
40092574:	00911f81 	jmpi	400911f8 <___vfiprintf_internal_r>

40092578 <__swbuf_r>:
40092578:	defffc04 	addi	sp,sp,-16
4009257c:	dc800215 	stw	r18,8(sp)
40092580:	dc400115 	stw	r17,4(sp)
40092584:	dc000015 	stw	r16,0(sp)
40092588:	dfc00315 	stw	ra,12(sp)
4009258c:	2025883a 	mov	r18,r4
40092590:	2823883a 	mov	r17,r5
40092594:	3021883a 	mov	r16,r6
40092598:	20000226 	beq	r4,zero,400925a4 <__swbuf_r+0x2c>
4009259c:	20800e17 	ldw	r2,56(r4)
400925a0:	10004126 	beq	r2,zero,400926a8 <__swbuf_r+0x130>
400925a4:	80c00617 	ldw	r3,24(r16)
400925a8:	8180030b 	ldhu	r6,12(r16)
400925ac:	80c00215 	stw	r3,8(r16)
400925b0:	30c0020c 	andi	r3,r6,8
400925b4:	18003526 	beq	r3,zero,4009268c <__swbuf_r+0x114>
400925b8:	80c00417 	ldw	r3,16(r16)
400925bc:	18003326 	beq	r3,zero,4009268c <__swbuf_r+0x114>
400925c0:	3088000c 	andi	r2,r6,8192
400925c4:	8c403fcc 	andi	r17,r17,255
400925c8:	10001726 	beq	r2,zero,40092628 <__swbuf_r+0xb0>
400925cc:	80800017 	ldw	r2,0(r16)
400925d0:	81000517 	ldw	r4,20(r16)
400925d4:	10c7c83a 	sub	r3,r2,r3
400925d8:	19001d0e 	bge	r3,r4,40092650 <__swbuf_r+0xd8>
400925dc:	18c00044 	addi	r3,r3,1
400925e0:	81400217 	ldw	r5,8(r16)
400925e4:	11000044 	addi	r4,r2,1
400925e8:	81000015 	stw	r4,0(r16)
400925ec:	297fffc4 	addi	r5,r5,-1
400925f0:	81400215 	stw	r5,8(r16)
400925f4:	14400005 	stb	r17,0(r2)
400925f8:	80800517 	ldw	r2,20(r16)
400925fc:	10c01d26 	beq	r2,r3,40092674 <__swbuf_r+0xfc>
40092600:	8080030b 	ldhu	r2,12(r16)
40092604:	1080004c 	andi	r2,r2,1
40092608:	1000181e 	bne	r2,zero,4009266c <__swbuf_r+0xf4>
4009260c:	8805883a 	mov	r2,r17
40092610:	dfc00317 	ldw	ra,12(sp)
40092614:	dc800217 	ldw	r18,8(sp)
40092618:	dc400117 	ldw	r17,4(sp)
4009261c:	dc000017 	ldw	r16,0(sp)
40092620:	dec00404 	addi	sp,sp,16
40092624:	f800283a 	ret
40092628:	81001917 	ldw	r4,100(r16)
4009262c:	00b7ffc4 	movi	r2,-8193
40092630:	31880014 	ori	r6,r6,8192
40092634:	2084703a 	and	r2,r4,r2
40092638:	80801915 	stw	r2,100(r16)
4009263c:	80800017 	ldw	r2,0(r16)
40092640:	81000517 	ldw	r4,20(r16)
40092644:	8180030d 	sth	r6,12(r16)
40092648:	10c7c83a 	sub	r3,r2,r3
4009264c:	193fe316 	blt	r3,r4,400925dc <__alt_mem_epcs+0xfff515dc>
40092650:	9009883a 	mov	r4,r18
40092654:	800b883a 	mov	r5,r16
40092658:	008d8a80 	call	4008d8a8 <_fflush_r>
4009265c:	1000091e 	bne	r2,zero,40092684 <__swbuf_r+0x10c>
40092660:	80800017 	ldw	r2,0(r16)
40092664:	00c00044 	movi	r3,1
40092668:	003fdd06 	br	400925e0 <__alt_mem_epcs+0xfff515e0>
4009266c:	00800284 	movi	r2,10
40092670:	88bfe61e 	bne	r17,r2,4009260c <__alt_mem_epcs+0xfff5160c>
40092674:	9009883a 	mov	r4,r18
40092678:	800b883a 	mov	r5,r16
4009267c:	008d8a80 	call	4008d8a8 <_fflush_r>
40092680:	103fe226 	beq	r2,zero,4009260c <__alt_mem_epcs+0xfff5160c>
40092684:	00bfffc4 	movi	r2,-1
40092688:	003fe106 	br	40092610 <__alt_mem_epcs+0xfff51610>
4009268c:	9009883a 	mov	r4,r18
40092690:	800b883a 	mov	r5,r16
40092694:	008be500 	call	4008be50 <__swsetup_r>
40092698:	1000051e 	bne	r2,zero,400926b0 <__swbuf_r+0x138>
4009269c:	8180030b 	ldhu	r6,12(r16)
400926a0:	80c00417 	ldw	r3,16(r16)
400926a4:	003fc606 	br	400925c0 <__alt_mem_epcs+0xfff515c0>
400926a8:	008de500 	call	4008de50 <__sinit>
400926ac:	003fbd06 	br	400925a4 <__alt_mem_epcs+0xfff515a4>
400926b0:	80c0030b 	ldhu	r3,12(r16)
400926b4:	00bfffc4 	movi	r2,-1
400926b8:	18c01014 	ori	r3,r3,64
400926bc:	80c0030d 	sth	r3,12(r16)
400926c0:	00c00244 	movi	r3,9
400926c4:	90c00015 	stw	r3,0(r18)
400926c8:	003fd106 	br	40092610 <__alt_mem_epcs+0xfff51610>

400926cc <__swbuf>:
400926cc:	00d002b4 	movhi	r3,16394
400926d0:	18efeb04 	addi	r3,r3,-16468
400926d4:	2005883a 	mov	r2,r4
400926d8:	19000017 	ldw	r4,0(r3)
400926dc:	280d883a 	mov	r6,r5
400926e0:	100b883a 	mov	r5,r2
400926e4:	00925781 	jmpi	40092578 <__swbuf_r>

400926e8 <_write_r>:
400926e8:	defffd04 	addi	sp,sp,-12
400926ec:	dc000015 	stw	r16,0(sp)
400926f0:	041002b4 	movhi	r16,16394
400926f4:	dc400115 	stw	r17,4(sp)
400926f8:	84373304 	addi	r16,r16,-9012
400926fc:	2023883a 	mov	r17,r4
40092700:	2809883a 	mov	r4,r5
40092704:	300b883a 	mov	r5,r6
40092708:	380d883a 	mov	r6,r7
4009270c:	dfc00215 	stw	ra,8(sp)
40092710:	80000015 	stw	zero,0(r16)
40092714:	00963280 	call	40096328 <write>
40092718:	00ffffc4 	movi	r3,-1
4009271c:	10c00526 	beq	r2,r3,40092734 <_write_r+0x4c>
40092720:	dfc00217 	ldw	ra,8(sp)
40092724:	dc400117 	ldw	r17,4(sp)
40092728:	dc000017 	ldw	r16,0(sp)
4009272c:	dec00304 	addi	sp,sp,12
40092730:	f800283a 	ret
40092734:	80c00017 	ldw	r3,0(r16)
40092738:	183ff926 	beq	r3,zero,40092720 <__alt_mem_epcs+0xfff51720>
4009273c:	88c00015 	stw	r3,0(r17)
40092740:	003ff706 	br	40092720 <__alt_mem_epcs+0xfff51720>

40092744 <_close_r>:
40092744:	defffd04 	addi	sp,sp,-12
40092748:	dc000015 	stw	r16,0(sp)
4009274c:	041002b4 	movhi	r16,16394
40092750:	dc400115 	stw	r17,4(sp)
40092754:	84373304 	addi	r16,r16,-9012
40092758:	2023883a 	mov	r17,r4
4009275c:	2809883a 	mov	r4,r5
40092760:	dfc00215 	stw	ra,8(sp)
40092764:	80000015 	stw	zero,0(r16)
40092768:	00957500 	call	40095750 <close>
4009276c:	00ffffc4 	movi	r3,-1
40092770:	10c00526 	beq	r2,r3,40092788 <_close_r+0x44>
40092774:	dfc00217 	ldw	ra,8(sp)
40092778:	dc400117 	ldw	r17,4(sp)
4009277c:	dc000017 	ldw	r16,0(sp)
40092780:	dec00304 	addi	sp,sp,12
40092784:	f800283a 	ret
40092788:	80c00017 	ldw	r3,0(r16)
4009278c:	183ff926 	beq	r3,zero,40092774 <__alt_mem_epcs+0xfff51774>
40092790:	88c00015 	stw	r3,0(r17)
40092794:	003ff706 	br	40092774 <__alt_mem_epcs+0xfff51774>

40092798 <_calloc_r>:
40092798:	298b383a 	mul	r5,r5,r6
4009279c:	defffe04 	addi	sp,sp,-8
400927a0:	dc000015 	stw	r16,0(sp)
400927a4:	dfc00115 	stw	ra,4(sp)
400927a8:	008eb600 	call	4008eb60 <_malloc_r>
400927ac:	1021883a 	mov	r16,r2
400927b0:	10002826 	beq	r2,zero,40092854 <_calloc_r+0xbc>
400927b4:	11bfff17 	ldw	r6,-4(r2)
400927b8:	00bfff04 	movi	r2,-4
400927bc:	00c00904 	movi	r3,36
400927c0:	308c703a 	and	r6,r6,r2
400927c4:	308d883a 	add	r6,r6,r2
400927c8:	19801436 	bltu	r3,r6,4009281c <_calloc_r+0x84>
400927cc:	008004c4 	movi	r2,19
400927d0:	11800936 	bltu	r2,r6,400927f8 <_calloc_r+0x60>
400927d4:	8005883a 	mov	r2,r16
400927d8:	10000015 	stw	zero,0(r2)
400927dc:	10000115 	stw	zero,4(r2)
400927e0:	10000215 	stw	zero,8(r2)
400927e4:	8005883a 	mov	r2,r16
400927e8:	dfc00117 	ldw	ra,4(sp)
400927ec:	dc000017 	ldw	r16,0(sp)
400927f0:	dec00204 	addi	sp,sp,8
400927f4:	f800283a 	ret
400927f8:	80000015 	stw	zero,0(r16)
400927fc:	80000115 	stw	zero,4(r16)
40092800:	008006c4 	movi	r2,27
40092804:	11800d2e 	bgeu	r2,r6,4009283c <_calloc_r+0xa4>
40092808:	80000215 	stw	zero,8(r16)
4009280c:	80000315 	stw	zero,12(r16)
40092810:	30c00c26 	beq	r6,r3,40092844 <_calloc_r+0xac>
40092814:	80800404 	addi	r2,r16,16
40092818:	003fef06 	br	400927d8 <__alt_mem_epcs+0xfff517d8>
4009281c:	8009883a 	mov	r4,r16
40092820:	000b883a 	mov	r5,zero
40092824:	008f6840 	call	4008f684 <memset>
40092828:	8005883a 	mov	r2,r16
4009282c:	dfc00117 	ldw	ra,4(sp)
40092830:	dc000017 	ldw	r16,0(sp)
40092834:	dec00204 	addi	sp,sp,8
40092838:	f800283a 	ret
4009283c:	80800204 	addi	r2,r16,8
40092840:	003fe506 	br	400927d8 <__alt_mem_epcs+0xfff517d8>
40092844:	80000415 	stw	zero,16(r16)
40092848:	80800604 	addi	r2,r16,24
4009284c:	80000515 	stw	zero,20(r16)
40092850:	003fe106 	br	400927d8 <__alt_mem_epcs+0xfff517d8>
40092854:	0005883a 	mov	r2,zero
40092858:	003fe306 	br	400927e8 <__alt_mem_epcs+0xfff517e8>

4009285c <_fclose_r>:
4009285c:	28003226 	beq	r5,zero,40092928 <_fclose_r+0xcc>
40092860:	defffc04 	addi	sp,sp,-16
40092864:	dc400115 	stw	r17,4(sp)
40092868:	2023883a 	mov	r17,r4
4009286c:	dc000015 	stw	r16,0(sp)
40092870:	dfc00315 	stw	ra,12(sp)
40092874:	dc800215 	stw	r18,8(sp)
40092878:	2821883a 	mov	r16,r5
4009287c:	008de600 	call	4008de60 <__sfp_lock_acquire>
40092880:	88000226 	beq	r17,zero,4009288c <_fclose_r+0x30>
40092884:	88800e17 	ldw	r2,56(r17)
40092888:	10002926 	beq	r2,zero,40092930 <_fclose_r+0xd4>
4009288c:	8080030f 	ldh	r2,12(r16)
40092890:	10002226 	beq	r2,zero,4009291c <_fclose_r+0xc0>
40092894:	8809883a 	mov	r4,r17
40092898:	800b883a 	mov	r5,r16
4009289c:	008d8a80 	call	4008d8a8 <_fflush_r>
400928a0:	1025883a 	mov	r18,r2
400928a4:	80800b17 	ldw	r2,44(r16)
400928a8:	10000426 	beq	r2,zero,400928bc <_fclose_r+0x60>
400928ac:	81400717 	ldw	r5,28(r16)
400928b0:	8809883a 	mov	r4,r17
400928b4:	103ee83a 	callr	r2
400928b8:	10002616 	blt	r2,zero,40092954 <_fclose_r+0xf8>
400928bc:	8080030b 	ldhu	r2,12(r16)
400928c0:	1080200c 	andi	r2,r2,128
400928c4:	10001f1e 	bne	r2,zero,40092944 <_fclose_r+0xe8>
400928c8:	81400c17 	ldw	r5,48(r16)
400928cc:	28000526 	beq	r5,zero,400928e4 <_fclose_r+0x88>
400928d0:	80801004 	addi	r2,r16,64
400928d4:	28800226 	beq	r5,r2,400928e0 <_fclose_r+0x84>
400928d8:	8809883a 	mov	r4,r17
400928dc:	008dfc40 	call	4008dfc4 <_free_r>
400928e0:	80000c15 	stw	zero,48(r16)
400928e4:	81401117 	ldw	r5,68(r16)
400928e8:	28000326 	beq	r5,zero,400928f8 <_fclose_r+0x9c>
400928ec:	8809883a 	mov	r4,r17
400928f0:	008dfc40 	call	4008dfc4 <_free_r>
400928f4:	80001115 	stw	zero,68(r16)
400928f8:	8000030d 	sth	zero,12(r16)
400928fc:	008de640 	call	4008de64 <__sfp_lock_release>
40092900:	9005883a 	mov	r2,r18
40092904:	dfc00317 	ldw	ra,12(sp)
40092908:	dc800217 	ldw	r18,8(sp)
4009290c:	dc400117 	ldw	r17,4(sp)
40092910:	dc000017 	ldw	r16,0(sp)
40092914:	dec00404 	addi	sp,sp,16
40092918:	f800283a 	ret
4009291c:	008de640 	call	4008de64 <__sfp_lock_release>
40092920:	0005883a 	mov	r2,zero
40092924:	003ff706 	br	40092904 <__alt_mem_epcs+0xfff51904>
40092928:	0005883a 	mov	r2,zero
4009292c:	f800283a 	ret
40092930:	8809883a 	mov	r4,r17
40092934:	008de500 	call	4008de50 <__sinit>
40092938:	8080030f 	ldh	r2,12(r16)
4009293c:	103fd51e 	bne	r2,zero,40092894 <__alt_mem_epcs+0xfff51894>
40092940:	003ff606 	br	4009291c <__alt_mem_epcs+0xfff5191c>
40092944:	81400417 	ldw	r5,16(r16)
40092948:	8809883a 	mov	r4,r17
4009294c:	008dfc40 	call	4008dfc4 <_free_r>
40092950:	003fdd06 	br	400928c8 <__alt_mem_epcs+0xfff518c8>
40092954:	04bfffc4 	movi	r18,-1
40092958:	003fd806 	br	400928bc <__alt_mem_epcs+0xfff518bc>

4009295c <fclose>:
4009295c:	009002b4 	movhi	r2,16394
40092960:	10afeb04 	addi	r2,r2,-16468
40092964:	200b883a 	mov	r5,r4
40092968:	11000017 	ldw	r4,0(r2)
4009296c:	009285c1 	jmpi	4009285c <_fclose_r>

40092970 <_fputwc_r>:
40092970:	3080030b 	ldhu	r2,12(r6)
40092974:	defff804 	addi	sp,sp,-32
40092978:	dcc00415 	stw	r19,16(sp)
4009297c:	dc800315 	stw	r18,12(sp)
40092980:	dc000115 	stw	r16,4(sp)
40092984:	dfc00715 	stw	ra,28(sp)
40092988:	dd400615 	stw	r21,24(sp)
4009298c:	dd000515 	stw	r20,20(sp)
40092990:	dc400215 	stw	r17,8(sp)
40092994:	10c8000c 	andi	r3,r2,8192
40092998:	3021883a 	mov	r16,r6
4009299c:	2027883a 	mov	r19,r4
400929a0:	2825883a 	mov	r18,r5
400929a4:	1800051e 	bne	r3,zero,400929bc <_fputwc_r+0x4c>
400929a8:	30c01917 	ldw	r3,100(r6)
400929ac:	10880014 	ori	r2,r2,8192
400929b0:	3080030d 	sth	r2,12(r6)
400929b4:	18880014 	ori	r2,r3,8192
400929b8:	30801915 	stw	r2,100(r6)
400929bc:	008e9500 	call	4008e950 <__locale_mb_cur_max>
400929c0:	00c00044 	movi	r3,1
400929c4:	10c03e26 	beq	r2,r3,40092ac0 <_fputwc_r+0x150>
400929c8:	9809883a 	mov	r4,r19
400929cc:	d80b883a 	mov	r5,sp
400929d0:	900d883a 	mov	r6,r18
400929d4:	81c01704 	addi	r7,r16,92
400929d8:	0092cb00 	call	40092cb0 <_wcrtomb_r>
400929dc:	1029883a 	mov	r20,r2
400929e0:	00bfffc4 	movi	r2,-1
400929e4:	a0802026 	beq	r20,r2,40092a68 <_fputwc_r+0xf8>
400929e8:	d9400003 	ldbu	r5,0(sp)
400929ec:	a0001c26 	beq	r20,zero,40092a60 <_fputwc_r+0xf0>
400929f0:	0023883a 	mov	r17,zero
400929f4:	05400284 	movi	r21,10
400929f8:	00000906 	br	40092a20 <_fputwc_r+0xb0>
400929fc:	80800017 	ldw	r2,0(r16)
40092a00:	11400005 	stb	r5,0(r2)
40092a04:	80c00017 	ldw	r3,0(r16)
40092a08:	18c00044 	addi	r3,r3,1
40092a0c:	80c00015 	stw	r3,0(r16)
40092a10:	8c400044 	addi	r17,r17,1
40092a14:	dc45883a 	add	r2,sp,r17
40092a18:	8d00112e 	bgeu	r17,r20,40092a60 <_fputwc_r+0xf0>
40092a1c:	11400003 	ldbu	r5,0(r2)
40092a20:	80c00217 	ldw	r3,8(r16)
40092a24:	18ffffc4 	addi	r3,r3,-1
40092a28:	80c00215 	stw	r3,8(r16)
40092a2c:	183ff30e 	bge	r3,zero,400929fc <__alt_mem_epcs+0xfff519fc>
40092a30:	80800617 	ldw	r2,24(r16)
40092a34:	18801916 	blt	r3,r2,40092a9c <_fputwc_r+0x12c>
40092a38:	80800017 	ldw	r2,0(r16)
40092a3c:	11400005 	stb	r5,0(r2)
40092a40:	80800017 	ldw	r2,0(r16)
40092a44:	10c00003 	ldbu	r3,0(r2)
40092a48:	10800044 	addi	r2,r2,1
40092a4c:	1d402326 	beq	r3,r21,40092adc <_fputwc_r+0x16c>
40092a50:	80800015 	stw	r2,0(r16)
40092a54:	8c400044 	addi	r17,r17,1
40092a58:	dc45883a 	add	r2,sp,r17
40092a5c:	8d3fef36 	bltu	r17,r20,40092a1c <__alt_mem_epcs+0xfff51a1c>
40092a60:	9005883a 	mov	r2,r18
40092a64:	00000406 	br	40092a78 <_fputwc_r+0x108>
40092a68:	80c0030b 	ldhu	r3,12(r16)
40092a6c:	a005883a 	mov	r2,r20
40092a70:	18c01014 	ori	r3,r3,64
40092a74:	80c0030d 	sth	r3,12(r16)
40092a78:	dfc00717 	ldw	ra,28(sp)
40092a7c:	dd400617 	ldw	r21,24(sp)
40092a80:	dd000517 	ldw	r20,20(sp)
40092a84:	dcc00417 	ldw	r19,16(sp)
40092a88:	dc800317 	ldw	r18,12(sp)
40092a8c:	dc400217 	ldw	r17,8(sp)
40092a90:	dc000117 	ldw	r16,4(sp)
40092a94:	dec00804 	addi	sp,sp,32
40092a98:	f800283a 	ret
40092a9c:	9809883a 	mov	r4,r19
40092aa0:	29403fcc 	andi	r5,r5,255
40092aa4:	800d883a 	mov	r6,r16
40092aa8:	00925780 	call	40092578 <__swbuf_r>
40092aac:	10bfffe0 	cmpeqi	r2,r2,-1
40092ab0:	10803fcc 	andi	r2,r2,255
40092ab4:	103fd626 	beq	r2,zero,40092a10 <__alt_mem_epcs+0xfff51a10>
40092ab8:	00bfffc4 	movi	r2,-1
40092abc:	003fee06 	br	40092a78 <__alt_mem_epcs+0xfff51a78>
40092ac0:	90ffffc4 	addi	r3,r18,-1
40092ac4:	01003f84 	movi	r4,254
40092ac8:	20ffbf36 	bltu	r4,r3,400929c8 <__alt_mem_epcs+0xfff519c8>
40092acc:	900b883a 	mov	r5,r18
40092ad0:	dc800005 	stb	r18,0(sp)
40092ad4:	1029883a 	mov	r20,r2
40092ad8:	003fc506 	br	400929f0 <__alt_mem_epcs+0xfff519f0>
40092adc:	9809883a 	mov	r4,r19
40092ae0:	a80b883a 	mov	r5,r21
40092ae4:	800d883a 	mov	r6,r16
40092ae8:	00925780 	call	40092578 <__swbuf_r>
40092aec:	10bfffe0 	cmpeqi	r2,r2,-1
40092af0:	003fef06 	br	40092ab0 <__alt_mem_epcs+0xfff51ab0>

40092af4 <fputwc>:
40092af4:	defffc04 	addi	sp,sp,-16
40092af8:	dc000115 	stw	r16,4(sp)
40092afc:	041002b4 	movhi	r16,16394
40092b00:	842feb04 	addi	r16,r16,-16468
40092b04:	dc400215 	stw	r17,8(sp)
40092b08:	2023883a 	mov	r17,r4
40092b0c:	81000017 	ldw	r4,0(r16)
40092b10:	dfc00315 	stw	ra,12(sp)
40092b14:	280d883a 	mov	r6,r5
40092b18:	20000626 	beq	r4,zero,40092b34 <fputwc+0x40>
40092b1c:	20800e17 	ldw	r2,56(r4)
40092b20:	1000041e 	bne	r2,zero,40092b34 <fputwc+0x40>
40092b24:	d9400015 	stw	r5,0(sp)
40092b28:	008de500 	call	4008de50 <__sinit>
40092b2c:	81000017 	ldw	r4,0(r16)
40092b30:	d9800017 	ldw	r6,0(sp)
40092b34:	880b883a 	mov	r5,r17
40092b38:	dfc00317 	ldw	ra,12(sp)
40092b3c:	dc400217 	ldw	r17,8(sp)
40092b40:	dc000117 	ldw	r16,4(sp)
40092b44:	dec00404 	addi	sp,sp,16
40092b48:	00929701 	jmpi	40092970 <_fputwc_r>

40092b4c <_fstat_r>:
40092b4c:	defffd04 	addi	sp,sp,-12
40092b50:	dc000015 	stw	r16,0(sp)
40092b54:	041002b4 	movhi	r16,16394
40092b58:	dc400115 	stw	r17,4(sp)
40092b5c:	84373304 	addi	r16,r16,-9012
40092b60:	2023883a 	mov	r17,r4
40092b64:	2809883a 	mov	r4,r5
40092b68:	300b883a 	mov	r5,r6
40092b6c:	dfc00215 	stw	ra,8(sp)
40092b70:	80000015 	stw	zero,0(r16)
40092b74:	009589c0 	call	4009589c <fstat>
40092b78:	00ffffc4 	movi	r3,-1
40092b7c:	10c00526 	beq	r2,r3,40092b94 <_fstat_r+0x48>
40092b80:	dfc00217 	ldw	ra,8(sp)
40092b84:	dc400117 	ldw	r17,4(sp)
40092b88:	dc000017 	ldw	r16,0(sp)
40092b8c:	dec00304 	addi	sp,sp,12
40092b90:	f800283a 	ret
40092b94:	80c00017 	ldw	r3,0(r16)
40092b98:	183ff926 	beq	r3,zero,40092b80 <__alt_mem_epcs+0xfff51b80>
40092b9c:	88c00015 	stw	r3,0(r17)
40092ba0:	003ff706 	br	40092b80 <__alt_mem_epcs+0xfff51b80>

40092ba4 <_isatty_r>:
40092ba4:	defffd04 	addi	sp,sp,-12
40092ba8:	dc000015 	stw	r16,0(sp)
40092bac:	041002b4 	movhi	r16,16394
40092bb0:	dc400115 	stw	r17,4(sp)
40092bb4:	84373304 	addi	r16,r16,-9012
40092bb8:	2023883a 	mov	r17,r4
40092bbc:	2809883a 	mov	r4,r5
40092bc0:	dfc00215 	stw	ra,8(sp)
40092bc4:	80000015 	stw	zero,0(r16)
40092bc8:	0095b4c0 	call	40095b4c <isatty>
40092bcc:	00ffffc4 	movi	r3,-1
40092bd0:	10c00526 	beq	r2,r3,40092be8 <_isatty_r+0x44>
40092bd4:	dfc00217 	ldw	ra,8(sp)
40092bd8:	dc400117 	ldw	r17,4(sp)
40092bdc:	dc000017 	ldw	r16,0(sp)
40092be0:	dec00304 	addi	sp,sp,12
40092be4:	f800283a 	ret
40092be8:	80c00017 	ldw	r3,0(r16)
40092bec:	183ff926 	beq	r3,zero,40092bd4 <__alt_mem_epcs+0xfff51bd4>
40092bf0:	88c00015 	stw	r3,0(r17)
40092bf4:	003ff706 	br	40092bd4 <__alt_mem_epcs+0xfff51bd4>

40092bf8 <_lseek_r>:
40092bf8:	defffd04 	addi	sp,sp,-12
40092bfc:	dc000015 	stw	r16,0(sp)
40092c00:	041002b4 	movhi	r16,16394
40092c04:	dc400115 	stw	r17,4(sp)
40092c08:	84373304 	addi	r16,r16,-9012
40092c0c:	2023883a 	mov	r17,r4
40092c10:	2809883a 	mov	r4,r5
40092c14:	300b883a 	mov	r5,r6
40092c18:	380d883a 	mov	r6,r7
40092c1c:	dfc00215 	stw	ra,8(sp)
40092c20:	80000015 	stw	zero,0(r16)
40092c24:	0095d240 	call	40095d24 <lseek>
40092c28:	00ffffc4 	movi	r3,-1
40092c2c:	10c00526 	beq	r2,r3,40092c44 <_lseek_r+0x4c>
40092c30:	dfc00217 	ldw	ra,8(sp)
40092c34:	dc400117 	ldw	r17,4(sp)
40092c38:	dc000017 	ldw	r16,0(sp)
40092c3c:	dec00304 	addi	sp,sp,12
40092c40:	f800283a 	ret
40092c44:	80c00017 	ldw	r3,0(r16)
40092c48:	183ff926 	beq	r3,zero,40092c30 <__alt_mem_epcs+0xfff51c30>
40092c4c:	88c00015 	stw	r3,0(r17)
40092c50:	003ff706 	br	40092c30 <__alt_mem_epcs+0xfff51c30>

40092c54 <_read_r>:
40092c54:	defffd04 	addi	sp,sp,-12
40092c58:	dc000015 	stw	r16,0(sp)
40092c5c:	041002b4 	movhi	r16,16394
40092c60:	dc400115 	stw	r17,4(sp)
40092c64:	84373304 	addi	r16,r16,-9012
40092c68:	2023883a 	mov	r17,r4
40092c6c:	2809883a 	mov	r4,r5
40092c70:	300b883a 	mov	r5,r6
40092c74:	380d883a 	mov	r6,r7
40092c78:	dfc00215 	stw	ra,8(sp)
40092c7c:	80000015 	stw	zero,0(r16)
40092c80:	0095f000 	call	40095f00 <read>
40092c84:	00ffffc4 	movi	r3,-1
40092c88:	10c00526 	beq	r2,r3,40092ca0 <_read_r+0x4c>
40092c8c:	dfc00217 	ldw	ra,8(sp)
40092c90:	dc400117 	ldw	r17,4(sp)
40092c94:	dc000017 	ldw	r16,0(sp)
40092c98:	dec00304 	addi	sp,sp,12
40092c9c:	f800283a 	ret
40092ca0:	80c00017 	ldw	r3,0(r16)
40092ca4:	183ff926 	beq	r3,zero,40092c8c <__alt_mem_epcs+0xfff51c8c>
40092ca8:	88c00015 	stw	r3,0(r17)
40092cac:	003ff706 	br	40092c8c <__alt_mem_epcs+0xfff51c8c>

40092cb0 <_wcrtomb_r>:
40092cb0:	defff604 	addi	sp,sp,-40
40092cb4:	009002b4 	movhi	r2,16394
40092cb8:	dc800815 	stw	r18,32(sp)
40092cbc:	dc400715 	stw	r17,28(sp)
40092cc0:	dc000615 	stw	r16,24(sp)
40092cc4:	10afef04 	addi	r2,r2,-16452
40092cc8:	dfc00915 	stw	ra,36(sp)
40092ccc:	2021883a 	mov	r16,r4
40092cd0:	3823883a 	mov	r17,r7
40092cd4:	14800017 	ldw	r18,0(r2)
40092cd8:	28001426 	beq	r5,zero,40092d2c <_wcrtomb_r+0x7c>
40092cdc:	d9400415 	stw	r5,16(sp)
40092ce0:	d9800515 	stw	r6,20(sp)
40092ce4:	008e9440 	call	4008e944 <__locale_charset>
40092ce8:	d9400417 	ldw	r5,16(sp)
40092cec:	d9800517 	ldw	r6,20(sp)
40092cf0:	8009883a 	mov	r4,r16
40092cf4:	dc400015 	stw	r17,0(sp)
40092cf8:	100f883a 	mov	r7,r2
40092cfc:	903ee83a 	callr	r18
40092d00:	00ffffc4 	movi	r3,-1
40092d04:	10c0031e 	bne	r2,r3,40092d14 <_wcrtomb_r+0x64>
40092d08:	88000015 	stw	zero,0(r17)
40092d0c:	00c02284 	movi	r3,138
40092d10:	80c00015 	stw	r3,0(r16)
40092d14:	dfc00917 	ldw	ra,36(sp)
40092d18:	dc800817 	ldw	r18,32(sp)
40092d1c:	dc400717 	ldw	r17,28(sp)
40092d20:	dc000617 	ldw	r16,24(sp)
40092d24:	dec00a04 	addi	sp,sp,40
40092d28:	f800283a 	ret
40092d2c:	008e9440 	call	4008e944 <__locale_charset>
40092d30:	8009883a 	mov	r4,r16
40092d34:	dc400015 	stw	r17,0(sp)
40092d38:	d9400104 	addi	r5,sp,4
40092d3c:	000d883a 	mov	r6,zero
40092d40:	100f883a 	mov	r7,r2
40092d44:	903ee83a 	callr	r18
40092d48:	003fed06 	br	40092d00 <__alt_mem_epcs+0xfff51d00>

40092d4c <wcrtomb>:
40092d4c:	defff504 	addi	sp,sp,-44
40092d50:	dc400515 	stw	r17,20(sp)
40092d54:	dc000415 	stw	r16,16(sp)
40092d58:	dfc00a15 	stw	ra,40(sp)
40092d5c:	dd400915 	stw	r21,36(sp)
40092d60:	dd000815 	stw	r20,32(sp)
40092d64:	dcc00715 	stw	r19,28(sp)
40092d68:	dc800615 	stw	r18,24(sp)
40092d6c:	2021883a 	mov	r16,r4
40092d70:	3023883a 	mov	r17,r6
40092d74:	20001d26 	beq	r4,zero,40092dec <wcrtomb+0xa0>
40092d78:	049002b4 	movhi	r18,16394
40092d7c:	94afeb04 	addi	r18,r18,-16468
40092d80:	009002b4 	movhi	r2,16394
40092d84:	95400017 	ldw	r21,0(r18)
40092d88:	10afef04 	addi	r2,r2,-16452
40092d8c:	15000017 	ldw	r20,0(r2)
40092d90:	2827883a 	mov	r19,r5
40092d94:	008e9440 	call	4008e944 <__locale_charset>
40092d98:	a809883a 	mov	r4,r21
40092d9c:	dc400015 	stw	r17,0(sp)
40092da0:	800b883a 	mov	r5,r16
40092da4:	980d883a 	mov	r6,r19
40092da8:	100f883a 	mov	r7,r2
40092dac:	a03ee83a 	callr	r20
40092db0:	00ffffc4 	movi	r3,-1
40092db4:	10c0041e 	bne	r2,r3,40092dc8 <wcrtomb+0x7c>
40092db8:	90c00017 	ldw	r3,0(r18)
40092dbc:	01002284 	movi	r4,138
40092dc0:	88000015 	stw	zero,0(r17)
40092dc4:	19000015 	stw	r4,0(r3)
40092dc8:	dfc00a17 	ldw	ra,40(sp)
40092dcc:	dd400917 	ldw	r21,36(sp)
40092dd0:	dd000817 	ldw	r20,32(sp)
40092dd4:	dcc00717 	ldw	r19,28(sp)
40092dd8:	dc800617 	ldw	r18,24(sp)
40092ddc:	dc400517 	ldw	r17,20(sp)
40092de0:	dc000417 	ldw	r16,16(sp)
40092de4:	dec00b04 	addi	sp,sp,44
40092de8:	f800283a 	ret
40092dec:	049002b4 	movhi	r18,16394
40092df0:	94afeb04 	addi	r18,r18,-16468
40092df4:	009002b4 	movhi	r2,16394
40092df8:	94c00017 	ldw	r19,0(r18)
40092dfc:	10afef04 	addi	r2,r2,-16452
40092e00:	14000017 	ldw	r16,0(r2)
40092e04:	008e9440 	call	4008e944 <__locale_charset>
40092e08:	9809883a 	mov	r4,r19
40092e0c:	dc400015 	stw	r17,0(sp)
40092e10:	d9400104 	addi	r5,sp,4
40092e14:	000d883a 	mov	r6,zero
40092e18:	100f883a 	mov	r7,r2
40092e1c:	803ee83a 	callr	r16
40092e20:	003fe306 	br	40092db0 <__alt_mem_epcs+0xfff51db0>

40092e24 <__ascii_wctomb>:
40092e24:	28000526 	beq	r5,zero,40092e3c <__ascii_wctomb+0x18>
40092e28:	00803fc4 	movi	r2,255
40092e2c:	11800536 	bltu	r2,r6,40092e44 <__ascii_wctomb+0x20>
40092e30:	29800005 	stb	r6,0(r5)
40092e34:	00800044 	movi	r2,1
40092e38:	f800283a 	ret
40092e3c:	0005883a 	mov	r2,zero
40092e40:	f800283a 	ret
40092e44:	00802284 	movi	r2,138
40092e48:	20800015 	stw	r2,0(r4)
40092e4c:	00bfffc4 	movi	r2,-1
40092e50:	f800283a 	ret

40092e54 <_wctomb_r>:
40092e54:	009002b4 	movhi	r2,16394
40092e58:	defff904 	addi	sp,sp,-28
40092e5c:	10afef04 	addi	r2,r2,-16452
40092e60:	dfc00615 	stw	ra,24(sp)
40092e64:	dc400515 	stw	r17,20(sp)
40092e68:	dc000415 	stw	r16,16(sp)
40092e6c:	3823883a 	mov	r17,r7
40092e70:	14000017 	ldw	r16,0(r2)
40092e74:	d9000115 	stw	r4,4(sp)
40092e78:	d9400215 	stw	r5,8(sp)
40092e7c:	d9800315 	stw	r6,12(sp)
40092e80:	008e9440 	call	4008e944 <__locale_charset>
40092e84:	d9000117 	ldw	r4,4(sp)
40092e88:	d9400217 	ldw	r5,8(sp)
40092e8c:	d9800317 	ldw	r6,12(sp)
40092e90:	dc400015 	stw	r17,0(sp)
40092e94:	100f883a 	mov	r7,r2
40092e98:	803ee83a 	callr	r16
40092e9c:	dfc00617 	ldw	ra,24(sp)
40092ea0:	dc400517 	ldw	r17,20(sp)
40092ea4:	dc000417 	ldw	r16,16(sp)
40092ea8:	dec00704 	addi	sp,sp,28
40092eac:	f800283a 	ret

40092eb0 <__udivdi3>:
40092eb0:	defff504 	addi	sp,sp,-44
40092eb4:	dcc00415 	stw	r19,16(sp)
40092eb8:	dc000115 	stw	r16,4(sp)
40092ebc:	dfc00a15 	stw	ra,40(sp)
40092ec0:	df000915 	stw	fp,36(sp)
40092ec4:	ddc00815 	stw	r23,32(sp)
40092ec8:	dd800715 	stw	r22,28(sp)
40092ecc:	dd400615 	stw	r21,24(sp)
40092ed0:	dd000515 	stw	r20,20(sp)
40092ed4:	dc800315 	stw	r18,12(sp)
40092ed8:	dc400215 	stw	r17,8(sp)
40092edc:	2027883a 	mov	r19,r4
40092ee0:	2821883a 	mov	r16,r5
40092ee4:	3800421e 	bne	r7,zero,40092ff0 <__udivdi3+0x140>
40092ee8:	3025883a 	mov	r18,r6
40092eec:	2023883a 	mov	r17,r4
40092ef0:	2980542e 	bgeu	r5,r6,40093044 <__udivdi3+0x194>
40092ef4:	00bfffd4 	movui	r2,65535
40092ef8:	282d883a 	mov	r22,r5
40092efc:	1180a836 	bltu	r2,r6,400931a0 <__udivdi3+0x2f0>
40092f00:	00803fc4 	movi	r2,255
40092f04:	1181422e 	bgeu	r2,r6,40093410 <__udivdi3+0x560>
40092f08:	00800204 	movi	r2,8
40092f0c:	1007883a 	mov	r3,r2
40092f10:	3084d83a 	srl	r2,r6,r2
40092f14:	011002b4 	movhi	r4,16394
40092f18:	21281504 	addi	r4,r4,-24492
40092f1c:	2085883a 	add	r2,r4,r2
40092f20:	10800003 	ldbu	r2,0(r2)
40092f24:	10c7883a 	add	r3,r2,r3
40092f28:	00800804 	movi	r2,32
40092f2c:	10c5c83a 	sub	r2,r2,r3
40092f30:	10000526 	beq	r2,zero,40092f48 <__udivdi3+0x98>
40092f34:	80a0983a 	sll	r16,r16,r2
40092f38:	98c6d83a 	srl	r3,r19,r3
40092f3c:	30a4983a 	sll	r18,r6,r2
40092f40:	98a2983a 	sll	r17,r19,r2
40092f44:	80ecb03a 	or	r22,r16,r3
40092f48:	902ad43a 	srli	r21,r18,16
40092f4c:	b009883a 	mov	r4,r22
40092f50:	953fffcc 	andi	r20,r18,65535
40092f54:	a80b883a 	mov	r5,r21
40092f58:	0093b240 	call	40093b24 <__umodsi3>
40092f5c:	b009883a 	mov	r4,r22
40092f60:	a80b883a 	mov	r5,r21
40092f64:	1027883a 	mov	r19,r2
40092f68:	0093b1c0 	call	40093b1c <__udivsi3>
40092f6c:	1021883a 	mov	r16,r2
40092f70:	8806d43a 	srli	r3,r17,16
40092f74:	9804943a 	slli	r2,r19,16
40092f78:	8527383a 	mul	r19,r16,r20
40092f7c:	10c4b03a 	or	r2,r2,r3
40092f80:	14c0052e 	bgeu	r2,r19,40092f98 <__udivdi3+0xe8>
40092f84:	1485883a 	add	r2,r2,r18
40092f88:	80ffffc4 	addi	r3,r16,-1
40092f8c:	14800136 	bltu	r2,r18,40092f94 <__udivdi3+0xe4>
40092f90:	14c13436 	bltu	r2,r19,40093464 <__udivdi3+0x5b4>
40092f94:	1821883a 	mov	r16,r3
40092f98:	14e7c83a 	sub	r19,r2,r19
40092f9c:	9809883a 	mov	r4,r19
40092fa0:	a80b883a 	mov	r5,r21
40092fa4:	0093b240 	call	40093b24 <__umodsi3>
40092fa8:	102d883a 	mov	r22,r2
40092fac:	9809883a 	mov	r4,r19
40092fb0:	a80b883a 	mov	r5,r21
40092fb4:	0093b1c0 	call	40093b1c <__udivsi3>
40092fb8:	b02c943a 	slli	r22,r22,16
40092fbc:	1529383a 	mul	r20,r2,r20
40092fc0:	8c7fffcc 	andi	r17,r17,65535
40092fc4:	b462b03a 	or	r17,r22,r17
40092fc8:	8d00052e 	bgeu	r17,r20,40092fe0 <__udivdi3+0x130>
40092fcc:	8ca3883a 	add	r17,r17,r18
40092fd0:	10ffffc4 	addi	r3,r2,-1
40092fd4:	8c80f636 	bltu	r17,r18,400933b0 <__udivdi3+0x500>
40092fd8:	8d00f52e 	bgeu	r17,r20,400933b0 <__udivdi3+0x500>
40092fdc:	10bfff84 	addi	r2,r2,-2
40092fe0:	8020943a 	slli	r16,r16,16
40092fe4:	0007883a 	mov	r3,zero
40092fe8:	1404b03a 	or	r2,r2,r16
40092fec:	00005b06 	br	4009315c <__udivdi3+0x2ac>
40092ff0:	29c05836 	bltu	r5,r7,40093154 <__udivdi3+0x2a4>
40092ff4:	00bfffd4 	movui	r2,65535
40092ff8:	11c0642e 	bgeu	r2,r7,4009318c <__udivdi3+0x2dc>
40092ffc:	00804034 	movhi	r2,256
40093000:	10bfffc4 	addi	r2,r2,-1
40093004:	11c0f32e 	bgeu	r2,r7,400933d4 <__udivdi3+0x524>
40093008:	00c00604 	movi	r3,24
4009300c:	180b883a 	mov	r5,r3
40093010:	38c6d83a 	srl	r3,r7,r3
40093014:	009002b4 	movhi	r2,16394
40093018:	10a81504 	addi	r2,r2,-24492
4009301c:	10c7883a 	add	r3,r2,r3
40093020:	18c00003 	ldbu	r3,0(r3)
40093024:	01000804 	movi	r4,32
40093028:	1947883a 	add	r3,r3,r5
4009302c:	20e5c83a 	sub	r18,r4,r3
40093030:	9000661e 	bne	r18,zero,400931cc <__udivdi3+0x31c>
40093034:	3c00f936 	bltu	r7,r16,4009341c <__udivdi3+0x56c>
40093038:	9985403a 	cmpgeu	r2,r19,r6
4009303c:	0007883a 	mov	r3,zero
40093040:	00004606 	br	4009315c <__udivdi3+0x2ac>
40093044:	3000041e 	bne	r6,zero,40093058 <__udivdi3+0x1a8>
40093048:	01000044 	movi	r4,1
4009304c:	000b883a 	mov	r5,zero
40093050:	0093b1c0 	call	40093b1c <__udivsi3>
40093054:	1025883a 	mov	r18,r2
40093058:	00bfffd4 	movui	r2,65535
4009305c:	1480562e 	bgeu	r2,r18,400931b8 <__udivdi3+0x308>
40093060:	00804034 	movhi	r2,256
40093064:	10bfffc4 	addi	r2,r2,-1
40093068:	1480e32e 	bgeu	r2,r18,400933f8 <__udivdi3+0x548>
4009306c:	00800604 	movi	r2,24
40093070:	1007883a 	mov	r3,r2
40093074:	9084d83a 	srl	r2,r18,r2
40093078:	011002b4 	movhi	r4,16394
4009307c:	21281504 	addi	r4,r4,-24492
40093080:	2085883a 	add	r2,r4,r2
40093084:	10800003 	ldbu	r2,0(r2)
40093088:	10c5883a 	add	r2,r2,r3
4009308c:	00c00804 	movi	r3,32
40093090:	1887c83a 	sub	r3,r3,r2
40093094:	1800911e 	bne	r3,zero,400932dc <__udivdi3+0x42c>
40093098:	9028d43a 	srli	r20,r18,16
4009309c:	84a1c83a 	sub	r16,r16,r18
400930a0:	957fffcc 	andi	r21,r18,65535
400930a4:	00c00044 	movi	r3,1
400930a8:	8009883a 	mov	r4,r16
400930ac:	a00b883a 	mov	r5,r20
400930b0:	d8c00015 	stw	r3,0(sp)
400930b4:	0093b240 	call	40093b24 <__umodsi3>
400930b8:	8009883a 	mov	r4,r16
400930bc:	a00b883a 	mov	r5,r20
400930c0:	1027883a 	mov	r19,r2
400930c4:	0093b1c0 	call	40093b1c <__udivsi3>
400930c8:	1021883a 	mov	r16,r2
400930cc:	880cd43a 	srli	r6,r17,16
400930d0:	9804943a 	slli	r2,r19,16
400930d4:	8567383a 	mul	r19,r16,r21
400930d8:	d8c00017 	ldw	r3,0(sp)
400930dc:	1188b03a 	or	r4,r2,r6
400930e0:	24c0052e 	bgeu	r4,r19,400930f8 <__udivdi3+0x248>
400930e4:	2489883a 	add	r4,r4,r18
400930e8:	80bfffc4 	addi	r2,r16,-1
400930ec:	24800136 	bltu	r4,r18,400930f4 <__udivdi3+0x244>
400930f0:	24c0d936 	bltu	r4,r19,40093458 <__udivdi3+0x5a8>
400930f4:	1021883a 	mov	r16,r2
400930f8:	24e7c83a 	sub	r19,r4,r19
400930fc:	9809883a 	mov	r4,r19
40093100:	a00b883a 	mov	r5,r20
40093104:	d8c00015 	stw	r3,0(sp)
40093108:	0093b240 	call	40093b24 <__umodsi3>
4009310c:	102d883a 	mov	r22,r2
40093110:	9809883a 	mov	r4,r19
40093114:	a00b883a 	mov	r5,r20
40093118:	0093b1c0 	call	40093b1c <__udivsi3>
4009311c:	b02c943a 	slli	r22,r22,16
40093120:	156b383a 	mul	r21,r2,r21
40093124:	8c7fffcc 	andi	r17,r17,65535
40093128:	b462b03a 	or	r17,r22,r17
4009312c:	d8c00017 	ldw	r3,0(sp)
40093130:	8d40052e 	bgeu	r17,r21,40093148 <__udivdi3+0x298>
40093134:	8ca3883a 	add	r17,r17,r18
40093138:	113fffc4 	addi	r4,r2,-1
4009313c:	8c809a36 	bltu	r17,r18,400933a8 <__udivdi3+0x4f8>
40093140:	8d40992e 	bgeu	r17,r21,400933a8 <__udivdi3+0x4f8>
40093144:	10bfff84 	addi	r2,r2,-2
40093148:	8020943a 	slli	r16,r16,16
4009314c:	1404b03a 	or	r2,r2,r16
40093150:	00000206 	br	4009315c <__udivdi3+0x2ac>
40093154:	0007883a 	mov	r3,zero
40093158:	0005883a 	mov	r2,zero
4009315c:	dfc00a17 	ldw	ra,40(sp)
40093160:	df000917 	ldw	fp,36(sp)
40093164:	ddc00817 	ldw	r23,32(sp)
40093168:	dd800717 	ldw	r22,28(sp)
4009316c:	dd400617 	ldw	r21,24(sp)
40093170:	dd000517 	ldw	r20,20(sp)
40093174:	dcc00417 	ldw	r19,16(sp)
40093178:	dc800317 	ldw	r18,12(sp)
4009317c:	dc400217 	ldw	r17,8(sp)
40093180:	dc000117 	ldw	r16,4(sp)
40093184:	dec00b04 	addi	sp,sp,44
40093188:	f800283a 	ret
4009318c:	00803fc4 	movi	r2,255
40093190:	11c0932e 	bgeu	r2,r7,400933e0 <__udivdi3+0x530>
40093194:	00c00204 	movi	r3,8
40093198:	180b883a 	mov	r5,r3
4009319c:	003f9c06 	br	40093010 <__alt_mem_epcs+0xfff52010>
400931a0:	00804034 	movhi	r2,256
400931a4:	10bfffc4 	addi	r2,r2,-1
400931a8:	1180902e 	bgeu	r2,r6,400933ec <__udivdi3+0x53c>
400931ac:	00800604 	movi	r2,24
400931b0:	1007883a 	mov	r3,r2
400931b4:	003f5606 	br	40092f10 <__alt_mem_epcs+0xfff51f10>
400931b8:	00803fc4 	movi	r2,255
400931bc:	1480912e 	bgeu	r2,r18,40093404 <__udivdi3+0x554>
400931c0:	00800204 	movi	r2,8
400931c4:	1007883a 	mov	r3,r2
400931c8:	003faa06 	br	40093074 <__alt_mem_epcs+0xfff52074>
400931cc:	30eed83a 	srl	r23,r6,r3
400931d0:	3c8e983a 	sll	r7,r7,r18
400931d4:	80f8d83a 	srl	fp,r16,r3
400931d8:	98c6d83a 	srl	r3,r19,r3
400931dc:	3deeb03a 	or	r23,r7,r23
400931e0:	b828d43a 	srli	r20,r23,16
400931e4:	84a0983a 	sll	r16,r16,r18
400931e8:	e009883a 	mov	r4,fp
400931ec:	a00b883a 	mov	r5,r20
400931f0:	80e2b03a 	or	r17,r16,r3
400931f4:	34aa983a 	sll	r21,r6,r18
400931f8:	0093b240 	call	40093b24 <__umodsi3>
400931fc:	e009883a 	mov	r4,fp
40093200:	a00b883a 	mov	r5,r20
40093204:	102d883a 	mov	r22,r2
40093208:	0093b1c0 	call	40093b1c <__udivsi3>
4009320c:	1021883a 	mov	r16,r2
40093210:	bf3fffcc 	andi	fp,r23,65535
40093214:	b004943a 	slli	r2,r22,16
40093218:	8808d43a 	srli	r4,r17,16
4009321c:	872d383a 	mul	r22,r16,fp
40093220:	1104b03a 	or	r2,r2,r4
40093224:	1580042e 	bgeu	r2,r22,40093238 <__udivdi3+0x388>
40093228:	15c5883a 	add	r2,r2,r23
4009322c:	80ffffc4 	addi	r3,r16,-1
40093230:	15c0812e 	bgeu	r2,r23,40093438 <__udivdi3+0x588>
40093234:	1821883a 	mov	r16,r3
40093238:	15adc83a 	sub	r22,r2,r22
4009323c:	b009883a 	mov	r4,r22
40093240:	a00b883a 	mov	r5,r20
40093244:	0093b240 	call	40093b24 <__umodsi3>
40093248:	a00b883a 	mov	r5,r20
4009324c:	b009883a 	mov	r4,r22
40093250:	d8800015 	stw	r2,0(sp)
40093254:	0093b1c0 	call	40093b1c <__udivsi3>
40093258:	d8c00017 	ldw	r3,0(sp)
4009325c:	170b383a 	mul	r5,r2,fp
40093260:	8c7fffcc 	andi	r17,r17,65535
40093264:	1806943a 	slli	r3,r3,16
40093268:	1c46b03a 	or	r3,r3,r17
4009326c:	1940042e 	bgeu	r3,r5,40093280 <__udivdi3+0x3d0>
40093270:	1dc7883a 	add	r3,r3,r23
40093274:	113fffc4 	addi	r4,r2,-1
40093278:	1dc06b2e 	bgeu	r3,r23,40093428 <__udivdi3+0x578>
4009327c:	2005883a 	mov	r2,r4
40093280:	8020943a 	slli	r16,r16,16
40093284:	a9ffffcc 	andi	r7,r21,65535
40093288:	a82ad43a 	srli	r21,r21,16
4009328c:	1404b03a 	or	r2,r2,r16
40093290:	113fffcc 	andi	r4,r2,65535
40093294:	100cd43a 	srli	r6,r2,16
40093298:	21d3383a 	mul	r9,r4,r7
4009329c:	2549383a 	mul	r4,r4,r21
400932a0:	31cf383a 	mul	r7,r6,r7
400932a4:	4810d43a 	srli	r8,r9,16
400932a8:	1947c83a 	sub	r3,r3,r5
400932ac:	3909883a 	add	r4,r7,r4
400932b0:	2209883a 	add	r4,r4,r8
400932b4:	354d383a 	mul	r6,r6,r21
400932b8:	21c0022e 	bgeu	r4,r7,400932c4 <__udivdi3+0x414>
400932bc:	01400074 	movhi	r5,1
400932c0:	314d883a 	add	r6,r6,r5
400932c4:	202ad43a 	srli	r21,r4,16
400932c8:	354d883a 	add	r6,r6,r21
400932cc:	19803f36 	bltu	r3,r6,400933cc <__udivdi3+0x51c>
400932d0:	19803926 	beq	r3,r6,400933b8 <__udivdi3+0x508>
400932d4:	0007883a 	mov	r3,zero
400932d8:	003fa006 	br	4009315c <__alt_mem_epcs+0xfff5215c>
400932dc:	90e4983a 	sll	r18,r18,r3
400932e0:	80aad83a 	srl	r21,r16,r2
400932e4:	80e0983a 	sll	r16,r16,r3
400932e8:	9028d43a 	srli	r20,r18,16
400932ec:	9884d83a 	srl	r2,r19,r2
400932f0:	a809883a 	mov	r4,r21
400932f4:	a00b883a 	mov	r5,r20
400932f8:	80acb03a 	or	r22,r16,r2
400932fc:	98e2983a 	sll	r17,r19,r3
40093300:	0093b240 	call	40093b24 <__umodsi3>
40093304:	a809883a 	mov	r4,r21
40093308:	a00b883a 	mov	r5,r20
4009330c:	1021883a 	mov	r16,r2
40093310:	0093b1c0 	call	40093b1c <__udivsi3>
40093314:	957fffcc 	andi	r21,r18,65535
40093318:	8020943a 	slli	r16,r16,16
4009331c:	b00ad43a 	srli	r5,r22,16
40093320:	1567383a 	mul	r19,r2,r21
40093324:	102f883a 	mov	r23,r2
40093328:	8148b03a 	or	r4,r16,r5
4009332c:	24c0062e 	bgeu	r4,r19,40093348 <__udivdi3+0x498>
40093330:	2489883a 	add	r4,r4,r18
40093334:	10bfffc4 	addi	r2,r2,-1
40093338:	24804536 	bltu	r4,r18,40093450 <__udivdi3+0x5a0>
4009333c:	24c0442e 	bgeu	r4,r19,40093450 <__udivdi3+0x5a0>
40093340:	bdffff84 	addi	r23,r23,-2
40093344:	2489883a 	add	r4,r4,r18
40093348:	24e7c83a 	sub	r19,r4,r19
4009334c:	9809883a 	mov	r4,r19
40093350:	a00b883a 	mov	r5,r20
40093354:	0093b240 	call	40093b24 <__umodsi3>
40093358:	1021883a 	mov	r16,r2
4009335c:	9809883a 	mov	r4,r19
40093360:	a00b883a 	mov	r5,r20
40093364:	0093b1c0 	call	40093b1c <__udivsi3>
40093368:	8020943a 	slli	r16,r16,16
4009336c:	1007883a 	mov	r3,r2
40093370:	1545383a 	mul	r2,r2,r21
40093374:	b13fffcc 	andi	r4,r22,65535
40093378:	8108b03a 	or	r4,r16,r4
4009337c:	2080062e 	bgeu	r4,r2,40093398 <__udivdi3+0x4e8>
40093380:	2489883a 	add	r4,r4,r18
40093384:	197fffc4 	addi	r5,r3,-1
40093388:	24802f36 	bltu	r4,r18,40093448 <__udivdi3+0x598>
4009338c:	20802e2e 	bgeu	r4,r2,40093448 <__udivdi3+0x598>
40093390:	18ffff84 	addi	r3,r3,-2
40093394:	2489883a 	add	r4,r4,r18
40093398:	b82e943a 	slli	r23,r23,16
4009339c:	20a1c83a 	sub	r16,r4,r2
400933a0:	1dc6b03a 	or	r3,r3,r23
400933a4:	003f4006 	br	400930a8 <__alt_mem_epcs+0xfff520a8>
400933a8:	2005883a 	mov	r2,r4
400933ac:	003f6606 	br	40093148 <__alt_mem_epcs+0xfff52148>
400933b0:	1805883a 	mov	r2,r3
400933b4:	003f0a06 	br	40092fe0 <__alt_mem_epcs+0xfff51fe0>
400933b8:	2006943a 	slli	r3,r4,16
400933bc:	9c88983a 	sll	r4,r19,r18
400933c0:	4a7fffcc 	andi	r9,r9,65535
400933c4:	1a47883a 	add	r3,r3,r9
400933c8:	20ffc22e 	bgeu	r4,r3,400932d4 <__alt_mem_epcs+0xfff522d4>
400933cc:	10bfffc4 	addi	r2,r2,-1
400933d0:	003fc006 	br	400932d4 <__alt_mem_epcs+0xfff522d4>
400933d4:	00c00404 	movi	r3,16
400933d8:	180b883a 	mov	r5,r3
400933dc:	003f0c06 	br	40093010 <__alt_mem_epcs+0xfff52010>
400933e0:	0007883a 	mov	r3,zero
400933e4:	000b883a 	mov	r5,zero
400933e8:	003f0906 	br	40093010 <__alt_mem_epcs+0xfff52010>
400933ec:	00800404 	movi	r2,16
400933f0:	1007883a 	mov	r3,r2
400933f4:	003ec606 	br	40092f10 <__alt_mem_epcs+0xfff51f10>
400933f8:	00800404 	movi	r2,16
400933fc:	1007883a 	mov	r3,r2
40093400:	003f1c06 	br	40093074 <__alt_mem_epcs+0xfff52074>
40093404:	0005883a 	mov	r2,zero
40093408:	0007883a 	mov	r3,zero
4009340c:	003f1906 	br	40093074 <__alt_mem_epcs+0xfff52074>
40093410:	0005883a 	mov	r2,zero
40093414:	0007883a 	mov	r3,zero
40093418:	003ebd06 	br	40092f10 <__alt_mem_epcs+0xfff51f10>
4009341c:	0007883a 	mov	r3,zero
40093420:	00800044 	movi	r2,1
40093424:	003f4d06 	br	4009315c <__alt_mem_epcs+0xfff5215c>
40093428:	197f942e 	bgeu	r3,r5,4009327c <__alt_mem_epcs+0xfff5227c>
4009342c:	10bfff84 	addi	r2,r2,-2
40093430:	1dc7883a 	add	r3,r3,r23
40093434:	003f9206 	br	40093280 <__alt_mem_epcs+0xfff52280>
40093438:	15bf7e2e 	bgeu	r2,r22,40093234 <__alt_mem_epcs+0xfff52234>
4009343c:	843fff84 	addi	r16,r16,-2
40093440:	15c5883a 	add	r2,r2,r23
40093444:	003f7c06 	br	40093238 <__alt_mem_epcs+0xfff52238>
40093448:	2807883a 	mov	r3,r5
4009344c:	003fd206 	br	40093398 <__alt_mem_epcs+0xfff52398>
40093450:	102f883a 	mov	r23,r2
40093454:	003fbc06 	br	40093348 <__alt_mem_epcs+0xfff52348>
40093458:	843fff84 	addi	r16,r16,-2
4009345c:	2489883a 	add	r4,r4,r18
40093460:	003f2506 	br	400930f8 <__alt_mem_epcs+0xfff520f8>
40093464:	843fff84 	addi	r16,r16,-2
40093468:	1485883a 	add	r2,r2,r18
4009346c:	003eca06 	br	40092f98 <__alt_mem_epcs+0xfff51f98>

40093470 <__umoddi3>:
40093470:	defff404 	addi	sp,sp,-48
40093474:	ddc00915 	stw	r23,36(sp)
40093478:	dc400315 	stw	r17,12(sp)
4009347c:	dc000215 	stw	r16,8(sp)
40093480:	dfc00b15 	stw	ra,44(sp)
40093484:	df000a15 	stw	fp,40(sp)
40093488:	dd800815 	stw	r22,32(sp)
4009348c:	dd400715 	stw	r21,28(sp)
40093490:	dd000615 	stw	r20,24(sp)
40093494:	dcc00515 	stw	r19,20(sp)
40093498:	dc800415 	stw	r18,16(sp)
4009349c:	2021883a 	mov	r16,r4
400934a0:	2823883a 	mov	r17,r5
400934a4:	282f883a 	mov	r23,r5
400934a8:	3800381e 	bne	r7,zero,4009358c <__umoddi3+0x11c>
400934ac:	3027883a 	mov	r19,r6
400934b0:	2029883a 	mov	r20,r4
400934b4:	29804e2e 	bgeu	r5,r6,400935f0 <__umoddi3+0x180>
400934b8:	00bfffd4 	movui	r2,65535
400934bc:	11809c36 	bltu	r2,r6,40093730 <__umoddi3+0x2c0>
400934c0:	00803fc4 	movi	r2,255
400934c4:	11813b2e 	bgeu	r2,r6,400939b4 <__umoddi3+0x544>
400934c8:	01400204 	movi	r5,8
400934cc:	2805883a 	mov	r2,r5
400934d0:	314ad83a 	srl	r5,r6,r5
400934d4:	00d002b4 	movhi	r3,16394
400934d8:	18e81504 	addi	r3,r3,-24492
400934dc:	194b883a 	add	r5,r3,r5
400934e0:	29000003 	ldbu	r4,0(r5)
400934e4:	2089883a 	add	r4,r4,r2
400934e8:	00800804 	movi	r2,32
400934ec:	1105c83a 	sub	r2,r2,r4
400934f0:	1000ec26 	beq	r2,zero,400938a4 <__umoddi3+0x434>
400934f4:	88a2983a 	sll	r17,r17,r2
400934f8:	8108d83a 	srl	r4,r16,r4
400934fc:	30a6983a 	sll	r19,r6,r2
40093500:	80a8983a 	sll	r20,r16,r2
40093504:	1025883a 	mov	r18,r2
40093508:	892eb03a 	or	r23,r17,r4
4009350c:	982cd43a 	srli	r22,r19,16
40093510:	b809883a 	mov	r4,r23
40093514:	9d7fffcc 	andi	r21,r19,65535
40093518:	b00b883a 	mov	r5,r22
4009351c:	0093b240 	call	40093b24 <__umodsi3>
40093520:	b809883a 	mov	r4,r23
40093524:	b00b883a 	mov	r5,r22
40093528:	1021883a 	mov	r16,r2
4009352c:	0093b1c0 	call	40093b1c <__udivsi3>
40093530:	8020943a 	slli	r16,r16,16
40093534:	a00cd43a 	srli	r6,r20,16
40093538:	1545383a 	mul	r2,r2,r21
4009353c:	8188b03a 	or	r4,r16,r6
40093540:	2080042e 	bgeu	r4,r2,40093554 <__umoddi3+0xe4>
40093544:	24c9883a 	add	r4,r4,r19
40093548:	24c00236 	bltu	r4,r19,40093554 <__umoddi3+0xe4>
4009354c:	2080012e 	bgeu	r4,r2,40093554 <__umoddi3+0xe4>
40093550:	24c9883a 	add	r4,r4,r19
40093554:	20a3c83a 	sub	r17,r4,r2
40093558:	8809883a 	mov	r4,r17
4009355c:	b00b883a 	mov	r5,r22
40093560:	0093b240 	call	40093b24 <__umodsi3>
40093564:	8809883a 	mov	r4,r17
40093568:	b00b883a 	mov	r5,r22
4009356c:	1021883a 	mov	r16,r2
40093570:	0093b1c0 	call	40093b1c <__udivsi3>
40093574:	8006943a 	slli	r3,r16,16
40093578:	1545383a 	mul	r2,r2,r21
4009357c:	a13fffcc 	andi	r4,r20,65535
40093580:	1906b03a 	or	r3,r3,r4
40093584:	1880532e 	bgeu	r3,r2,400936d4 <__umoddi3+0x264>
40093588:	00004e06 	br	400936c4 <__umoddi3+0x254>
4009358c:	29c05536 	bltu	r5,r7,400936e4 <__umoddi3+0x274>
40093590:	00bfffd4 	movui	r2,65535
40093594:	11c0612e 	bgeu	r2,r7,4009371c <__umoddi3+0x2ac>
40093598:	00804034 	movhi	r2,256
4009359c:	10bfffc4 	addi	r2,r2,-1
400935a0:	11c0f82e 	bgeu	r2,r7,40093984 <__umoddi3+0x514>
400935a4:	01400604 	movi	r5,24
400935a8:	282b883a 	mov	r21,r5
400935ac:	394ad83a 	srl	r5,r7,r5
400935b0:	00d002b4 	movhi	r3,16394
400935b4:	18e81504 	addi	r3,r3,-24492
400935b8:	194b883a 	add	r5,r3,r5
400935bc:	28800003 	ldbu	r2,0(r5)
400935c0:	00c00804 	movi	r3,32
400935c4:	156b883a 	add	r21,r2,r21
400935c8:	1d69c83a 	sub	r20,r3,r21
400935cc:	a000631e 	bne	r20,zero,4009375c <__umoddi3+0x2ec>
400935d0:	3c400136 	bltu	r7,r17,400935d8 <__umoddi3+0x168>
400935d4:	81810436 	bltu	r16,r6,400939e8 <__umoddi3+0x578>
400935d8:	8185c83a 	sub	r2,r16,r6
400935dc:	89e3c83a 	sub	r17,r17,r7
400935e0:	8087803a 	cmpltu	r3,r16,r2
400935e4:	88efc83a 	sub	r23,r17,r3
400935e8:	b807883a 	mov	r3,r23
400935ec:	00003f06 	br	400936ec <__umoddi3+0x27c>
400935f0:	3000041e 	bne	r6,zero,40093604 <__umoddi3+0x194>
400935f4:	01000044 	movi	r4,1
400935f8:	000b883a 	mov	r5,zero
400935fc:	0093b1c0 	call	40093b1c <__udivsi3>
40093600:	1027883a 	mov	r19,r2
40093604:	00bfffd4 	movui	r2,65535
40093608:	14c04f2e 	bgeu	r2,r19,40093748 <__umoddi3+0x2d8>
4009360c:	00804034 	movhi	r2,256
40093610:	10bfffc4 	addi	r2,r2,-1
40093614:	14c0e42e 	bgeu	r2,r19,400939a8 <__umoddi3+0x538>
40093618:	00800604 	movi	r2,24
4009361c:	1007883a 	mov	r3,r2
40093620:	9884d83a 	srl	r2,r19,r2
40093624:	011002b4 	movhi	r4,16394
40093628:	21281504 	addi	r4,r4,-24492
4009362c:	2085883a 	add	r2,r4,r2
40093630:	11000003 	ldbu	r4,0(r2)
40093634:	00800804 	movi	r2,32
40093638:	20c7883a 	add	r3,r4,r3
4009363c:	10c5c83a 	sub	r2,r2,r3
40093640:	10009a1e 	bne	r2,zero,400938ac <__umoddi3+0x43c>
40093644:	982cd43a 	srli	r22,r19,16
40093648:	8ce3c83a 	sub	r17,r17,r19
4009364c:	9c3fffcc 	andi	r16,r19,65535
40093650:	0025883a 	mov	r18,zero
40093654:	8809883a 	mov	r4,r17
40093658:	b00b883a 	mov	r5,r22
4009365c:	0093b240 	call	40093b24 <__umodsi3>
40093660:	8809883a 	mov	r4,r17
40093664:	b00b883a 	mov	r5,r22
40093668:	102b883a 	mov	r21,r2
4009366c:	0093b1c0 	call	40093b1c <__udivsi3>
40093670:	a806943a 	slli	r3,r21,16
40093674:	a008d43a 	srli	r4,r20,16
40093678:	1405383a 	mul	r2,r2,r16
4009367c:	190cb03a 	or	r6,r3,r4
40093680:	3080032e 	bgeu	r6,r2,40093690 <__umoddi3+0x220>
40093684:	34cd883a 	add	r6,r6,r19
40093688:	34c00136 	bltu	r6,r19,40093690 <__umoddi3+0x220>
4009368c:	3080d436 	bltu	r6,r2,400939e0 <__umoddi3+0x570>
40093690:	30abc83a 	sub	r21,r6,r2
40093694:	a809883a 	mov	r4,r21
40093698:	b00b883a 	mov	r5,r22
4009369c:	0093b240 	call	40093b24 <__umodsi3>
400936a0:	1023883a 	mov	r17,r2
400936a4:	a809883a 	mov	r4,r21
400936a8:	b00b883a 	mov	r5,r22
400936ac:	0093b1c0 	call	40093b1c <__udivsi3>
400936b0:	8822943a 	slli	r17,r17,16
400936b4:	1405383a 	mul	r2,r2,r16
400936b8:	a13fffcc 	andi	r4,r20,65535
400936bc:	8906b03a 	or	r3,r17,r4
400936c0:	1880042e 	bgeu	r3,r2,400936d4 <__umoddi3+0x264>
400936c4:	1cc7883a 	add	r3,r3,r19
400936c8:	1cc00236 	bltu	r3,r19,400936d4 <__umoddi3+0x264>
400936cc:	1880012e 	bgeu	r3,r2,400936d4 <__umoddi3+0x264>
400936d0:	1cc7883a 	add	r3,r3,r19
400936d4:	1887c83a 	sub	r3,r3,r2
400936d8:	1c84d83a 	srl	r2,r3,r18
400936dc:	0007883a 	mov	r3,zero
400936e0:	00000206 	br	400936ec <__umoddi3+0x27c>
400936e4:	2005883a 	mov	r2,r4
400936e8:	2807883a 	mov	r3,r5
400936ec:	dfc00b17 	ldw	ra,44(sp)
400936f0:	df000a17 	ldw	fp,40(sp)
400936f4:	ddc00917 	ldw	r23,36(sp)
400936f8:	dd800817 	ldw	r22,32(sp)
400936fc:	dd400717 	ldw	r21,28(sp)
40093700:	dd000617 	ldw	r20,24(sp)
40093704:	dcc00517 	ldw	r19,20(sp)
40093708:	dc800417 	ldw	r18,16(sp)
4009370c:	dc400317 	ldw	r17,12(sp)
40093710:	dc000217 	ldw	r16,8(sp)
40093714:	dec00c04 	addi	sp,sp,48
40093718:	f800283a 	ret
4009371c:	00803fc4 	movi	r2,255
40093720:	11c0952e 	bgeu	r2,r7,40093978 <__umoddi3+0x508>
40093724:	01400204 	movi	r5,8
40093728:	282b883a 	mov	r21,r5
4009372c:	003f9f06 	br	400935ac <__alt_mem_epcs+0xfff525ac>
40093730:	00804034 	movhi	r2,256
40093734:	10bfffc4 	addi	r2,r2,-1
40093738:	1180952e 	bgeu	r2,r6,40093990 <__umoddi3+0x520>
4009373c:	01400604 	movi	r5,24
40093740:	2805883a 	mov	r2,r5
40093744:	003f6206 	br	400934d0 <__alt_mem_epcs+0xfff524d0>
40093748:	00803fc4 	movi	r2,255
4009374c:	14c0932e 	bgeu	r2,r19,4009399c <__umoddi3+0x52c>
40093750:	00800204 	movi	r2,8
40093754:	1007883a 	mov	r3,r2
40093758:	003fb106 	br	40093620 <__alt_mem_epcs+0xfff52620>
4009375c:	3548d83a 	srl	r4,r6,r21
40093760:	3d0e983a 	sll	r7,r7,r20
40093764:	8d10983a 	sll	r8,r17,r20
40093768:	8d6cd83a 	srl	r22,r17,r21
4009376c:	3922b03a 	or	r17,r7,r4
40093770:	882ed43a 	srli	r23,r17,16
40093774:	8564d83a 	srl	r18,r16,r21
40093778:	b009883a 	mov	r4,r22
4009377c:	b80b883a 	mov	r5,r23
40093780:	44a4b03a 	or	r18,r8,r18
40093784:	3526983a 	sll	r19,r6,r20
40093788:	0093b240 	call	40093b24 <__umodsi3>
4009378c:	b009883a 	mov	r4,r22
40093790:	b80b883a 	mov	r5,r23
40093794:	1039883a 	mov	fp,r2
40093798:	0093b1c0 	call	40093b1c <__udivsi3>
4009379c:	102d883a 	mov	r22,r2
400937a0:	8a3fffcc 	andi	r8,r17,65535
400937a4:	e004943a 	slli	r2,fp,16
400937a8:	900cd43a 	srli	r6,r18,16
400937ac:	b239383a 	mul	fp,r22,r8
400937b0:	8520983a 	sll	r16,r16,r20
400937b4:	118ab03a 	or	r5,r2,r6
400937b8:	2f00042e 	bgeu	r5,fp,400937cc <__umoddi3+0x35c>
400937bc:	2c4b883a 	add	r5,r5,r17
400937c0:	b0bfffc4 	addi	r2,r22,-1
400937c4:	2c40822e 	bgeu	r5,r17,400939d0 <__umoddi3+0x560>
400937c8:	102d883a 	mov	r22,r2
400937cc:	2f39c83a 	sub	fp,r5,fp
400937d0:	e009883a 	mov	r4,fp
400937d4:	b80b883a 	mov	r5,r23
400937d8:	da000115 	stw	r8,4(sp)
400937dc:	0093b240 	call	40093b24 <__umodsi3>
400937e0:	e009883a 	mov	r4,fp
400937e4:	b80b883a 	mov	r5,r23
400937e8:	d8800015 	stw	r2,0(sp)
400937ec:	0093b1c0 	call	40093b1c <__udivsi3>
400937f0:	d9800017 	ldw	r6,0(sp)
400937f4:	da000117 	ldw	r8,4(sp)
400937f8:	94bfffcc 	andi	r18,r18,65535
400937fc:	300c943a 	slli	r6,r6,16
40093800:	1209383a 	mul	r4,r2,r8
40093804:	3490b03a 	or	r8,r6,r18
40093808:	4100042e 	bgeu	r8,r4,4009381c <__umoddi3+0x3ac>
4009380c:	4451883a 	add	r8,r8,r17
40093810:	10ffffc4 	addi	r3,r2,-1
40093814:	44406a2e 	bgeu	r8,r17,400939c0 <__umoddi3+0x550>
40093818:	1805883a 	mov	r2,r3
4009381c:	b012943a 	slli	r9,r22,16
40093820:	9abfffcc 	andi	r10,r19,65535
40093824:	980ed43a 	srli	r7,r19,16
40093828:	124ab03a 	or	r5,r2,r9
4009382c:	2a7fffcc 	andi	r9,r5,65535
40093830:	280ad43a 	srli	r5,r5,16
40093834:	4a8d383a 	mul	r6,r9,r10
40093838:	49d3383a 	mul	r9,r9,r7
4009383c:	2a95383a 	mul	r10,r5,r10
40093840:	3004d43a 	srli	r2,r6,16
40093844:	4111c83a 	sub	r8,r8,r4
40093848:	5253883a 	add	r9,r10,r9
4009384c:	4893883a 	add	r9,r9,r2
40093850:	29cb383a 	mul	r5,r5,r7
40093854:	4a80022e 	bgeu	r9,r10,40093860 <__umoddi3+0x3f0>
40093858:	00800074 	movhi	r2,1
4009385c:	288b883a 	add	r5,r5,r2
40093860:	4808d43a 	srli	r4,r9,16
40093864:	4812943a 	slli	r9,r9,16
40093868:	31bfffcc 	andi	r6,r6,65535
4009386c:	290b883a 	add	r5,r5,r4
40093870:	498d883a 	add	r6,r9,r6
40093874:	41403a36 	bltu	r8,r5,40093960 <__umoddi3+0x4f0>
40093878:	41405d26 	beq	r8,r5,400939f0 <__umoddi3+0x580>
4009387c:	4149c83a 	sub	r4,r8,r5
40093880:	300f883a 	mov	r7,r6
40093884:	81cfc83a 	sub	r7,r16,r7
40093888:	81c7803a 	cmpltu	r3,r16,r7
4009388c:	20c7c83a 	sub	r3,r4,r3
40093890:	1d44983a 	sll	r2,r3,r21
40093894:	3d0ed83a 	srl	r7,r7,r20
40093898:	1d06d83a 	srl	r3,r3,r20
4009389c:	11c4b03a 	or	r2,r2,r7
400938a0:	003f9206 	br	400936ec <__alt_mem_epcs+0xfff526ec>
400938a4:	0025883a 	mov	r18,zero
400938a8:	003f1806 	br	4009350c <__alt_mem_epcs+0xfff5250c>
400938ac:	98a6983a 	sll	r19,r19,r2
400938b0:	88e8d83a 	srl	r20,r17,r3
400938b4:	80c6d83a 	srl	r3,r16,r3
400938b8:	982cd43a 	srli	r22,r19,16
400938bc:	88a2983a 	sll	r17,r17,r2
400938c0:	a009883a 	mov	r4,r20
400938c4:	b00b883a 	mov	r5,r22
400938c8:	88eab03a 	or	r21,r17,r3
400938cc:	1025883a 	mov	r18,r2
400938d0:	0093b240 	call	40093b24 <__umodsi3>
400938d4:	a009883a 	mov	r4,r20
400938d8:	b00b883a 	mov	r5,r22
400938dc:	1023883a 	mov	r17,r2
400938e0:	0093b1c0 	call	40093b1c <__udivsi3>
400938e4:	9f3fffcc 	andi	fp,r19,65535
400938e8:	8822943a 	slli	r17,r17,16
400938ec:	a80ad43a 	srli	r5,r21,16
400938f0:	1705383a 	mul	r2,r2,fp
400938f4:	84a8983a 	sll	r20,r16,r18
400938f8:	8948b03a 	or	r4,r17,r5
400938fc:	2080042e 	bgeu	r4,r2,40093910 <__umoddi3+0x4a0>
40093900:	24c9883a 	add	r4,r4,r19
40093904:	24c00236 	bltu	r4,r19,40093910 <__umoddi3+0x4a0>
40093908:	2080012e 	bgeu	r4,r2,40093910 <__umoddi3+0x4a0>
4009390c:	24c9883a 	add	r4,r4,r19
40093910:	20afc83a 	sub	r23,r4,r2
40093914:	b809883a 	mov	r4,r23
40093918:	b00b883a 	mov	r5,r22
4009391c:	0093b240 	call	40093b24 <__umodsi3>
40093920:	1023883a 	mov	r17,r2
40093924:	b809883a 	mov	r4,r23
40093928:	b00b883a 	mov	r5,r22
4009392c:	0093b1c0 	call	40093b1c <__udivsi3>
40093930:	8822943a 	slli	r17,r17,16
40093934:	1705383a 	mul	r2,r2,fp
40093938:	a93fffcc 	andi	r4,r21,65535
4009393c:	8908b03a 	or	r4,r17,r4
40093940:	2080042e 	bgeu	r4,r2,40093954 <__umoddi3+0x4e4>
40093944:	24c9883a 	add	r4,r4,r19
40093948:	24c00236 	bltu	r4,r19,40093954 <__umoddi3+0x4e4>
4009394c:	2080012e 	bgeu	r4,r2,40093954 <__umoddi3+0x4e4>
40093950:	24c9883a 	add	r4,r4,r19
40093954:	20a3c83a 	sub	r17,r4,r2
40093958:	e021883a 	mov	r16,fp
4009395c:	003f3d06 	br	40093654 <__alt_mem_epcs+0xfff52654>
40093960:	34cfc83a 	sub	r7,r6,r19
40093964:	2c4bc83a 	sub	r5,r5,r17
40093968:	31cd803a 	cmpltu	r6,r6,r7
4009396c:	298dc83a 	sub	r6,r5,r6
40093970:	4189c83a 	sub	r4,r8,r6
40093974:	003fc306 	br	40093884 <__alt_mem_epcs+0xfff52884>
40093978:	000b883a 	mov	r5,zero
4009397c:	002b883a 	mov	r21,zero
40093980:	003f0a06 	br	400935ac <__alt_mem_epcs+0xfff525ac>
40093984:	01400404 	movi	r5,16
40093988:	282b883a 	mov	r21,r5
4009398c:	003f0706 	br	400935ac <__alt_mem_epcs+0xfff525ac>
40093990:	01400404 	movi	r5,16
40093994:	2805883a 	mov	r2,r5
40093998:	003ecd06 	br	400934d0 <__alt_mem_epcs+0xfff524d0>
4009399c:	0005883a 	mov	r2,zero
400939a0:	0007883a 	mov	r3,zero
400939a4:	003f1e06 	br	40093620 <__alt_mem_epcs+0xfff52620>
400939a8:	00800404 	movi	r2,16
400939ac:	1007883a 	mov	r3,r2
400939b0:	003f1b06 	br	40093620 <__alt_mem_epcs+0xfff52620>
400939b4:	000b883a 	mov	r5,zero
400939b8:	0005883a 	mov	r2,zero
400939bc:	003ec406 	br	400934d0 <__alt_mem_epcs+0xfff524d0>
400939c0:	413f952e 	bgeu	r8,r4,40093818 <__alt_mem_epcs+0xfff52818>
400939c4:	10bfff84 	addi	r2,r2,-2
400939c8:	4451883a 	add	r8,r8,r17
400939cc:	003f9306 	br	4009381c <__alt_mem_epcs+0xfff5281c>
400939d0:	2f3f7d2e 	bgeu	r5,fp,400937c8 <__alt_mem_epcs+0xfff527c8>
400939d4:	b5bfff84 	addi	r22,r22,-2
400939d8:	2c4b883a 	add	r5,r5,r17
400939dc:	003f7b06 	br	400937cc <__alt_mem_epcs+0xfff527cc>
400939e0:	34cd883a 	add	r6,r6,r19
400939e4:	003f2a06 	br	40093690 <__alt_mem_epcs+0xfff52690>
400939e8:	8005883a 	mov	r2,r16
400939ec:	003efe06 	br	400935e8 <__alt_mem_epcs+0xfff525e8>
400939f0:	81bfdb36 	bltu	r16,r6,40093960 <__alt_mem_epcs+0xfff52960>
400939f4:	300f883a 	mov	r7,r6
400939f8:	0009883a 	mov	r4,zero
400939fc:	003fa106 	br	40093884 <__alt_mem_epcs+0xfff52884>

40093a00 <udivmodsi4>:
40093a00:	2900182e 	bgeu	r5,r4,40093a64 <udivmodsi4+0x64>
40093a04:	28001716 	blt	r5,zero,40093a64 <udivmodsi4+0x64>
40093a08:	00800804 	movi	r2,32
40093a0c:	00c00044 	movi	r3,1
40093a10:	00000206 	br	40093a1c <udivmodsi4+0x1c>
40093a14:	10001126 	beq	r2,zero,40093a5c <udivmodsi4+0x5c>
40093a18:	28000516 	blt	r5,zero,40093a30 <udivmodsi4+0x30>
40093a1c:	294b883a 	add	r5,r5,r5
40093a20:	10bfffc4 	addi	r2,r2,-1
40093a24:	18c7883a 	add	r3,r3,r3
40093a28:	293ffa36 	bltu	r5,r4,40093a14 <__alt_mem_epcs+0xfff52a14>
40093a2c:	18000b26 	beq	r3,zero,40093a5c <udivmodsi4+0x5c>
40093a30:	0005883a 	mov	r2,zero
40093a34:	21400236 	bltu	r4,r5,40093a40 <udivmodsi4+0x40>
40093a38:	2149c83a 	sub	r4,r4,r5
40093a3c:	10c4b03a 	or	r2,r2,r3
40093a40:	1806d07a 	srli	r3,r3,1
40093a44:	280ad07a 	srli	r5,r5,1
40093a48:	183ffa1e 	bne	r3,zero,40093a34 <__alt_mem_epcs+0xfff52a34>
40093a4c:	3000011e 	bne	r6,zero,40093a54 <udivmodsi4+0x54>
40093a50:	f800283a 	ret
40093a54:	2005883a 	mov	r2,r4
40093a58:	f800283a 	ret
40093a5c:	0005883a 	mov	r2,zero
40093a60:	003ffa06 	br	40093a4c <__alt_mem_epcs+0xfff52a4c>
40093a64:	00c00044 	movi	r3,1
40093a68:	003ff106 	br	40093a30 <__alt_mem_epcs+0xfff52a30>

40093a6c <__divsi3>:
40093a6c:	defffe04 	addi	sp,sp,-8
40093a70:	dfc00115 	stw	ra,4(sp)
40093a74:	dc000015 	stw	r16,0(sp)
40093a78:	20000b16 	blt	r4,zero,40093aa8 <__divsi3+0x3c>
40093a7c:	0021883a 	mov	r16,zero
40093a80:	28000c16 	blt	r5,zero,40093ab4 <__divsi3+0x48>
40093a84:	000d883a 	mov	r6,zero
40093a88:	0093a000 	call	40093a00 <udivmodsi4>
40093a8c:	0407c83a 	sub	r3,zero,r16
40093a90:	1884f03a 	xor	r2,r3,r2
40093a94:	1405883a 	add	r2,r2,r16
40093a98:	dfc00117 	ldw	ra,4(sp)
40093a9c:	dc000017 	ldw	r16,0(sp)
40093aa0:	dec00204 	addi	sp,sp,8
40093aa4:	f800283a 	ret
40093aa8:	0109c83a 	sub	r4,zero,r4
40093aac:	04000044 	movi	r16,1
40093ab0:	283ff40e 	bge	r5,zero,40093a84 <__alt_mem_epcs+0xfff52a84>
40093ab4:	014bc83a 	sub	r5,zero,r5
40093ab8:	8400005c 	xori	r16,r16,1
40093abc:	003ff106 	br	40093a84 <__alt_mem_epcs+0xfff52a84>

40093ac0 <__modsi3>:
40093ac0:	defffd04 	addi	sp,sp,-12
40093ac4:	dfc00215 	stw	ra,8(sp)
40093ac8:	dc400115 	stw	r17,4(sp)
40093acc:	dc000015 	stw	r16,0(sp)
40093ad0:	20000c16 	blt	r4,zero,40093b04 <__modsi3+0x44>
40093ad4:	0023883a 	mov	r17,zero
40093ad8:	0021883a 	mov	r16,zero
40093adc:	28000d16 	blt	r5,zero,40093b14 <__modsi3+0x54>
40093ae0:	01800044 	movi	r6,1
40093ae4:	0093a000 	call	40093a00 <udivmodsi4>
40093ae8:	1404f03a 	xor	r2,r2,r16
40093aec:	8885883a 	add	r2,r17,r2
40093af0:	dfc00217 	ldw	ra,8(sp)
40093af4:	dc400117 	ldw	r17,4(sp)
40093af8:	dc000017 	ldw	r16,0(sp)
40093afc:	dec00304 	addi	sp,sp,12
40093b00:	f800283a 	ret
40093b04:	0109c83a 	sub	r4,zero,r4
40093b08:	04400044 	movi	r17,1
40093b0c:	043fffc4 	movi	r16,-1
40093b10:	283ff30e 	bge	r5,zero,40093ae0 <__alt_mem_epcs+0xfff52ae0>
40093b14:	014bc83a 	sub	r5,zero,r5
40093b18:	003ff106 	br	40093ae0 <__alt_mem_epcs+0xfff52ae0>

40093b1c <__udivsi3>:
40093b1c:	000d883a 	mov	r6,zero
40093b20:	0093a001 	jmpi	40093a00 <udivmodsi4>

40093b24 <__umodsi3>:
40093b24:	01800044 	movi	r6,1
40093b28:	0093a001 	jmpi	40093a00 <udivmodsi4>

40093b2c <__adddf3>:
40093b2c:	02000434 	movhi	r8,16
40093b30:	423fffc4 	addi	r8,r8,-1
40093b34:	defffb04 	addi	sp,sp,-20
40093b38:	2a12703a 	and	r9,r5,r8
40093b3c:	2806d7fa 	srli	r3,r5,31
40093b40:	3a10703a 	and	r8,r7,r8
40093b44:	3804d53a 	srli	r2,r7,20
40093b48:	3014d77a 	srli	r10,r6,29
40093b4c:	dc000015 	stw	r16,0(sp)
40093b50:	481290fa 	slli	r9,r9,3
40093b54:	2820d53a 	srli	r16,r5,20
40093b58:	401090fa 	slli	r8,r8,3
40093b5c:	200ad77a 	srli	r5,r4,29
40093b60:	380ed7fa 	srli	r7,r7,31
40093b64:	dc800215 	stw	r18,8(sp)
40093b68:	dc400115 	stw	r17,4(sp)
40093b6c:	dfc00415 	stw	ra,16(sp)
40093b70:	dcc00315 	stw	r19,12(sp)
40093b74:	1c803fcc 	andi	r18,r3,255
40093b78:	8401ffcc 	andi	r16,r16,2047
40093b7c:	494ab03a 	or	r5,r9,r5
40093b80:	202290fa 	slli	r17,r4,3
40093b84:	1081ffcc 	andi	r2,r2,2047
40093b88:	4290b03a 	or	r8,r8,r10
40093b8c:	300c90fa 	slli	r6,r6,3
40093b90:	91c07026 	beq	r18,r7,40093d54 <__adddf3+0x228>
40093b94:	8087c83a 	sub	r3,r16,r2
40093b98:	00c0b30e 	bge	zero,r3,40093e68 <__adddf3+0x33c>
40093b9c:	10002a1e 	bne	r2,zero,40093c48 <__adddf3+0x11c>
40093ba0:	4184b03a 	or	r2,r8,r6
40093ba4:	1000991e 	bne	r2,zero,40093e0c <__adddf3+0x2e0>
40093ba8:	888001cc 	andi	r2,r17,7
40093bac:	10005b26 	beq	r2,zero,40093d1c <__adddf3+0x1f0>
40093bb0:	88c003cc 	andi	r3,r17,15
40093bb4:	00800104 	movi	r2,4
40093bb8:	18805826 	beq	r3,r2,40093d1c <__adddf3+0x1f0>
40093bbc:	89800104 	addi	r6,r17,4
40093bc0:	3463803a 	cmpltu	r17,r6,r17
40093bc4:	2c4b883a 	add	r5,r5,r17
40093bc8:	2880202c 	andhi	r2,r5,128
40093bcc:	9007883a 	mov	r3,r18
40093bd0:	3023883a 	mov	r17,r6
40093bd4:	10005426 	beq	r2,zero,40093d28 <__adddf3+0x1fc>
40093bd8:	84000044 	addi	r16,r16,1
40093bdc:	0081ffc4 	movi	r2,2047
40093be0:	8080c126 	beq	r16,r2,40093ee8 <__adddf3+0x3bc>
40093be4:	013fe034 	movhi	r4,65408
40093be8:	213fffc4 	addi	r4,r4,-1
40093bec:	290a703a 	and	r5,r5,r4
40093bf0:	2804977a 	slli	r2,r5,29
40093bf4:	280a927a 	slli	r5,r5,9
40093bf8:	8822d0fa 	srli	r17,r17,3
40093bfc:	8401ffcc 	andi	r16,r16,2047
40093c00:	2808d33a 	srli	r4,r5,12
40093c04:	1444b03a 	or	r2,r2,r17
40093c08:	8401ffcc 	andi	r16,r16,2047
40093c0c:	800a953a 	slli	r5,r16,20
40093c10:	18c03fcc 	andi	r3,r3,255
40093c14:	04000434 	movhi	r16,16
40093c18:	180697fa 	slli	r3,r3,31
40093c1c:	843fffc4 	addi	r16,r16,-1
40093c20:	2420703a 	and	r16,r4,r16
40093c24:	8160b03a 	or	r16,r16,r5
40093c28:	80c6b03a 	or	r3,r16,r3
40093c2c:	dfc00417 	ldw	ra,16(sp)
40093c30:	dcc00317 	ldw	r19,12(sp)
40093c34:	dc800217 	ldw	r18,8(sp)
40093c38:	dc400117 	ldw	r17,4(sp)
40093c3c:	dc000017 	ldw	r16,0(sp)
40093c40:	dec00504 	addi	sp,sp,20
40093c44:	f800283a 	ret
40093c48:	0081ffc4 	movi	r2,2047
40093c4c:	80bfd626 	beq	r16,r2,40093ba8 <__alt_mem_epcs+0xfff52ba8>
40093c50:	42002034 	orhi	r8,r8,128
40093c54:	00800e04 	movi	r2,56
40093c58:	10c0a616 	blt	r2,r3,40093ef4 <__adddf3+0x3c8>
40093c5c:	008007c4 	movi	r2,31
40093c60:	10c0c916 	blt	r2,r3,40093f88 <__adddf3+0x45c>
40093c64:	00800804 	movi	r2,32
40093c68:	10c5c83a 	sub	r2,r2,r3
40093c6c:	408e983a 	sll	r7,r8,r2
40093c70:	30c8d83a 	srl	r4,r6,r3
40093c74:	3084983a 	sll	r2,r6,r2
40093c78:	40c6d83a 	srl	r3,r8,r3
40093c7c:	390cb03a 	or	r6,r7,r4
40093c80:	1004c03a 	cmpne	r2,r2,zero
40093c84:	308cb03a 	or	r6,r6,r2
40093c88:	898dc83a 	sub	r6,r17,r6
40093c8c:	89a3803a 	cmpltu	r17,r17,r6
40093c90:	28cbc83a 	sub	r5,r5,r3
40093c94:	2c4bc83a 	sub	r5,r5,r17
40093c98:	3023883a 	mov	r17,r6
40093c9c:	2880202c 	andhi	r2,r5,128
40093ca0:	10006d26 	beq	r2,zero,40093e58 <__adddf3+0x32c>
40093ca4:	04c02034 	movhi	r19,128
40093ca8:	9cffffc4 	addi	r19,r19,-1
40093cac:	2ce6703a 	and	r19,r5,r19
40093cb0:	98007e26 	beq	r19,zero,40093eac <__adddf3+0x380>
40093cb4:	9809883a 	mov	r4,r19
40093cb8:	0089be00 	call	40089be0 <__clzsi2>
40093cbc:	10fffe04 	addi	r3,r2,-8
40093cc0:	010007c4 	movi	r4,31
40093cc4:	20c07f16 	blt	r4,r3,40093ec4 <__adddf3+0x398>
40093cc8:	01400a04 	movi	r5,40
40093ccc:	2885c83a 	sub	r2,r5,r2
40093cd0:	888ad83a 	srl	r5,r17,r2
40093cd4:	98e6983a 	sll	r19,r19,r3
40093cd8:	88e2983a 	sll	r17,r17,r3
40093cdc:	2ce6b03a 	or	r19,r5,r19
40093ce0:	1c007c16 	blt	r3,r16,40093ed4 <__adddf3+0x3a8>
40093ce4:	1c21c83a 	sub	r16,r3,r16
40093ce8:	81400044 	addi	r5,r16,1
40093cec:	00c007c4 	movi	r3,31
40093cf0:	19409816 	blt	r3,r5,40093f54 <__adddf3+0x428>
40093cf4:	1c21c83a 	sub	r16,r3,r16
40093cf8:	8c08983a 	sll	r4,r17,r16
40093cfc:	8946d83a 	srl	r3,r17,r5
40093d00:	9c20983a 	sll	r16,r19,r16
40093d04:	2008c03a 	cmpne	r4,r4,zero
40093d08:	994ad83a 	srl	r5,r19,r5
40093d0c:	1c06b03a 	or	r3,r3,r16
40093d10:	1922b03a 	or	r17,r3,r4
40093d14:	0021883a 	mov	r16,zero
40093d18:	003fa306 	br	40093ba8 <__alt_mem_epcs+0xfff52ba8>
40093d1c:	2880202c 	andhi	r2,r5,128
40093d20:	9007883a 	mov	r3,r18
40093d24:	103fac1e 	bne	r2,zero,40093bd8 <__alt_mem_epcs+0xfff52bd8>
40093d28:	2804977a 	slli	r2,r5,29
40093d2c:	8822d0fa 	srli	r17,r17,3
40093d30:	0101ffc4 	movi	r4,2047
40093d34:	280ad0fa 	srli	r5,r5,3
40093d38:	1444b03a 	or	r2,r2,r17
40093d3c:	81002c26 	beq	r16,r4,40093df0 <__adddf3+0x2c4>
40093d40:	8120703a 	and	r16,r16,r4
40093d44:	01000434 	movhi	r4,16
40093d48:	213fffc4 	addi	r4,r4,-1
40093d4c:	2908703a 	and	r4,r5,r4
40093d50:	003fad06 	br	40093c08 <__alt_mem_epcs+0xfff52c08>
40093d54:	8089c83a 	sub	r4,r16,r2
40093d58:	01006a0e 	bge	zero,r4,40093f04 <__adddf3+0x3d8>
40093d5c:	10003326 	beq	r2,zero,40093e2c <__adddf3+0x300>
40093d60:	0081ffc4 	movi	r2,2047
40093d64:	80bf9026 	beq	r16,r2,40093ba8 <__alt_mem_epcs+0xfff52ba8>
40093d68:	42002034 	orhi	r8,r8,128
40093d6c:	00800e04 	movi	r2,56
40093d70:	1100b116 	blt	r2,r4,40094038 <__adddf3+0x50c>
40093d74:	008007c4 	movi	r2,31
40093d78:	1100e216 	blt	r2,r4,40094104 <__adddf3+0x5d8>
40093d7c:	00800804 	movi	r2,32
40093d80:	1105c83a 	sub	r2,r2,r4
40093d84:	4092983a 	sll	r9,r8,r2
40093d88:	310ed83a 	srl	r7,r6,r4
40093d8c:	3084983a 	sll	r2,r6,r2
40093d90:	4110d83a 	srl	r8,r8,r4
40093d94:	49ccb03a 	or	r6,r9,r7
40093d98:	1004c03a 	cmpne	r2,r2,zero
40093d9c:	308cb03a 	or	r6,r6,r2
40093da0:	344d883a 	add	r6,r6,r17
40093da4:	3463803a 	cmpltu	r17,r6,r17
40093da8:	414b883a 	add	r5,r8,r5
40093dac:	2c4b883a 	add	r5,r5,r17
40093db0:	3023883a 	mov	r17,r6
40093db4:	2880202c 	andhi	r2,r5,128
40093db8:	10002726 	beq	r2,zero,40093e58 <__adddf3+0x32c>
40093dbc:	84000044 	addi	r16,r16,1
40093dc0:	0081ffc4 	movi	r2,2047
40093dc4:	8080ae26 	beq	r16,r2,40094080 <__adddf3+0x554>
40093dc8:	00bfe034 	movhi	r2,65408
40093dcc:	10bfffc4 	addi	r2,r2,-1
40093dd0:	288a703a 	and	r5,r5,r2
40093dd4:	880cd07a 	srli	r6,r17,1
40093dd8:	280897fa 	slli	r4,r5,31
40093ddc:	88c0004c 	andi	r3,r17,1
40093de0:	30e2b03a 	or	r17,r6,r3
40093de4:	280ad07a 	srli	r5,r5,1
40093de8:	8922b03a 	or	r17,r17,r4
40093dec:	003f6e06 	br	40093ba8 <__alt_mem_epcs+0xfff52ba8>
40093df0:	1148b03a 	or	r4,r2,r5
40093df4:	20003c26 	beq	r4,zero,40093ee8 <__adddf3+0x3bc>
40093df8:	29000234 	orhi	r4,r5,8
40093dfc:	01400434 	movhi	r5,16
40093e00:	297fffc4 	addi	r5,r5,-1
40093e04:	2148703a 	and	r4,r4,r5
40093e08:	003f7f06 	br	40093c08 <__alt_mem_epcs+0xfff52c08>
40093e0c:	18ffffc4 	addi	r3,r3,-1
40093e10:	18004d1e 	bne	r3,zero,40093f48 <__adddf3+0x41c>
40093e14:	898dc83a 	sub	r6,r17,r6
40093e18:	89a3803a 	cmpltu	r17,r17,r6
40093e1c:	2a0bc83a 	sub	r5,r5,r8
40093e20:	2c4bc83a 	sub	r5,r5,r17
40093e24:	3023883a 	mov	r17,r6
40093e28:	003f9c06 	br	40093c9c <__alt_mem_epcs+0xfff52c9c>
40093e2c:	4184b03a 	or	r2,r8,r6
40093e30:	103f5d26 	beq	r2,zero,40093ba8 <__alt_mem_epcs+0xfff52ba8>
40093e34:	213fffc4 	addi	r4,r4,-1
40093e38:	203fd926 	beq	r4,zero,40093da0 <__alt_mem_epcs+0xfff52da0>
40093e3c:	0081ffc4 	movi	r2,2047
40093e40:	80bfca1e 	bne	r16,r2,40093d6c <__alt_mem_epcs+0xfff52d6c>
40093e44:	003f5806 	br	40093ba8 <__alt_mem_epcs+0xfff52ba8>
40093e48:	10c8b03a 	or	r4,r2,r3
40093e4c:	20008b26 	beq	r4,zero,4009407c <__adddf3+0x550>
40093e50:	100b883a 	mov	r5,r2
40093e54:	1823883a 	mov	r17,r3
40093e58:	888001cc 	andi	r2,r17,7
40093e5c:	103f541e 	bne	r2,zero,40093bb0 <__alt_mem_epcs+0xfff52bb0>
40093e60:	9007883a 	mov	r3,r18
40093e64:	003fb006 	br	40093d28 <__alt_mem_epcs+0xfff52d28>
40093e68:	1800531e 	bne	r3,zero,40093fb8 <__adddf3+0x48c>
40093e6c:	80800044 	addi	r2,r16,1
40093e70:	1081ffcc 	andi	r2,r2,2047
40093e74:	00c00044 	movi	r3,1
40093e78:	1880990e 	bge	r3,r2,400940e0 <__adddf3+0x5b4>
40093e7c:	8985c83a 	sub	r2,r17,r6
40093e80:	8887803a 	cmpltu	r3,r17,r2
40093e84:	2a27c83a 	sub	r19,r5,r8
40093e88:	98e7c83a 	sub	r19,r19,r3
40093e8c:	98c0202c 	andhi	r3,r19,128
40093e90:	18006226 	beq	r3,zero,4009401c <__adddf3+0x4f0>
40093e94:	3463c83a 	sub	r17,r6,r17
40093e98:	4151c83a 	sub	r8,r8,r5
40093e9c:	344d803a 	cmpltu	r6,r6,r17
40093ea0:	41a7c83a 	sub	r19,r8,r6
40093ea4:	3825883a 	mov	r18,r7
40093ea8:	983f821e 	bne	r19,zero,40093cb4 <__alt_mem_epcs+0xfff52cb4>
40093eac:	8809883a 	mov	r4,r17
40093eb0:	0089be00 	call	40089be0 <__clzsi2>
40093eb4:	10800804 	addi	r2,r2,32
40093eb8:	10fffe04 	addi	r3,r2,-8
40093ebc:	010007c4 	movi	r4,31
40093ec0:	20ff810e 	bge	r4,r3,40093cc8 <__alt_mem_epcs+0xfff52cc8>
40093ec4:	14fff604 	addi	r19,r2,-40
40093ec8:	8ce6983a 	sll	r19,r17,r19
40093ecc:	0023883a 	mov	r17,zero
40093ed0:	1c3f840e 	bge	r3,r16,40093ce4 <__alt_mem_epcs+0xfff52ce4>
40093ed4:	017fe034 	movhi	r5,65408
40093ed8:	297fffc4 	addi	r5,r5,-1
40093edc:	80e1c83a 	sub	r16,r16,r3
40093ee0:	994a703a 	and	r5,r19,r5
40093ee4:	003f3006 	br	40093ba8 <__alt_mem_epcs+0xfff52ba8>
40093ee8:	0009883a 	mov	r4,zero
40093eec:	0005883a 	mov	r2,zero
40093ef0:	003f4506 	br	40093c08 <__alt_mem_epcs+0xfff52c08>
40093ef4:	418cb03a 	or	r6,r8,r6
40093ef8:	300cc03a 	cmpne	r6,r6,zero
40093efc:	0007883a 	mov	r3,zero
40093f00:	003f6106 	br	40093c88 <__alt_mem_epcs+0xfff52c88>
40093f04:	2000921e 	bne	r4,zero,40094150 <__adddf3+0x624>
40093f08:	80800044 	addi	r2,r16,1
40093f0c:	11c1ffcc 	andi	r7,r2,2047
40093f10:	01000044 	movi	r4,1
40093f14:	21c0610e 	bge	r4,r7,4009409c <__adddf3+0x570>
40093f18:	0101ffc4 	movi	r4,2047
40093f1c:	1100a326 	beq	r2,r4,400941ac <__adddf3+0x680>
40093f20:	344d883a 	add	r6,r6,r17
40093f24:	3463803a 	cmpltu	r17,r6,r17
40093f28:	414b883a 	add	r5,r8,r5
40093f2c:	2c4b883a 	add	r5,r5,r17
40093f30:	282297fa 	slli	r17,r5,31
40093f34:	300cd07a 	srli	r6,r6,1
40093f38:	280ad07a 	srli	r5,r5,1
40093f3c:	1021883a 	mov	r16,r2
40093f40:	89a2b03a 	or	r17,r17,r6
40093f44:	003f1806 	br	40093ba8 <__alt_mem_epcs+0xfff52ba8>
40093f48:	0081ffc4 	movi	r2,2047
40093f4c:	80bf411e 	bne	r16,r2,40093c54 <__alt_mem_epcs+0xfff52c54>
40093f50:	003f1506 	br	40093ba8 <__alt_mem_epcs+0xfff52ba8>
40093f54:	80bff844 	addi	r2,r16,-31
40093f58:	00c00804 	movi	r3,32
40093f5c:	9884d83a 	srl	r2,r19,r2
40093f60:	28c04a26 	beq	r5,r3,4009408c <__adddf3+0x560>
40093f64:	00c00fc4 	movi	r3,63
40093f68:	1c21c83a 	sub	r16,r3,r16
40093f6c:	9c26983a 	sll	r19,r19,r16
40093f70:	9c62b03a 	or	r17,r19,r17
40093f74:	8822c03a 	cmpne	r17,r17,zero
40093f78:	88a2b03a 	or	r17,r17,r2
40093f7c:	000b883a 	mov	r5,zero
40093f80:	0021883a 	mov	r16,zero
40093f84:	003fb406 	br	40093e58 <__alt_mem_epcs+0xfff52e58>
40093f88:	18bff804 	addi	r2,r3,-32
40093f8c:	01000804 	movi	r4,32
40093f90:	4084d83a 	srl	r2,r8,r2
40093f94:	19003f26 	beq	r3,r4,40094094 <__adddf3+0x568>
40093f98:	01001004 	movi	r4,64
40093f9c:	20c7c83a 	sub	r3,r4,r3
40093fa0:	40d0983a 	sll	r8,r8,r3
40093fa4:	418cb03a 	or	r6,r8,r6
40093fa8:	300cc03a 	cmpne	r6,r6,zero
40093fac:	308cb03a 	or	r6,r6,r2
40093fb0:	0007883a 	mov	r3,zero
40093fb4:	003f3406 	br	40093c88 <__alt_mem_epcs+0xfff52c88>
40093fb8:	80002326 	beq	r16,zero,40094048 <__adddf3+0x51c>
40093fbc:	0101ffc4 	movi	r4,2047
40093fc0:	11005e26 	beq	r2,r4,4009413c <__adddf3+0x610>
40093fc4:	00c7c83a 	sub	r3,zero,r3
40093fc8:	29402034 	orhi	r5,r5,128
40093fcc:	01000e04 	movi	r4,56
40093fd0:	20c07216 	blt	r4,r3,4009419c <__adddf3+0x670>
40093fd4:	010007c4 	movi	r4,31
40093fd8:	20c0ce16 	blt	r4,r3,40094314 <__adddf3+0x7e8>
40093fdc:	01000804 	movi	r4,32
40093fe0:	20c9c83a 	sub	r4,r4,r3
40093fe4:	2914983a 	sll	r10,r5,r4
40093fe8:	88d2d83a 	srl	r9,r17,r3
40093fec:	8908983a 	sll	r4,r17,r4
40093ff0:	28c6d83a 	srl	r3,r5,r3
40093ff4:	5262b03a 	or	r17,r10,r9
40093ff8:	2008c03a 	cmpne	r4,r4,zero
40093ffc:	8922b03a 	or	r17,r17,r4
40094000:	3463c83a 	sub	r17,r6,r17
40094004:	40c7c83a 	sub	r3,r8,r3
40094008:	344d803a 	cmpltu	r6,r6,r17
4009400c:	198bc83a 	sub	r5,r3,r6
40094010:	1021883a 	mov	r16,r2
40094014:	3825883a 	mov	r18,r7
40094018:	003f2006 	br	40093c9c <__alt_mem_epcs+0xfff52c9c>
4009401c:	9886b03a 	or	r3,r19,r2
40094020:	1800141e 	bne	r3,zero,40094074 <__adddf3+0x548>
40094024:	0007883a 	mov	r3,zero
40094028:	000b883a 	mov	r5,zero
4009402c:	0023883a 	mov	r17,zero
40094030:	0021883a 	mov	r16,zero
40094034:	003f3c06 	br	40093d28 <__alt_mem_epcs+0xfff52d28>
40094038:	418cb03a 	or	r6,r8,r6
4009403c:	300cc03a 	cmpne	r6,r6,zero
40094040:	0011883a 	mov	r8,zero
40094044:	003f5606 	br	40093da0 <__alt_mem_epcs+0xfff52da0>
40094048:	2c48b03a 	or	r4,r5,r17
4009404c:	20003b26 	beq	r4,zero,4009413c <__adddf3+0x610>
40094050:	00c6303a 	nor	r3,zero,r3
40094054:	1800371e 	bne	r3,zero,40094134 <__adddf3+0x608>
40094058:	3463c83a 	sub	r17,r6,r17
4009405c:	414bc83a 	sub	r5,r8,r5
40094060:	344d803a 	cmpltu	r6,r6,r17
40094064:	298bc83a 	sub	r5,r5,r6
40094068:	1021883a 	mov	r16,r2
4009406c:	3825883a 	mov	r18,r7
40094070:	003f0a06 	br	40093c9c <__alt_mem_epcs+0xfff52c9c>
40094074:	1023883a 	mov	r17,r2
40094078:	003f0d06 	br	40093cb0 <__alt_mem_epcs+0xfff52cb0>
4009407c:	0007883a 	mov	r3,zero
40094080:	000b883a 	mov	r5,zero
40094084:	0023883a 	mov	r17,zero
40094088:	003f2706 	br	40093d28 <__alt_mem_epcs+0xfff52d28>
4009408c:	0027883a 	mov	r19,zero
40094090:	003fb706 	br	40093f70 <__alt_mem_epcs+0xfff52f70>
40094094:	0011883a 	mov	r8,zero
40094098:	003fc206 	br	40093fa4 <__alt_mem_epcs+0xfff52fa4>
4009409c:	2c44b03a 	or	r2,r5,r17
400940a0:	8000871e 	bne	r16,zero,400942c0 <__adddf3+0x794>
400940a4:	1000b126 	beq	r2,zero,4009436c <__adddf3+0x840>
400940a8:	4184b03a 	or	r2,r8,r6
400940ac:	103ebe26 	beq	r2,zero,40093ba8 <__alt_mem_epcs+0xfff52ba8>
400940b0:	3445883a 	add	r2,r6,r17
400940b4:	1463803a 	cmpltu	r17,r2,r17
400940b8:	414b883a 	add	r5,r8,r5
400940bc:	2c4b883a 	add	r5,r5,r17
400940c0:	28c0202c 	andhi	r3,r5,128
400940c4:	1023883a 	mov	r17,r2
400940c8:	183f6326 	beq	r3,zero,40093e58 <__alt_mem_epcs+0xfff52e58>
400940cc:	00bfe034 	movhi	r2,65408
400940d0:	10bfffc4 	addi	r2,r2,-1
400940d4:	2021883a 	mov	r16,r4
400940d8:	288a703a 	and	r5,r5,r2
400940dc:	003eb206 	br	40093ba8 <__alt_mem_epcs+0xfff52ba8>
400940e0:	2c44b03a 	or	r2,r5,r17
400940e4:	8000251e 	bne	r16,zero,4009417c <__adddf3+0x650>
400940e8:	10004b1e 	bne	r2,zero,40094218 <__adddf3+0x6ec>
400940ec:	4184b03a 	or	r2,r8,r6
400940f0:	103fe226 	beq	r2,zero,4009407c <__alt_mem_epcs+0xfff5307c>
400940f4:	400b883a 	mov	r5,r8
400940f8:	3023883a 	mov	r17,r6
400940fc:	3825883a 	mov	r18,r7
40094100:	003ea906 	br	40093ba8 <__alt_mem_epcs+0xfff52ba8>
40094104:	20bff804 	addi	r2,r4,-32
40094108:	01c00804 	movi	r7,32
4009410c:	4084d83a 	srl	r2,r8,r2
40094110:	21c07e26 	beq	r4,r7,4009430c <__adddf3+0x7e0>
40094114:	01c01004 	movi	r7,64
40094118:	3909c83a 	sub	r4,r7,r4
4009411c:	4110983a 	sll	r8,r8,r4
40094120:	418cb03a 	or	r6,r8,r6
40094124:	300cc03a 	cmpne	r6,r6,zero
40094128:	308cb03a 	or	r6,r6,r2
4009412c:	0011883a 	mov	r8,zero
40094130:	003f1b06 	br	40093da0 <__alt_mem_epcs+0xfff52da0>
40094134:	0101ffc4 	movi	r4,2047
40094138:	113fa41e 	bne	r2,r4,40093fcc <__alt_mem_epcs+0xfff52fcc>
4009413c:	400b883a 	mov	r5,r8
40094140:	3023883a 	mov	r17,r6
40094144:	1021883a 	mov	r16,r2
40094148:	3825883a 	mov	r18,r7
4009414c:	003e9606 	br	40093ba8 <__alt_mem_epcs+0xfff52ba8>
40094150:	80001a1e 	bne	r16,zero,400941bc <__adddf3+0x690>
40094154:	2c4eb03a 	or	r7,r5,r17
40094158:	38005526 	beq	r7,zero,400942b0 <__adddf3+0x784>
4009415c:	0108303a 	nor	r4,zero,r4
40094160:	2000511e 	bne	r4,zero,400942a8 <__adddf3+0x77c>
40094164:	89a3883a 	add	r17,r17,r6
40094168:	414b883a 	add	r5,r8,r5
4009416c:	898d803a 	cmpltu	r6,r17,r6
40094170:	298b883a 	add	r5,r5,r6
40094174:	1021883a 	mov	r16,r2
40094178:	003f0e06 	br	40093db4 <__alt_mem_epcs+0xfff52db4>
4009417c:	1000341e 	bne	r2,zero,40094250 <__adddf3+0x724>
40094180:	4184b03a 	or	r2,r8,r6
40094184:	10006f26 	beq	r2,zero,40094344 <__adddf3+0x818>
40094188:	400b883a 	mov	r5,r8
4009418c:	3023883a 	mov	r17,r6
40094190:	3825883a 	mov	r18,r7
40094194:	0401ffc4 	movi	r16,2047
40094198:	003e8306 	br	40093ba8 <__alt_mem_epcs+0xfff52ba8>
4009419c:	2c62b03a 	or	r17,r5,r17
400941a0:	8822c03a 	cmpne	r17,r17,zero
400941a4:	0007883a 	mov	r3,zero
400941a8:	003f9506 	br	40094000 <__alt_mem_epcs+0xfff53000>
400941ac:	1021883a 	mov	r16,r2
400941b0:	000b883a 	mov	r5,zero
400941b4:	0023883a 	mov	r17,zero
400941b8:	003edb06 	br	40093d28 <__alt_mem_epcs+0xfff52d28>
400941bc:	01c1ffc4 	movi	r7,2047
400941c0:	11c03b26 	beq	r2,r7,400942b0 <__adddf3+0x784>
400941c4:	0109c83a 	sub	r4,zero,r4
400941c8:	29402034 	orhi	r5,r5,128
400941cc:	01c00e04 	movi	r7,56
400941d0:	39006216 	blt	r7,r4,4009435c <__adddf3+0x830>
400941d4:	01c007c4 	movi	r7,31
400941d8:	39006b16 	blt	r7,r4,40094388 <__adddf3+0x85c>
400941dc:	01c00804 	movi	r7,32
400941e0:	390fc83a 	sub	r7,r7,r4
400941e4:	29d4983a 	sll	r10,r5,r7
400941e8:	8912d83a 	srl	r9,r17,r4
400941ec:	89ce983a 	sll	r7,r17,r7
400941f0:	2908d83a 	srl	r4,r5,r4
400941f4:	5262b03a 	or	r17,r10,r9
400941f8:	380ac03a 	cmpne	r5,r7,zero
400941fc:	8962b03a 	or	r17,r17,r5
40094200:	89a3883a 	add	r17,r17,r6
40094204:	2211883a 	add	r8,r4,r8
40094208:	898d803a 	cmpltu	r6,r17,r6
4009420c:	418b883a 	add	r5,r8,r6
40094210:	1021883a 	mov	r16,r2
40094214:	003ee706 	br	40093db4 <__alt_mem_epcs+0xfff52db4>
40094218:	4184b03a 	or	r2,r8,r6
4009421c:	103e6226 	beq	r2,zero,40093ba8 <__alt_mem_epcs+0xfff52ba8>
40094220:	8987c83a 	sub	r3,r17,r6
40094224:	88c9803a 	cmpltu	r4,r17,r3
40094228:	2a05c83a 	sub	r2,r5,r8
4009422c:	1105c83a 	sub	r2,r2,r4
40094230:	1100202c 	andhi	r4,r2,128
40094234:	203f0426 	beq	r4,zero,40093e48 <__alt_mem_epcs+0xfff52e48>
40094238:	3463c83a 	sub	r17,r6,r17
4009423c:	414bc83a 	sub	r5,r8,r5
40094240:	344d803a 	cmpltu	r6,r6,r17
40094244:	298bc83a 	sub	r5,r5,r6
40094248:	3825883a 	mov	r18,r7
4009424c:	003e5606 	br	40093ba8 <__alt_mem_epcs+0xfff52ba8>
40094250:	4184b03a 	or	r2,r8,r6
40094254:	10002b26 	beq	r2,zero,40094304 <__adddf3+0x7d8>
40094258:	2804d0fa 	srli	r2,r5,3
4009425c:	8822d0fa 	srli	r17,r17,3
40094260:	280a977a 	slli	r5,r5,29
40094264:	10c0022c 	andhi	r3,r2,8
40094268:	2c62b03a 	or	r17,r5,r17
4009426c:	18000826 	beq	r3,zero,40094290 <__adddf3+0x764>
40094270:	4008d0fa 	srli	r4,r8,3
40094274:	20c0022c 	andhi	r3,r4,8
40094278:	1800051e 	bne	r3,zero,40094290 <__adddf3+0x764>
4009427c:	300cd0fa 	srli	r6,r6,3
40094280:	4010977a 	slli	r8,r8,29
40094284:	2005883a 	mov	r2,r4
40094288:	3825883a 	mov	r18,r7
4009428c:	41a2b03a 	or	r17,r8,r6
40094290:	880ad77a 	srli	r5,r17,29
40094294:	100490fa 	slli	r2,r2,3
40094298:	882290fa 	slli	r17,r17,3
4009429c:	0401ffc4 	movi	r16,2047
400942a0:	288ab03a 	or	r5,r5,r2
400942a4:	003e4006 	br	40093ba8 <__alt_mem_epcs+0xfff52ba8>
400942a8:	01c1ffc4 	movi	r7,2047
400942ac:	11ffc71e 	bne	r2,r7,400941cc <__alt_mem_epcs+0xfff531cc>
400942b0:	400b883a 	mov	r5,r8
400942b4:	3023883a 	mov	r17,r6
400942b8:	1021883a 	mov	r16,r2
400942bc:	003e3a06 	br	40093ba8 <__alt_mem_epcs+0xfff52ba8>
400942c0:	10002d26 	beq	r2,zero,40094378 <__adddf3+0x84c>
400942c4:	4184b03a 	or	r2,r8,r6
400942c8:	10000e26 	beq	r2,zero,40094304 <__adddf3+0x7d8>
400942cc:	2804d0fa 	srli	r2,r5,3
400942d0:	8822d0fa 	srli	r17,r17,3
400942d4:	280a977a 	slli	r5,r5,29
400942d8:	10c0022c 	andhi	r3,r2,8
400942dc:	2c62b03a 	or	r17,r5,r17
400942e0:	183feb26 	beq	r3,zero,40094290 <__alt_mem_epcs+0xfff53290>
400942e4:	4008d0fa 	srli	r4,r8,3
400942e8:	20c0022c 	andhi	r3,r4,8
400942ec:	183fe81e 	bne	r3,zero,40094290 <__alt_mem_epcs+0xfff53290>
400942f0:	300cd0fa 	srli	r6,r6,3
400942f4:	4010977a 	slli	r8,r8,29
400942f8:	2005883a 	mov	r2,r4
400942fc:	41a2b03a 	or	r17,r8,r6
40094300:	003fe306 	br	40094290 <__alt_mem_epcs+0xfff53290>
40094304:	0401ffc4 	movi	r16,2047
40094308:	003e2706 	br	40093ba8 <__alt_mem_epcs+0xfff52ba8>
4009430c:	0011883a 	mov	r8,zero
40094310:	003f8306 	br	40094120 <__alt_mem_epcs+0xfff53120>
40094314:	193ff804 	addi	r4,r3,-32
40094318:	02400804 	movi	r9,32
4009431c:	2908d83a 	srl	r4,r5,r4
40094320:	1a402526 	beq	r3,r9,400943b8 <__adddf3+0x88c>
40094324:	02401004 	movi	r9,64
40094328:	48c7c83a 	sub	r3,r9,r3
4009432c:	28ca983a 	sll	r5,r5,r3
40094330:	2c62b03a 	or	r17,r5,r17
40094334:	8822c03a 	cmpne	r17,r17,zero
40094338:	8922b03a 	or	r17,r17,r4
4009433c:	0007883a 	mov	r3,zero
40094340:	003f2f06 	br	40094000 <__alt_mem_epcs+0xfff53000>
40094344:	01402034 	movhi	r5,128
40094348:	0007883a 	mov	r3,zero
4009434c:	297fffc4 	addi	r5,r5,-1
40094350:	047ffe04 	movi	r17,-8
40094354:	0401ffc4 	movi	r16,2047
40094358:	003e7306 	br	40093d28 <__alt_mem_epcs+0xfff52d28>
4009435c:	2c62b03a 	or	r17,r5,r17
40094360:	8822c03a 	cmpne	r17,r17,zero
40094364:	0009883a 	mov	r4,zero
40094368:	003fa506 	br	40094200 <__alt_mem_epcs+0xfff53200>
4009436c:	400b883a 	mov	r5,r8
40094370:	3023883a 	mov	r17,r6
40094374:	003e0c06 	br	40093ba8 <__alt_mem_epcs+0xfff52ba8>
40094378:	400b883a 	mov	r5,r8
4009437c:	3023883a 	mov	r17,r6
40094380:	0401ffc4 	movi	r16,2047
40094384:	003e0806 	br	40093ba8 <__alt_mem_epcs+0xfff52ba8>
40094388:	21fff804 	addi	r7,r4,-32
4009438c:	02400804 	movi	r9,32
40094390:	29ced83a 	srl	r7,r5,r7
40094394:	22400a26 	beq	r4,r9,400943c0 <__adddf3+0x894>
40094398:	02401004 	movi	r9,64
4009439c:	4909c83a 	sub	r4,r9,r4
400943a0:	290a983a 	sll	r5,r5,r4
400943a4:	2c62b03a 	or	r17,r5,r17
400943a8:	8822c03a 	cmpne	r17,r17,zero
400943ac:	89e2b03a 	or	r17,r17,r7
400943b0:	0009883a 	mov	r4,zero
400943b4:	003f9206 	br	40094200 <__alt_mem_epcs+0xfff53200>
400943b8:	000b883a 	mov	r5,zero
400943bc:	003fdc06 	br	40094330 <__alt_mem_epcs+0xfff53330>
400943c0:	000b883a 	mov	r5,zero
400943c4:	003ff706 	br	400943a4 <__alt_mem_epcs+0xfff533a4>

400943c8 <__divdf3>:
400943c8:	defff204 	addi	sp,sp,-56
400943cc:	dd000815 	stw	r20,32(sp)
400943d0:	2828d53a 	srli	r20,r5,20
400943d4:	dd800a15 	stw	r22,40(sp)
400943d8:	282cd7fa 	srli	r22,r5,31
400943dc:	dc000415 	stw	r16,16(sp)
400943e0:	04000434 	movhi	r16,16
400943e4:	df000c15 	stw	fp,48(sp)
400943e8:	dcc00715 	stw	r19,28(sp)
400943ec:	dc800615 	stw	r18,24(sp)
400943f0:	dc400515 	stw	r17,20(sp)
400943f4:	843fffc4 	addi	r16,r16,-1
400943f8:	dfc00d15 	stw	ra,52(sp)
400943fc:	ddc00b15 	stw	r23,44(sp)
40094400:	dd400915 	stw	r21,36(sp)
40094404:	a501ffcc 	andi	r20,r20,2047
40094408:	2025883a 	mov	r18,r4
4009440c:	2027883a 	mov	r19,r4
40094410:	2c22703a 	and	r17,r5,r16
40094414:	b7003fcc 	andi	fp,r22,255
40094418:	a0005e26 	beq	r20,zero,40094594 <__divdf3+0x1cc>
4009441c:	0081ffc4 	movi	r2,2047
40094420:	a0803526 	beq	r20,r2,400944f8 <__divdf3+0x130>
40094424:	8c000434 	orhi	r16,r17,16
40094428:	2004d77a 	srli	r2,r4,29
4009442c:	802090fa 	slli	r16,r16,3
40094430:	202690fa 	slli	r19,r4,3
40094434:	a53f0044 	addi	r20,r20,-1023
40094438:	80a2b03a 	or	r17,r16,r2
4009443c:	0025883a 	mov	r18,zero
40094440:	0011883a 	mov	r8,zero
40094444:	380ad53a 	srli	r5,r7,20
40094448:	382ed7fa 	srli	r23,r7,31
4009444c:	04000434 	movhi	r16,16
40094450:	843fffc4 	addi	r16,r16,-1
40094454:	2941ffcc 	andi	r5,r5,2047
40094458:	302b883a 	mov	r21,r6
4009445c:	3c20703a 	and	r16,r7,r16
40094460:	ba403fcc 	andi	r9,r23,255
40094464:	28006726 	beq	r5,zero,40094604 <__divdf3+0x23c>
40094468:	0081ffc4 	movi	r2,2047
4009446c:	28805f26 	beq	r5,r2,400945ec <__divdf3+0x224>
40094470:	84000434 	orhi	r16,r16,16
40094474:	3004d77a 	srli	r2,r6,29
40094478:	802090fa 	slli	r16,r16,3
4009447c:	302a90fa 	slli	r21,r6,3
40094480:	297f0044 	addi	r5,r5,-1023
40094484:	80a0b03a 	or	r16,r16,r2
40094488:	000f883a 	mov	r7,zero
4009448c:	3c86b03a 	or	r3,r7,r18
40094490:	180690ba 	slli	r3,r3,2
40094494:	00900274 	movhi	r2,16393
40094498:	10912e04 	addi	r2,r2,17592
4009449c:	1887883a 	add	r3,r3,r2
400944a0:	18c00017 	ldw	r3,0(r3)
400944a4:	b5c8f03a 	xor	r4,r22,r23
400944a8:	200d883a 	mov	r6,r4
400944ac:	24803fcc 	andi	r18,r4,255
400944b0:	a169c83a 	sub	r20,r20,r5
400944b4:	1800683a 	jmp	r3
400944b8:	40094700 	call	44009470 <__alt_mem_epcs+0x3ec8470>
400944bc:	40094530 	cmpltui	zero,r8,9492
400944c0:	400946c4 	addi	zero,r8,9499
400944c4:	40094514 	ori	zero,r8,9492
400944c8:	400946c4 	addi	zero,r8,9499
400944cc:	40094698 	cmpnei	zero,r8,9498
400944d0:	400946c4 	addi	zero,r8,9499
400944d4:	40094514 	ori	zero,r8,9492
400944d8:	40094530 	cmpltui	zero,r8,9492
400944dc:	40094530 	cmpltui	zero,r8,9492
400944e0:	40094698 	cmpnei	zero,r8,9498
400944e4:	40094514 	ori	zero,r8,9492
400944e8:	40094524 	muli	zero,r8,9492
400944ec:	40094524 	muli	zero,r8,9492
400944f0:	40094524 	muli	zero,r8,9492
400944f4:	400946d4 	ori	zero,r8,9499
400944f8:	8904b03a 	or	r2,r17,r4
400944fc:	1000631e 	bne	r2,zero,4009468c <__divdf3+0x2c4>
40094500:	04800204 	movi	r18,8
40094504:	0023883a 	mov	r17,zero
40094508:	0027883a 	mov	r19,zero
4009450c:	02000084 	movi	r8,2
40094510:	003fcc06 	br	40094444 <__alt_mem_epcs+0xfff53444>
40094514:	8023883a 	mov	r17,r16
40094518:	a827883a 	mov	r19,r21
4009451c:	4839883a 	mov	fp,r9
40094520:	3811883a 	mov	r8,r7
40094524:	00800084 	movi	r2,2
40094528:	40812a1e 	bne	r8,r2,400949d4 <__divdf3+0x60c>
4009452c:	e025883a 	mov	r18,fp
40094530:	9180004c 	andi	r6,r18,1
40094534:	0101ffc4 	movi	r4,2047
40094538:	000b883a 	mov	r5,zero
4009453c:	0027883a 	mov	r19,zero
40094540:	2008953a 	slli	r4,r4,20
40094544:	30c03fcc 	andi	r3,r6,255
40094548:	04000434 	movhi	r16,16
4009454c:	180697fa 	slli	r3,r3,31
40094550:	843fffc4 	addi	r16,r16,-1
40094554:	2c20703a 	and	r16,r5,r16
40094558:	8120b03a 	or	r16,r16,r4
4009455c:	80c6b03a 	or	r3,r16,r3
40094560:	9805883a 	mov	r2,r19
40094564:	dfc00d17 	ldw	ra,52(sp)
40094568:	df000c17 	ldw	fp,48(sp)
4009456c:	ddc00b17 	ldw	r23,44(sp)
40094570:	dd800a17 	ldw	r22,40(sp)
40094574:	dd400917 	ldw	r21,36(sp)
40094578:	dd000817 	ldw	r20,32(sp)
4009457c:	dcc00717 	ldw	r19,28(sp)
40094580:	dc800617 	ldw	r18,24(sp)
40094584:	dc400517 	ldw	r17,20(sp)
40094588:	dc000417 	ldw	r16,16(sp)
4009458c:	dec00e04 	addi	sp,sp,56
40094590:	f800283a 	ret
40094594:	8904b03a 	or	r2,r17,r4
40094598:	10003726 	beq	r2,zero,40094678 <__divdf3+0x2b0>
4009459c:	88011c26 	beq	r17,zero,40094a10 <__divdf3+0x648>
400945a0:	8809883a 	mov	r4,r17
400945a4:	d9800315 	stw	r6,12(sp)
400945a8:	d9c00115 	stw	r7,4(sp)
400945ac:	0089be00 	call	40089be0 <__clzsi2>
400945b0:	d9800317 	ldw	r6,12(sp)
400945b4:	d9c00117 	ldw	r7,4(sp)
400945b8:	1007883a 	mov	r3,r2
400945bc:	01000a04 	movi	r4,40
400945c0:	1cfffe04 	addi	r19,r3,-8
400945c4:	20c9c83a 	sub	r4,r4,r3
400945c8:	8cca983a 	sll	r5,r17,r19
400945cc:	9108d83a 	srl	r4,r18,r4
400945d0:	94e6983a 	sll	r19,r18,r19
400945d4:	2162b03a 	or	r17,r4,r5
400945d8:	053f0344 	movi	r20,-1011
400945dc:	a0e9c83a 	sub	r20,r20,r3
400945e0:	0025883a 	mov	r18,zero
400945e4:	0011883a 	mov	r8,zero
400945e8:	003f9606 	br	40094444 <__alt_mem_epcs+0xfff53444>
400945ec:	8184b03a 	or	r2,r16,r6
400945f0:	10001f1e 	bne	r2,zero,40094670 <__divdf3+0x2a8>
400945f4:	0021883a 	mov	r16,zero
400945f8:	002b883a 	mov	r21,zero
400945fc:	01c00084 	movi	r7,2
40094600:	003fa206 	br	4009448c <__alt_mem_epcs+0xfff5348c>
40094604:	8184b03a 	or	r2,r16,r6
40094608:	10001526 	beq	r2,zero,40094660 <__divdf3+0x298>
4009460c:	80010c26 	beq	r16,zero,40094a40 <__divdf3+0x678>
40094610:	8009883a 	mov	r4,r16
40094614:	d9800315 	stw	r6,12(sp)
40094618:	da000215 	stw	r8,8(sp)
4009461c:	da400015 	stw	r9,0(sp)
40094620:	0089be00 	call	40089be0 <__clzsi2>
40094624:	d9800317 	ldw	r6,12(sp)
40094628:	da000217 	ldw	r8,8(sp)
4009462c:	da400017 	ldw	r9,0(sp)
40094630:	1007883a 	mov	r3,r2
40094634:	01000a04 	movi	r4,40
40094638:	1d7ffe04 	addi	r21,r3,-8
4009463c:	20c9c83a 	sub	r4,r4,r3
40094640:	8560983a 	sll	r16,r16,r21
40094644:	3108d83a 	srl	r4,r6,r4
40094648:	356a983a 	sll	r21,r6,r21
4009464c:	2420b03a 	or	r16,r4,r16
40094650:	017f0344 	movi	r5,-1011
40094654:	28cbc83a 	sub	r5,r5,r3
40094658:	000f883a 	mov	r7,zero
4009465c:	003f8b06 	br	4009448c <__alt_mem_epcs+0xfff5348c>
40094660:	0021883a 	mov	r16,zero
40094664:	002b883a 	mov	r21,zero
40094668:	01c00044 	movi	r7,1
4009466c:	003f8706 	br	4009448c <__alt_mem_epcs+0xfff5348c>
40094670:	01c000c4 	movi	r7,3
40094674:	003f8506 	br	4009448c <__alt_mem_epcs+0xfff5348c>
40094678:	04800104 	movi	r18,4
4009467c:	0023883a 	mov	r17,zero
40094680:	0027883a 	mov	r19,zero
40094684:	02000044 	movi	r8,1
40094688:	003f6e06 	br	40094444 <__alt_mem_epcs+0xfff53444>
4009468c:	04800304 	movi	r18,12
40094690:	020000c4 	movi	r8,3
40094694:	003f6b06 	br	40094444 <__alt_mem_epcs+0xfff53444>
40094698:	01400434 	movhi	r5,16
4009469c:	000d883a 	mov	r6,zero
400946a0:	297fffc4 	addi	r5,r5,-1
400946a4:	04ffffc4 	movi	r19,-1
400946a8:	0101ffc4 	movi	r4,2047
400946ac:	003fa406 	br	40094540 <__alt_mem_epcs+0xfff53540>
400946b0:	043f0084 	movi	r16,-1022
400946b4:	8521c83a 	sub	r16,r16,r20
400946b8:	00800e04 	movi	r2,56
400946bc:	1401200e 	bge	r2,r16,40094b40 <__divdf3+0x778>
400946c0:	9180004c 	andi	r6,r18,1
400946c4:	0009883a 	mov	r4,zero
400946c8:	000b883a 	mov	r5,zero
400946cc:	0027883a 	mov	r19,zero
400946d0:	003f9b06 	br	40094540 <__alt_mem_epcs+0xfff53540>
400946d4:	8880022c 	andhi	r2,r17,8
400946d8:	1000c726 	beq	r2,zero,400949f8 <__divdf3+0x630>
400946dc:	8080022c 	andhi	r2,r16,8
400946e0:	1000c51e 	bne	r2,zero,400949f8 <__divdf3+0x630>
400946e4:	00800434 	movhi	r2,16
400946e8:	81400234 	orhi	r5,r16,8
400946ec:	10bfffc4 	addi	r2,r2,-1
400946f0:	b80d883a 	mov	r6,r23
400946f4:	288a703a 	and	r5,r5,r2
400946f8:	a827883a 	mov	r19,r21
400946fc:	003fea06 	br	400946a8 <__alt_mem_epcs+0xfff536a8>
40094700:	8440ea36 	bltu	r16,r17,40094aac <__divdf3+0x6e4>
40094704:	8c00e826 	beq	r17,r16,40094aa8 <__divdf3+0x6e0>
40094708:	a53fffc4 	addi	r20,r20,-1
4009470c:	882d883a 	mov	r22,r17
40094710:	000d883a 	mov	r6,zero
40094714:	a804d63a 	srli	r2,r21,24
40094718:	8020923a 	slli	r16,r16,8
4009471c:	b009883a 	mov	r4,r22
40094720:	d9800315 	stw	r6,12(sp)
40094724:	1420b03a 	or	r16,r2,r16
40094728:	802ed43a 	srli	r23,r16,16
4009472c:	873fffcc 	andi	fp,r16,65535
40094730:	a82a923a 	slli	r21,r21,8
40094734:	b80b883a 	mov	r5,r23
40094738:	0093b1c0 	call	40093b1c <__udivsi3>
4009473c:	b009883a 	mov	r4,r22
40094740:	b80b883a 	mov	r5,r23
40094744:	1023883a 	mov	r17,r2
40094748:	0093b240 	call	40093b24 <__umodsi3>
4009474c:	1004943a 	slli	r2,r2,16
40094750:	9808d43a 	srli	r4,r19,16
40094754:	8f2d383a 	mul	r22,r17,fp
40094758:	d9800317 	ldw	r6,12(sp)
4009475c:	1106b03a 	or	r3,r2,r4
40094760:	1d80062e 	bgeu	r3,r22,4009477c <__divdf3+0x3b4>
40094764:	1c07883a 	add	r3,r3,r16
40094768:	88bfffc4 	addi	r2,r17,-1
4009476c:	1c00dc36 	bltu	r3,r16,40094ae0 <__divdf3+0x718>
40094770:	1d80db2e 	bgeu	r3,r22,40094ae0 <__divdf3+0x718>
40094774:	8c7fff84 	addi	r17,r17,-2
40094778:	1c07883a 	add	r3,r3,r16
4009477c:	1dadc83a 	sub	r22,r3,r22
40094780:	b009883a 	mov	r4,r22
40094784:	b80b883a 	mov	r5,r23
40094788:	d9800315 	stw	r6,12(sp)
4009478c:	0093b1c0 	call	40093b1c <__udivsi3>
40094790:	b009883a 	mov	r4,r22
40094794:	b80b883a 	mov	r5,r23
40094798:	d8800015 	stw	r2,0(sp)
4009479c:	0093b240 	call	40093b24 <__umodsi3>
400947a0:	da400017 	ldw	r9,0(sp)
400947a4:	1004943a 	slli	r2,r2,16
400947a8:	9cffffcc 	andi	r19,r19,65535
400947ac:	4f07383a 	mul	r3,r9,fp
400947b0:	14c8b03a 	or	r4,r2,r19
400947b4:	d9800317 	ldw	r6,12(sp)
400947b8:	20c0062e 	bgeu	r4,r3,400947d4 <__divdf3+0x40c>
400947bc:	2409883a 	add	r4,r4,r16
400947c0:	48bfffc4 	addi	r2,r9,-1
400947c4:	2400c436 	bltu	r4,r16,40094ad8 <__divdf3+0x710>
400947c8:	20c0c32e 	bgeu	r4,r3,40094ad8 <__divdf3+0x710>
400947cc:	4a7fff84 	addi	r9,r9,-2
400947d0:	2409883a 	add	r4,r4,r16
400947d4:	8822943a 	slli	r17,r17,16
400947d8:	a80ed43a 	srli	r7,r21,16
400947dc:	aa3fffcc 	andi	r8,r21,65535
400947e0:	4c62b03a 	or	r17,r9,r17
400947e4:	8816d43a 	srli	r11,r17,16
400947e8:	897fffcc 	andi	r5,r17,65535
400947ec:	2a15383a 	mul	r10,r5,r8
400947f0:	5a19383a 	mul	r12,r11,r8
400947f4:	29cb383a 	mul	r5,r5,r7
400947f8:	5012d43a 	srli	r9,r10,16
400947fc:	20c5c83a 	sub	r2,r4,r3
40094800:	614b883a 	add	r5,r12,r5
40094804:	2a4b883a 	add	r5,r5,r9
40094808:	59c7383a 	mul	r3,r11,r7
4009480c:	2b00022e 	bgeu	r5,r12,40094818 <__divdf3+0x450>
40094810:	01000074 	movhi	r4,1
40094814:	1907883a 	add	r3,r3,r4
40094818:	2808d43a 	srli	r4,r5,16
4009481c:	280a943a 	slli	r5,r5,16
40094820:	54ffffcc 	andi	r19,r10,65535
40094824:	1907883a 	add	r3,r3,r4
40094828:	2ccb883a 	add	r5,r5,r19
4009482c:	10c09336 	bltu	r2,r3,40094a7c <__divdf3+0x6b4>
40094830:	10c0ad26 	beq	r2,r3,40094ae8 <__divdf3+0x720>
40094834:	10c7c83a 	sub	r3,r2,r3
40094838:	3167c83a 	sub	r19,r6,r5
4009483c:	34ed803a 	cmpltu	r22,r6,r19
40094840:	1dadc83a 	sub	r22,r3,r22
40094844:	b400b226 	beq	r22,r16,40094b10 <__divdf3+0x748>
40094848:	b009883a 	mov	r4,r22
4009484c:	b80b883a 	mov	r5,r23
40094850:	d9c00115 	stw	r7,4(sp)
40094854:	da000215 	stw	r8,8(sp)
40094858:	0093b1c0 	call	40093b1c <__udivsi3>
4009485c:	b009883a 	mov	r4,r22
40094860:	b80b883a 	mov	r5,r23
40094864:	d8800315 	stw	r2,12(sp)
40094868:	0093b240 	call	40093b24 <__umodsi3>
4009486c:	d9800317 	ldw	r6,12(sp)
40094870:	1004943a 	slli	r2,r2,16
40094874:	9808d43a 	srli	r4,r19,16
40094878:	372d383a 	mul	r22,r6,fp
4009487c:	d9c00117 	ldw	r7,4(sp)
40094880:	1106b03a 	or	r3,r2,r4
40094884:	da000217 	ldw	r8,8(sp)
40094888:	1d80062e 	bgeu	r3,r22,400948a4 <__divdf3+0x4dc>
4009488c:	1c07883a 	add	r3,r3,r16
40094890:	30bfffc4 	addi	r2,r6,-1
40094894:	1c00a036 	bltu	r3,r16,40094b18 <__divdf3+0x750>
40094898:	1d809f2e 	bgeu	r3,r22,40094b18 <__divdf3+0x750>
4009489c:	31bfff84 	addi	r6,r6,-2
400948a0:	1c07883a 	add	r3,r3,r16
400948a4:	1dadc83a 	sub	r22,r3,r22
400948a8:	b009883a 	mov	r4,r22
400948ac:	b80b883a 	mov	r5,r23
400948b0:	d9800315 	stw	r6,12(sp)
400948b4:	d9c00115 	stw	r7,4(sp)
400948b8:	da000215 	stw	r8,8(sp)
400948bc:	0093b1c0 	call	40093b1c <__udivsi3>
400948c0:	b009883a 	mov	r4,r22
400948c4:	b80b883a 	mov	r5,r23
400948c8:	d8800015 	stw	r2,0(sp)
400948cc:	0093b240 	call	40093b24 <__umodsi3>
400948d0:	da400017 	ldw	r9,0(sp)
400948d4:	1004943a 	slli	r2,r2,16
400948d8:	993fffcc 	andi	r4,r19,65535
400948dc:	4f39383a 	mul	fp,r9,fp
400948e0:	1106b03a 	or	r3,r2,r4
400948e4:	d9800317 	ldw	r6,12(sp)
400948e8:	d9c00117 	ldw	r7,4(sp)
400948ec:	da000217 	ldw	r8,8(sp)
400948f0:	1f00062e 	bgeu	r3,fp,4009490c <__divdf3+0x544>
400948f4:	1c07883a 	add	r3,r3,r16
400948f8:	48bfffc4 	addi	r2,r9,-1
400948fc:	1c008836 	bltu	r3,r16,40094b20 <__divdf3+0x758>
40094900:	1f00872e 	bgeu	r3,fp,40094b20 <__divdf3+0x758>
40094904:	4a7fff84 	addi	r9,r9,-2
40094908:	1c07883a 	add	r3,r3,r16
4009490c:	3008943a 	slli	r4,r6,16
40094910:	1f07c83a 	sub	r3,r3,fp
40094914:	4926b03a 	or	r19,r9,r4
40094918:	993fffcc 	andi	r4,r19,65535
4009491c:	980cd43a 	srli	r6,r19,16
40094920:	220b383a 	mul	r5,r4,r8
40094924:	21c5383a 	mul	r2,r4,r7
40094928:	3211383a 	mul	r8,r6,r8
4009492c:	2808d43a 	srli	r4,r5,16
40094930:	31cf383a 	mul	r7,r6,r7
40094934:	4085883a 	add	r2,r8,r2
40094938:	1105883a 	add	r2,r2,r4
4009493c:	1200022e 	bgeu	r2,r8,40094948 <__divdf3+0x580>
40094940:	01000074 	movhi	r4,1
40094944:	390f883a 	add	r7,r7,r4
40094948:	1008d43a 	srli	r4,r2,16
4009494c:	1004943a 	slli	r2,r2,16
40094950:	297fffcc 	andi	r5,r5,65535
40094954:	390f883a 	add	r7,r7,r4
40094958:	1145883a 	add	r2,r2,r5
4009495c:	19c06536 	bltu	r3,r7,40094af4 <__divdf3+0x72c>
40094960:	19c09f26 	beq	r3,r7,40094be0 <__divdf3+0x818>
40094964:	9cc00054 	ori	r19,r19,1
40094968:	a100ffc4 	addi	r4,r20,1023
4009496c:	013f500e 	bge	zero,r4,400946b0 <__alt_mem_epcs+0xfff536b0>
40094970:	988001cc 	andi	r2,r19,7
40094974:	10000726 	beq	r2,zero,40094994 <__divdf3+0x5cc>
40094978:	98c003cc 	andi	r3,r19,15
4009497c:	00800104 	movi	r2,4
40094980:	18800426 	beq	r3,r2,40094994 <__divdf3+0x5cc>
40094984:	9885883a 	add	r2,r19,r2
40094988:	14e1803a 	cmpltu	r16,r2,r19
4009498c:	8c23883a 	add	r17,r17,r16
40094990:	1027883a 	mov	r19,r2
40094994:	8880402c 	andhi	r2,r17,256
40094998:	10000426 	beq	r2,zero,400949ac <__divdf3+0x5e4>
4009499c:	00bfc034 	movhi	r2,65280
400949a0:	10bfffc4 	addi	r2,r2,-1
400949a4:	a1010004 	addi	r4,r20,1024
400949a8:	88a2703a 	and	r17,r17,r2
400949ac:	0081ff84 	movi	r2,2046
400949b0:	113edf16 	blt	r2,r4,40094530 <__alt_mem_epcs+0xfff53530>
400949b4:	9826d0fa 	srli	r19,r19,3
400949b8:	8804977a 	slli	r2,r17,29
400949bc:	8820927a 	slli	r16,r17,9
400949c0:	2101ffcc 	andi	r4,r4,2047
400949c4:	14e6b03a 	or	r19,r2,r19
400949c8:	800ad33a 	srli	r5,r16,12
400949cc:	9180004c 	andi	r6,r18,1
400949d0:	003edb06 	br	40094540 <__alt_mem_epcs+0xfff53540>
400949d4:	008000c4 	movi	r2,3
400949d8:	4080a826 	beq	r8,r2,40094c7c <__divdf3+0x8b4>
400949dc:	00800044 	movi	r2,1
400949e0:	4080551e 	bne	r8,r2,40094b38 <__divdf3+0x770>
400949e4:	e00d883a 	mov	r6,fp
400949e8:	0009883a 	mov	r4,zero
400949ec:	000b883a 	mov	r5,zero
400949f0:	0027883a 	mov	r19,zero
400949f4:	003ed206 	br	40094540 <__alt_mem_epcs+0xfff53540>
400949f8:	00800434 	movhi	r2,16
400949fc:	89400234 	orhi	r5,r17,8
40094a00:	10bfffc4 	addi	r2,r2,-1
40094a04:	b00d883a 	mov	r6,r22
40094a08:	288a703a 	and	r5,r5,r2
40094a0c:	003f2606 	br	400946a8 <__alt_mem_epcs+0xfff536a8>
40094a10:	d9800315 	stw	r6,12(sp)
40094a14:	d9c00115 	stw	r7,4(sp)
40094a18:	0089be00 	call	40089be0 <__clzsi2>
40094a1c:	10c00804 	addi	r3,r2,32
40094a20:	010009c4 	movi	r4,39
40094a24:	d9800317 	ldw	r6,12(sp)
40094a28:	d9c00117 	ldw	r7,4(sp)
40094a2c:	20fee30e 	bge	r4,r3,400945bc <__alt_mem_epcs+0xfff535bc>
40094a30:	117ffe04 	addi	r5,r2,-8
40094a34:	9162983a 	sll	r17,r18,r5
40094a38:	0027883a 	mov	r19,zero
40094a3c:	003ee606 	br	400945d8 <__alt_mem_epcs+0xfff535d8>
40094a40:	3009883a 	mov	r4,r6
40094a44:	d9800315 	stw	r6,12(sp)
40094a48:	da000215 	stw	r8,8(sp)
40094a4c:	da400015 	stw	r9,0(sp)
40094a50:	0089be00 	call	40089be0 <__clzsi2>
40094a54:	10c00804 	addi	r3,r2,32
40094a58:	010009c4 	movi	r4,39
40094a5c:	d9800317 	ldw	r6,12(sp)
40094a60:	da000217 	ldw	r8,8(sp)
40094a64:	da400017 	ldw	r9,0(sp)
40094a68:	20fef20e 	bge	r4,r3,40094634 <__alt_mem_epcs+0xfff53634>
40094a6c:	10bffe04 	addi	r2,r2,-8
40094a70:	a8a0983a 	sll	r16,r21,r2
40094a74:	002b883a 	mov	r21,zero
40094a78:	003ef506 	br	40094650 <__alt_mem_epcs+0xfff53650>
40094a7c:	354d883a 	add	r6,r6,r21
40094a80:	3549803a 	cmpltu	r4,r6,r21
40094a84:	2409883a 	add	r4,r4,r16
40094a88:	2089883a 	add	r4,r4,r2
40094a8c:	88bfffc4 	addi	r2,r17,-1
40094a90:	81000c2e 	bgeu	r16,r4,40094ac4 <__divdf3+0x6fc>
40094a94:	20c04436 	bltu	r4,r3,40094ba8 <__divdf3+0x7e0>
40094a98:	19006f26 	beq	r3,r4,40094c58 <__divdf3+0x890>
40094a9c:	20c7c83a 	sub	r3,r4,r3
40094aa0:	1023883a 	mov	r17,r2
40094aa4:	003f6406 	br	40094838 <__alt_mem_epcs+0xfff53838>
40094aa8:	9d7f1736 	bltu	r19,r21,40094708 <__alt_mem_epcs+0xfff53708>
40094aac:	9806d07a 	srli	r3,r19,1
40094ab0:	880497fa 	slli	r2,r17,31
40094ab4:	980c97fa 	slli	r6,r19,31
40094ab8:	882cd07a 	srli	r22,r17,1
40094abc:	18a6b03a 	or	r19,r3,r2
40094ac0:	003f1406 	br	40094714 <__alt_mem_epcs+0xfff53714>
40094ac4:	243ff51e 	bne	r4,r16,40094a9c <__alt_mem_epcs+0xfff53a9c>
40094ac8:	357ff22e 	bgeu	r6,r21,40094a94 <__alt_mem_epcs+0xfff53a94>
40094acc:	80c7c83a 	sub	r3,r16,r3
40094ad0:	1023883a 	mov	r17,r2
40094ad4:	003f5806 	br	40094838 <__alt_mem_epcs+0xfff53838>
40094ad8:	1013883a 	mov	r9,r2
40094adc:	003f3d06 	br	400947d4 <__alt_mem_epcs+0xfff537d4>
40094ae0:	1023883a 	mov	r17,r2
40094ae4:	003f2506 	br	4009477c <__alt_mem_epcs+0xfff5377c>
40094ae8:	317fe436 	bltu	r6,r5,40094a7c <__alt_mem_epcs+0xfff53a7c>
40094aec:	0007883a 	mov	r3,zero
40094af0:	003f5106 	br	40094838 <__alt_mem_epcs+0xfff53838>
40094af4:	1c07883a 	add	r3,r3,r16
40094af8:	993fffc4 	addi	r4,r19,-1
40094afc:	1c000a2e 	bgeu	r3,r16,40094b28 <__divdf3+0x760>
40094b00:	2027883a 	mov	r19,r4
40094b04:	19ff971e 	bne	r3,r7,40094964 <__alt_mem_epcs+0xfff53964>
40094b08:	a8bf961e 	bne	r21,r2,40094964 <__alt_mem_epcs+0xfff53964>
40094b0c:	003f9606 	br	40094968 <__alt_mem_epcs+0xfff53968>
40094b10:	04ffffc4 	movi	r19,-1
40094b14:	003f9406 	br	40094968 <__alt_mem_epcs+0xfff53968>
40094b18:	100d883a 	mov	r6,r2
40094b1c:	003f6106 	br	400948a4 <__alt_mem_epcs+0xfff538a4>
40094b20:	1013883a 	mov	r9,r2
40094b24:	003f7906 	br	4009490c <__alt_mem_epcs+0xfff5390c>
40094b28:	19c02636 	bltu	r3,r7,40094bc4 <__divdf3+0x7fc>
40094b2c:	38c04d26 	beq	r7,r3,40094c64 <__divdf3+0x89c>
40094b30:	2027883a 	mov	r19,r4
40094b34:	003f8b06 	br	40094964 <__alt_mem_epcs+0xfff53964>
40094b38:	e025883a 	mov	r18,fp
40094b3c:	003f8a06 	br	40094968 <__alt_mem_epcs+0xfff53968>
40094b40:	008007c4 	movi	r2,31
40094b44:	14002a16 	blt	r2,r16,40094bf0 <__divdf3+0x828>
40094b48:	a5010784 	addi	r20,r20,1054
40094b4c:	8d04983a 	sll	r2,r17,r20
40094b50:	9c06d83a 	srl	r3,r19,r16
40094b54:	9d28983a 	sll	r20,r19,r20
40094b58:	8c20d83a 	srl	r16,r17,r16
40094b5c:	1886b03a 	or	r3,r3,r2
40094b60:	a004c03a 	cmpne	r2,r20,zero
40094b64:	1884b03a 	or	r2,r3,r2
40094b68:	10c001cc 	andi	r3,r2,7
40094b6c:	18000726 	beq	r3,zero,40094b8c <__divdf3+0x7c4>
40094b70:	110003cc 	andi	r4,r2,15
40094b74:	00c00104 	movi	r3,4
40094b78:	20c00426 	beq	r4,r3,40094b8c <__divdf3+0x7c4>
40094b7c:	10c00104 	addi	r3,r2,4
40094b80:	1885803a 	cmpltu	r2,r3,r2
40094b84:	80a1883a 	add	r16,r16,r2
40094b88:	1805883a 	mov	r2,r3
40094b8c:	80c0202c 	andhi	r3,r16,128
40094b90:	18002d26 	beq	r3,zero,40094c48 <__divdf3+0x880>
40094b94:	9180004c 	andi	r6,r18,1
40094b98:	01000044 	movi	r4,1
40094b9c:	000b883a 	mov	r5,zero
40094ba0:	0027883a 	mov	r19,zero
40094ba4:	003e6606 	br	40094540 <__alt_mem_epcs+0xfff53540>
40094ba8:	354d883a 	add	r6,r6,r21
40094bac:	356d803a 	cmpltu	r22,r6,r21
40094bb0:	b42d883a 	add	r22,r22,r16
40094bb4:	b12d883a 	add	r22,r22,r4
40094bb8:	8c7fff84 	addi	r17,r17,-2
40094bbc:	b0c7c83a 	sub	r3,r22,r3
40094bc0:	003f1d06 	br	40094838 <__alt_mem_epcs+0xfff53838>
40094bc4:	ad4b883a 	add	r5,r21,r21
40094bc8:	2d6b803a 	cmpltu	r21,r5,r21
40094bcc:	ac2b883a 	add	r21,r21,r16
40094bd0:	1d47883a 	add	r3,r3,r21
40094bd4:	993fff84 	addi	r4,r19,-2
40094bd8:	282b883a 	mov	r21,r5
40094bdc:	003fc806 	br	40094b00 <__alt_mem_epcs+0xfff53b00>
40094be0:	103fc41e 	bne	r2,zero,40094af4 <__alt_mem_epcs+0xfff53af4>
40094be4:	002b883a 	mov	r21,zero
40094be8:	a8bf5e1e 	bne	r21,r2,40094964 <__alt_mem_epcs+0xfff53964>
40094bec:	003f5e06 	br	40094968 <__alt_mem_epcs+0xfff53968>
40094bf0:	00bef884 	movi	r2,-1054
40094bf4:	1505c83a 	sub	r2,r2,r20
40094bf8:	00c00804 	movi	r3,32
40094bfc:	8884d83a 	srl	r2,r17,r2
40094c00:	80c01c26 	beq	r16,r3,40094c74 <__divdf3+0x8ac>
40094c04:	a0c10f84 	addi	r3,r20,1086
40094c08:	88c6983a 	sll	r3,r17,r3
40094c0c:	1cc6b03a 	or	r3,r3,r19
40094c10:	1806c03a 	cmpne	r3,r3,zero
40094c14:	1884b03a 	or	r2,r3,r2
40094c18:	140001cc 	andi	r16,r2,7
40094c1c:	8000061e 	bne	r16,zero,40094c38 <__divdf3+0x870>
40094c20:	000b883a 	mov	r5,zero
40094c24:	1004d0fa 	srli	r2,r2,3
40094c28:	9180004c 	andi	r6,r18,1
40094c2c:	0009883a 	mov	r4,zero
40094c30:	1426b03a 	or	r19,r2,r16
40094c34:	003e4206 	br	40094540 <__alt_mem_epcs+0xfff53540>
40094c38:	110003cc 	andi	r4,r2,15
40094c3c:	00c00104 	movi	r3,4
40094c40:	0021883a 	mov	r16,zero
40094c44:	20ffcd1e 	bne	r4,r3,40094b7c <__alt_mem_epcs+0xfff53b7c>
40094c48:	800a927a 	slli	r5,r16,9
40094c4c:	8020977a 	slli	r16,r16,29
40094c50:	280ad33a 	srli	r5,r5,12
40094c54:	003ff306 	br	40094c24 <__alt_mem_epcs+0xfff53c24>
40094c58:	317fd336 	bltu	r6,r5,40094ba8 <__alt_mem_epcs+0xfff53ba8>
40094c5c:	1023883a 	mov	r17,r2
40094c60:	003fa206 	br	40094aec <__alt_mem_epcs+0xfff53aec>
40094c64:	a8bfd736 	bltu	r21,r2,40094bc4 <__alt_mem_epcs+0xfff53bc4>
40094c68:	2027883a 	mov	r19,r4
40094c6c:	a8bf3d1e 	bne	r21,r2,40094964 <__alt_mem_epcs+0xfff53964>
40094c70:	003f3d06 	br	40094968 <__alt_mem_epcs+0xfff53968>
40094c74:	0007883a 	mov	r3,zero
40094c78:	003fe406 	br	40094c0c <__alt_mem_epcs+0xfff53c0c>
40094c7c:	00800434 	movhi	r2,16
40094c80:	89400234 	orhi	r5,r17,8
40094c84:	10bfffc4 	addi	r2,r2,-1
40094c88:	e00d883a 	mov	r6,fp
40094c8c:	288a703a 	and	r5,r5,r2
40094c90:	003e8506 	br	400946a8 <__alt_mem_epcs+0xfff536a8>

40094c94 <__eqdf2>:
40094c94:	2804d53a 	srli	r2,r5,20
40094c98:	3806d53a 	srli	r3,r7,20
40094c9c:	02000434 	movhi	r8,16
40094ca0:	423fffc4 	addi	r8,r8,-1
40094ca4:	1081ffcc 	andi	r2,r2,2047
40094ca8:	0241ffc4 	movi	r9,2047
40094cac:	2a14703a 	and	r10,r5,r8
40094cb0:	18c1ffcc 	andi	r3,r3,2047
40094cb4:	3a10703a 	and	r8,r7,r8
40094cb8:	280ad7fa 	srli	r5,r5,31
40094cbc:	380ed7fa 	srli	r7,r7,31
40094cc0:	12400f26 	beq	r2,r9,40094d00 <__eqdf2+0x6c>
40094cc4:	0241ffc4 	movi	r9,2047
40094cc8:	1a400326 	beq	r3,r9,40094cd8 <__eqdf2+0x44>
40094ccc:	10c00526 	beq	r2,r3,40094ce4 <__eqdf2+0x50>
40094cd0:	00800044 	movi	r2,1
40094cd4:	f800283a 	ret
40094cd8:	4192b03a 	or	r9,r8,r6
40094cdc:	483ffc1e 	bne	r9,zero,40094cd0 <__alt_mem_epcs+0xfff53cd0>
40094ce0:	10fffb1e 	bne	r2,r3,40094cd0 <__alt_mem_epcs+0xfff53cd0>
40094ce4:	523ffa1e 	bne	r10,r8,40094cd0 <__alt_mem_epcs+0xfff53cd0>
40094ce8:	21bff91e 	bne	r4,r6,40094cd0 <__alt_mem_epcs+0xfff53cd0>
40094cec:	29c00826 	beq	r5,r7,40094d10 <__eqdf2+0x7c>
40094cf0:	103ff71e 	bne	r2,zero,40094cd0 <__alt_mem_epcs+0xfff53cd0>
40094cf4:	5104b03a 	or	r2,r10,r4
40094cf8:	1004c03a 	cmpne	r2,r2,zero
40094cfc:	f800283a 	ret
40094d00:	5112b03a 	or	r9,r10,r4
40094d04:	483fef26 	beq	r9,zero,40094cc4 <__alt_mem_epcs+0xfff53cc4>
40094d08:	00800044 	movi	r2,1
40094d0c:	f800283a 	ret
40094d10:	0005883a 	mov	r2,zero
40094d14:	f800283a 	ret

40094d18 <__ledf2>:
40094d18:	2804d53a 	srli	r2,r5,20
40094d1c:	3810d53a 	srli	r8,r7,20
40094d20:	00c00434 	movhi	r3,16
40094d24:	18ffffc4 	addi	r3,r3,-1
40094d28:	0241ffc4 	movi	r9,2047
40094d2c:	1081ffcc 	andi	r2,r2,2047
40094d30:	28d4703a 	and	r10,r5,r3
40094d34:	4250703a 	and	r8,r8,r9
40094d38:	38c6703a 	and	r3,r7,r3
40094d3c:	280ad7fa 	srli	r5,r5,31
40094d40:	380ed7fa 	srli	r7,r7,31
40094d44:	12400b26 	beq	r2,r9,40094d74 <__ledf2+0x5c>
40094d48:	42401926 	beq	r8,r9,40094db0 <__ledf2+0x98>
40094d4c:	10000c1e 	bne	r2,zero,40094d80 <__ledf2+0x68>
40094d50:	5112b03a 	or	r9,r10,r4
40094d54:	4813003a 	cmpeq	r9,r9,zero
40094d58:	4817883a 	mov	r11,r9
40094d5c:	40000f26 	beq	r8,zero,40094d9c <__ledf2+0x84>
40094d60:	39c03fcc 	andi	r7,r7,255
40094d64:	58001826 	beq	r11,zero,40094dc8 <__ledf2+0xb0>
40094d68:	38000a1e 	bne	r7,zero,40094d94 <__ledf2+0x7c>
40094d6c:	00bfffc4 	movi	r2,-1
40094d70:	f800283a 	ret
40094d74:	5112b03a 	or	r9,r10,r4
40094d78:	48000f1e 	bne	r9,zero,40094db8 <__ledf2+0xa0>
40094d7c:	40800c26 	beq	r8,r2,40094db0 <__ledf2+0x98>
40094d80:	4000101e 	bne	r8,zero,40094dc4 <__ledf2+0xac>
40094d84:	1992b03a 	or	r9,r3,r6
40094d88:	0017883a 	mov	r11,zero
40094d8c:	483ff41e 	bne	r9,zero,40094d60 <__alt_mem_epcs+0xfff53d60>
40094d90:	283ff61e 	bne	r5,zero,40094d6c <__alt_mem_epcs+0xfff53d6c>
40094d94:	00800044 	movi	r2,1
40094d98:	f800283a 	ret
40094d9c:	1998b03a 	or	r12,r3,r6
40094da0:	603fef1e 	bne	r12,zero,40094d60 <__alt_mem_epcs+0xfff53d60>
40094da4:	483ffa26 	beq	r9,zero,40094d90 <__alt_mem_epcs+0xfff53d90>
40094da8:	0005883a 	mov	r2,zero
40094dac:	f800283a 	ret
40094db0:	1992b03a 	or	r9,r3,r6
40094db4:	48000226 	beq	r9,zero,40094dc0 <__ledf2+0xa8>
40094db8:	00800084 	movi	r2,2
40094dbc:	f800283a 	ret
40094dc0:	103fe326 	beq	r2,zero,40094d50 <__alt_mem_epcs+0xfff53d50>
40094dc4:	39c03fcc 	andi	r7,r7,255
40094dc8:	29fff11e 	bne	r5,r7,40094d90 <__alt_mem_epcs+0xfff53d90>
40094dcc:	40bff016 	blt	r8,r2,40094d90 <__alt_mem_epcs+0xfff53d90>
40094dd0:	12000316 	blt	r2,r8,40094de0 <__ledf2+0xc8>
40094dd4:	1abfee36 	bltu	r3,r10,40094d90 <__alt_mem_epcs+0xfff53d90>
40094dd8:	50c00326 	beq	r10,r3,40094de8 <__ledf2+0xd0>
40094ddc:	50fff22e 	bgeu	r10,r3,40094da8 <__alt_mem_epcs+0xfff53da8>
40094de0:	283fe226 	beq	r5,zero,40094d6c <__alt_mem_epcs+0xfff53d6c>
40094de4:	003feb06 	br	40094d94 <__alt_mem_epcs+0xfff53d94>
40094de8:	313fe936 	bltu	r6,r4,40094d90 <__alt_mem_epcs+0xfff53d90>
40094dec:	21bfee2e 	bgeu	r4,r6,40094da8 <__alt_mem_epcs+0xfff53da8>
40094df0:	283fde26 	beq	r5,zero,40094d6c <__alt_mem_epcs+0xfff53d6c>
40094df4:	003fe706 	br	40094d94 <__alt_mem_epcs+0xfff53d94>

40094df8 <__muldf3>:
40094df8:	defff204 	addi	sp,sp,-56
40094dfc:	2804d53a 	srli	r2,r5,20
40094e00:	dd800a15 	stw	r22,40(sp)
40094e04:	282cd7fa 	srli	r22,r5,31
40094e08:	dc000415 	stw	r16,16(sp)
40094e0c:	04000434 	movhi	r16,16
40094e10:	df000c15 	stw	fp,48(sp)
40094e14:	dd000815 	stw	r20,32(sp)
40094e18:	dcc00715 	stw	r19,28(sp)
40094e1c:	dc800615 	stw	r18,24(sp)
40094e20:	dc400515 	stw	r17,20(sp)
40094e24:	843fffc4 	addi	r16,r16,-1
40094e28:	dfc00d15 	stw	ra,52(sp)
40094e2c:	ddc00b15 	stw	r23,44(sp)
40094e30:	dd400915 	stw	r21,36(sp)
40094e34:	1501ffcc 	andi	r20,r2,2047
40094e38:	2023883a 	mov	r17,r4
40094e3c:	2025883a 	mov	r18,r4
40094e40:	2c20703a 	and	r16,r5,r16
40094e44:	b027883a 	mov	r19,r22
40094e48:	b7003fcc 	andi	fp,r22,255
40094e4c:	a0005926 	beq	r20,zero,40094fb4 <__muldf3+0x1bc>
40094e50:	0081ffc4 	movi	r2,2047
40094e54:	a0803426 	beq	r20,r2,40094f28 <__muldf3+0x130>
40094e58:	84000434 	orhi	r16,r16,16
40094e5c:	2004d77a 	srli	r2,r4,29
40094e60:	802090fa 	slli	r16,r16,3
40094e64:	202490fa 	slli	r18,r4,3
40094e68:	a53f0044 	addi	r20,r20,-1023
40094e6c:	80a0b03a 	or	r16,r16,r2
40094e70:	002b883a 	mov	r21,zero
40094e74:	0015883a 	mov	r10,zero
40094e78:	3812d53a 	srli	r9,r7,20
40094e7c:	3806d7fa 	srli	r3,r7,31
40094e80:	02000434 	movhi	r8,16
40094e84:	423fffc4 	addi	r8,r8,-1
40094e88:	4941ffcc 	andi	r5,r9,2047
40094e8c:	302f883a 	mov	r23,r6
40094e90:	3a22703a 	and	r17,r7,r8
40094e94:	1ac03fcc 	andi	r11,r3,255
40094e98:	28006226 	beq	r5,zero,40095024 <__muldf3+0x22c>
40094e9c:	0081ffc4 	movi	r2,2047
40094ea0:	28805a26 	beq	r5,r2,4009500c <__muldf3+0x214>
40094ea4:	8a000434 	orhi	r8,r17,16
40094ea8:	3004d77a 	srli	r2,r6,29
40094eac:	401090fa 	slli	r8,r8,3
40094eb0:	302e90fa 	slli	r23,r6,3
40094eb4:	297f0044 	addi	r5,r5,-1023
40094eb8:	40a2b03a 	or	r17,r8,r2
40094ebc:	0013883a 	mov	r9,zero
40094ec0:	4d4cb03a 	or	r6,r9,r21
40094ec4:	300c90ba 	slli	r6,r6,2
40094ec8:	02100274 	movhi	r8,16393
40094ecc:	4213ba04 	addi	r8,r8,20200
40094ed0:	320d883a 	add	r6,r6,r8
40094ed4:	31800017 	ldw	r6,0(r6)
40094ed8:	a14b883a 	add	r5,r20,r5
40094edc:	1dacf03a 	xor	r22,r3,r22
40094ee0:	2b000044 	addi	r12,r5,1
40094ee4:	3000683a 	jmp	r6
40094ee8:	40095124 	muli	zero,r8,9540
40094eec:	40095110 	cmplti	zero,r8,9540
40094ef0:	40095110 	cmplti	zero,r8,9540
40094ef4:	400950fc 	xorhi	zero,r8,9539
40094ef8:	40094f44 	addi	zero,r8,9533
40094efc:	40094f44 	addi	zero,r8,9533
40094f00:	400950e4 	muli	zero,r8,9539
40094f04:	400950fc 	xorhi	zero,r8,9539
40094f08:	40094f44 	addi	zero,r8,9533
40094f0c:	400950e4 	muli	zero,r8,9539
40094f10:	40094f44 	addi	zero,r8,9533
40094f14:	400950fc 	xorhi	zero,r8,9539
40094f18:	40094f48 	cmpgei	zero,r8,9533
40094f1c:	40094f48 	cmpgei	zero,r8,9533
40094f20:	40094f48 	cmpgei	zero,r8,9533
40094f24:	40095320 	cmpeqi	zero,r8,9548
40094f28:	8104b03a 	or	r2,r16,r4
40094f2c:	10006a1e 	bne	r2,zero,400950d8 <__muldf3+0x2e0>
40094f30:	05400204 	movi	r21,8
40094f34:	0021883a 	mov	r16,zero
40094f38:	0025883a 	mov	r18,zero
40094f3c:	02800084 	movi	r10,2
40094f40:	003fcd06 	br	40094e78 <__alt_mem_epcs+0xfff53e78>
40094f44:	b039883a 	mov	fp,r22
40094f48:	00800084 	movi	r2,2
40094f4c:	50804e1e 	bne	r10,r2,40095088 <__muldf3+0x290>
40094f50:	e4c0004c 	andi	r19,fp,1
40094f54:	0101ffc4 	movi	r4,2047
40094f58:	0021883a 	mov	r16,zero
40094f5c:	0025883a 	mov	r18,zero
40094f60:	2008953a 	slli	r4,r4,20
40094f64:	98c03fcc 	andi	r3,r19,255
40094f68:	01400434 	movhi	r5,16
40094f6c:	297fffc4 	addi	r5,r5,-1
40094f70:	180697fa 	slli	r3,r3,31
40094f74:	8160703a 	and	r16,r16,r5
40094f78:	8120b03a 	or	r16,r16,r4
40094f7c:	80c6b03a 	or	r3,r16,r3
40094f80:	9005883a 	mov	r2,r18
40094f84:	dfc00d17 	ldw	ra,52(sp)
40094f88:	df000c17 	ldw	fp,48(sp)
40094f8c:	ddc00b17 	ldw	r23,44(sp)
40094f90:	dd800a17 	ldw	r22,40(sp)
40094f94:	dd400917 	ldw	r21,36(sp)
40094f98:	dd000817 	ldw	r20,32(sp)
40094f9c:	dcc00717 	ldw	r19,28(sp)
40094fa0:	dc800617 	ldw	r18,24(sp)
40094fa4:	dc400517 	ldw	r17,20(sp)
40094fa8:	dc000417 	ldw	r16,16(sp)
40094fac:	dec00e04 	addi	sp,sp,56
40094fb0:	f800283a 	ret
40094fb4:	8104b03a 	or	r2,r16,r4
40094fb8:	10004226 	beq	r2,zero,400950c4 <__muldf3+0x2cc>
40094fbc:	8000f926 	beq	r16,zero,400953a4 <__muldf3+0x5ac>
40094fc0:	8009883a 	mov	r4,r16
40094fc4:	d9800315 	stw	r6,12(sp)
40094fc8:	d9c00015 	stw	r7,0(sp)
40094fcc:	0089be00 	call	40089be0 <__clzsi2>
40094fd0:	d9800317 	ldw	r6,12(sp)
40094fd4:	d9c00017 	ldw	r7,0(sp)
40094fd8:	1007883a 	mov	r3,r2
40094fdc:	01000a04 	movi	r4,40
40094fe0:	18bffe04 	addi	r2,r3,-8
40094fe4:	20c9c83a 	sub	r4,r4,r3
40094fe8:	80a0983a 	sll	r16,r16,r2
40094fec:	8908d83a 	srl	r4,r17,r4
40094ff0:	88a4983a 	sll	r18,r17,r2
40094ff4:	2420b03a 	or	r16,r4,r16
40094ff8:	017f0344 	movi	r5,-1011
40094ffc:	28e9c83a 	sub	r20,r5,r3
40095000:	002b883a 	mov	r21,zero
40095004:	0015883a 	mov	r10,zero
40095008:	003f9b06 	br	40094e78 <__alt_mem_epcs+0xfff53e78>
4009500c:	8984b03a 	or	r2,r17,r6
40095010:	10002a1e 	bne	r2,zero,400950bc <__muldf3+0x2c4>
40095014:	0023883a 	mov	r17,zero
40095018:	002f883a 	mov	r23,zero
4009501c:	02400084 	movi	r9,2
40095020:	003fa706 	br	40094ec0 <__alt_mem_epcs+0xfff53ec0>
40095024:	8984b03a 	or	r2,r17,r6
40095028:	10002026 	beq	r2,zero,400950ac <__muldf3+0x2b4>
4009502c:	8800cc26 	beq	r17,zero,40095360 <__muldf3+0x568>
40095030:	8809883a 	mov	r4,r17
40095034:	d8c00215 	stw	r3,8(sp)
40095038:	d9800315 	stw	r6,12(sp)
4009503c:	da800015 	stw	r10,0(sp)
40095040:	dac00115 	stw	r11,4(sp)
40095044:	0089be00 	call	40089be0 <__clzsi2>
40095048:	d8c00217 	ldw	r3,8(sp)
4009504c:	d9800317 	ldw	r6,12(sp)
40095050:	da800017 	ldw	r10,0(sp)
40095054:	dac00117 	ldw	r11,4(sp)
40095058:	1009883a 	mov	r4,r2
4009505c:	01400a04 	movi	r5,40
40095060:	25fffe04 	addi	r23,r4,-8
40095064:	290bc83a 	sub	r5,r5,r4
40095068:	8dd0983a 	sll	r8,r17,r23
4009506c:	314ad83a 	srl	r5,r6,r5
40095070:	35ee983a 	sll	r23,r6,r23
40095074:	2a22b03a 	or	r17,r5,r8
40095078:	017f0344 	movi	r5,-1011
4009507c:	290bc83a 	sub	r5,r5,r4
40095080:	0013883a 	mov	r9,zero
40095084:	003f8e06 	br	40094ec0 <__alt_mem_epcs+0xfff53ec0>
40095088:	008000c4 	movi	r2,3
4009508c:	50811d26 	beq	r10,r2,40095504 <__muldf3+0x70c>
40095090:	00800044 	movi	r2,1
40095094:	5080e01e 	bne	r10,r2,40095418 <__muldf3+0x620>
40095098:	e0a6703a 	and	r19,fp,r2
4009509c:	0009883a 	mov	r4,zero
400950a0:	0021883a 	mov	r16,zero
400950a4:	0025883a 	mov	r18,zero
400950a8:	003fad06 	br	40094f60 <__alt_mem_epcs+0xfff53f60>
400950ac:	0023883a 	mov	r17,zero
400950b0:	002f883a 	mov	r23,zero
400950b4:	02400044 	movi	r9,1
400950b8:	003f8106 	br	40094ec0 <__alt_mem_epcs+0xfff53ec0>
400950bc:	024000c4 	movi	r9,3
400950c0:	003f7f06 	br	40094ec0 <__alt_mem_epcs+0xfff53ec0>
400950c4:	05400104 	movi	r21,4
400950c8:	0021883a 	mov	r16,zero
400950cc:	0025883a 	mov	r18,zero
400950d0:	02800044 	movi	r10,1
400950d4:	003f6806 	br	40094e78 <__alt_mem_epcs+0xfff53e78>
400950d8:	05400304 	movi	r21,12
400950dc:	028000c4 	movi	r10,3
400950e0:	003f6506 	br	40094e78 <__alt_mem_epcs+0xfff53e78>
400950e4:	04000434 	movhi	r16,16
400950e8:	0027883a 	mov	r19,zero
400950ec:	843fffc4 	addi	r16,r16,-1
400950f0:	04bfffc4 	movi	r18,-1
400950f4:	0101ffc4 	movi	r4,2047
400950f8:	003f9906 	br	40094f60 <__alt_mem_epcs+0xfff53f60>
400950fc:	8821883a 	mov	r16,r17
40095100:	b825883a 	mov	r18,r23
40095104:	5839883a 	mov	fp,r11
40095108:	4815883a 	mov	r10,r9
4009510c:	003f8e06 	br	40094f48 <__alt_mem_epcs+0xfff53f48>
40095110:	8821883a 	mov	r16,r17
40095114:	b825883a 	mov	r18,r23
40095118:	b039883a 	mov	fp,r22
4009511c:	4815883a 	mov	r10,r9
40095120:	003f8906 	br	40094f48 <__alt_mem_epcs+0xfff53f48>
40095124:	b80cd43a 	srli	r6,r23,16
40095128:	9006d43a 	srli	r3,r18,16
4009512c:	90bfffcc 	andi	r2,r18,65535
40095130:	bdffffcc 	andi	r23,r23,65535
40095134:	b891383a 	mul	r8,r23,r2
40095138:	b8c9383a 	mul	r4,r23,r3
4009513c:	309b383a 	mul	r13,r6,r2
40095140:	400ed43a 	srli	r7,r8,16
40095144:	30df383a 	mul	r15,r6,r3
40095148:	235b883a 	add	r13,r4,r13
4009514c:	69db883a 	add	r13,r13,r7
40095150:	6900022e 	bgeu	r13,r4,4009515c <__muldf3+0x364>
40095154:	01000074 	movhi	r4,1
40095158:	791f883a 	add	r15,r15,r4
4009515c:	8828d43a 	srli	r20,r17,16
40095160:	8c7fffcc 	andi	r17,r17,65535
40095164:	888f383a 	mul	r7,r17,r2
40095168:	88d3383a 	mul	r9,r17,r3
4009516c:	a0a5383a 	mul	r18,r20,r2
40095170:	3816d43a 	srli	r11,r7,16
40095174:	6814943a 	slli	r10,r13,16
40095178:	4ca5883a 	add	r18,r9,r18
4009517c:	423fffcc 	andi	r8,r8,65535
40095180:	92e5883a 	add	r18,r18,r11
40095184:	6808d43a 	srli	r4,r13,16
40095188:	5215883a 	add	r10,r10,r8
4009518c:	a0c7383a 	mul	r3,r20,r3
40095190:	9240022e 	bgeu	r18,r9,4009519c <__muldf3+0x3a4>
40095194:	00800074 	movhi	r2,1
40095198:	1887883a 	add	r3,r3,r2
4009519c:	802ad43a 	srli	r21,r16,16
400951a0:	80bfffcc 	andi	r2,r16,65535
400951a4:	b893383a 	mul	r9,r23,r2
400951a8:	3091383a 	mul	r8,r6,r2
400951ac:	bd6f383a 	mul	r23,r23,r21
400951b0:	9026943a 	slli	r19,r18,16
400951b4:	481ad43a 	srli	r13,r9,16
400951b8:	9024d43a 	srli	r18,r18,16
400951bc:	39ffffcc 	andi	r7,r7,65535
400951c0:	ba11883a 	add	r8,r23,r8
400951c4:	99e7883a 	add	r19,r19,r7
400951c8:	4351883a 	add	r8,r8,r13
400951cc:	1c97883a 	add	r11,r3,r18
400951d0:	354d383a 	mul	r6,r6,r21
400951d4:	9925883a 	add	r18,r19,r4
400951d8:	45c0022e 	bgeu	r8,r23,400951e4 <__muldf3+0x3ec>
400951dc:	00c00074 	movhi	r3,1
400951e0:	30cd883a 	add	r6,r6,r3
400951e4:	8889383a 	mul	r4,r17,r2
400951e8:	8d63383a 	mul	r17,r17,r21
400951ec:	a085383a 	mul	r2,r20,r2
400951f0:	200ed43a 	srli	r7,r4,16
400951f4:	401cd43a 	srli	r14,r8,16
400951f8:	401a943a 	slli	r13,r8,16
400951fc:	8885883a 	add	r2,r17,r2
40095200:	4a3fffcc 	andi	r8,r9,65535
40095204:	11c5883a 	add	r2,r2,r7
40095208:	339d883a 	add	r14,r6,r14
4009520c:	6a11883a 	add	r8,r13,r8
40095210:	a561383a 	mul	r16,r20,r21
40095214:	1440022e 	bgeu	r2,r17,40095220 <__muldf3+0x428>
40095218:	00c00074 	movhi	r3,1
4009521c:	80e1883a 	add	r16,r16,r3
40095220:	1006943a 	slli	r3,r2,16
40095224:	213fffcc 	andi	r4,r4,65535
40095228:	93db883a 	add	r13,r18,r15
4009522c:	1909883a 	add	r4,r3,r4
40095230:	22c7883a 	add	r3,r4,r11
40095234:	6cd3803a 	cmpltu	r9,r13,r19
40095238:	6a09883a 	add	r4,r13,r8
4009523c:	1a5b883a 	add	r13,r3,r9
40095240:	2211803a 	cmpltu	r8,r4,r8
40095244:	734d883a 	add	r6,r14,r13
40095248:	100ed43a 	srli	r7,r2,16
4009524c:	6a53803a 	cmpltu	r9,r13,r9
40095250:	3205883a 	add	r2,r6,r8
40095254:	1ac7803a 	cmpltu	r3,r3,r11
40095258:	1211803a 	cmpltu	r8,r2,r8
4009525c:	48c6b03a 	or	r3,r9,r3
40095260:	338d803a 	cmpltu	r6,r6,r14
40095264:	19c7883a 	add	r3,r3,r7
40095268:	418cb03a 	or	r6,r8,r6
4009526c:	1987883a 	add	r3,r3,r6
40095270:	2024927a 	slli	r18,r4,9
40095274:	1c07883a 	add	r3,r3,r16
40095278:	1806927a 	slli	r3,r3,9
4009527c:	1020d5fa 	srli	r16,r2,23
40095280:	2008d5fa 	srli	r4,r4,23
40095284:	9294b03a 	or	r10,r18,r10
40095288:	1004927a 	slli	r2,r2,9
4009528c:	5024c03a 	cmpne	r18,r10,zero
40095290:	1c20b03a 	or	r16,r3,r16
40095294:	9108b03a 	or	r4,r18,r4
40095298:	80c0402c 	andhi	r3,r16,256
4009529c:	20a4b03a 	or	r18,r4,r2
400952a0:	18000726 	beq	r3,zero,400952c0 <__muldf3+0x4c8>
400952a4:	9006d07a 	srli	r3,r18,1
400952a8:	800897fa 	slli	r4,r16,31
400952ac:	9080004c 	andi	r2,r18,1
400952b0:	8020d07a 	srli	r16,r16,1
400952b4:	10c4b03a 	or	r2,r2,r3
400952b8:	1124b03a 	or	r18,r2,r4
400952bc:	600b883a 	mov	r5,r12
400952c0:	2900ffc4 	addi	r4,r5,1023
400952c4:	01004b0e 	bge	zero,r4,400953f4 <__muldf3+0x5fc>
400952c8:	908001cc 	andi	r2,r18,7
400952cc:	10000726 	beq	r2,zero,400952ec <__muldf3+0x4f4>
400952d0:	90c003cc 	andi	r3,r18,15
400952d4:	00800104 	movi	r2,4
400952d8:	18800426 	beq	r3,r2,400952ec <__muldf3+0x4f4>
400952dc:	9087883a 	add	r3,r18,r2
400952e0:	1c85803a 	cmpltu	r2,r3,r18
400952e4:	80a1883a 	add	r16,r16,r2
400952e8:	1825883a 	mov	r18,r3
400952ec:	8080402c 	andhi	r2,r16,256
400952f0:	10000426 	beq	r2,zero,40095304 <__muldf3+0x50c>
400952f4:	00bfc034 	movhi	r2,65280
400952f8:	10bfffc4 	addi	r2,r2,-1
400952fc:	29010004 	addi	r4,r5,1024
40095300:	80a0703a 	and	r16,r16,r2
40095304:	0081ff84 	movi	r2,2046
40095308:	1100320e 	bge	r2,r4,400953d4 <__muldf3+0x5dc>
4009530c:	b4c0004c 	andi	r19,r22,1
40095310:	0101ffc4 	movi	r4,2047
40095314:	0021883a 	mov	r16,zero
40095318:	0025883a 	mov	r18,zero
4009531c:	003f1006 	br	40094f60 <__alt_mem_epcs+0xfff53f60>
40095320:	8080022c 	andhi	r2,r16,8
40095324:	10000926 	beq	r2,zero,4009534c <__muldf3+0x554>
40095328:	8880022c 	andhi	r2,r17,8
4009532c:	1000071e 	bne	r2,zero,4009534c <__muldf3+0x554>
40095330:	00800434 	movhi	r2,16
40095334:	8c000234 	orhi	r16,r17,8
40095338:	10bfffc4 	addi	r2,r2,-1
4009533c:	1827883a 	mov	r19,r3
40095340:	80a0703a 	and	r16,r16,r2
40095344:	b825883a 	mov	r18,r23
40095348:	003f6a06 	br	400950f4 <__alt_mem_epcs+0xfff540f4>
4009534c:	00800434 	movhi	r2,16
40095350:	84000234 	orhi	r16,r16,8
40095354:	10bfffc4 	addi	r2,r2,-1
40095358:	80a0703a 	and	r16,r16,r2
4009535c:	003f6506 	br	400950f4 <__alt_mem_epcs+0xfff540f4>
40095360:	3009883a 	mov	r4,r6
40095364:	d8c00215 	stw	r3,8(sp)
40095368:	d9800315 	stw	r6,12(sp)
4009536c:	da800015 	stw	r10,0(sp)
40095370:	dac00115 	stw	r11,4(sp)
40095374:	0089be00 	call	40089be0 <__clzsi2>
40095378:	11000804 	addi	r4,r2,32
4009537c:	014009c4 	movi	r5,39
40095380:	d8c00217 	ldw	r3,8(sp)
40095384:	d9800317 	ldw	r6,12(sp)
40095388:	da800017 	ldw	r10,0(sp)
4009538c:	dac00117 	ldw	r11,4(sp)
40095390:	293f320e 	bge	r5,r4,4009505c <__alt_mem_epcs+0xfff5405c>
40095394:	10bffe04 	addi	r2,r2,-8
40095398:	b8a2983a 	sll	r17,r23,r2
4009539c:	002f883a 	mov	r23,zero
400953a0:	003f3506 	br	40095078 <__alt_mem_epcs+0xfff54078>
400953a4:	d9800315 	stw	r6,12(sp)
400953a8:	d9c00015 	stw	r7,0(sp)
400953ac:	0089be00 	call	40089be0 <__clzsi2>
400953b0:	10c00804 	addi	r3,r2,32
400953b4:	010009c4 	movi	r4,39
400953b8:	d9800317 	ldw	r6,12(sp)
400953bc:	d9c00017 	ldw	r7,0(sp)
400953c0:	20ff060e 	bge	r4,r3,40094fdc <__alt_mem_epcs+0xfff53fdc>
400953c4:	10bffe04 	addi	r2,r2,-8
400953c8:	88a0983a 	sll	r16,r17,r2
400953cc:	0025883a 	mov	r18,zero
400953d0:	003f0906 	br	40094ff8 <__alt_mem_epcs+0xfff53ff8>
400953d4:	9004d0fa 	srli	r2,r18,3
400953d8:	8024977a 	slli	r18,r16,29
400953dc:	8020927a 	slli	r16,r16,9
400953e0:	2101ffcc 	andi	r4,r4,2047
400953e4:	90a4b03a 	or	r18,r18,r2
400953e8:	8020d33a 	srli	r16,r16,12
400953ec:	b4c0004c 	andi	r19,r22,1
400953f0:	003edb06 	br	40094f60 <__alt_mem_epcs+0xfff53f60>
400953f4:	00ff0084 	movi	r3,-1022
400953f8:	1947c83a 	sub	r3,r3,r5
400953fc:	00800e04 	movi	r2,56
40095400:	10c0080e 	bge	r2,r3,40095424 <__muldf3+0x62c>
40095404:	b4c0004c 	andi	r19,r22,1
40095408:	0009883a 	mov	r4,zero
4009540c:	0021883a 	mov	r16,zero
40095410:	0025883a 	mov	r18,zero
40095414:	003ed206 	br	40094f60 <__alt_mem_epcs+0xfff53f60>
40095418:	600b883a 	mov	r5,r12
4009541c:	e02d883a 	mov	r22,fp
40095420:	003fa706 	br	400952c0 <__alt_mem_epcs+0xfff542c0>
40095424:	008007c4 	movi	r2,31
40095428:	10c01816 	blt	r2,r3,4009548c <__muldf3+0x694>
4009542c:	29410784 	addi	r5,r5,1054
40095430:	8144983a 	sll	r2,r16,r5
40095434:	90c8d83a 	srl	r4,r18,r3
40095438:	914a983a 	sll	r5,r18,r5
4009543c:	80c6d83a 	srl	r3,r16,r3
40095440:	2088b03a 	or	r4,r4,r2
40095444:	2804c03a 	cmpne	r2,r5,zero
40095448:	2084b03a 	or	r2,r4,r2
4009544c:	110001cc 	andi	r4,r2,7
40095450:	20000726 	beq	r4,zero,40095470 <__muldf3+0x678>
40095454:	114003cc 	andi	r5,r2,15
40095458:	01000104 	movi	r4,4
4009545c:	29000426 	beq	r5,r4,40095470 <__muldf3+0x678>
40095460:	11000104 	addi	r4,r2,4
40095464:	2085803a 	cmpltu	r2,r4,r2
40095468:	1887883a 	add	r3,r3,r2
4009546c:	2005883a 	mov	r2,r4
40095470:	1900202c 	andhi	r4,r3,128
40095474:	20001826 	beq	r4,zero,400954d8 <__muldf3+0x6e0>
40095478:	b4c0004c 	andi	r19,r22,1
4009547c:	01000044 	movi	r4,1
40095480:	0021883a 	mov	r16,zero
40095484:	0025883a 	mov	r18,zero
40095488:	003eb506 	br	40094f60 <__alt_mem_epcs+0xfff53f60>
4009548c:	00bef884 	movi	r2,-1054
40095490:	1145c83a 	sub	r2,r2,r5
40095494:	8088d83a 	srl	r4,r16,r2
40095498:	00800804 	movi	r2,32
4009549c:	18801726 	beq	r3,r2,400954fc <__muldf3+0x704>
400954a0:	28810f84 	addi	r2,r5,1086
400954a4:	8084983a 	sll	r2,r16,r2
400954a8:	1484b03a 	or	r2,r2,r18
400954ac:	1004c03a 	cmpne	r2,r2,zero
400954b0:	1104b03a 	or	r2,r2,r4
400954b4:	10c001cc 	andi	r3,r2,7
400954b8:	18000b1e 	bne	r3,zero,400954e8 <__muldf3+0x6f0>
400954bc:	0021883a 	mov	r16,zero
400954c0:	1004d0fa 	srli	r2,r2,3
400954c4:	b4c0004c 	andi	r19,r22,1
400954c8:	0009883a 	mov	r4,zero
400954cc:	10e4b03a 	or	r18,r2,r3
400954d0:	003ea306 	br	40094f60 <__alt_mem_epcs+0xfff53f60>
400954d4:	0007883a 	mov	r3,zero
400954d8:	1820927a 	slli	r16,r3,9
400954dc:	1806977a 	slli	r3,r3,29
400954e0:	8020d33a 	srli	r16,r16,12
400954e4:	003ff606 	br	400954c0 <__alt_mem_epcs+0xfff544c0>
400954e8:	110003cc 	andi	r4,r2,15
400954ec:	00c00104 	movi	r3,4
400954f0:	20fff826 	beq	r4,r3,400954d4 <__alt_mem_epcs+0xfff544d4>
400954f4:	0007883a 	mov	r3,zero
400954f8:	003fd906 	br	40095460 <__alt_mem_epcs+0xfff54460>
400954fc:	0005883a 	mov	r2,zero
40095500:	003fe906 	br	400954a8 <__alt_mem_epcs+0xfff544a8>
40095504:	00800434 	movhi	r2,16
40095508:	84000234 	orhi	r16,r16,8
4009550c:	10bfffc4 	addi	r2,r2,-1
40095510:	e4c0004c 	andi	r19,fp,1
40095514:	80a0703a 	and	r16,r16,r2
40095518:	003ef606 	br	400950f4 <__alt_mem_epcs+0xfff540f4>

4009551c <__floatunsidf>:
4009551c:	defffe04 	addi	sp,sp,-8
40095520:	dc000015 	stw	r16,0(sp)
40095524:	dfc00115 	stw	ra,4(sp)
40095528:	2021883a 	mov	r16,r4
4009552c:	20001026 	beq	r4,zero,40095570 <__floatunsidf+0x54>
40095530:	0089be00 	call	40089be0 <__clzsi2>
40095534:	01410784 	movi	r5,1054
40095538:	100d883a 	mov	r6,r2
4009553c:	288bc83a 	sub	r5,r5,r2
40095540:	00800284 	movi	r2,10
40095544:	11801616 	blt	r2,r6,400955a0 <__floatunsidf+0x84>
40095548:	008002c4 	movi	r2,11
4009554c:	1185c83a 	sub	r2,r2,r6
40095550:	8084d83a 	srl	r2,r16,r2
40095554:	00c00434 	movhi	r3,16
40095558:	31c00544 	addi	r7,r6,21
4009555c:	18ffffc4 	addi	r3,r3,-1
40095560:	81e0983a 	sll	r16,r16,r7
40095564:	10cc703a 	and	r6,r2,r3
40095568:	2941ffcc 	andi	r5,r5,2047
4009556c:	00000206 	br	40095578 <__floatunsidf+0x5c>
40095570:	000b883a 	mov	r5,zero
40095574:	000d883a 	mov	r6,zero
40095578:	280a953a 	slli	r5,r5,20
4009557c:	00c00434 	movhi	r3,16
40095580:	18ffffc4 	addi	r3,r3,-1
40095584:	30c6703a 	and	r3,r6,r3
40095588:	8005883a 	mov	r2,r16
4009558c:	1946b03a 	or	r3,r3,r5
40095590:	dfc00117 	ldw	ra,4(sp)
40095594:	dc000017 	ldw	r16,0(sp)
40095598:	dec00204 	addi	sp,sp,8
4009559c:	f800283a 	ret
400955a0:	31bffd44 	addi	r6,r6,-11
400955a4:	818c983a 	sll	r6,r16,r6
400955a8:	00800434 	movhi	r2,16
400955ac:	10bfffc4 	addi	r2,r2,-1
400955b0:	2941ffcc 	andi	r5,r5,2047
400955b4:	0021883a 	mov	r16,zero
400955b8:	308c703a 	and	r6,r6,r2
400955bc:	003fee06 	br	40095578 <__alt_mem_epcs+0xfff54578>

400955c0 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
400955c0:	defff504 	addi	sp,sp,-44
400955c4:	df000a15 	stw	fp,40(sp)
400955c8:	df000a04 	addi	fp,sp,40
400955cc:	e13ffc15 	stw	r4,-16(fp)
400955d0:	e17ffd15 	stw	r5,-12(fp)
400955d4:	e1bffe15 	stw	r6,-8(fp)
400955d8:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
400955dc:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
400955e0:	009002b4 	movhi	r2,16394
400955e4:	10b73804 	addi	r2,r2,-8992
400955e8:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
400955ec:	10003f26 	beq	r2,zero,400956ec <alt_alarm_start+0x12c>
  {
    if (alarm)
400955f0:	e0bffc17 	ldw	r2,-16(fp)
400955f4:	10003b26 	beq	r2,zero,400956e4 <alt_alarm_start+0x124>
    {
      alarm->callback = callback;
400955f8:	e0bffc17 	ldw	r2,-16(fp)
400955fc:	e0fffe17 	ldw	r3,-8(fp)
40095600:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
40095604:	e0bffc17 	ldw	r2,-16(fp)
40095608:	e0ffff17 	ldw	r3,-4(fp)
4009560c:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
40095610:	0005303a 	rdctl	r2,status
40095614:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
40095618:	e0fff817 	ldw	r3,-32(fp)
4009561c:	00bfff84 	movi	r2,-2
40095620:	1884703a 	and	r2,r3,r2
40095624:	1001703a 	wrctl	status,r2
  
  return context;
40095628:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
4009562c:	e0bff715 	stw	r2,-36(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
40095630:	009002b4 	movhi	r2,16394
40095634:	10b73904 	addi	r2,r2,-8988
40095638:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
4009563c:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
40095640:	e0fffd17 	ldw	r3,-12(fp)
40095644:	e0bff617 	ldw	r2,-40(fp)
40095648:	1885883a 	add	r2,r3,r2
4009564c:	10c00044 	addi	r3,r2,1
40095650:	e0bffc17 	ldw	r2,-16(fp)
40095654:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
40095658:	e0bffc17 	ldw	r2,-16(fp)
4009565c:	10c00217 	ldw	r3,8(r2)
40095660:	e0bff617 	ldw	r2,-40(fp)
40095664:	1880042e 	bgeu	r3,r2,40095678 <alt_alarm_start+0xb8>
      {
        alarm->rollover = 1;
40095668:	e0bffc17 	ldw	r2,-16(fp)
4009566c:	00c00044 	movi	r3,1
40095670:	10c00405 	stb	r3,16(r2)
40095674:	00000206 	br	40095680 <alt_alarm_start+0xc0>
      }
      else
      {
        alarm->rollover = 0;
40095678:	e0bffc17 	ldw	r2,-16(fp)
4009567c:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
40095680:	e0fffc17 	ldw	r3,-16(fp)
40095684:	009002b4 	movhi	r2,16394
40095688:	10aff804 	addi	r2,r2,-16416
4009568c:	e0bff915 	stw	r2,-28(fp)
40095690:	e0fffa15 	stw	r3,-24(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
40095694:	e0bffa17 	ldw	r2,-24(fp)
40095698:	e0fff917 	ldw	r3,-28(fp)
4009569c:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
400956a0:	e0bff917 	ldw	r2,-28(fp)
400956a4:	10c00017 	ldw	r3,0(r2)
400956a8:	e0bffa17 	ldw	r2,-24(fp)
400956ac:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
400956b0:	e0bff917 	ldw	r2,-28(fp)
400956b4:	10800017 	ldw	r2,0(r2)
400956b8:	e0fffa17 	ldw	r3,-24(fp)
400956bc:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
400956c0:	e0bff917 	ldw	r2,-28(fp)
400956c4:	e0fffa17 	ldw	r3,-24(fp)
400956c8:	10c00015 	stw	r3,0(r2)
400956cc:	e0bff717 	ldw	r2,-36(fp)
400956d0:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
400956d4:	e0bffb17 	ldw	r2,-20(fp)
400956d8:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
400956dc:	0005883a 	mov	r2,zero
400956e0:	00000306 	br	400956f0 <alt_alarm_start+0x130>
    }
    else
    {
      return -EINVAL;
400956e4:	00bffa84 	movi	r2,-22
400956e8:	00000106 	br	400956f0 <alt_alarm_start+0x130>
    }
  }
  else
  {
    return -ENOTSUP;
400956ec:	00bfde84 	movi	r2,-134
  }
}
400956f0:	e037883a 	mov	sp,fp
400956f4:	df000017 	ldw	fp,0(sp)
400956f8:	dec00104 	addi	sp,sp,4
400956fc:	f800283a 	ret

40095700 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
40095700:	defffe04 	addi	sp,sp,-8
40095704:	dfc00115 	stw	ra,4(sp)
40095708:	df000015 	stw	fp,0(sp)
4009570c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
40095710:	009002b4 	movhi	r2,16394
40095714:	10aff504 	addi	r2,r2,-16428
40095718:	10800017 	ldw	r2,0(r2)
4009571c:	10000526 	beq	r2,zero,40095734 <alt_get_errno+0x34>
40095720:	009002b4 	movhi	r2,16394
40095724:	10aff504 	addi	r2,r2,-16428
40095728:	10800017 	ldw	r2,0(r2)
4009572c:	103ee83a 	callr	r2
40095730:	00000206 	br	4009573c <alt_get_errno+0x3c>
40095734:	009002b4 	movhi	r2,16394
40095738:	10b73304 	addi	r2,r2,-9012
}
4009573c:	e037883a 	mov	sp,fp
40095740:	dfc00117 	ldw	ra,4(sp)
40095744:	df000017 	ldw	fp,0(sp)
40095748:	dec00204 	addi	sp,sp,8
4009574c:	f800283a 	ret

40095750 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
40095750:	defffb04 	addi	sp,sp,-20
40095754:	dfc00415 	stw	ra,16(sp)
40095758:	df000315 	stw	fp,12(sp)
4009575c:	df000304 	addi	fp,sp,12
40095760:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
40095764:	e0bfff17 	ldw	r2,-4(fp)
40095768:	10000616 	blt	r2,zero,40095784 <close+0x34>
4009576c:	e0bfff17 	ldw	r2,-4(fp)
40095770:	10c00324 	muli	r3,r2,12
40095774:	009002b4 	movhi	r2,16394
40095778:	10ab0d04 	addi	r2,r2,-21452
4009577c:	1885883a 	add	r2,r3,r2
40095780:	00000106 	br	40095788 <close+0x38>
40095784:	0005883a 	mov	r2,zero
40095788:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
4009578c:	e0bffd17 	ldw	r2,-12(fp)
40095790:	10001926 	beq	r2,zero,400957f8 <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
40095794:	e0bffd17 	ldw	r2,-12(fp)
40095798:	10800017 	ldw	r2,0(r2)
4009579c:	10800417 	ldw	r2,16(r2)
400957a0:	10000626 	beq	r2,zero,400957bc <close+0x6c>
400957a4:	e0bffd17 	ldw	r2,-12(fp)
400957a8:	10800017 	ldw	r2,0(r2)
400957ac:	10800417 	ldw	r2,16(r2)
400957b0:	e13ffd17 	ldw	r4,-12(fp)
400957b4:	103ee83a 	callr	r2
400957b8:	00000106 	br	400957c0 <close+0x70>
400957bc:	0005883a 	mov	r2,zero
400957c0:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
400957c4:	e13fff17 	ldw	r4,-4(fp)
400957c8:	0095ffc0 	call	40095ffc <alt_release_fd>
    if (rval < 0)
400957cc:	e0bffe17 	ldw	r2,-8(fp)
400957d0:	1000070e 	bge	r2,zero,400957f0 <close+0xa0>
    {
      ALT_ERRNO = -rval;
400957d4:	00957000 	call	40095700 <alt_get_errno>
400957d8:	1007883a 	mov	r3,r2
400957dc:	e0bffe17 	ldw	r2,-8(fp)
400957e0:	0085c83a 	sub	r2,zero,r2
400957e4:	18800015 	stw	r2,0(r3)
      return -1;
400957e8:	00bfffc4 	movi	r2,-1
400957ec:	00000706 	br	4009580c <close+0xbc>
    }
    return 0;
400957f0:	0005883a 	mov	r2,zero
400957f4:	00000506 	br	4009580c <close+0xbc>
  }
  else
  {
    ALT_ERRNO = EBADFD;
400957f8:	00957000 	call	40095700 <alt_get_errno>
400957fc:	1007883a 	mov	r3,r2
40095800:	00801444 	movi	r2,81
40095804:	18800015 	stw	r2,0(r3)
    return -1;
40095808:	00bfffc4 	movi	r2,-1
  }
}
4009580c:	e037883a 	mov	sp,fp
40095810:	dfc00117 	ldw	ra,4(sp)
40095814:	df000017 	ldw	fp,0(sp)
40095818:	dec00204 	addi	sp,sp,8
4009581c:	f800283a 	ret

40095820 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
40095820:	defffc04 	addi	sp,sp,-16
40095824:	df000315 	stw	fp,12(sp)
40095828:	df000304 	addi	fp,sp,12
4009582c:	e13ffd15 	stw	r4,-12(fp)
40095830:	e17ffe15 	stw	r5,-8(fp)
40095834:	e1bfff15 	stw	r6,-4(fp)
  return len;
40095838:	e0bfff17 	ldw	r2,-4(fp)
}
4009583c:	e037883a 	mov	sp,fp
40095840:	df000017 	ldw	fp,0(sp)
40095844:	dec00104 	addi	sp,sp,4
40095848:	f800283a 	ret

4009584c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
4009584c:	defffe04 	addi	sp,sp,-8
40095850:	dfc00115 	stw	ra,4(sp)
40095854:	df000015 	stw	fp,0(sp)
40095858:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
4009585c:	009002b4 	movhi	r2,16394
40095860:	10aff504 	addi	r2,r2,-16428
40095864:	10800017 	ldw	r2,0(r2)
40095868:	10000526 	beq	r2,zero,40095880 <alt_get_errno+0x34>
4009586c:	009002b4 	movhi	r2,16394
40095870:	10aff504 	addi	r2,r2,-16428
40095874:	10800017 	ldw	r2,0(r2)
40095878:	103ee83a 	callr	r2
4009587c:	00000206 	br	40095888 <alt_get_errno+0x3c>
40095880:	009002b4 	movhi	r2,16394
40095884:	10b73304 	addi	r2,r2,-9012
}
40095888:	e037883a 	mov	sp,fp
4009588c:	dfc00117 	ldw	ra,4(sp)
40095890:	df000017 	ldw	fp,0(sp)
40095894:	dec00204 	addi	sp,sp,8
40095898:	f800283a 	ret

4009589c <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
4009589c:	defffb04 	addi	sp,sp,-20
400958a0:	dfc00415 	stw	ra,16(sp)
400958a4:	df000315 	stw	fp,12(sp)
400958a8:	df000304 	addi	fp,sp,12
400958ac:	e13ffe15 	stw	r4,-8(fp)
400958b0:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
400958b4:	e0bffe17 	ldw	r2,-8(fp)
400958b8:	10000616 	blt	r2,zero,400958d4 <fstat+0x38>
400958bc:	e0bffe17 	ldw	r2,-8(fp)
400958c0:	10c00324 	muli	r3,r2,12
400958c4:	009002b4 	movhi	r2,16394
400958c8:	10ab0d04 	addi	r2,r2,-21452
400958cc:	1885883a 	add	r2,r3,r2
400958d0:	00000106 	br	400958d8 <fstat+0x3c>
400958d4:	0005883a 	mov	r2,zero
400958d8:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
400958dc:	e0bffd17 	ldw	r2,-12(fp)
400958e0:	10001026 	beq	r2,zero,40095924 <fstat+0x88>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
400958e4:	e0bffd17 	ldw	r2,-12(fp)
400958e8:	10800017 	ldw	r2,0(r2)
400958ec:	10800817 	ldw	r2,32(r2)
400958f0:	10000726 	beq	r2,zero,40095910 <fstat+0x74>
    {
      return fd->dev->fstat(fd, st);
400958f4:	e0bffd17 	ldw	r2,-12(fp)
400958f8:	10800017 	ldw	r2,0(r2)
400958fc:	10800817 	ldw	r2,32(r2)
40095900:	e13ffd17 	ldw	r4,-12(fp)
40095904:	e17fff17 	ldw	r5,-4(fp)
40095908:	103ee83a 	callr	r2
4009590c:	00000a06 	br	40095938 <fstat+0x9c>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
40095910:	e0bfff17 	ldw	r2,-4(fp)
40095914:	00c80004 	movi	r3,8192
40095918:	10c00115 	stw	r3,4(r2)
      return 0;
4009591c:	0005883a 	mov	r2,zero
40095920:	00000506 	br	40095938 <fstat+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
40095924:	009584c0 	call	4009584c <alt_get_errno>
40095928:	1007883a 	mov	r3,r2
4009592c:	00801444 	movi	r2,81
40095930:	18800015 	stw	r2,0(r3)
    return -1;
40095934:	00bfffc4 	movi	r2,-1
  }
}
40095938:	e037883a 	mov	sp,fp
4009593c:	dfc00117 	ldw	ra,4(sp)
40095940:	df000017 	ldw	fp,0(sp)
40095944:	dec00204 	addi	sp,sp,8
40095948:	f800283a 	ret

4009594c <alt_irq_register>:
 */
 
int alt_irq_register (alt_u32 id, 
                      void* context, 
                      alt_isr_func handler)
{
4009594c:	defff004 	addi	sp,sp,-64
40095950:	df000f15 	stw	fp,60(sp)
40095954:	df000f04 	addi	fp,sp,60
40095958:	e13ffd15 	stw	r4,-12(fp)
4009595c:	e17ffe15 	stw	r5,-8(fp)
40095960:	e1bfff15 	stw	r6,-4(fp)
  int rc = -EINVAL;  
40095964:	00bffa84 	movi	r2,-22
40095968:	e0bff115 	stw	r2,-60(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
4009596c:	e0bffd17 	ldw	r2,-12(fp)
40095970:	10800828 	cmpgeui	r2,r2,32
40095974:	10005c1e 	bne	r2,zero,40095ae8 <alt_irq_register+0x19c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
40095978:	0005303a 	rdctl	r2,status
4009597c:	e0bff315 	stw	r2,-52(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
40095980:	e0fff317 	ldw	r3,-52(fp)
40095984:	00bfff84 	movi	r2,-2
40095988:	1884703a 	and	r2,r3,r2
4009598c:	1001703a 	wrctl	status,r2
  
  return context;
40095990:	e0bff317 	ldw	r2,-52(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all ();
40095994:	e0bff215 	stw	r2,-56(fp)

    alt_irq[id].handler = handler;
40095998:	009002b4 	movhi	r2,16394
4009599c:	1086f504 	addi	r2,r2,7124
400959a0:	e0fffd17 	ldw	r3,-12(fp)
400959a4:	180690fa 	slli	r3,r3,3
400959a8:	10c5883a 	add	r2,r2,r3
400959ac:	e0ffff17 	ldw	r3,-4(fp)
400959b0:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = context;
400959b4:	009002b4 	movhi	r2,16394
400959b8:	1086f504 	addi	r2,r2,7124
400959bc:	e0fffd17 	ldw	r3,-12(fp)
400959c0:	180690fa 	slli	r3,r3,3
400959c4:	10c5883a 	add	r2,r2,r3
400959c8:	10800104 	addi	r2,r2,4
400959cc:	e0fffe17 	ldw	r3,-8(fp)
400959d0:	10c00015 	stw	r3,0(r2)

    rc = (handler) ? alt_irq_enable (id): alt_irq_disable (id);
400959d4:	e0bfff17 	ldw	r2,-4(fp)
400959d8:	10001f26 	beq	r2,zero,40095a58 <alt_irq_register+0x10c>
400959dc:	e0bffd17 	ldw	r2,-12(fp)
400959e0:	e0bff415 	stw	r2,-48(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
400959e4:	0005303a 	rdctl	r2,status
400959e8:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
400959ec:	e0fff517 	ldw	r3,-44(fp)
400959f0:	00bfff84 	movi	r2,-2
400959f4:	1884703a 	and	r2,r3,r2
400959f8:	1001703a 	wrctl	status,r2
  
  return context;
400959fc:	e0bff517 	ldw	r2,-44(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
40095a00:	e0bff615 	stw	r2,-40(fp)

  alt_irq_active |= (1 << id);
40095a04:	e0bff417 	ldw	r2,-48(fp)
40095a08:	00c00044 	movi	r3,1
40095a0c:	1884983a 	sll	r2,r3,r2
40095a10:	1007883a 	mov	r3,r2
40095a14:	009002b4 	movhi	r2,16394
40095a18:	10b73404 	addi	r2,r2,-9008
40095a1c:	10800017 	ldw	r2,0(r2)
40095a20:	1886b03a 	or	r3,r3,r2
40095a24:	009002b4 	movhi	r2,16394
40095a28:	10b73404 	addi	r2,r2,-9008
40095a2c:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
40095a30:	009002b4 	movhi	r2,16394
40095a34:	10b73404 	addi	r2,r2,-9008
40095a38:	10800017 	ldw	r2,0(r2)
40095a3c:	100170fa 	wrctl	ienable,r2
40095a40:	e0bff617 	ldw	r2,-40(fp)
40095a44:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
40095a48:	e0bff717 	ldw	r2,-36(fp)
40095a4c:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
40095a50:	0005883a 	mov	r2,zero
40095a54:	00001f06 	br	40095ad4 <alt_irq_register+0x188>
40095a58:	e0bffd17 	ldw	r2,-12(fp)
40095a5c:	e0bff815 	stw	r2,-32(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
40095a60:	0005303a 	rdctl	r2,status
40095a64:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
40095a68:	e0fff917 	ldw	r3,-28(fp)
40095a6c:	00bfff84 	movi	r2,-2
40095a70:	1884703a 	and	r2,r3,r2
40095a74:	1001703a 	wrctl	status,r2
  
  return context;
40095a78:	e0bff917 	ldw	r2,-28(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
40095a7c:	e0bffa15 	stw	r2,-24(fp)

  alt_irq_active &= ~(1 << id);
40095a80:	e0bff817 	ldw	r2,-32(fp)
40095a84:	00c00044 	movi	r3,1
40095a88:	1884983a 	sll	r2,r3,r2
40095a8c:	0084303a 	nor	r2,zero,r2
40095a90:	1007883a 	mov	r3,r2
40095a94:	009002b4 	movhi	r2,16394
40095a98:	10b73404 	addi	r2,r2,-9008
40095a9c:	10800017 	ldw	r2,0(r2)
40095aa0:	1886703a 	and	r3,r3,r2
40095aa4:	009002b4 	movhi	r2,16394
40095aa8:	10b73404 	addi	r2,r2,-9008
40095aac:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
40095ab0:	009002b4 	movhi	r2,16394
40095ab4:	10b73404 	addi	r2,r2,-9008
40095ab8:	10800017 	ldw	r2,0(r2)
40095abc:	100170fa 	wrctl	ienable,r2
40095ac0:	e0bffa17 	ldw	r2,-24(fp)
40095ac4:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
40095ac8:	e0bffb17 	ldw	r2,-20(fp)
40095acc:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
40095ad0:	0005883a 	mov	r2,zero
40095ad4:	e0bff115 	stw	r2,-60(fp)
40095ad8:	e0bff217 	ldw	r2,-56(fp)
40095adc:	e0bffc15 	stw	r2,-16(fp)
40095ae0:	e0bffc17 	ldw	r2,-16(fp)
40095ae4:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }
  return rc; 
40095ae8:	e0bff117 	ldw	r2,-60(fp)
}
40095aec:	e037883a 	mov	sp,fp
40095af0:	df000017 	ldw	fp,0(sp)
40095af4:	dec00104 	addi	sp,sp,4
40095af8:	f800283a 	ret

40095afc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
40095afc:	defffe04 	addi	sp,sp,-8
40095b00:	dfc00115 	stw	ra,4(sp)
40095b04:	df000015 	stw	fp,0(sp)
40095b08:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
40095b0c:	009002b4 	movhi	r2,16394
40095b10:	10aff504 	addi	r2,r2,-16428
40095b14:	10800017 	ldw	r2,0(r2)
40095b18:	10000526 	beq	r2,zero,40095b30 <alt_get_errno+0x34>
40095b1c:	009002b4 	movhi	r2,16394
40095b20:	10aff504 	addi	r2,r2,-16428
40095b24:	10800017 	ldw	r2,0(r2)
40095b28:	103ee83a 	callr	r2
40095b2c:	00000206 	br	40095b38 <alt_get_errno+0x3c>
40095b30:	009002b4 	movhi	r2,16394
40095b34:	10b73304 	addi	r2,r2,-9012
}
40095b38:	e037883a 	mov	sp,fp
40095b3c:	dfc00117 	ldw	ra,4(sp)
40095b40:	df000017 	ldw	fp,0(sp)
40095b44:	dec00204 	addi	sp,sp,8
40095b48:	f800283a 	ret

40095b4c <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
40095b4c:	deffed04 	addi	sp,sp,-76
40095b50:	dfc01215 	stw	ra,72(sp)
40095b54:	df001115 	stw	fp,68(sp)
40095b58:	df001104 	addi	fp,sp,68
40095b5c:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
40095b60:	e0bfff17 	ldw	r2,-4(fp)
40095b64:	10000616 	blt	r2,zero,40095b80 <isatty+0x34>
40095b68:	e0bfff17 	ldw	r2,-4(fp)
40095b6c:	10c00324 	muli	r3,r2,12
40095b70:	009002b4 	movhi	r2,16394
40095b74:	10ab0d04 	addi	r2,r2,-21452
40095b78:	1885883a 	add	r2,r3,r2
40095b7c:	00000106 	br	40095b84 <isatty+0x38>
40095b80:	0005883a 	mov	r2,zero
40095b84:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
40095b88:	e0bfef17 	ldw	r2,-68(fp)
40095b8c:	10000e26 	beq	r2,zero,40095bc8 <isatty+0x7c>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
40095b90:	e0bfef17 	ldw	r2,-68(fp)
40095b94:	10800017 	ldw	r2,0(r2)
40095b98:	10800817 	ldw	r2,32(r2)
40095b9c:	1000021e 	bne	r2,zero,40095ba8 <isatty+0x5c>
    {
      return 1;
40095ba0:	00800044 	movi	r2,1
40095ba4:	00000d06 	br	40095bdc <isatty+0x90>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
40095ba8:	e0bff004 	addi	r2,fp,-64
40095bac:	e13fff17 	ldw	r4,-4(fp)
40095bb0:	100b883a 	mov	r5,r2
40095bb4:	009589c0 	call	4009589c <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
40095bb8:	e0bff117 	ldw	r2,-60(fp)
40095bbc:	10880020 	cmpeqi	r2,r2,8192
40095bc0:	10803fcc 	andi	r2,r2,255
40095bc4:	00000506 	br	40095bdc <isatty+0x90>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
40095bc8:	0095afc0 	call	40095afc <alt_get_errno>
40095bcc:	1007883a 	mov	r3,r2
40095bd0:	00801444 	movi	r2,81
40095bd4:	18800015 	stw	r2,0(r3)
    return 0;
40095bd8:	0005883a 	mov	r2,zero
  }
}
40095bdc:	e037883a 	mov	sp,fp
40095be0:	dfc00117 	ldw	ra,4(sp)
40095be4:	df000017 	ldw	fp,0(sp)
40095be8:	dec00204 	addi	sp,sp,8
40095bec:	f800283a 	ret

40095bf0 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
40095bf0:	defffc04 	addi	sp,sp,-16
40095bf4:	df000315 	stw	fp,12(sp)
40095bf8:	df000304 	addi	fp,sp,12
40095bfc:	e13ffd15 	stw	r4,-12(fp)
40095c00:	e17ffe15 	stw	r5,-8(fp)
40095c04:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
40095c08:	e0fffe17 	ldw	r3,-8(fp)
40095c0c:	e0bffd17 	ldw	r2,-12(fp)
40095c10:	18800c26 	beq	r3,r2,40095c44 <alt_load_section+0x54>
  {
    while( to != end )
40095c14:	00000806 	br	40095c38 <alt_load_section+0x48>
    {
      *to++ = *from++;
40095c18:	e0bffe17 	ldw	r2,-8(fp)
40095c1c:	10c00104 	addi	r3,r2,4
40095c20:	e0fffe15 	stw	r3,-8(fp)
40095c24:	e0fffd17 	ldw	r3,-12(fp)
40095c28:	19000104 	addi	r4,r3,4
40095c2c:	e13ffd15 	stw	r4,-12(fp)
40095c30:	18c00017 	ldw	r3,0(r3)
40095c34:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
40095c38:	e0fffe17 	ldw	r3,-8(fp)
40095c3c:	e0bfff17 	ldw	r2,-4(fp)
40095c40:	18bff51e 	bne	r3,r2,40095c18 <__alt_mem_epcs+0xfff54c18>
    {
      *to++ = *from++;
    }
  }
}
40095c44:	e037883a 	mov	sp,fp
40095c48:	df000017 	ldw	fp,0(sp)
40095c4c:	dec00104 	addi	sp,sp,4
40095c50:	f800283a 	ret

40095c54 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
40095c54:	defffe04 	addi	sp,sp,-8
40095c58:	dfc00115 	stw	ra,4(sp)
40095c5c:	df000015 	stw	fp,0(sp)
40095c60:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
40095c64:	011002b4 	movhi	r4,16394
40095c68:	212ffc04 	addi	r4,r4,-16400
40095c6c:	015002b4 	movhi	r5,16394
40095c70:	2968da04 	addi	r5,r5,-23704
40095c74:	019002b4 	movhi	r6,16394
40095c78:	31affc04 	addi	r6,r6,-16400
40095c7c:	0095bf00 	call	40095bf0 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
40095c80:	01100234 	movhi	r4,16392
40095c84:	21000804 	addi	r4,r4,32
40095c88:	01500234 	movhi	r5,16392
40095c8c:	29400804 	addi	r5,r5,32
40095c90:	01900234 	movhi	r6,16392
40095c94:	31806f04 	addi	r6,r6,444
40095c98:	0095bf00 	call	40095bf0 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
40095c9c:	011002b4 	movhi	r4,16394
40095ca0:	21276704 	addi	r4,r4,-25188
40095ca4:	015002b4 	movhi	r5,16394
40095ca8:	29676704 	addi	r5,r5,-25188
40095cac:	019002b4 	movhi	r6,16394
40095cb0:	31a8da04 	addi	r6,r6,-23704
40095cb4:	0095bf00 	call	40095bf0 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
40095cb8:	0098b9c0 	call	40098b9c <alt_dcache_flush_all>
  alt_icache_flush_all();
40095cbc:	0098e440 	call	40098e44 <alt_icache_flush_all>
}
40095cc0:	e037883a 	mov	sp,fp
40095cc4:	dfc00117 	ldw	ra,4(sp)
40095cc8:	df000017 	ldw	fp,0(sp)
40095ccc:	dec00204 	addi	sp,sp,8
40095cd0:	f800283a 	ret

40095cd4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
40095cd4:	defffe04 	addi	sp,sp,-8
40095cd8:	dfc00115 	stw	ra,4(sp)
40095cdc:	df000015 	stw	fp,0(sp)
40095ce0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
40095ce4:	009002b4 	movhi	r2,16394
40095ce8:	10aff504 	addi	r2,r2,-16428
40095cec:	10800017 	ldw	r2,0(r2)
40095cf0:	10000526 	beq	r2,zero,40095d08 <alt_get_errno+0x34>
40095cf4:	009002b4 	movhi	r2,16394
40095cf8:	10aff504 	addi	r2,r2,-16428
40095cfc:	10800017 	ldw	r2,0(r2)
40095d00:	103ee83a 	callr	r2
40095d04:	00000206 	br	40095d10 <alt_get_errno+0x3c>
40095d08:	009002b4 	movhi	r2,16394
40095d0c:	10b73304 	addi	r2,r2,-9012
}
40095d10:	e037883a 	mov	sp,fp
40095d14:	dfc00117 	ldw	ra,4(sp)
40095d18:	df000017 	ldw	fp,0(sp)
40095d1c:	dec00204 	addi	sp,sp,8
40095d20:	f800283a 	ret

40095d24 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
40095d24:	defff904 	addi	sp,sp,-28
40095d28:	dfc00615 	stw	ra,24(sp)
40095d2c:	df000515 	stw	fp,20(sp)
40095d30:	df000504 	addi	fp,sp,20
40095d34:	e13ffd15 	stw	r4,-12(fp)
40095d38:	e17ffe15 	stw	r5,-8(fp)
40095d3c:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
40095d40:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
40095d44:	e0bffd17 	ldw	r2,-12(fp)
40095d48:	10000616 	blt	r2,zero,40095d64 <lseek+0x40>
40095d4c:	e0bffd17 	ldw	r2,-12(fp)
40095d50:	10c00324 	muli	r3,r2,12
40095d54:	009002b4 	movhi	r2,16394
40095d58:	10ab0d04 	addi	r2,r2,-21452
40095d5c:	1885883a 	add	r2,r3,r2
40095d60:	00000106 	br	40095d68 <lseek+0x44>
40095d64:	0005883a 	mov	r2,zero
40095d68:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
40095d6c:	e0bffc17 	ldw	r2,-16(fp)
40095d70:	10001026 	beq	r2,zero,40095db4 <lseek+0x90>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
40095d74:	e0bffc17 	ldw	r2,-16(fp)
40095d78:	10800017 	ldw	r2,0(r2)
40095d7c:	10800717 	ldw	r2,28(r2)
40095d80:	10000926 	beq	r2,zero,40095da8 <lseek+0x84>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
40095d84:	e0bffc17 	ldw	r2,-16(fp)
40095d88:	10800017 	ldw	r2,0(r2)
40095d8c:	10800717 	ldw	r2,28(r2)
40095d90:	e13ffc17 	ldw	r4,-16(fp)
40095d94:	e17ffe17 	ldw	r5,-8(fp)
40095d98:	e1bfff17 	ldw	r6,-4(fp)
40095d9c:	103ee83a 	callr	r2
40095da0:	e0bffb15 	stw	r2,-20(fp)
40095da4:	00000506 	br	40095dbc <lseek+0x98>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
40095da8:	00bfde84 	movi	r2,-134
40095dac:	e0bffb15 	stw	r2,-20(fp)
40095db0:	00000206 	br	40095dbc <lseek+0x98>
    }
  }
  else  
  {
    rc = -EBADFD;
40095db4:	00bfebc4 	movi	r2,-81
40095db8:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
40095dbc:	e0bffb17 	ldw	r2,-20(fp)
40095dc0:	1000070e 	bge	r2,zero,40095de0 <lseek+0xbc>
  {
    ALT_ERRNO = -rc;
40095dc4:	0095cd40 	call	40095cd4 <alt_get_errno>
40095dc8:	1007883a 	mov	r3,r2
40095dcc:	e0bffb17 	ldw	r2,-20(fp)
40095dd0:	0085c83a 	sub	r2,zero,r2
40095dd4:	18800015 	stw	r2,0(r3)
    rc = -1;
40095dd8:	00bfffc4 	movi	r2,-1
40095ddc:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
40095de0:	e0bffb17 	ldw	r2,-20(fp)
}
40095de4:	e037883a 	mov	sp,fp
40095de8:	dfc00117 	ldw	ra,4(sp)
40095dec:	df000017 	ldw	fp,0(sp)
40095df0:	dec00204 	addi	sp,sp,8
40095df4:	f800283a 	ret

40095df8 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
40095df8:	defffd04 	addi	sp,sp,-12
40095dfc:	dfc00215 	stw	ra,8(sp)
40095e00:	df000115 	stw	fp,4(sp)
40095e04:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
40095e08:	0009883a 	mov	r4,zero
40095e0c:	00964580 	call	40096458 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
40095e10:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
40095e14:	009648c0 	call	4009648c <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
40095e18:	011002b4 	movhi	r4,16394
40095e1c:	2128cb04 	addi	r4,r4,-23764
40095e20:	015002b4 	movhi	r5,16394
40095e24:	2968cb04 	addi	r5,r5,-23764
40095e28:	019002b4 	movhi	r6,16394
40095e2c:	31a8cb04 	addi	r6,r6,-23764
40095e30:	00992040 	call	40099204 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
40095e34:	0098cd40 	call	40098cd4 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
40095e38:	011002b4 	movhi	r4,16394
40095e3c:	21234c04 	addi	r4,r4,-29392
40095e40:	00999f80 	call	400999f8 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
40095e44:	d1274c17 	ldw	r4,-25296(gp)
40095e48:	d0e74d17 	ldw	r3,-25292(gp)
40095e4c:	d0a74e17 	ldw	r2,-25288(gp)
40095e50:	180b883a 	mov	r5,r3
40095e54:	100d883a 	mov	r6,r2
40095e58:	00802080 	call	40080208 <main>
40095e5c:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
40095e60:	01000044 	movi	r4,1
40095e64:	00957500 	call	40095750 <close>
  exit (result);
40095e68:	e13fff17 	ldw	r4,-4(fp)
40095e6c:	0099a0c0 	call	40099a0c <exit>

40095e70 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
40095e70:	defffe04 	addi	sp,sp,-8
40095e74:	df000115 	stw	fp,4(sp)
40095e78:	df000104 	addi	fp,sp,4
40095e7c:	e13fff15 	stw	r4,-4(fp)
}
40095e80:	e037883a 	mov	sp,fp
40095e84:	df000017 	ldw	fp,0(sp)
40095e88:	dec00104 	addi	sp,sp,4
40095e8c:	f800283a 	ret

40095e90 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
40095e90:	defffe04 	addi	sp,sp,-8
40095e94:	df000115 	stw	fp,4(sp)
40095e98:	df000104 	addi	fp,sp,4
40095e9c:	e13fff15 	stw	r4,-4(fp)
}
40095ea0:	e037883a 	mov	sp,fp
40095ea4:	df000017 	ldw	fp,0(sp)
40095ea8:	dec00104 	addi	sp,sp,4
40095eac:	f800283a 	ret

40095eb0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
40095eb0:	defffe04 	addi	sp,sp,-8
40095eb4:	dfc00115 	stw	ra,4(sp)
40095eb8:	df000015 	stw	fp,0(sp)
40095ebc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
40095ec0:	009002b4 	movhi	r2,16394
40095ec4:	10aff504 	addi	r2,r2,-16428
40095ec8:	10800017 	ldw	r2,0(r2)
40095ecc:	10000526 	beq	r2,zero,40095ee4 <alt_get_errno+0x34>
40095ed0:	009002b4 	movhi	r2,16394
40095ed4:	10aff504 	addi	r2,r2,-16428
40095ed8:	10800017 	ldw	r2,0(r2)
40095edc:	103ee83a 	callr	r2
40095ee0:	00000206 	br	40095eec <alt_get_errno+0x3c>
40095ee4:	009002b4 	movhi	r2,16394
40095ee8:	10b73304 	addi	r2,r2,-9012
}
40095eec:	e037883a 	mov	sp,fp
40095ef0:	dfc00117 	ldw	ra,4(sp)
40095ef4:	df000017 	ldw	fp,0(sp)
40095ef8:	dec00204 	addi	sp,sp,8
40095efc:	f800283a 	ret

40095f00 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
40095f00:	defff904 	addi	sp,sp,-28
40095f04:	dfc00615 	stw	ra,24(sp)
40095f08:	df000515 	stw	fp,20(sp)
40095f0c:	df000504 	addi	fp,sp,20
40095f10:	e13ffd15 	stw	r4,-12(fp)
40095f14:	e17ffe15 	stw	r5,-8(fp)
40095f18:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
40095f1c:	e0bffd17 	ldw	r2,-12(fp)
40095f20:	10000616 	blt	r2,zero,40095f3c <read+0x3c>
40095f24:	e0bffd17 	ldw	r2,-12(fp)
40095f28:	10c00324 	muli	r3,r2,12
40095f2c:	009002b4 	movhi	r2,16394
40095f30:	10ab0d04 	addi	r2,r2,-21452
40095f34:	1885883a 	add	r2,r3,r2
40095f38:	00000106 	br	40095f40 <read+0x40>
40095f3c:	0005883a 	mov	r2,zero
40095f40:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
40095f44:	e0bffb17 	ldw	r2,-20(fp)
40095f48:	10002226 	beq	r2,zero,40095fd4 <read+0xd4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
40095f4c:	e0bffb17 	ldw	r2,-20(fp)
40095f50:	10800217 	ldw	r2,8(r2)
40095f54:	108000cc 	andi	r2,r2,3
40095f58:	10800060 	cmpeqi	r2,r2,1
40095f5c:	1000181e 	bne	r2,zero,40095fc0 <read+0xc0>
        (fd->dev->read))
40095f60:	e0bffb17 	ldw	r2,-20(fp)
40095f64:	10800017 	ldw	r2,0(r2)
40095f68:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
40095f6c:	10001426 	beq	r2,zero,40095fc0 <read+0xc0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
40095f70:	e0bffb17 	ldw	r2,-20(fp)
40095f74:	10800017 	ldw	r2,0(r2)
40095f78:	10800517 	ldw	r2,20(r2)
40095f7c:	e0ffff17 	ldw	r3,-4(fp)
40095f80:	e13ffb17 	ldw	r4,-20(fp)
40095f84:	e17ffe17 	ldw	r5,-8(fp)
40095f88:	180d883a 	mov	r6,r3
40095f8c:	103ee83a 	callr	r2
40095f90:	e0bffc15 	stw	r2,-16(fp)
40095f94:	e0bffc17 	ldw	r2,-16(fp)
40095f98:	1000070e 	bge	r2,zero,40095fb8 <read+0xb8>
        {
          ALT_ERRNO = -rval;
40095f9c:	0095eb00 	call	40095eb0 <alt_get_errno>
40095fa0:	1007883a 	mov	r3,r2
40095fa4:	e0bffc17 	ldw	r2,-16(fp)
40095fa8:	0085c83a 	sub	r2,zero,r2
40095fac:	18800015 	stw	r2,0(r3)
          return -1;
40095fb0:	00bfffc4 	movi	r2,-1
40095fb4:	00000c06 	br	40095fe8 <read+0xe8>
        }
        return rval;
40095fb8:	e0bffc17 	ldw	r2,-16(fp)
40095fbc:	00000a06 	br	40095fe8 <read+0xe8>
      }
      else
      {
        ALT_ERRNO = EACCES;
40095fc0:	0095eb00 	call	40095eb0 <alt_get_errno>
40095fc4:	1007883a 	mov	r3,r2
40095fc8:	00800344 	movi	r2,13
40095fcc:	18800015 	stw	r2,0(r3)
40095fd0:	00000406 	br	40095fe4 <read+0xe4>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
40095fd4:	0095eb00 	call	40095eb0 <alt_get_errno>
40095fd8:	1007883a 	mov	r3,r2
40095fdc:	00801444 	movi	r2,81
40095fe0:	18800015 	stw	r2,0(r3)
  }
  return -1;
40095fe4:	00bfffc4 	movi	r2,-1
}
40095fe8:	e037883a 	mov	sp,fp
40095fec:	dfc00117 	ldw	ra,4(sp)
40095ff0:	df000017 	ldw	fp,0(sp)
40095ff4:	dec00204 	addi	sp,sp,8
40095ff8:	f800283a 	ret

40095ffc <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
40095ffc:	defffe04 	addi	sp,sp,-8
40096000:	df000115 	stw	fp,4(sp)
40096004:	df000104 	addi	fp,sp,4
40096008:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
4009600c:	e0bfff17 	ldw	r2,-4(fp)
40096010:	108000d0 	cmplti	r2,r2,3
40096014:	10000d1e 	bne	r2,zero,4009604c <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
40096018:	009002b4 	movhi	r2,16394
4009601c:	10ab0d04 	addi	r2,r2,-21452
40096020:	e0ffff17 	ldw	r3,-4(fp)
40096024:	18c00324 	muli	r3,r3,12
40096028:	10c5883a 	add	r2,r2,r3
4009602c:	10800204 	addi	r2,r2,8
40096030:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
40096034:	009002b4 	movhi	r2,16394
40096038:	10ab0d04 	addi	r2,r2,-21452
4009603c:	e0ffff17 	ldw	r3,-4(fp)
40096040:	18c00324 	muli	r3,r3,12
40096044:	10c5883a 	add	r2,r2,r3
40096048:	10000015 	stw	zero,0(r2)
  }
}
4009604c:	e037883a 	mov	sp,fp
40096050:	df000017 	ldw	fp,0(sp)
40096054:	dec00104 	addi	sp,sp,4
40096058:	f800283a 	ret

4009605c <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
4009605c:	defff904 	addi	sp,sp,-28
40096060:	df000615 	stw	fp,24(sp)
40096064:	df000604 	addi	fp,sp,24
40096068:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
4009606c:	0005303a 	rdctl	r2,status
40096070:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
40096074:	e0fffc17 	ldw	r3,-16(fp)
40096078:	00bfff84 	movi	r2,-2
4009607c:	1884703a 	and	r2,r3,r2
40096080:	1001703a 	wrctl	status,r2
  
  return context;
40096084:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
40096088:	e0bffa15 	stw	r2,-24(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
4009608c:	d0a00e17 	ldw	r2,-32712(gp)
40096090:	10c000c4 	addi	r3,r2,3
40096094:	00bfff04 	movi	r2,-4
40096098:	1884703a 	and	r2,r3,r2
4009609c:	d0a00e15 	stw	r2,-32712(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
400960a0:	d0e00e17 	ldw	r3,-32712(gp)
400960a4:	e0bfff17 	ldw	r2,-4(fp)
400960a8:	1887883a 	add	r3,r3,r2
400960ac:	00900434 	movhi	r2,16400
400960b0:	10800004 	addi	r2,r2,0
400960b4:	10c0062e 	bgeu	r2,r3,400960d0 <sbrk+0x74>
400960b8:	e0bffa17 	ldw	r2,-24(fp)
400960bc:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
400960c0:	e0bffd17 	ldw	r2,-12(fp)
400960c4:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
400960c8:	00bfffc4 	movi	r2,-1
400960cc:	00000b06 	br	400960fc <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
400960d0:	d0a00e17 	ldw	r2,-32712(gp)
400960d4:	e0bffb15 	stw	r2,-20(fp)
  heap_end += incr; 
400960d8:	d0e00e17 	ldw	r3,-32712(gp)
400960dc:	e0bfff17 	ldw	r2,-4(fp)
400960e0:	1885883a 	add	r2,r3,r2
400960e4:	d0a00e15 	stw	r2,-32712(gp)
400960e8:	e0bffa17 	ldw	r2,-24(fp)
400960ec:	e0bffe15 	stw	r2,-8(fp)
400960f0:	e0bffe17 	ldw	r2,-8(fp)
400960f4:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
400960f8:	e0bffb17 	ldw	r2,-20(fp)
} 
400960fc:	e037883a 	mov	sp,fp
40096100:	df000017 	ldw	fp,0(sp)
40096104:	dec00104 	addi	sp,sp,4
40096108:	f800283a 	ret

4009610c <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
4009610c:	defffa04 	addi	sp,sp,-24
40096110:	df000515 	stw	fp,20(sp)
40096114:	df000504 	addi	fp,sp,20
40096118:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
4009611c:	0005303a 	rdctl	r2,status
40096120:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
40096124:	e0fffc17 	ldw	r3,-16(fp)
40096128:	00bfff84 	movi	r2,-2
4009612c:	1884703a 	and	r2,r3,r2
40096130:	1001703a 	wrctl	status,r2
  
  return context;
40096134:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
40096138:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
4009613c:	e0bfff17 	ldw	r2,-4(fp)
40096140:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
40096144:	e0bffd17 	ldw	r2,-12(fp)
40096148:	10800017 	ldw	r2,0(r2)
4009614c:	e0fffd17 	ldw	r3,-12(fp)
40096150:	18c00117 	ldw	r3,4(r3)
40096154:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
40096158:	e0bffd17 	ldw	r2,-12(fp)
4009615c:	10800117 	ldw	r2,4(r2)
40096160:	e0fffd17 	ldw	r3,-12(fp)
40096164:	18c00017 	ldw	r3,0(r3)
40096168:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
4009616c:	e0bffd17 	ldw	r2,-12(fp)
40096170:	e0fffd17 	ldw	r3,-12(fp)
40096174:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
40096178:	e0bffd17 	ldw	r2,-12(fp)
4009617c:	e0fffd17 	ldw	r3,-12(fp)
40096180:	10c00015 	stw	r3,0(r2)
40096184:	e0bffb17 	ldw	r2,-20(fp)
40096188:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
4009618c:	e0bffe17 	ldw	r2,-8(fp)
40096190:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
40096194:	e037883a 	mov	sp,fp
40096198:	df000017 	ldw	fp,0(sp)
4009619c:	dec00104 	addi	sp,sp,4
400961a0:	f800283a 	ret

400961a4 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
400961a4:	defffb04 	addi	sp,sp,-20
400961a8:	dfc00415 	stw	ra,16(sp)
400961ac:	df000315 	stw	fp,12(sp)
400961b0:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
400961b4:	d0a00f17 	ldw	r2,-32708(gp)
400961b8:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
400961bc:	d0a75017 	ldw	r2,-25280(gp)
400961c0:	10800044 	addi	r2,r2,1
400961c4:	d0a75015 	stw	r2,-25280(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
400961c8:	00002e06 	br	40096284 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
400961cc:	e0bffd17 	ldw	r2,-12(fp)
400961d0:	10800017 	ldw	r2,0(r2)
400961d4:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
400961d8:	e0bffd17 	ldw	r2,-12(fp)
400961dc:	10800403 	ldbu	r2,16(r2)
400961e0:	10803fcc 	andi	r2,r2,255
400961e4:	10000426 	beq	r2,zero,400961f8 <alt_tick+0x54>
400961e8:	d0a75017 	ldw	r2,-25280(gp)
400961ec:	1000021e 	bne	r2,zero,400961f8 <alt_tick+0x54>
    {
      alarm->rollover = 0;
400961f0:	e0bffd17 	ldw	r2,-12(fp)
400961f4:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
400961f8:	e0bffd17 	ldw	r2,-12(fp)
400961fc:	10800217 	ldw	r2,8(r2)
40096200:	d0e75017 	ldw	r3,-25280(gp)
40096204:	18801d36 	bltu	r3,r2,4009627c <alt_tick+0xd8>
40096208:	e0bffd17 	ldw	r2,-12(fp)
4009620c:	10800403 	ldbu	r2,16(r2)
40096210:	10803fcc 	andi	r2,r2,255
40096214:	1000191e 	bne	r2,zero,4009627c <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
40096218:	e0bffd17 	ldw	r2,-12(fp)
4009621c:	10800317 	ldw	r2,12(r2)
40096220:	e0fffd17 	ldw	r3,-12(fp)
40096224:	18c00517 	ldw	r3,20(r3)
40096228:	1809883a 	mov	r4,r3
4009622c:	103ee83a 	callr	r2
40096230:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
40096234:	e0bfff17 	ldw	r2,-4(fp)
40096238:	1000031e 	bne	r2,zero,40096248 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
4009623c:	e13ffd17 	ldw	r4,-12(fp)
40096240:	009610c0 	call	4009610c <alt_alarm_stop>
40096244:	00000d06 	br	4009627c <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
40096248:	e0bffd17 	ldw	r2,-12(fp)
4009624c:	10c00217 	ldw	r3,8(r2)
40096250:	e0bfff17 	ldw	r2,-4(fp)
40096254:	1887883a 	add	r3,r3,r2
40096258:	e0bffd17 	ldw	r2,-12(fp)
4009625c:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
40096260:	e0bffd17 	ldw	r2,-12(fp)
40096264:	10c00217 	ldw	r3,8(r2)
40096268:	d0a75017 	ldw	r2,-25280(gp)
4009626c:	1880032e 	bgeu	r3,r2,4009627c <alt_tick+0xd8>
        {
          alarm->rollover = 1;
40096270:	e0bffd17 	ldw	r2,-12(fp)
40096274:	00c00044 	movi	r3,1
40096278:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
4009627c:	e0bffe17 	ldw	r2,-8(fp)
40096280:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
40096284:	e0fffd17 	ldw	r3,-12(fp)
40096288:	d0a00f04 	addi	r2,gp,-32708
4009628c:	18bfcf1e 	bne	r3,r2,400961cc <__alt_mem_epcs+0xfff551cc>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
40096290:	0001883a 	nop
}
40096294:	e037883a 	mov	sp,fp
40096298:	dfc00117 	ldw	ra,4(sp)
4009629c:	df000017 	ldw	fp,0(sp)
400962a0:	dec00204 	addi	sp,sp,8
400962a4:	f800283a 	ret

400962a8 <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
400962a8:	defffd04 	addi	sp,sp,-12
400962ac:	dfc00215 	stw	ra,8(sp)
400962b0:	df000115 	stw	fp,4(sp)
400962b4:	df000104 	addi	fp,sp,4
400962b8:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
400962bc:	e13fff17 	ldw	r4,-4(fp)
400962c0:	0098a740 	call	40098a74 <alt_busy_sleep>
}
400962c4:	e037883a 	mov	sp,fp
400962c8:	dfc00117 	ldw	ra,4(sp)
400962cc:	df000017 	ldw	fp,0(sp)
400962d0:	dec00204 	addi	sp,sp,8
400962d4:	f800283a 	ret

400962d8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
400962d8:	defffe04 	addi	sp,sp,-8
400962dc:	dfc00115 	stw	ra,4(sp)
400962e0:	df000015 	stw	fp,0(sp)
400962e4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
400962e8:	009002b4 	movhi	r2,16394
400962ec:	10aff504 	addi	r2,r2,-16428
400962f0:	10800017 	ldw	r2,0(r2)
400962f4:	10000526 	beq	r2,zero,4009630c <alt_get_errno+0x34>
400962f8:	009002b4 	movhi	r2,16394
400962fc:	10aff504 	addi	r2,r2,-16428
40096300:	10800017 	ldw	r2,0(r2)
40096304:	103ee83a 	callr	r2
40096308:	00000206 	br	40096314 <alt_get_errno+0x3c>
4009630c:	009002b4 	movhi	r2,16394
40096310:	10b73304 	addi	r2,r2,-9012
}
40096314:	e037883a 	mov	sp,fp
40096318:	dfc00117 	ldw	ra,4(sp)
4009631c:	df000017 	ldw	fp,0(sp)
40096320:	dec00204 	addi	sp,sp,8
40096324:	f800283a 	ret

40096328 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
40096328:	defff904 	addi	sp,sp,-28
4009632c:	dfc00615 	stw	ra,24(sp)
40096330:	df000515 	stw	fp,20(sp)
40096334:	df000504 	addi	fp,sp,20
40096338:	e13ffd15 	stw	r4,-12(fp)
4009633c:	e17ffe15 	stw	r5,-8(fp)
40096340:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
40096344:	e0bffd17 	ldw	r2,-12(fp)
40096348:	10000616 	blt	r2,zero,40096364 <write+0x3c>
4009634c:	e0bffd17 	ldw	r2,-12(fp)
40096350:	10c00324 	muli	r3,r2,12
40096354:	009002b4 	movhi	r2,16394
40096358:	10ab0d04 	addi	r2,r2,-21452
4009635c:	1885883a 	add	r2,r3,r2
40096360:	00000106 	br	40096368 <write+0x40>
40096364:	0005883a 	mov	r2,zero
40096368:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
4009636c:	e0bffb17 	ldw	r2,-20(fp)
40096370:	10002126 	beq	r2,zero,400963f8 <write+0xd0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
40096374:	e0bffb17 	ldw	r2,-20(fp)
40096378:	10800217 	ldw	r2,8(r2)
4009637c:	108000cc 	andi	r2,r2,3
40096380:	10001826 	beq	r2,zero,400963e4 <write+0xbc>
40096384:	e0bffb17 	ldw	r2,-20(fp)
40096388:	10800017 	ldw	r2,0(r2)
4009638c:	10800617 	ldw	r2,24(r2)
40096390:	10001426 	beq	r2,zero,400963e4 <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
40096394:	e0bffb17 	ldw	r2,-20(fp)
40096398:	10800017 	ldw	r2,0(r2)
4009639c:	10800617 	ldw	r2,24(r2)
400963a0:	e0ffff17 	ldw	r3,-4(fp)
400963a4:	e13ffb17 	ldw	r4,-20(fp)
400963a8:	e17ffe17 	ldw	r5,-8(fp)
400963ac:	180d883a 	mov	r6,r3
400963b0:	103ee83a 	callr	r2
400963b4:	e0bffc15 	stw	r2,-16(fp)
400963b8:	e0bffc17 	ldw	r2,-16(fp)
400963bc:	1000070e 	bge	r2,zero,400963dc <write+0xb4>
      {
        ALT_ERRNO = -rval;
400963c0:	00962d80 	call	400962d8 <alt_get_errno>
400963c4:	1007883a 	mov	r3,r2
400963c8:	e0bffc17 	ldw	r2,-16(fp)
400963cc:	0085c83a 	sub	r2,zero,r2
400963d0:	18800015 	stw	r2,0(r3)
        return -1;
400963d4:	00bfffc4 	movi	r2,-1
400963d8:	00000c06 	br	4009640c <write+0xe4>
      }
      return rval;
400963dc:	e0bffc17 	ldw	r2,-16(fp)
400963e0:	00000a06 	br	4009640c <write+0xe4>
    }
    else
    {
      ALT_ERRNO = EACCES;
400963e4:	00962d80 	call	400962d8 <alt_get_errno>
400963e8:	1007883a 	mov	r3,r2
400963ec:	00800344 	movi	r2,13
400963f0:	18800015 	stw	r2,0(r3)
400963f4:	00000406 	br	40096408 <write+0xe0>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
400963f8:	00962d80 	call	400962d8 <alt_get_errno>
400963fc:	1007883a 	mov	r3,r2
40096400:	00801444 	movi	r2,81
40096404:	18800015 	stw	r2,0(r3)
  }
  return -1;
40096408:	00bfffc4 	movi	r2,-1
}
4009640c:	e037883a 	mov	sp,fp
40096410:	dfc00117 	ldw	ra,4(sp)
40096414:	df000017 	ldw	fp,0(sp)
40096418:	dec00204 	addi	sp,sp,8
4009641c:	f800283a 	ret

40096420 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
40096420:	defffd04 	addi	sp,sp,-12
40096424:	dfc00215 	stw	ra,8(sp)
40096428:	df000115 	stw	fp,4(sp)
4009642c:	df000104 	addi	fp,sp,4
40096430:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
40096434:	e13fff17 	ldw	r4,-4(fp)
40096438:	015002b4 	movhi	r5,16394
4009643c:	296ff204 	addi	r5,r5,-16440
40096440:	0098c300 	call	40098c30 <alt_dev_llist_insert>
}
40096444:	e037883a 	mov	sp,fp
40096448:	dfc00117 	ldw	ra,4(sp)
4009644c:	df000017 	ldw	fp,0(sp)
40096450:	dec00204 	addi	sp,sp,8
40096454:	f800283a 	ret

40096458 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
40096458:	defffd04 	addi	sp,sp,-12
4009645c:	dfc00215 	stw	ra,8(sp)
40096460:	df000115 	stw	fp,4(sp)
40096464:	df000104 	addi	fp,sp,4
40096468:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( NIOS2_QSYS, nios2_qsys);
4009646c:	00994f00 	call	400994f0 <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
40096470:	00800044 	movi	r2,1
40096474:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
40096478:	e037883a 	mov	sp,fp
4009647c:	dfc00117 	ldw	ra,4(sp)
40096480:	df000017 	ldw	fp,0(sp)
40096484:	dec00204 	addi	sp,sp,8
40096488:	f800283a 	ret

4009648c <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
4009648c:	defffe04 	addi	sp,sp,-8
40096490:	dfc00115 	stw	ra,4(sp)
40096494:	df000015 	stw	fp,0(sp)
40096498:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER, timer);
4009649c:	01100534 	movhi	r4,16404
400964a0:	21081004 	addi	r4,r4,8256
400964a4:	000b883a 	mov	r5,zero
400964a8:	000d883a 	mov	r6,zero
400964ac:	01c0fa04 	movi	r7,1000
400964b0:	0097ad00 	call	40097ad0 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_EPCS_FLASH_CONTROLLER_INIT ( EPCS, epcs);
400964b4:	011002b4 	movhi	r4,16394
400964b8:	212b6d04 	addi	r4,r4,-21068
400964bc:	00965500 	call	40096550 <alt_epcs_flash_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
400964c0:	011002b4 	movhi	r4,16394
400964c4:	212baa04 	addi	r4,r4,-20824
400964c8:	000b883a 	mov	r5,zero
400964cc:	01800044 	movi	r6,1
400964d0:	00971740 	call	40097174 <altera_avalon_jtag_uart_init>
400964d4:	011002b4 	movhi	r4,16394
400964d8:	212ba004 	addi	r4,r4,-20864
400964dc:	00964200 	call	40096420 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS, sysid_qsys);
400964e0:	0001883a 	nop
    ALTERA_AVALON_UART_INIT ( UART_USB, uart_usb);
400964e4:	011002b4 	movhi	r4,16394
400964e8:	212fc204 	addi	r4,r4,-16632
400964ec:	000b883a 	mov	r5,zero
400964f0:	018000c4 	movi	r6,3
400964f4:	0097c680 	call	40097c68 <altera_avalon_uart_init>
400964f8:	011002b4 	movhi	r4,16394
400964fc:	212fb804 	addi	r4,r4,-16672
40096500:	00964200 	call	40096420 <alt_dev_reg>
}
40096504:	e037883a 	mov	sp,fp
40096508:	dfc00117 	ldw	ra,4(sp)
4009650c:	df000017 	ldw	fp,0(sp)
40096510:	dec00204 	addi	sp,sp,8
40096514:	f800283a 	ret

40096518 <alt_flash_device_register>:

typedef struct alt_flash_dev alt_flash_dev; 
typedef alt_flash_dev alt_flash_fd;

static ALT_INLINE int alt_flash_device_register( alt_flash_fd* fd)
{
40096518:	defffd04 	addi	sp,sp,-12
4009651c:	dfc00215 	stw	ra,8(sp)
40096520:	df000115 	stw	fp,4(sp)
40096524:	df000104 	addi	fp,sp,4
40096528:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_flash_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) fd, &alt_flash_dev_list);
4009652c:	e13fff17 	ldw	r4,-4(fp)
40096530:	015002b4 	movhi	r5,16394
40096534:	296ffa04 	addi	r5,r5,-16408
40096538:	0098c300 	call	40098c30 <alt_dev_llist_insert>
}
4009653c:	e037883a 	mov	sp,fp
40096540:	dfc00117 	ldw	ra,4(sp)
40096544:	df000017 	ldw	fp,0(sp)
40096548:	dec00204 	addi	sp,sp,8
4009654c:	f800283a 	ret

40096550 <alt_epcs_flash_init>:
/*
 * alt_epcs_flash_init
 *
 */
int alt_epcs_flash_init(alt_flash_epcs_dev* flash)
{
40096550:	defffc04 	addi	sp,sp,-16
40096554:	dfc00315 	stw	ra,12(sp)
40096558:	df000215 	stw	fp,8(sp)
4009655c:	df000204 	addi	fp,sp,8
40096560:	e13fff15 	stw	r4,-4(fp)
  int ret_code = 0;
40096564:	e03ffe15 	stw	zero,-8(fp)

  /* Set up function pointers and/or data structures as needed. */
  ret_code = alt_epcs_flash_query(flash);
40096568:	e13fff17 	ldw	r4,-4(fp)
4009656c:	00965a40 	call	400965a4 <alt_epcs_flash_query>
40096570:	e0bffe15 	stw	r2,-8(fp)
  */

  /*
  *  Register this device as a valid flash device type
  */
  if (!ret_code)
40096574:	e0bffe17 	ldw	r2,-8(fp)
40096578:	1000041e 	bne	r2,zero,4009658c <alt_epcs_flash_init+0x3c>
    ret_code = alt_flash_device_register(&(flash->dev));
4009657c:	e0bfff17 	ldw	r2,-4(fp)
40096580:	1009883a 	mov	r4,r2
40096584:	00965180 	call	40096518 <alt_flash_device_register>
40096588:	e0bffe15 	stw	r2,-8(fp)

  return ret_code;
4009658c:	e0bffe17 	ldw	r2,-8(fp)
}
40096590:	e037883a 	mov	sp,fp
40096594:	dfc00117 	ldw	ra,4(sp)
40096598:	df000017 	ldw	fp,0(sp)
4009659c:	dec00204 	addi	sp,sp,8
400965a0:	f800283a 	ret

400965a4 <alt_epcs_flash_query>:


static int alt_epcs_flash_query(alt_flash_epcs_dev* flash)
{
400965a4:	defffc04 	addi	sp,sp,-16
400965a8:	dfc00315 	stw	ra,12(sp)
400965ac:	df000215 	stw	fp,8(sp)
400965b0:	df000204 	addi	fp,sp,8
400965b4:	e13fff15 	stw	r4,-4(fp)
  int ret_code = 0;
400965b8:	e03ffe15 	stw	zero,-8(fp)
   * reset the device, or whatever, to ensure that
   * it's in a known working state.
  */
  
  /* Disable 4-bytes address mode. */
  flash->four_bytes_mode = 0;
400965bc:	e0bfff17 	ldw	r2,-4(fp)
400965c0:	10003215 	stw	zero,200(r2)
  
  /* Send the RES command sequence */
  flash->silicon_id =
    epcs_read_electronic_signature(flash->register_base);
400965c4:	e0bfff17 	ldw	r2,-4(fp)
400965c8:	10802e17 	ldw	r2,184(r2)
400965cc:	1009883a 	mov	r4,r2
400965d0:	00988d40 	call	400988d4 <epcs_read_electronic_signature>
  
  /* Disable 4-bytes address mode. */
  flash->four_bytes_mode = 0;
  
  /* Send the RES command sequence */
  flash->silicon_id =
400965d4:	10c03fcc 	andi	r3,r2,255
400965d8:	e0bfff17 	ldw	r2,-4(fp)
400965dc:	10c03015 	stw	r3,192(r2)
    epcs_read_electronic_signature(flash->register_base);

  /* Fill in all device-specific parameters. */
  if (flash->silicon_id == 0x16) /* EPCS64 */
400965e0:	e0bfff17 	ldw	r2,-4(fp)
400965e4:	10803017 	ldw	r2,192(r2)
400965e8:	10800598 	cmpnei	r2,r2,22
400965ec:	10000a1e 	bne	r2,zero,40096618 <alt_epcs_flash_query+0x74>
  {
    flash->dev.region_info[0].region_size = 64 * 1024 * 1024 / 8;
400965f0:	e0bfff17 	ldw	r2,-4(fp)
400965f4:	00c02034 	movhi	r3,128
400965f8:	10c00e15 	stw	r3,56(r2)
    flash->dev.region_info[0].number_of_blocks = 128;
400965fc:	e0bfff17 	ldw	r2,-4(fp)
40096600:	00c02004 	movi	r3,128
40096604:	10c00f15 	stw	r3,60(r2)
    flash->dev.region_info[0].block_size = 65536;
40096608:	e0bfff17 	ldw	r2,-4(fp)
4009660c:	00c00074 	movhi	r3,1
40096610:	10c01015 	stw	r3,64(r2)
40096614:	0000ce06 	br	40096950 <alt_epcs_flash_query+0x3ac>
  }
  else if (flash->silicon_id == 0x14) /* EPCS16 */
40096618:	e0bfff17 	ldw	r2,-4(fp)
4009661c:	10803017 	ldw	r2,192(r2)
40096620:	10800518 	cmpnei	r2,r2,20
40096624:	10000a1e 	bne	r2,zero,40096650 <alt_epcs_flash_query+0xac>
  {
    flash->dev.region_info[0].region_size = 16 * 1024 * 1024 / 8;
40096628:	e0bfff17 	ldw	r2,-4(fp)
4009662c:	00c00834 	movhi	r3,32
40096630:	10c00e15 	stw	r3,56(r2)
    flash->dev.region_info[0].number_of_blocks = 32;
40096634:	e0bfff17 	ldw	r2,-4(fp)
40096638:	00c00804 	movi	r3,32
4009663c:	10c00f15 	stw	r3,60(r2)
    flash->dev.region_info[0].block_size = 65536;
40096640:	e0bfff17 	ldw	r2,-4(fp)
40096644:	00c00074 	movhi	r3,1
40096648:	10c01015 	stw	r3,64(r2)
4009664c:	0000c006 	br	40096950 <alt_epcs_flash_query+0x3ac>
  }
  else if (flash->silicon_id == 0x13) /* EPCS8 */
40096650:	e0bfff17 	ldw	r2,-4(fp)
40096654:	10803017 	ldw	r2,192(r2)
40096658:	108004d8 	cmpnei	r2,r2,19
4009665c:	10000a1e 	bne	r2,zero,40096688 <alt_epcs_flash_query+0xe4>
  {
    flash->dev.region_info[0].region_size = 8 * 1024 * 1024 / 8;
40096660:	e0bfff17 	ldw	r2,-4(fp)
40096664:	00c00434 	movhi	r3,16
40096668:	10c00e15 	stw	r3,56(r2)
    flash->dev.region_info[0].number_of_blocks = 16;
4009666c:	e0bfff17 	ldw	r2,-4(fp)
40096670:	00c00404 	movi	r3,16
40096674:	10c00f15 	stw	r3,60(r2)
    flash->dev.region_info[0].block_size = 65536;
40096678:	e0bfff17 	ldw	r2,-4(fp)
4009667c:	00c00074 	movhi	r3,1
40096680:	10c01015 	stw	r3,64(r2)
40096684:	0000b206 	br	40096950 <alt_epcs_flash_query+0x3ac>
  }
  else if (flash->silicon_id == 0x12) /* EPCS4 */
40096688:	e0bfff17 	ldw	r2,-4(fp)
4009668c:	10803017 	ldw	r2,192(r2)
40096690:	10800498 	cmpnei	r2,r2,18
40096694:	10000a1e 	bne	r2,zero,400966c0 <alt_epcs_flash_query+0x11c>
  {
    flash->dev.region_info[0].region_size = 4 * 1024 * 1024 / 8;
40096698:	e0bfff17 	ldw	r2,-4(fp)
4009669c:	00c00234 	movhi	r3,8
400966a0:	10c00e15 	stw	r3,56(r2)
    flash->dev.region_info[0].number_of_blocks = 8;
400966a4:	e0bfff17 	ldw	r2,-4(fp)
400966a8:	00c00204 	movi	r3,8
400966ac:	10c00f15 	stw	r3,60(r2)
    flash->dev.region_info[0].block_size = 65536;
400966b0:	e0bfff17 	ldw	r2,-4(fp)
400966b4:	00c00074 	movhi	r3,1
400966b8:	10c01015 	stw	r3,64(r2)
400966bc:	0000a406 	br	40096950 <alt_epcs_flash_query+0x3ac>
  }
  else if (flash->silicon_id == 0x10) /* EPCS1 */
400966c0:	e0bfff17 	ldw	r2,-4(fp)
400966c4:	10803017 	ldw	r2,192(r2)
400966c8:	10800418 	cmpnei	r2,r2,16
400966cc:	10000a1e 	bne	r2,zero,400966f8 <alt_epcs_flash_query+0x154>
  {
    flash->dev.region_info[0].region_size = 1 * 1024 * 1024 / 8;
400966d0:	e0bfff17 	ldw	r2,-4(fp)
400966d4:	00c000b4 	movhi	r3,2
400966d8:	10c00e15 	stw	r3,56(r2)
    flash->dev.region_info[0].number_of_blocks = 4;
400966dc:	e0bfff17 	ldw	r2,-4(fp)
400966e0:	00c00104 	movi	r3,4
400966e4:	10c00f15 	stw	r3,60(r2)
    flash->dev.region_info[0].block_size = 32768;
400966e8:	e0bfff17 	ldw	r2,-4(fp)
400966ec:	00e00014 	movui	r3,32768
400966f0:	10c01015 	stw	r3,64(r2)
400966f4:	00009606 	br	40096950 <alt_epcs_flash_query+0x3ac>
  {
    /* 
     * Read electronic signature doesn't work for newer devices; try 
     * the "Read Device ID" command" before giving up.
     */
    flash->silicon_id = epcs_read_device_id(flash->register_base);
400966f8:	e0bfff17 	ldw	r2,-4(fp)
400966fc:	10802e17 	ldw	r2,184(r2)
40096700:	1009883a 	mov	r4,r2
40096704:	009893c0 	call	4009893c <epcs_read_device_id>
40096708:	1007883a 	mov	r3,r2
4009670c:	e0bfff17 	ldw	r2,-4(fp)
40096710:	10c03015 	stw	r3,192(r2)
    /*
     * Last byte is the density ID. Note the difference between
     * EPCS128 and EPCQ128 -- arranged differently, though the 
     * least significant byte of each is '0x18'.
     */
    if((flash->silicon_id & 0xFFFFFF) == 0x20BA15) /* EPCQ16 */
40096714:	e0bfff17 	ldw	r2,-4(fp)
40096718:	10c03017 	ldw	r3,192(r2)
4009671c:	00804034 	movhi	r2,256
40096720:	10bfffc4 	addi	r2,r2,-1
40096724:	1886703a 	and	r3,r3,r2
40096728:	00800874 	movhi	r2,33
4009672c:	10ae8544 	addi	r2,r2,-17899
40096730:	18800a1e 	bne	r3,r2,4009675c <alt_epcs_flash_query+0x1b8>
    {
      flash->dev.region_info[0].region_size = 16 * 1024 * 1024 / 8;
40096734:	e0bfff17 	ldw	r2,-4(fp)
40096738:	00c00834 	movhi	r3,32
4009673c:	10c00e15 	stw	r3,56(r2)
      flash->dev.region_info[0].number_of_blocks = 32; /* number of sectors */
40096740:	e0bfff17 	ldw	r2,-4(fp)
40096744:	00c00804 	movi	r3,32
40096748:	10c00f15 	stw	r3,60(r2)
      flash->dev.region_info[0].block_size = 65536;  /* sector size */
4009674c:	e0bfff17 	ldw	r2,-4(fp)
40096750:	00c00074 	movhi	r3,1
40096754:	10c01015 	stw	r3,64(r2)
40096758:	00007d06 	br	40096950 <alt_epcs_flash_query+0x3ac>
    }
    else if((flash->silicon_id & 0xFFFFFF) == 0x20BA16) /* EPCQ32 */
4009675c:	e0bfff17 	ldw	r2,-4(fp)
40096760:	10c03017 	ldw	r3,192(r2)
40096764:	00804034 	movhi	r2,256
40096768:	10bfffc4 	addi	r2,r2,-1
4009676c:	1886703a 	and	r3,r3,r2
40096770:	00800874 	movhi	r2,33
40096774:	10ae8584 	addi	r2,r2,-17898
40096778:	18800a1e 	bne	r3,r2,400967a4 <alt_epcs_flash_query+0x200>
    {
      flash->dev.region_info[0].region_size = 32 * 1024 * 1024 / 8;
4009677c:	e0bfff17 	ldw	r2,-4(fp)
40096780:	00c01034 	movhi	r3,64
40096784:	10c00e15 	stw	r3,56(r2)
      flash->dev.region_info[0].number_of_blocks = 64; /* number of sectors */
40096788:	e0bfff17 	ldw	r2,-4(fp)
4009678c:	00c01004 	movi	r3,64
40096790:	10c00f15 	stw	r3,60(r2)
      flash->dev.region_info[0].block_size = 65536;  /* sector size */
40096794:	e0bfff17 	ldw	r2,-4(fp)
40096798:	00c00074 	movhi	r3,1
4009679c:	10c01015 	stw	r3,64(r2)
400967a0:	00006b06 	br	40096950 <alt_epcs_flash_query+0x3ac>
    }
    else if((flash->silicon_id & 0xFFFFFF) == 0x20BA17) /* EPCQ64 */
400967a4:	e0bfff17 	ldw	r2,-4(fp)
400967a8:	10c03017 	ldw	r3,192(r2)
400967ac:	00804034 	movhi	r2,256
400967b0:	10bfffc4 	addi	r2,r2,-1
400967b4:	1886703a 	and	r3,r3,r2
400967b8:	00800874 	movhi	r2,33
400967bc:	10ae85c4 	addi	r2,r2,-17897
400967c0:	18800a1e 	bne	r3,r2,400967ec <alt_epcs_flash_query+0x248>
    {
      flash->dev.region_info[0].region_size = 64 * 1024 * 1024 / 8;
400967c4:	e0bfff17 	ldw	r2,-4(fp)
400967c8:	00c02034 	movhi	r3,128
400967cc:	10c00e15 	stw	r3,56(r2)
      flash->dev.region_info[0].number_of_blocks = 128; /* number of sectors */
400967d0:	e0bfff17 	ldw	r2,-4(fp)
400967d4:	00c02004 	movi	r3,128
400967d8:	10c00f15 	stw	r3,60(r2)
      flash->dev.region_info[0].block_size = 65536;  /* sector size */
400967dc:	e0bfff17 	ldw	r2,-4(fp)
400967e0:	00c00074 	movhi	r3,1
400967e4:	10c01015 	stw	r3,64(r2)
400967e8:	00005906 	br	40096950 <alt_epcs_flash_query+0x3ac>
    }
    else if((flash->silicon_id & 0xFFFFFF) == 0x20BA18) /* EPCQ128 */
400967ec:	e0bfff17 	ldw	r2,-4(fp)
400967f0:	10c03017 	ldw	r3,192(r2)
400967f4:	00804034 	movhi	r2,256
400967f8:	10bfffc4 	addi	r2,r2,-1
400967fc:	1886703a 	and	r3,r3,r2
40096800:	00800874 	movhi	r2,33
40096804:	10ae8604 	addi	r2,r2,-17896
40096808:	18800a1e 	bne	r3,r2,40096834 <alt_epcs_flash_query+0x290>
    {
      flash->dev.region_info[0].region_size = 128 * 1024 * 1024 / 8;
4009680c:	e0bfff17 	ldw	r2,-4(fp)
40096810:	00c04034 	movhi	r3,256
40096814:	10c00e15 	stw	r3,56(r2)
      flash->dev.region_info[0].number_of_blocks = 256; /* number of sectors */
40096818:	e0bfff17 	ldw	r2,-4(fp)
4009681c:	00c04004 	movi	r3,256
40096820:	10c00f15 	stw	r3,60(r2)
      flash->dev.region_info[0].block_size = 65536;  /* sector size */
40096824:	e0bfff17 	ldw	r2,-4(fp)
40096828:	00c00074 	movhi	r3,1
4009682c:	10c01015 	stw	r3,64(r2)
40096830:	00004706 	br	40096950 <alt_epcs_flash_query+0x3ac>
    }
    else if((flash->silicon_id & 0xFF) == 0x18) /* EPCS128 */
40096834:	e0bfff17 	ldw	r2,-4(fp)
40096838:	10803017 	ldw	r2,192(r2)
4009683c:	10803fcc 	andi	r2,r2,255
40096840:	10800618 	cmpnei	r2,r2,24
40096844:	10000a1e 	bne	r2,zero,40096870 <alt_epcs_flash_query+0x2cc>
    {
      flash->dev.region_info[0].region_size = 128 * 1024 * 1024 / 8;
40096848:	e0bfff17 	ldw	r2,-4(fp)
4009684c:	00c04034 	movhi	r3,256
40096850:	10c00e15 	stw	r3,56(r2)
      flash->dev.region_info[0].number_of_blocks = 64;
40096854:	e0bfff17 	ldw	r2,-4(fp)
40096858:	00c01004 	movi	r3,64
4009685c:	10c00f15 	stw	r3,60(r2)
      flash->dev.region_info[0].block_size = 262144;
40096860:	e0bfff17 	ldw	r2,-4(fp)
40096864:	00c00134 	movhi	r3,4
40096868:	10c01015 	stw	r3,64(r2)
4009686c:	00003806 	br	40096950 <alt_epcs_flash_query+0x3ac>
    }
    else if((flash->silicon_id & 0xFF ) == 0x19) /* EPCQ256 */
40096870:	e0bfff17 	ldw	r2,-4(fp)
40096874:	10803017 	ldw	r2,192(r2)
40096878:	10803fcc 	andi	r2,r2,255
4009687c:	10800658 	cmpnei	r2,r2,25
40096880:	10000d1e 	bne	r2,zero,400968b8 <alt_epcs_flash_query+0x314>
    {
      flash->dev.region_info[0].region_size = 256 * 1024 * 1024 / 8;
40096884:	e0bfff17 	ldw	r2,-4(fp)
40096888:	00c08034 	movhi	r3,512
4009688c:	10c00e15 	stw	r3,56(r2)
      flash->dev.region_info[0].number_of_blocks = 512; /* number of sectors */
40096890:	e0bfff17 	ldw	r2,-4(fp)
40096894:	00c08004 	movi	r3,512
40096898:	10c00f15 	stw	r3,60(r2)
      flash->dev.region_info[0].block_size = 65536;  /* sector size */
4009689c:	e0bfff17 	ldw	r2,-4(fp)
400968a0:	00c00074 	movhi	r3,1
400968a4:	10c01015 	stw	r3,64(r2)
       * must first be programmed into the device, though. To complicate things, 
       * other Altera IP expects the chip to be in 3 byte address mode when they 
       * start using it. To be nice, we'll place the device into 4-byte address mode
       * when we need to, and take it back out when we're done.
       */
      flash->four_bytes_mode = 1;
400968a8:	e0bfff17 	ldw	r2,-4(fp)
400968ac:	00c00044 	movi	r3,1
400968b0:	10c03215 	stw	r3,200(r2)
400968b4:	00002606 	br	40096950 <alt_epcs_flash_query+0x3ac>
    }
    else if((flash->silicon_id & 0xFF ) == 0x20) /* EPCQ512 */
400968b8:	e0bfff17 	ldw	r2,-4(fp)
400968bc:	10803017 	ldw	r2,192(r2)
400968c0:	10803fcc 	andi	r2,r2,255
400968c4:	10800818 	cmpnei	r2,r2,32
400968c8:	10000d1e 	bne	r2,zero,40096900 <alt_epcs_flash_query+0x35c>
    {
      flash->dev.region_info[0].region_size = 512 * 1024 * 1024 / 8;
400968cc:	e0bfff17 	ldw	r2,-4(fp)
400968d0:	00c10034 	movhi	r3,1024
400968d4:	10c00e15 	stw	r3,56(r2)
      flash->dev.region_info[0].number_of_blocks = 1024; /* number of sectors */
400968d8:	e0bfff17 	ldw	r2,-4(fp)
400968dc:	00c10004 	movi	r3,1024
400968e0:	10c00f15 	stw	r3,60(r2)
      flash->dev.region_info[0].block_size = 65536;  /* sector size */
400968e4:	e0bfff17 	ldw	r2,-4(fp)
400968e8:	00c00074 	movhi	r3,1
400968ec:	10c01015 	stw	r3,64(r2)

      /* Enable 4-bytes address mode if the device density is greater than 256Mbit. */
      flash->four_bytes_mode = 1;
400968f0:	e0bfff17 	ldw	r2,-4(fp)
400968f4:	00c00044 	movi	r3,1
400968f8:	10c03215 	stw	r3,200(r2)
400968fc:	00001406 	br	40096950 <alt_epcs_flash_query+0x3ac>
    }
    else if((flash->silicon_id & 0xFF ) == 0x21) /* EPCQ1024 */
40096900:	e0bfff17 	ldw	r2,-4(fp)
40096904:	10803017 	ldw	r2,192(r2)
40096908:	10803fcc 	andi	r2,r2,255
4009690c:	10800858 	cmpnei	r2,r2,33
40096910:	10000d1e 	bne	r2,zero,40096948 <alt_epcs_flash_query+0x3a4>
    {
      flash->dev.region_info[0].region_size = 1024 * 1024 * 1024 / 8;
40096914:	e0bfff17 	ldw	r2,-4(fp)
40096918:	00c20034 	movhi	r3,2048
4009691c:	10c00e15 	stw	r3,56(r2)
      flash->dev.region_info[0].number_of_blocks = 2048; /* number of sectors */
40096920:	e0bfff17 	ldw	r2,-4(fp)
40096924:	00c20004 	movi	r3,2048
40096928:	10c00f15 	stw	r3,60(r2)
      flash->dev.region_info[0].block_size = 65536;  /* sector size */
4009692c:	e0bfff17 	ldw	r2,-4(fp)
40096930:	00c00074 	movhi	r3,1
40096934:	10c01015 	stw	r3,64(r2)

      /* Enable 4-bytes address mode if the device density is greater than 256Mbit. */
      flash->four_bytes_mode = 1;
40096938:	e0bfff17 	ldw	r2,-4(fp)
4009693c:	00c00044 	movi	r3,1
40096940:	10c03215 	stw	r3,200(r2)
40096944:	00000206 	br	40096950 <alt_epcs_flash_query+0x3ac>
    }
    else 
    {
      ret_code = -ENODEV; /* No known device found! */
40096948:	00bffb44 	movi	r2,-19
4009694c:	e0bffe15 	stw	r2,-8(fp)
    }
  }
  
  flash->size_in_bytes = flash->dev.region_info[0].region_size;
40096950:	e0bfff17 	ldw	r2,-4(fp)
40096954:	10800e17 	ldw	r2,56(r2)
40096958:	1007883a 	mov	r3,r2
4009695c:	e0bfff17 	ldw	r2,-4(fp)
40096960:	10c02f15 	stw	r3,188(r2)
  flash->dev.number_of_regions = 1;
40096964:	e0bfff17 	ldw	r2,-4(fp)
40096968:	00c00044 	movi	r3,1
4009696c:	10c00c15 	stw	r3,48(r2)
  flash->dev.region_info[0].offset = 0;
40096970:	e0bfff17 	ldw	r2,-4(fp)
40096974:	10000d15 	stw	zero,52(r2)
  flash->page_size = 256;
40096978:	e0bfff17 	ldw	r2,-4(fp)
4009697c:	00c04004 	movi	r3,256
40096980:	10c03115 	stw	r3,196(r2)

  /* Consider clearing all BP bits here. */
  return ret_code;
40096984:	e0bffe17 	ldw	r2,-8(fp)
}
40096988:	e037883a 	mov	sp,fp
4009698c:	dfc00117 	ldw	ra,4(sp)
40096990:	df000017 	ldw	fp,0(sp)
40096994:	dec00204 	addi	sp,sp,8
40096998:	f800283a 	ret

4009699c <alt_epcs_flash_memcmp>:
  alt_flash_dev* flash_info,
  const void* src_buffer,
  int offset,
  size_t n
)
{
4009699c:	deffee04 	addi	sp,sp,-72
400969a0:	dfc01115 	stw	ra,68(sp)
400969a4:	df001015 	stw	fp,64(sp)
400969a8:	df001004 	addi	fp,sp,64
400969ac:	e13ffc15 	stw	r4,-16(fp)
400969b0:	e17ffd15 	stw	r5,-12(fp)
400969b4:	e1bffe15 	stw	r6,-8(fp)
400969b8:	e1ffff15 	stw	r7,-4(fp)
  /*
   * Compare chunks of memory at a time, for better serial-flash
   * read efficiency.
   */
  alt_u8 chunk_buffer[32];
  const int chunk_size = sizeof(chunk_buffer) / sizeof(*chunk_buffer);
400969bc:	00800804 	movi	r2,32
400969c0:	e0bff115 	stw	r2,-60(fp)
  int current_offset = 0;
400969c4:	e03ff015 	stw	zero,-64(fp)

  while (n > 0)
400969c8:	00002606 	br	40096a64 <alt_epcs_flash_memcmp+0xc8>
  {
    int this_chunk_size = n > chunk_size ? chunk_size : n;
400969cc:	e0bff117 	ldw	r2,-60(fp)
400969d0:	e0ffff17 	ldw	r3,-4(fp)
400969d4:	1880012e 	bgeu	r3,r2,400969dc <alt_epcs_flash_memcmp+0x40>
400969d8:	1805883a 	mov	r2,r3
400969dc:	e0bff215 	stw	r2,-56(fp)
    int this_chunk_cmp;

    if (
      alt_epcs_flash_read(
400969e0:	e0fffe17 	ldw	r3,-8(fp)
400969e4:	e0bff017 	ldw	r2,-64(fp)
400969e8:	1887883a 	add	r3,r3,r2
400969ec:	e0bff404 	addi	r2,fp,-48
400969f0:	e13ffc17 	ldw	r4,-16(fp)
400969f4:	180b883a 	mov	r5,r3
400969f8:	100d883a 	mov	r6,r2
400969fc:	e1fff217 	ldw	r7,-56(fp)
40096a00:	0096f780 	call	40096f78 <alt_epcs_flash_read>
  while (n > 0)
  {
    int this_chunk_size = n > chunk_size ? chunk_size : n;
    int this_chunk_cmp;

    if (
40096a04:	1000020e 	bge	r2,zero,40096a10 <alt_epcs_flash_memcmp+0x74>
    {
      /*
      * If the read fails, I'm not sure what the appropriate action is.
      * Compare success seems wrong, so make it compare fail.
      */
      return -1;
40096a08:	00bfffc4 	movi	r2,-1
40096a0c:	00001806 	br	40096a70 <alt_epcs_flash_memcmp+0xd4>
    }

    /* Compare this chunk against the source memory buffer. */
    this_chunk_cmp = memcmp(&((unsigned char*)(src_buffer))[current_offset], chunk_buffer, this_chunk_size);
40096a10:	e0bff017 	ldw	r2,-64(fp)
40096a14:	e0fffd17 	ldw	r3,-12(fp)
40096a18:	1889883a 	add	r4,r3,r2
40096a1c:	e0bff217 	ldw	r2,-56(fp)
40096a20:	e0fff404 	addi	r3,fp,-48
40096a24:	180b883a 	mov	r5,r3
40096a28:	100d883a 	mov	r6,r2
40096a2c:	0099a440 	call	40099a44 <memcmp>
40096a30:	e0bff315 	stw	r2,-52(fp)
    if (this_chunk_cmp)
40096a34:	e0bff317 	ldw	r2,-52(fp)
40096a38:	10000226 	beq	r2,zero,40096a44 <alt_epcs_flash_memcmp+0xa8>
    {
      return this_chunk_cmp;
40096a3c:	e0bff317 	ldw	r2,-52(fp)
40096a40:	00000b06 	br	40096a70 <alt_epcs_flash_memcmp+0xd4>
    }

    n -= this_chunk_size;
40096a44:	e0bff217 	ldw	r2,-56(fp)
40096a48:	e0ffff17 	ldw	r3,-4(fp)
40096a4c:	1885c83a 	sub	r2,r3,r2
40096a50:	e0bfff15 	stw	r2,-4(fp)
    current_offset += this_chunk_size;
40096a54:	e0fff017 	ldw	r3,-64(fp)
40096a58:	e0bff217 	ldw	r2,-56(fp)
40096a5c:	1885883a 	add	r2,r3,r2
40096a60:	e0bff015 	stw	r2,-64(fp)
   */
  alt_u8 chunk_buffer[32];
  const int chunk_size = sizeof(chunk_buffer) / sizeof(*chunk_buffer);
  int current_offset = 0;

  while (n > 0)
40096a64:	e0bfff17 	ldw	r2,-4(fp)
40096a68:	103fd81e 	bne	r2,zero,400969cc <__alt_mem_epcs+0xfff559cc>
  }

  /*
   * If execution made it to this point, compare is successful.
   */
  return 0;
40096a6c:	0005883a 	mov	r2,zero
}
40096a70:	e037883a 	mov	sp,fp
40096a74:	dfc00117 	ldw	ra,4(sp)
40096a78:	df000017 	ldw	fp,0(sp)
40096a7c:	dec00204 	addi	sp,sp,8
40096a80:	f800283a 	ret

40096a84 <alt_epcs_flash_write>:
 * large buffer to tie up in our programming library, when not all users will
 * want that functionality.
 */
int alt_epcs_flash_write(alt_flash_dev* flash_info, int offset,
                          const void* src_addr, int length)
{
40096a84:	defff404 	addi	sp,sp,-48
40096a88:	dfc00b15 	stw	ra,44(sp)
40096a8c:	df000a15 	stw	fp,40(sp)
40096a90:	df000a04 	addi	fp,sp,40
40096a94:	e13ffc15 	stw	r4,-16(fp)
40096a98:	e17ffd15 	stw	r5,-12(fp)
40096a9c:	e1bffe15 	stw	r6,-8(fp)
40096aa0:	e1ffff15 	stw	r7,-4(fp)
  int         ret_code = 0;
40096aa4:	e03ff715 	stw	zero,-36(fp)
  int         current_offset;

  /*
   * First and foremost which sectors are affected?
   */
  for(i = 0; i < flash_info->number_of_regions; i++)
40096aa8:	e03ff815 	stw	zero,-32(fp)
40096aac:	00008306 	br	40096cbc <alt_epcs_flash_write+0x238>
  {
    /* Is it in this erase block region?*/
    if((offset >= flash_info->region_info[i].offset) &&
40096ab0:	e0fffc17 	ldw	r3,-16(fp)
40096ab4:	e0bff817 	ldw	r2,-32(fp)
40096ab8:	1004913a 	slli	r2,r2,4
40096abc:	1885883a 	add	r2,r3,r2
40096ac0:	10800d04 	addi	r2,r2,52
40096ac4:	10800017 	ldw	r2,0(r2)
40096ac8:	e0fffd17 	ldw	r3,-12(fp)
40096acc:	18807816 	blt	r3,r2,40096cb0 <alt_epcs_flash_write+0x22c>
      (offset < (flash_info->region_info[i].offset +
40096ad0:	e0fffc17 	ldw	r3,-16(fp)
40096ad4:	e0bff817 	ldw	r2,-32(fp)
40096ad8:	1004913a 	slli	r2,r2,4
40096adc:	1885883a 	add	r2,r3,r2
40096ae0:	10800d04 	addi	r2,r2,52
40096ae4:	10c00017 	ldw	r3,0(r2)
      flash_info->region_info[i].region_size)))
40096ae8:	e13ffc17 	ldw	r4,-16(fp)
40096aec:	e0bff817 	ldw	r2,-32(fp)
40096af0:	1004913a 	slli	r2,r2,4
40096af4:	2085883a 	add	r2,r4,r2
40096af8:	10800e04 	addi	r2,r2,56
40096afc:	10800017 	ldw	r2,0(r2)
   */
  for(i = 0; i < flash_info->number_of_regions; i++)
  {
    /* Is it in this erase block region?*/
    if((offset >= flash_info->region_info[i].offset) &&
      (offset < (flash_info->region_info[i].offset +
40096b00:	1885883a 	add	r2,r3,r2
   * First and foremost which sectors are affected?
   */
  for(i = 0; i < flash_info->number_of_regions; i++)
  {
    /* Is it in this erase block region?*/
    if((offset >= flash_info->region_info[i].offset) &&
40096b04:	e0fffd17 	ldw	r3,-12(fp)
40096b08:	1880690e 	bge	r3,r2,40096cb0 <alt_epcs_flash_write+0x22c>
      (offset < (flash_info->region_info[i].offset +
      flash_info->region_info[i].region_size)))
    {
      current_offset = flash_info->region_info[i].offset;
40096b0c:	e0fffc17 	ldw	r3,-16(fp)
40096b10:	e0bff817 	ldw	r2,-32(fp)
40096b14:	1004913a 	slli	r2,r2,4
40096b18:	1885883a 	add	r2,r3,r2
40096b1c:	10800d04 	addi	r2,r2,52
40096b20:	10800017 	ldw	r2,0(r2)
40096b24:	e0bffa15 	stw	r2,-24(fp)

      for(j=0;j<flash_info->region_info[i].number_of_blocks;j++)
40096b28:	e03ff915 	stw	zero,-28(fp)
40096b2c:	00005806 	br	40096c90 <alt_epcs_flash_write+0x20c>
      {
        if ((offset >= current_offset ) &&
40096b30:	e0fffd17 	ldw	r3,-12(fp)
40096b34:	e0bffa17 	ldw	r2,-24(fp)
40096b38:	18804916 	blt	r3,r2,40096c60 <alt_epcs_flash_write+0x1dc>
            (offset < (current_offset +
            flash_info->region_info[i].block_size)))
40096b3c:	e0fffc17 	ldw	r3,-16(fp)
40096b40:	e0bff817 	ldw	r2,-32(fp)
40096b44:	10800104 	addi	r2,r2,4
40096b48:	1004913a 	slli	r2,r2,4
40096b4c:	1885883a 	add	r2,r3,r2
40096b50:	10c00017 	ldw	r3,0(r2)
      current_offset = flash_info->region_info[i].offset;

      for(j=0;j<flash_info->region_info[i].number_of_blocks;j++)
      {
        if ((offset >= current_offset ) &&
            (offset < (current_offset +
40096b54:	e0bffa17 	ldw	r2,-24(fp)
40096b58:	1885883a 	add	r2,r3,r2
    {
      current_offset = flash_info->region_info[i].offset;

      for(j=0;j<flash_info->region_info[i].number_of_blocks;j++)
      {
        if ((offset >= current_offset ) &&
40096b5c:	e0fffd17 	ldw	r3,-12(fp)
40096b60:	18803f0e 	bge	r3,r2,40096c60 <alt_epcs_flash_write+0x1dc>
        {
          /*
           * Check if the contents of the block are different
           * from the data we wish to put there
           */
          data_to_write = ( current_offset + flash_info->region_info[i].block_size
40096b64:	e0fffc17 	ldw	r3,-16(fp)
40096b68:	e0bff817 	ldw	r2,-32(fp)
40096b6c:	10800104 	addi	r2,r2,4
40096b70:	1004913a 	slli	r2,r2,4
40096b74:	1885883a 	add	r2,r3,r2
40096b78:	10c00017 	ldw	r3,0(r2)
40096b7c:	e0bffa17 	ldw	r2,-24(fp)
40096b80:	1887883a 	add	r3,r3,r2
40096b84:	e0bffd17 	ldw	r2,-12(fp)
40096b88:	1885c83a 	sub	r2,r3,r2
40096b8c:	e0bffb15 	stw	r2,-20(fp)
                            - offset);
          data_to_write = MIN(data_to_write, length);
40096b90:	e0fffb17 	ldw	r3,-20(fp)
40096b94:	e0bfff17 	ldw	r2,-4(fp)
40096b98:	1880010e 	bge	r3,r2,40096ba0 <alt_epcs_flash_write+0x11c>
40096b9c:	1805883a 	mov	r2,r3
40096ba0:	e0bffb15 	stw	r2,-20(fp)

          if(alt_epcs_flash_memcmp(flash_info, src_addr, offset, data_to_write))
40096ba4:	e0bffb17 	ldw	r2,-20(fp)
40096ba8:	e13ffc17 	ldw	r4,-16(fp)
40096bac:	e17ffe17 	ldw	r5,-8(fp)
40096bb0:	e1bffd17 	ldw	r6,-12(fp)
40096bb4:	100f883a 	mov	r7,r2
40096bb8:	009699c0 	call	4009699c <alt_epcs_flash_memcmp>
40096bbc:	10001226 	beq	r2,zero,40096c08 <alt_epcs_flash_write+0x184>
          {
            ret_code = (*flash_info->erase_block)(flash_info, current_offset);
40096bc0:	e0bffc17 	ldw	r2,-16(fp)
40096bc4:	10800817 	ldw	r2,32(r2)
40096bc8:	e13ffc17 	ldw	r4,-16(fp)
40096bcc:	e17ffa17 	ldw	r5,-24(fp)
40096bd0:	103ee83a 	callr	r2
40096bd4:	e0bff715 	stw	r2,-36(fp)

            if (!ret_code)
40096bd8:	e0bff717 	ldw	r2,-36(fp)
40096bdc:	10000a1e 	bne	r2,zero,40096c08 <alt_epcs_flash_write+0x184>
            {
              ret_code = (*flash_info->write_block)(
40096be0:	e0bffc17 	ldw	r2,-16(fp)
40096be4:	10800917 	ldw	r2,36(r2)
40096be8:	e0fffb17 	ldw	r3,-20(fp)
40096bec:	d8c00015 	stw	r3,0(sp)
40096bf0:	e13ffc17 	ldw	r4,-16(fp)
40096bf4:	e17ffa17 	ldw	r5,-24(fp)
40096bf8:	e1bffd17 	ldw	r6,-12(fp)
40096bfc:	e1fffe17 	ldw	r7,-8(fp)
40096c00:	103ee83a 	callr	r2
40096c04:	e0bff715 	stw	r2,-36(fp)
                                                  data_to_write);
            }
          }

          /* Was this the last block? */
          if ((length == data_to_write) || ret_code)
40096c08:	e0ffff17 	ldw	r3,-4(fp)
40096c0c:	e0bffb17 	ldw	r2,-20(fp)
40096c10:	18802e26 	beq	r3,r2,40096ccc <alt_epcs_flash_write+0x248>
40096c14:	e0bff717 	ldw	r2,-36(fp)
40096c18:	10002c1e 	bne	r2,zero,40096ccc <alt_epcs_flash_write+0x248>
          {
            goto finished;
          }

          length -= data_to_write;
40096c1c:	e0ffff17 	ldw	r3,-4(fp)
40096c20:	e0bffb17 	ldw	r2,-20(fp)
40096c24:	1885c83a 	sub	r2,r3,r2
40096c28:	e0bfff15 	stw	r2,-4(fp)
          offset = current_offset + flash_info->region_info[i].block_size;
40096c2c:	e0fffc17 	ldw	r3,-16(fp)
40096c30:	e0bff817 	ldw	r2,-32(fp)
40096c34:	10800104 	addi	r2,r2,4
40096c38:	1004913a 	slli	r2,r2,4
40096c3c:	1885883a 	add	r2,r3,r2
40096c40:	10c00017 	ldw	r3,0(r2)
40096c44:	e0bffa17 	ldw	r2,-24(fp)
40096c48:	1885883a 	add	r2,r3,r2
40096c4c:	e0bffd15 	stw	r2,-12(fp)
          src_addr = (alt_u8*)src_addr + data_to_write;
40096c50:	e0bffb17 	ldw	r2,-20(fp)
40096c54:	e0fffe17 	ldw	r3,-8(fp)
40096c58:	1885883a 	add	r2,r3,r2
40096c5c:	e0bffe15 	stw	r2,-8(fp)
        }
        current_offset += flash_info->region_info[i].block_size;
40096c60:	e0fffc17 	ldw	r3,-16(fp)
40096c64:	e0bff817 	ldw	r2,-32(fp)
40096c68:	10800104 	addi	r2,r2,4
40096c6c:	1004913a 	slli	r2,r2,4
40096c70:	1885883a 	add	r2,r3,r2
40096c74:	10800017 	ldw	r2,0(r2)
40096c78:	e0fffa17 	ldw	r3,-24(fp)
40096c7c:	1885883a 	add	r2,r3,r2
40096c80:	e0bffa15 	stw	r2,-24(fp)
      (offset < (flash_info->region_info[i].offset +
      flash_info->region_info[i].region_size)))
    {
      current_offset = flash_info->region_info[i].offset;

      for(j=0;j<flash_info->region_info[i].number_of_blocks;j++)
40096c84:	e0bff917 	ldw	r2,-28(fp)
40096c88:	10800044 	addi	r2,r2,1
40096c8c:	e0bff915 	stw	r2,-28(fp)
40096c90:	e0fffc17 	ldw	r3,-16(fp)
40096c94:	e0bff817 	ldw	r2,-32(fp)
40096c98:	1004913a 	slli	r2,r2,4
40096c9c:	1885883a 	add	r2,r3,r2
40096ca0:	10800f04 	addi	r2,r2,60
40096ca4:	10800017 	ldw	r2,0(r2)
40096ca8:	e0fff917 	ldw	r3,-28(fp)
40096cac:	18bfa016 	blt	r3,r2,40096b30 <__alt_mem_epcs+0xfff55b30>
  int         current_offset;

  /*
   * First and foremost which sectors are affected?
   */
  for(i = 0; i < flash_info->number_of_regions; i++)
40096cb0:	e0bff817 	ldw	r2,-32(fp)
40096cb4:	10800044 	addi	r2,r2,1
40096cb8:	e0bff815 	stw	r2,-32(fp)
40096cbc:	e0bffc17 	ldw	r2,-16(fp)
40096cc0:	10800c17 	ldw	r2,48(r2)
40096cc4:	e0fff817 	ldw	r3,-32(fp)
40096cc8:	18bf7916 	blt	r3,r2,40096ab0 <__alt_mem_epcs+0xfff55ab0>
      }
    }
  }

finished:
  return ret_code;
40096ccc:	e0bff717 	ldw	r2,-36(fp)
}
40096cd0:	e037883a 	mov	sp,fp
40096cd4:	dfc00117 	ldw	ra,4(sp)
40096cd8:	df000017 	ldw	fp,0(sp)
40096cdc:	dec00204 	addi	sp,sp,8
40096ce0:	f800283a 	ret

40096ce4 <alt_epcs_flash_get_info>:
 *
 *  Pass the table of erase blocks to the user
 */
int alt_epcs_flash_get_info(alt_flash_fd* fd, flash_region** info,
                            int* number_of_regions)
{
40096ce4:	defffa04 	addi	sp,sp,-24
40096ce8:	df000515 	stw	fp,20(sp)
40096cec:	df000504 	addi	fp,sp,20
40096cf0:	e13ffd15 	stw	r4,-12(fp)
40096cf4:	e17ffe15 	stw	r5,-8(fp)
40096cf8:	e1bfff15 	stw	r6,-4(fp)
  int ret_code = 0;
40096cfc:	e03ffb15 	stw	zero,-20(fp)

  alt_flash_dev* flash = (alt_flash_dev*)fd;
40096d00:	e0bffd17 	ldw	r2,-12(fp)
40096d04:	e0bffc15 	stw	r2,-16(fp)

  *number_of_regions = flash->number_of_regions;
40096d08:	e0bffc17 	ldw	r2,-16(fp)
40096d0c:	10c00c17 	ldw	r3,48(r2)
40096d10:	e0bfff17 	ldw	r2,-4(fp)
40096d14:	10c00015 	stw	r3,0(r2)

  if (!flash->number_of_regions)
40096d18:	e0bffc17 	ldw	r2,-16(fp)
40096d1c:	10800c17 	ldw	r2,48(r2)
40096d20:	1000031e 	bne	r2,zero,40096d30 <alt_epcs_flash_get_info+0x4c>
  {
    ret_code = -EIO;
40096d24:	00bffec4 	movi	r2,-5
40096d28:	e0bffb15 	stw	r2,-20(fp)
40096d2c:	00000b06 	br	40096d5c <alt_epcs_flash_get_info+0x78>
  }
  else if (flash->number_of_regions > ALT_MAX_NUMBER_OF_FLASH_REGIONS)
40096d30:	e0bffc17 	ldw	r2,-16(fp)
40096d34:	10800c17 	ldw	r2,48(r2)
40096d38:	10800250 	cmplti	r2,r2,9
40096d3c:	1000031e 	bne	r2,zero,40096d4c <alt_epcs_flash_get_info+0x68>
  {
    ret_code = -ENOMEM;
40096d40:	00bffd04 	movi	r2,-12
40096d44:	e0bffb15 	stw	r2,-20(fp)
40096d48:	00000406 	br	40096d5c <alt_epcs_flash_get_info+0x78>
  }
  else
  {
    *info = &flash->region_info[0];
40096d4c:	e0bffc17 	ldw	r2,-16(fp)
40096d50:	10c00d04 	addi	r3,r2,52
40096d54:	e0bffe17 	ldw	r2,-8(fp)
40096d58:	10c00015 	stw	r3,0(r2)
  }

  return ret_code;
40096d5c:	e0bffb17 	ldw	r2,-20(fp)
}
40096d60:	e037883a 	mov	sp,fp
40096d64:	df000017 	ldw	fp,0(sp)
40096d68:	dec00104 	addi	sp,sp,4
40096d6c:	f800283a 	ret

40096d70 <alt_epcs_test_address>:


/* This might be a candidate for optimization.  Precompute the last-address? */
static ALT_INLINE int alt_epcs_test_address(alt_flash_dev* flash_info, int offset)
{
40096d70:	defff904 	addi	sp,sp,-28
40096d74:	df000615 	stw	fp,24(sp)
40096d78:	df000604 	addi	fp,sp,24
40096d7c:	e13ffe15 	stw	r4,-8(fp)
40096d80:	e17fff15 	stw	r5,-4(fp)
  int ret_code = 0;
40096d84:	e03ffa15 	stw	zero,-24(fp)
  /* Error checking:
   * if the block offset is outside of the memory, return -EIO.
   */
  alt_flash_epcs_dev *f = (alt_flash_epcs_dev*)flash_info;
40096d88:	e0bffe17 	ldw	r2,-8(fp)
40096d8c:	e0bffb15 	stw	r2,-20(fp)

  const alt_u32 last_region_index = f->dev.number_of_regions - 1;
40096d90:	e0bffb17 	ldw	r2,-20(fp)
40096d94:	10800c17 	ldw	r2,48(r2)
40096d98:	10bfffc4 	addi	r2,r2,-1
40096d9c:	e0bffc15 	stw	r2,-16(fp)
  alt_u32 last_device_address =
    -1 +
    f->dev.region_info[last_region_index].offset +
40096da0:	e0fffb17 	ldw	r3,-20(fp)
40096da4:	e0bffc17 	ldw	r2,-16(fp)
40096da8:	1004913a 	slli	r2,r2,4
40096dac:	1885883a 	add	r2,r3,r2
40096db0:	10800d04 	addi	r2,r2,52
40096db4:	10800017 	ldw	r2,0(r2)
   */
  alt_flash_epcs_dev *f = (alt_flash_epcs_dev*)flash_info;

  const alt_u32 last_region_index = f->dev.number_of_regions - 1;
  alt_u32 last_device_address =
    -1 +
40096db8:	10ffffc4 	addi	r3,r2,-1
    f->dev.region_info[last_region_index].offset +
    f->dev.region_info[last_region_index].region_size;
40096dbc:	e13ffb17 	ldw	r4,-20(fp)
40096dc0:	e0bffc17 	ldw	r2,-16(fp)
40096dc4:	1004913a 	slli	r2,r2,4
40096dc8:	2085883a 	add	r2,r4,r2
40096dcc:	10800e04 	addi	r2,r2,56
40096dd0:	10800017 	ldw	r2,0(r2)
  alt_flash_epcs_dev *f = (alt_flash_epcs_dev*)flash_info;

  const alt_u32 last_region_index = f->dev.number_of_regions - 1;
  alt_u32 last_device_address =
    -1 +
    f->dev.region_info[last_region_index].offset +
40096dd4:	1885883a 	add	r2,r3,r2
   * if the block offset is outside of the memory, return -EIO.
   */
  alt_flash_epcs_dev *f = (alt_flash_epcs_dev*)flash_info;

  const alt_u32 last_region_index = f->dev.number_of_regions - 1;
  alt_u32 last_device_address =
40096dd8:	e0bffd15 	stw	r2,-12(fp)
    -1 +
    f->dev.region_info[last_region_index].offset +
    f->dev.region_info[last_region_index].region_size;

  if (offset > last_device_address)
40096ddc:	e0bfff17 	ldw	r2,-4(fp)
40096de0:	e0fffd17 	ldw	r3,-12(fp)
40096de4:	1880022e 	bgeu	r3,r2,40096df0 <alt_epcs_test_address+0x80>
  {
    /* Someone tried to erase a block outside of this device's range. */
    ret_code = -EIO;
40096de8:	00bffec4 	movi	r2,-5
40096dec:	e0bffa15 	stw	r2,-24(fp)
  }
  return ret_code;
40096df0:	e0bffa17 	ldw	r2,-24(fp)
}
40096df4:	e037883a 	mov	sp,fp
40096df8:	df000017 	ldw	fp,0(sp)
40096dfc:	dec00104 	addi	sp,sp,4
40096e00:	f800283a 	ret

40096e04 <alt_epcs_flash_erase_block>:
 *
 * Erase the selected erase block ("sector erase", from the POV
 * of the EPCS data sheet).
 */
int alt_epcs_flash_erase_block(alt_flash_dev* flash_info, int block_offset)
{
40096e04:	defffa04 	addi	sp,sp,-24
40096e08:	dfc00515 	stw	ra,20(sp)
40096e0c:	df000415 	stw	fp,16(sp)
40096e10:	df000404 	addi	fp,sp,16
40096e14:	e13ffe15 	stw	r4,-8(fp)
40096e18:	e17fff15 	stw	r5,-4(fp)
  int ret_code = 0;
40096e1c:	e03ffc15 	stw	zero,-16(fp)
  alt_flash_epcs_dev *f = (alt_flash_epcs_dev*)flash_info;
40096e20:	e0bffe17 	ldw	r2,-8(fp)
40096e24:	e0bffd15 	stw	r2,-12(fp)

  ret_code = alt_epcs_test_address(flash_info, block_offset);
40096e28:	e13ffe17 	ldw	r4,-8(fp)
40096e2c:	e17fff17 	ldw	r5,-4(fp)
40096e30:	0096d700 	call	40096d70 <alt_epcs_test_address>
40096e34:	e0bffc15 	stw	r2,-16(fp)

  if (ret_code >= 0)
40096e38:	e0bffc17 	ldw	r2,-16(fp)
40096e3c:	10000816 	blt	r2,zero,40096e60 <alt_epcs_flash_erase_block+0x5c>
  {
    /* Send the Sector Erase command, whose 3 address bytes are anywhere
     * within the chosen sector.
     */
    epcs_sector_erase(f->register_base, block_offset, f->four_bytes_mode);
40096e40:	e0bffd17 	ldw	r2,-12(fp)
40096e44:	11002e17 	ldw	r4,184(r2)
40096e48:	e0ffff17 	ldw	r3,-4(fp)
40096e4c:	e0bffd17 	ldw	r2,-12(fp)
40096e50:	10803217 	ldw	r2,200(r2)
40096e54:	180b883a 	mov	r5,r3
40096e58:	100d883a 	mov	r6,r2
40096e5c:	00985140 	call	40098514 <epcs_sector_erase>
  }
  return ret_code;
40096e60:	e0bffc17 	ldw	r2,-16(fp)
}
40096e64:	e037883a 	mov	sp,fp
40096e68:	dfc00117 	ldw	ra,4(sp)
40096e6c:	df000017 	ldw	fp,0(sp)
40096e70:	dec00204 	addi	sp,sp,8
40096e74:	f800283a 	ret

40096e78 <alt_epcs_flash_write_block>:
 * function type compatibility.
 */
int alt_epcs_flash_write_block(alt_flash_dev* flash_info, int block_offset,
                                      int data_offset, const void* data,
                                      int length)
{
40096e78:	defff404 	addi	sp,sp,-48
40096e7c:	dfc00b15 	stw	ra,44(sp)
40096e80:	df000a15 	stw	fp,40(sp)
40096e84:	df000a04 	addi	fp,sp,40
40096e88:	e13ffc15 	stw	r4,-16(fp)
40096e8c:	e17ffd15 	stw	r5,-12(fp)
40096e90:	e1bffe15 	stw	r6,-8(fp)
40096e94:	e1ffff15 	stw	r7,-4(fp)
  int ret_code;
  alt_flash_epcs_dev *f = (alt_flash_epcs_dev*)flash_info;
40096e98:	e0bffc17 	ldw	r2,-16(fp)
40096e9c:	e0bff815 	stw	r2,-32(fp)

  int buffer_offset = 0;
40096ea0:	e03ff715 	stw	zero,-36(fp)
  int length_of_current_write;
  ret_code = alt_epcs_test_address(flash_info, data_offset);
40096ea4:	e13ffc17 	ldw	r4,-16(fp)
40096ea8:	e17ffe17 	ldw	r5,-8(fp)
40096eac:	0096d700 	call	40096d70 <alt_epcs_test_address>
40096eb0:	e0bff915 	stw	r2,-28(fp)

  if (ret_code >= 0)
40096eb4:	e0bff917 	ldw	r2,-28(fp)
40096eb8:	10002916 	blt	r2,zero,40096f60 <alt_epcs_flash_write_block+0xe8>
  {

    /* "Block" writes must be broken up into the page writes that
     * the device understands.  Partial page writes are allowed.
     */
    while (length)
40096ebc:	00002606 	br	40096f58 <alt_epcs_flash_write_block+0xe0>
    {
      int next_page_start = (data_offset + f->page_size) & ~(f->page_size - 1);
40096ec0:	e0bff817 	ldw	r2,-32(fp)
40096ec4:	10c03117 	ldw	r3,196(r2)
40096ec8:	e0bffe17 	ldw	r2,-8(fp)
40096ecc:	1887883a 	add	r3,r3,r2
40096ed0:	e0bff817 	ldw	r2,-32(fp)
40096ed4:	10803117 	ldw	r2,196(r2)
40096ed8:	0085c83a 	sub	r2,zero,r2
40096edc:	1884703a 	and	r2,r3,r2
40096ee0:	e0bffa15 	stw	r2,-24(fp)
      length_of_current_write = MIN(length, next_page_start - data_offset);
40096ee4:	e0fffa17 	ldw	r3,-24(fp)
40096ee8:	e0bffe17 	ldw	r2,-8(fp)
40096eec:	1885c83a 	sub	r2,r3,r2
40096ef0:	e0c00217 	ldw	r3,8(fp)
40096ef4:	1880010e 	bge	r3,r2,40096efc <alt_epcs_flash_write_block+0x84>
40096ef8:	1805883a 	mov	r2,r3
40096efc:	e0bffb15 	stw	r2,-20(fp)

      epcs_write_buffer(f->register_base, data_offset, &((const alt_u8*)data)[buffer_offset], length_of_current_write,
40096f00:	e0bff817 	ldw	r2,-32(fp)
40096f04:	11002e17 	ldw	r4,184(r2)
40096f08:	e0bff717 	ldw	r2,-36(fp)
40096f0c:	e0ffff17 	ldw	r3,-4(fp)
40096f10:	1887883a 	add	r3,r3,r2
40096f14:	e0bff817 	ldw	r2,-32(fp)
40096f18:	10803217 	ldw	r2,200(r2)
40096f1c:	d8800015 	stw	r2,0(sp)
40096f20:	e17ffe17 	ldw	r5,-8(fp)
40096f24:	180d883a 	mov	r6,r3
40096f28:	e1fffb17 	ldw	r7,-20(fp)
40096f2c:	00987b80 	call	400987b8 <epcs_write_buffer>
          f->four_bytes_mode);

      length -= length_of_current_write;
40096f30:	e0c00217 	ldw	r3,8(fp)
40096f34:	e0bffb17 	ldw	r2,-20(fp)
40096f38:	1885c83a 	sub	r2,r3,r2
40096f3c:	e0800215 	stw	r2,8(fp)
      buffer_offset += length_of_current_write;
40096f40:	e0fff717 	ldw	r3,-36(fp)
40096f44:	e0bffb17 	ldw	r2,-20(fp)
40096f48:	1885883a 	add	r2,r3,r2
40096f4c:	e0bff715 	stw	r2,-36(fp)
      data_offset = next_page_start;
40096f50:	e0bffa17 	ldw	r2,-24(fp)
40096f54:	e0bffe15 	stw	r2,-8(fp)
  {

    /* "Block" writes must be broken up into the page writes that
     * the device understands.  Partial page writes are allowed.
     */
    while (length)
40096f58:	e0800217 	ldw	r2,8(fp)
40096f5c:	103fd81e 	bne	r2,zero,40096ec0 <__alt_mem_epcs+0xfff55ec0>
      length -= length_of_current_write;
      buffer_offset += length_of_current_write;
      data_offset = next_page_start;
    }
  }
  return ret_code;
40096f60:	e0bff917 	ldw	r2,-28(fp)
}
40096f64:	e037883a 	mov	sp,fp
40096f68:	dfc00117 	ldw	ra,4(sp)
40096f6c:	df000017 	ldw	fp,0(sp)
40096f70:	dec00204 	addi	sp,sp,8
40096f74:	f800283a 	ret

40096f78 <alt_epcs_flash_read>:
 *  to the beginning.  Reads that start beyond the end of the memory are
 *  flagged as errors with EIO (is there a better error code?).
 */
int alt_epcs_flash_read(alt_flash_dev* flash_info, int offset,
                        void* dest_addr, int length)
{
40096f78:	defff704 	addi	sp,sp,-36
40096f7c:	dfc00815 	stw	ra,32(sp)
40096f80:	df000715 	stw	fp,28(sp)
40096f84:	df000704 	addi	fp,sp,28
40096f88:	e13ffc15 	stw	r4,-16(fp)
40096f8c:	e17ffd15 	stw	r5,-12(fp)
40096f90:	e1bffe15 	stw	r6,-8(fp)
40096f94:	e1ffff15 	stw	r7,-4(fp)
  int ret_code = 0;
40096f98:	e03ffa15 	stw	zero,-24(fp)

  alt_flash_epcs_dev *f = (alt_flash_epcs_dev*)flash_info;
40096f9c:	e0bffc17 	ldw	r2,-16(fp)
40096fa0:	e0bffb15 	stw	r2,-20(fp)

  ret_code = alt_epcs_test_address(flash_info, offset);
40096fa4:	e13ffc17 	ldw	r4,-16(fp)
40096fa8:	e17ffd17 	ldw	r5,-12(fp)
40096fac:	0096d700 	call	40096d70 <alt_epcs_test_address>
40096fb0:	e0bffa15 	stw	r2,-24(fp)

  if (ret_code >= 0)
40096fb4:	e0bffa17 	ldw	r2,-24(fp)
40096fb8:	10000f16 	blt	r2,zero,40096ff8 <alt_epcs_flash_read+0x80>
  {
    ret_code = epcs_read_buffer(f->register_base, offset, dest_addr, length,
40096fbc:	e0bffb17 	ldw	r2,-20(fp)
40096fc0:	10c02e17 	ldw	r3,184(r2)
40096fc4:	e0bffb17 	ldw	r2,-20(fp)
40096fc8:	10803217 	ldw	r2,200(r2)
40096fcc:	d8800015 	stw	r2,0(sp)
40096fd0:	1809883a 	mov	r4,r3
40096fd4:	e17ffd17 	ldw	r5,-12(fp)
40096fd8:	e1bffe17 	ldw	r6,-8(fp)
40096fdc:	e1ffff17 	ldw	r7,-4(fp)
40096fe0:	009860c0 	call	4009860c <epcs_read_buffer>
40096fe4:	e0bffa15 	stw	r2,-24(fp)
                                f->four_bytes_mode);

    /* epcs_read_buffer returns the number of buffers read, but
     * alt_epcs_flash_read returns 0 on success, <0 on failure.
     */
    if (ret_code == length)
40096fe8:	e0fffa17 	ldw	r3,-24(fp)
40096fec:	e0bfff17 	ldw	r2,-4(fp)
40096ff0:	1880011e 	bne	r3,r2,40096ff8 <alt_epcs_flash_read+0x80>
    {
      ret_code = 0;
40096ff4:	e03ffa15 	stw	zero,-24(fp)
    }
  }
  return ret_code;
40096ff8:	e0bffa17 	ldw	r2,-24(fp)
}
40096ffc:	e037883a 	mov	sp,fp
40097000:	dfc00117 	ldw	ra,4(sp)
40097004:	df000017 	ldw	fp,0(sp)
40097008:	dec00204 	addi	sp,sp,8
4009700c:	f800283a 	ret

40097010 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
40097010:	defffa04 	addi	sp,sp,-24
40097014:	dfc00515 	stw	ra,20(sp)
40097018:	df000415 	stw	fp,16(sp)
4009701c:	df000404 	addi	fp,sp,16
40097020:	e13ffd15 	stw	r4,-12(fp)
40097024:	e17ffe15 	stw	r5,-8(fp)
40097028:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
4009702c:	e0bffd17 	ldw	r2,-12(fp)
40097030:	10800017 	ldw	r2,0(r2)
40097034:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
40097038:	e0bffc17 	ldw	r2,-16(fp)
4009703c:	10c00a04 	addi	r3,r2,40
40097040:	e0bffd17 	ldw	r2,-12(fp)
40097044:	10800217 	ldw	r2,8(r2)
40097048:	1809883a 	mov	r4,r3
4009704c:	e17ffe17 	ldw	r5,-8(fp)
40097050:	e1bfff17 	ldw	r6,-4(fp)
40097054:	100f883a 	mov	r7,r2
40097058:	00976380 	call	40097638 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
4009705c:	e037883a 	mov	sp,fp
40097060:	dfc00117 	ldw	ra,4(sp)
40097064:	df000017 	ldw	fp,0(sp)
40097068:	dec00204 	addi	sp,sp,8
4009706c:	f800283a 	ret

40097070 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
40097070:	defffa04 	addi	sp,sp,-24
40097074:	dfc00515 	stw	ra,20(sp)
40097078:	df000415 	stw	fp,16(sp)
4009707c:	df000404 	addi	fp,sp,16
40097080:	e13ffd15 	stw	r4,-12(fp)
40097084:	e17ffe15 	stw	r5,-8(fp)
40097088:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
4009708c:	e0bffd17 	ldw	r2,-12(fp)
40097090:	10800017 	ldw	r2,0(r2)
40097094:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
40097098:	e0bffc17 	ldw	r2,-16(fp)
4009709c:	10c00a04 	addi	r3,r2,40
400970a0:	e0bffd17 	ldw	r2,-12(fp)
400970a4:	10800217 	ldw	r2,8(r2)
400970a8:	1809883a 	mov	r4,r3
400970ac:	e17ffe17 	ldw	r5,-8(fp)
400970b0:	e1bfff17 	ldw	r6,-4(fp)
400970b4:	100f883a 	mov	r7,r2
400970b8:	00978440 	call	40097844 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
400970bc:	e037883a 	mov	sp,fp
400970c0:	dfc00117 	ldw	ra,4(sp)
400970c4:	df000017 	ldw	fp,0(sp)
400970c8:	dec00204 	addi	sp,sp,8
400970cc:	f800283a 	ret

400970d0 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
400970d0:	defffc04 	addi	sp,sp,-16
400970d4:	dfc00315 	stw	ra,12(sp)
400970d8:	df000215 	stw	fp,8(sp)
400970dc:	df000204 	addi	fp,sp,8
400970e0:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
400970e4:	e0bfff17 	ldw	r2,-4(fp)
400970e8:	10800017 	ldw	r2,0(r2)
400970ec:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
400970f0:	e0bffe17 	ldw	r2,-8(fp)
400970f4:	10c00a04 	addi	r3,r2,40
400970f8:	e0bfff17 	ldw	r2,-4(fp)
400970fc:	10800217 	ldw	r2,8(r2)
40097100:	1809883a 	mov	r4,r3
40097104:	100b883a 	mov	r5,r2
40097108:	00974e40 	call	400974e4 <altera_avalon_jtag_uart_close>
}
4009710c:	e037883a 	mov	sp,fp
40097110:	dfc00117 	ldw	ra,4(sp)
40097114:	df000017 	ldw	fp,0(sp)
40097118:	dec00204 	addi	sp,sp,8
4009711c:	f800283a 	ret

40097120 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
40097120:	defffa04 	addi	sp,sp,-24
40097124:	dfc00515 	stw	ra,20(sp)
40097128:	df000415 	stw	fp,16(sp)
4009712c:	df000404 	addi	fp,sp,16
40097130:	e13ffd15 	stw	r4,-12(fp)
40097134:	e17ffe15 	stw	r5,-8(fp)
40097138:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
4009713c:	e0bffd17 	ldw	r2,-12(fp)
40097140:	10800017 	ldw	r2,0(r2)
40097144:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
40097148:	e0bffc17 	ldw	r2,-16(fp)
4009714c:	10800a04 	addi	r2,r2,40
40097150:	1009883a 	mov	r4,r2
40097154:	e17ffe17 	ldw	r5,-8(fp)
40097158:	e1bfff17 	ldw	r6,-4(fp)
4009715c:	009754c0 	call	4009754c <altera_avalon_jtag_uart_ioctl>
}
40097160:	e037883a 	mov	sp,fp
40097164:	dfc00117 	ldw	ra,4(sp)
40097168:	df000017 	ldw	fp,0(sp)
4009716c:	dec00204 	addi	sp,sp,8
40097170:	f800283a 	ret

40097174 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
40097174:	defffa04 	addi	sp,sp,-24
40097178:	dfc00515 	stw	ra,20(sp)
4009717c:	df000415 	stw	fp,16(sp)
40097180:	df000404 	addi	fp,sp,16
40097184:	e13ffd15 	stw	r4,-12(fp)
40097188:	e17ffe15 	stw	r5,-8(fp)
4009718c:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
40097190:	e0bffd17 	ldw	r2,-12(fp)
40097194:	00c00044 	movi	r3,1
40097198:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
4009719c:	e0bffd17 	ldw	r2,-12(fp)
400971a0:	10800017 	ldw	r2,0(r2)
400971a4:	10800104 	addi	r2,r2,4
400971a8:	1007883a 	mov	r3,r2
400971ac:	e0bffd17 	ldw	r2,-12(fp)
400971b0:	10800817 	ldw	r2,32(r2)
400971b4:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
400971b8:	e0fffe17 	ldw	r3,-8(fp)
400971bc:	e0bfff17 	ldw	r2,-4(fp)
400971c0:	d8000015 	stw	zero,0(sp)
400971c4:	1809883a 	mov	r4,r3
400971c8:	100b883a 	mov	r5,r2
400971cc:	01900274 	movhi	r6,16393
400971d0:	319c8e04 	addi	r6,r6,29240
400971d4:	e1fffd17 	ldw	r7,-12(fp)
400971d8:	0098e740 	call	40098e74 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
400971dc:	e0bffd17 	ldw	r2,-12(fp)
400971e0:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
400971e4:	e0bffd17 	ldw	r2,-12(fp)
400971e8:	10c00204 	addi	r3,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
400971ec:	009002b4 	movhi	r2,16394
400971f0:	10b73804 	addi	r2,r2,-8992
400971f4:	10800017 	ldw	r2,0(r2)
400971f8:	1809883a 	mov	r4,r3
400971fc:	100b883a 	mov	r5,r2
40097200:	01900274 	movhi	r6,16393
40097204:	319d0f04 	addi	r6,r6,29756
40097208:	e1fffd17 	ldw	r7,-12(fp)
4009720c:	00955c00 	call	400955c0 <alt_alarm_start>
40097210:	1000040e 	bge	r2,zero,40097224 <altera_avalon_jtag_uart_init+0xb0>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
40097214:	e0fffd17 	ldw	r3,-12(fp)
40097218:	00a00034 	movhi	r2,32768
4009721c:	10bfffc4 	addi	r2,r2,-1
40097220:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
40097224:	e037883a 	mov	sp,fp
40097228:	dfc00117 	ldw	ra,4(sp)
4009722c:	df000017 	ldw	fp,0(sp)
40097230:	dec00204 	addi	sp,sp,8
40097234:	f800283a 	ret

40097238 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
40097238:	defff804 	addi	sp,sp,-32
4009723c:	df000715 	stw	fp,28(sp)
40097240:	df000704 	addi	fp,sp,28
40097244:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
40097248:	e0bfff17 	ldw	r2,-4(fp)
4009724c:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
40097250:	e0bffb17 	ldw	r2,-20(fp)
40097254:	10800017 	ldw	r2,0(r2)
40097258:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
4009725c:	e0bffc17 	ldw	r2,-16(fp)
40097260:	10800104 	addi	r2,r2,4
40097264:	10800037 	ldwio	r2,0(r2)
40097268:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
4009726c:	e0bffd17 	ldw	r2,-12(fp)
40097270:	1080c00c 	andi	r2,r2,768
40097274:	1000011e 	bne	r2,zero,4009727c <altera_avalon_jtag_uart_irq+0x44>
      break;
40097278:	00006c06 	br	4009742c <altera_avalon_jtag_uart_irq+0x1f4>

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
4009727c:	e0bffd17 	ldw	r2,-12(fp)
40097280:	1080400c 	andi	r2,r2,256
40097284:	10003426 	beq	r2,zero,40097358 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
40097288:	00800074 	movhi	r2,1
4009728c:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
40097290:	e0bffb17 	ldw	r2,-20(fp)
40097294:	10800a17 	ldw	r2,40(r2)
40097298:	10800044 	addi	r2,r2,1
4009729c:	1081ffcc 	andi	r2,r2,2047
400972a0:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
400972a4:	e0bffb17 	ldw	r2,-20(fp)
400972a8:	10c00b17 	ldw	r3,44(r2)
400972ac:	e0bffe17 	ldw	r2,-8(fp)
400972b0:	1880011e 	bne	r3,r2,400972b8 <altera_avalon_jtag_uart_irq+0x80>
          break;
400972b4:	00001606 	br	40097310 <altera_avalon_jtag_uart_irq+0xd8>

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
400972b8:	e0bffc17 	ldw	r2,-16(fp)
400972bc:	10800037 	ldwio	r2,0(r2)
400972c0:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
400972c4:	e0bff917 	ldw	r2,-28(fp)
400972c8:	10a0000c 	andi	r2,r2,32768
400972cc:	1000011e 	bne	r2,zero,400972d4 <altera_avalon_jtag_uart_irq+0x9c>
          break;
400972d0:	00000f06 	br	40097310 <altera_avalon_jtag_uart_irq+0xd8>

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
400972d4:	e0bffb17 	ldw	r2,-20(fp)
400972d8:	10800a17 	ldw	r2,40(r2)
400972dc:	e0fff917 	ldw	r3,-28(fp)
400972e0:	1809883a 	mov	r4,r3
400972e4:	e0fffb17 	ldw	r3,-20(fp)
400972e8:	1885883a 	add	r2,r3,r2
400972ec:	10800e04 	addi	r2,r2,56
400972f0:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
400972f4:	e0bffb17 	ldw	r2,-20(fp)
400972f8:	10800a17 	ldw	r2,40(r2)
400972fc:	10800044 	addi	r2,r2,1
40097300:	10c1ffcc 	andi	r3,r2,2047
40097304:	e0bffb17 	ldw	r2,-20(fp)
40097308:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
4009730c:	003fe006 	br	40097290 <__alt_mem_epcs+0xfff56290>

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
40097310:	e0bff917 	ldw	r2,-28(fp)
40097314:	10bfffec 	andhi	r2,r2,65535
40097318:	10000f26 	beq	r2,zero,40097358 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
4009731c:	e0bffb17 	ldw	r2,-20(fp)
40097320:	10c00817 	ldw	r3,32(r2)
40097324:	00bfff84 	movi	r2,-2
40097328:	1886703a 	and	r3,r3,r2
4009732c:	e0bffb17 	ldw	r2,-20(fp)
40097330:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
40097334:	e0bffc17 	ldw	r2,-16(fp)
40097338:	10800104 	addi	r2,r2,4
4009733c:	1007883a 	mov	r3,r2
40097340:	e0bffb17 	ldw	r2,-20(fp)
40097344:	10800817 	ldw	r2,32(r2)
40097348:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
4009734c:	e0bffc17 	ldw	r2,-16(fp)
40097350:	10800104 	addi	r2,r2,4
40097354:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
40097358:	e0bffd17 	ldw	r2,-12(fp)
4009735c:	1080800c 	andi	r2,r2,512
40097360:	10003126 	beq	r2,zero,40097428 <altera_avalon_jtag_uart_irq+0x1f0>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
40097364:	e0bffd17 	ldw	r2,-12(fp)
40097368:	1004d43a 	srli	r2,r2,16
4009736c:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
40097370:	00001406 	br	400973c4 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
40097374:	e0bffc17 	ldw	r2,-16(fp)
40097378:	e0fffb17 	ldw	r3,-20(fp)
4009737c:	18c00d17 	ldw	r3,52(r3)
40097380:	e13ffb17 	ldw	r4,-20(fp)
40097384:	20c7883a 	add	r3,r4,r3
40097388:	18c20e04 	addi	r3,r3,2104
4009738c:	18c00003 	ldbu	r3,0(r3)
40097390:	18c03fcc 	andi	r3,r3,255
40097394:	18c0201c 	xori	r3,r3,128
40097398:	18ffe004 	addi	r3,r3,-128
4009739c:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
400973a0:	e0bffb17 	ldw	r2,-20(fp)
400973a4:	10800d17 	ldw	r2,52(r2)
400973a8:	10800044 	addi	r2,r2,1
400973ac:	10c1ffcc 	andi	r3,r2,2047
400973b0:	e0bffb17 	ldw	r2,-20(fp)
400973b4:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
400973b8:	e0bffa17 	ldw	r2,-24(fp)
400973bc:	10bfffc4 	addi	r2,r2,-1
400973c0:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
400973c4:	e0bffa17 	ldw	r2,-24(fp)
400973c8:	10000526 	beq	r2,zero,400973e0 <altera_avalon_jtag_uart_irq+0x1a8>
400973cc:	e0bffb17 	ldw	r2,-20(fp)
400973d0:	10c00d17 	ldw	r3,52(r2)
400973d4:	e0bffb17 	ldw	r2,-20(fp)
400973d8:	10800c17 	ldw	r2,48(r2)
400973dc:	18bfe51e 	bne	r3,r2,40097374 <__alt_mem_epcs+0xfff56374>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
400973e0:	e0bffa17 	ldw	r2,-24(fp)
400973e4:	10001026 	beq	r2,zero,40097428 <altera_avalon_jtag_uart_irq+0x1f0>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
400973e8:	e0bffb17 	ldw	r2,-20(fp)
400973ec:	10c00817 	ldw	r3,32(r2)
400973f0:	00bfff44 	movi	r2,-3
400973f4:	1886703a 	and	r3,r3,r2
400973f8:	e0bffb17 	ldw	r2,-20(fp)
400973fc:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
40097400:	e0bffb17 	ldw	r2,-20(fp)
40097404:	10800017 	ldw	r2,0(r2)
40097408:	10800104 	addi	r2,r2,4
4009740c:	1007883a 	mov	r3,r2
40097410:	e0bffb17 	ldw	r2,-20(fp)
40097414:	10800817 	ldw	r2,32(r2)
40097418:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
4009741c:	e0bffc17 	ldw	r2,-16(fp)
40097420:	10800104 	addi	r2,r2,4
40097424:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
40097428:	003f8c06 	br	4009725c <__alt_mem_epcs+0xfff5625c>
}
4009742c:	e037883a 	mov	sp,fp
40097430:	df000017 	ldw	fp,0(sp)
40097434:	dec00104 	addi	sp,sp,4
40097438:	f800283a 	ret

4009743c <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
4009743c:	defff804 	addi	sp,sp,-32
40097440:	df000715 	stw	fp,28(sp)
40097444:	df000704 	addi	fp,sp,28
40097448:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
4009744c:	e0bffb17 	ldw	r2,-20(fp)
40097450:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
40097454:	e0bff917 	ldw	r2,-28(fp)
40097458:	10800017 	ldw	r2,0(r2)
4009745c:	10800104 	addi	r2,r2,4
40097460:	10800037 	ldwio	r2,0(r2)
40097464:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
40097468:	e0bffa17 	ldw	r2,-24(fp)
4009746c:	1081000c 	andi	r2,r2,1024
40097470:	10000b26 	beq	r2,zero,400974a0 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
40097474:	e0bff917 	ldw	r2,-28(fp)
40097478:	10800017 	ldw	r2,0(r2)
4009747c:	10800104 	addi	r2,r2,4
40097480:	1007883a 	mov	r3,r2
40097484:	e0bff917 	ldw	r2,-28(fp)
40097488:	10800817 	ldw	r2,32(r2)
4009748c:	10810014 	ori	r2,r2,1024
40097490:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
40097494:	e0bff917 	ldw	r2,-28(fp)
40097498:	10000915 	stw	zero,36(r2)
4009749c:	00000a06 	br	400974c8 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
400974a0:	e0bff917 	ldw	r2,-28(fp)
400974a4:	10c00917 	ldw	r3,36(r2)
400974a8:	00a00034 	movhi	r2,32768
400974ac:	10bfff04 	addi	r2,r2,-4
400974b0:	10c00536 	bltu	r2,r3,400974c8 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
400974b4:	e0bff917 	ldw	r2,-28(fp)
400974b8:	10800917 	ldw	r2,36(r2)
400974bc:	10c00044 	addi	r3,r2,1
400974c0:	e0bff917 	ldw	r2,-28(fp)
400974c4:	10c00915 	stw	r3,36(r2)
400974c8:	009002b4 	movhi	r2,16394
400974cc:	10b73804 	addi	r2,r2,-8992
400974d0:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
400974d4:	e037883a 	mov	sp,fp
400974d8:	df000017 	ldw	fp,0(sp)
400974dc:	dec00104 	addi	sp,sp,4
400974e0:	f800283a 	ret

400974e4 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
400974e4:	defffd04 	addi	sp,sp,-12
400974e8:	df000215 	stw	fp,8(sp)
400974ec:	df000204 	addi	fp,sp,8
400974f0:	e13ffe15 	stw	r4,-8(fp)
400974f4:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
400974f8:	00000506 	br	40097510 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
400974fc:	e0bfff17 	ldw	r2,-4(fp)
40097500:	1090000c 	andi	r2,r2,16384
40097504:	10000226 	beq	r2,zero,40097510 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
40097508:	00bffd44 	movi	r2,-11
4009750c:	00000b06 	br	4009753c <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
40097510:	e0bffe17 	ldw	r2,-8(fp)
40097514:	10c00d17 	ldw	r3,52(r2)
40097518:	e0bffe17 	ldw	r2,-8(fp)
4009751c:	10800c17 	ldw	r2,48(r2)
40097520:	18800526 	beq	r3,r2,40097538 <altera_avalon_jtag_uart_close+0x54>
40097524:	e0bffe17 	ldw	r2,-8(fp)
40097528:	10c00917 	ldw	r3,36(r2)
4009752c:	e0bffe17 	ldw	r2,-8(fp)
40097530:	10800117 	ldw	r2,4(r2)
40097534:	18bff136 	bltu	r3,r2,400974fc <__alt_mem_epcs+0xfff564fc>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
40097538:	0005883a 	mov	r2,zero
}
4009753c:	e037883a 	mov	sp,fp
40097540:	df000017 	ldw	fp,0(sp)
40097544:	dec00104 	addi	sp,sp,4
40097548:	f800283a 	ret

4009754c <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
4009754c:	defffa04 	addi	sp,sp,-24
40097550:	df000515 	stw	fp,20(sp)
40097554:	df000504 	addi	fp,sp,20
40097558:	e13ffd15 	stw	r4,-12(fp)
4009755c:	e17ffe15 	stw	r5,-8(fp)
40097560:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
40097564:	00bff9c4 	movi	r2,-25
40097568:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
4009756c:	e0bffe17 	ldw	r2,-8(fp)
40097570:	10da8060 	cmpeqi	r3,r2,27137
40097574:	1800031e 	bne	r3,zero,40097584 <altera_avalon_jtag_uart_ioctl+0x38>
40097578:	109a80a0 	cmpeqi	r2,r2,27138
4009757c:	1000191e 	bne	r2,zero,400975e4 <altera_avalon_jtag_uart_ioctl+0x98>
      rc = 0;
    }
    break;

  default:
    break;
40097580:	00002806 	br	40097624 <altera_avalon_jtag_uart_ioctl+0xd8>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
40097584:	e0bffd17 	ldw	r2,-12(fp)
40097588:	10c00117 	ldw	r3,4(r2)
4009758c:	00a00034 	movhi	r2,32768
40097590:	10bfffc4 	addi	r2,r2,-1
40097594:	18801226 	beq	r3,r2,400975e0 <altera_avalon_jtag_uart_ioctl+0x94>
    {
      int timeout = *((int *)arg);
40097598:	e0bfff17 	ldw	r2,-4(fp)
4009759c:	10800017 	ldw	r2,0(r2)
400975a0:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
400975a4:	e0bffc17 	ldw	r2,-16(fp)
400975a8:	10800090 	cmplti	r2,r2,2
400975ac:	1000061e 	bne	r2,zero,400975c8 <altera_avalon_jtag_uart_ioctl+0x7c>
400975b0:	e0fffc17 	ldw	r3,-16(fp)
400975b4:	00a00034 	movhi	r2,32768
400975b8:	10bfffc4 	addi	r2,r2,-1
400975bc:	18800226 	beq	r3,r2,400975c8 <altera_avalon_jtag_uart_ioctl+0x7c>
400975c0:	e0bffc17 	ldw	r2,-16(fp)
400975c4:	00000206 	br	400975d0 <altera_avalon_jtag_uart_ioctl+0x84>
400975c8:	00a00034 	movhi	r2,32768
400975cc:	10bfff84 	addi	r2,r2,-2
400975d0:	e0fffd17 	ldw	r3,-12(fp)
400975d4:	18800115 	stw	r2,4(r3)
      rc = 0;
400975d8:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
400975dc:	00001106 	br	40097624 <altera_avalon_jtag_uart_ioctl+0xd8>
400975e0:	00001006 	br	40097624 <altera_avalon_jtag_uart_ioctl+0xd8>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
400975e4:	e0bffd17 	ldw	r2,-12(fp)
400975e8:	10c00117 	ldw	r3,4(r2)
400975ec:	00a00034 	movhi	r2,32768
400975f0:	10bfffc4 	addi	r2,r2,-1
400975f4:	18800a26 	beq	r3,r2,40097620 <altera_avalon_jtag_uart_ioctl+0xd4>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
400975f8:	e0bffd17 	ldw	r2,-12(fp)
400975fc:	10c00917 	ldw	r3,36(r2)
40097600:	e0bffd17 	ldw	r2,-12(fp)
40097604:	10800117 	ldw	r2,4(r2)
40097608:	1885803a 	cmpltu	r2,r3,r2
4009760c:	10c03fcc 	andi	r3,r2,255
40097610:	e0bfff17 	ldw	r2,-4(fp)
40097614:	10c00015 	stw	r3,0(r2)
      rc = 0;
40097618:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
4009761c:	00000006 	br	40097620 <altera_avalon_jtag_uart_ioctl+0xd4>
40097620:	0001883a 	nop

  default:
    break;
  }

  return rc;
40097624:	e0bffb17 	ldw	r2,-20(fp)
}
40097628:	e037883a 	mov	sp,fp
4009762c:	df000017 	ldw	fp,0(sp)
40097630:	dec00104 	addi	sp,sp,4
40097634:	f800283a 	ret

40097638 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
40097638:	defff304 	addi	sp,sp,-52
4009763c:	dfc00c15 	stw	ra,48(sp)
40097640:	df000b15 	stw	fp,44(sp)
40097644:	df000b04 	addi	fp,sp,44
40097648:	e13ffc15 	stw	r4,-16(fp)
4009764c:	e17ffd15 	stw	r5,-12(fp)
40097650:	e1bffe15 	stw	r6,-8(fp)
40097654:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
40097658:	e0bffd17 	ldw	r2,-12(fp)
4009765c:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
40097660:	00004906 	br	40097788 <altera_avalon_jtag_uart_read+0x150>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
40097664:	e0bffc17 	ldw	r2,-16(fp)
40097668:	10800a17 	ldw	r2,40(r2)
4009766c:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
40097670:	e0bffc17 	ldw	r2,-16(fp)
40097674:	10800b17 	ldw	r2,44(r2)
40097678:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
4009767c:	e0fff717 	ldw	r3,-36(fp)
40097680:	e0bff817 	ldw	r2,-32(fp)
40097684:	18800536 	bltu	r3,r2,4009769c <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
40097688:	e0fff717 	ldw	r3,-36(fp)
4009768c:	e0bff817 	ldw	r2,-32(fp)
40097690:	1885c83a 	sub	r2,r3,r2
40097694:	e0bff615 	stw	r2,-40(fp)
40097698:	00000406 	br	400976ac <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
4009769c:	00c20004 	movi	r3,2048
400976a0:	e0bff817 	ldw	r2,-32(fp)
400976a4:	1885c83a 	sub	r2,r3,r2
400976a8:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
400976ac:	e0bff617 	ldw	r2,-40(fp)
400976b0:	1000011e 	bne	r2,zero,400976b8 <altera_avalon_jtag_uart_read+0x80>
        break; /* No more data available */
400976b4:	00001d06 	br	4009772c <altera_avalon_jtag_uart_read+0xf4>

      if (n > space)
400976b8:	e0fffe17 	ldw	r3,-8(fp)
400976bc:	e0bff617 	ldw	r2,-40(fp)
400976c0:	1880022e 	bgeu	r3,r2,400976cc <altera_avalon_jtag_uart_read+0x94>
        n = space;
400976c4:	e0bffe17 	ldw	r2,-8(fp)
400976c8:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
400976cc:	e0bff817 	ldw	r2,-32(fp)
400976d0:	10800e04 	addi	r2,r2,56
400976d4:	e0fffc17 	ldw	r3,-16(fp)
400976d8:	1885883a 	add	r2,r3,r2
400976dc:	e13ff517 	ldw	r4,-44(fp)
400976e0:	100b883a 	mov	r5,r2
400976e4:	e1bff617 	ldw	r6,-40(fp)
400976e8:	008f3f00 	call	4008f3f0 <memcpy>
      ptr   += n;
400976ec:	e0fff517 	ldw	r3,-44(fp)
400976f0:	e0bff617 	ldw	r2,-40(fp)
400976f4:	1885883a 	add	r2,r3,r2
400976f8:	e0bff515 	stw	r2,-44(fp)
      space -= n;
400976fc:	e0fffe17 	ldw	r3,-8(fp)
40097700:	e0bff617 	ldw	r2,-40(fp)
40097704:	1885c83a 	sub	r2,r3,r2
40097708:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
4009770c:	e0fff817 	ldw	r3,-32(fp)
40097710:	e0bff617 	ldw	r2,-40(fp)
40097714:	1885883a 	add	r2,r3,r2
40097718:	10c1ffcc 	andi	r3,r2,2047
4009771c:	e0bffc17 	ldw	r2,-16(fp)
40097720:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
40097724:	e0bffe17 	ldw	r2,-8(fp)
40097728:	00bfce16 	blt	zero,r2,40097664 <__alt_mem_epcs+0xfff56664>

    /* If we read any data then return it */
    if (ptr != buffer)
4009772c:	e0fff517 	ldw	r3,-44(fp)
40097730:	e0bffd17 	ldw	r2,-12(fp)
40097734:	18800126 	beq	r3,r2,4009773c <altera_avalon_jtag_uart_read+0x104>
      break;
40097738:	00001506 	br	40097790 <altera_avalon_jtag_uart_read+0x158>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
4009773c:	e0bfff17 	ldw	r2,-4(fp)
40097740:	1090000c 	andi	r2,r2,16384
40097744:	10000126 	beq	r2,zero,4009774c <altera_avalon_jtag_uart_read+0x114>
      break;
40097748:	00001106 	br	40097790 <altera_avalon_jtag_uart_read+0x158>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
4009774c:	0001883a 	nop
40097750:	e0bffc17 	ldw	r2,-16(fp)
40097754:	10c00a17 	ldw	r3,40(r2)
40097758:	e0bff717 	ldw	r2,-36(fp)
4009775c:	1880051e 	bne	r3,r2,40097774 <altera_avalon_jtag_uart_read+0x13c>
40097760:	e0bffc17 	ldw	r2,-16(fp)
40097764:	10c00917 	ldw	r3,36(r2)
40097768:	e0bffc17 	ldw	r2,-16(fp)
4009776c:	10800117 	ldw	r2,4(r2)
40097770:	18bff736 	bltu	r3,r2,40097750 <__alt_mem_epcs+0xfff56750>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
40097774:	e0bffc17 	ldw	r2,-16(fp)
40097778:	10c00a17 	ldw	r3,40(r2)
4009777c:	e0bff717 	ldw	r2,-36(fp)
40097780:	1880011e 	bne	r3,r2,40097788 <altera_avalon_jtag_uart_read+0x150>
      break;
40097784:	00000206 	br	40097790 <altera_avalon_jtag_uart_read+0x158>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
40097788:	e0bffe17 	ldw	r2,-8(fp)
4009778c:	00bfb516 	blt	zero,r2,40097664 <__alt_mem_epcs+0xfff56664>
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
40097790:	e0fff517 	ldw	r3,-44(fp)
40097794:	e0bffd17 	ldw	r2,-12(fp)
40097798:	18801826 	beq	r3,r2,400977fc <altera_avalon_jtag_uart_read+0x1c4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
4009779c:	0005303a 	rdctl	r2,status
400977a0:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
400977a4:	e0fffa17 	ldw	r3,-24(fp)
400977a8:	00bfff84 	movi	r2,-2
400977ac:	1884703a 	and	r2,r3,r2
400977b0:	1001703a 	wrctl	status,r2
  
  return context;
400977b4:	e0bffa17 	ldw	r2,-24(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
400977b8:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
400977bc:	e0bffc17 	ldw	r2,-16(fp)
400977c0:	10800817 	ldw	r2,32(r2)
400977c4:	10c00054 	ori	r3,r2,1
400977c8:	e0bffc17 	ldw	r2,-16(fp)
400977cc:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
400977d0:	e0bffc17 	ldw	r2,-16(fp)
400977d4:	10800017 	ldw	r2,0(r2)
400977d8:	10800104 	addi	r2,r2,4
400977dc:	1007883a 	mov	r3,r2
400977e0:	e0bffc17 	ldw	r2,-16(fp)
400977e4:	10800817 	ldw	r2,32(r2)
400977e8:	18800035 	stwio	r2,0(r3)
400977ec:	e0bff917 	ldw	r2,-28(fp)
400977f0:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
400977f4:	e0bffb17 	ldw	r2,-20(fp)
400977f8:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
400977fc:	e0fff517 	ldw	r3,-44(fp)
40097800:	e0bffd17 	ldw	r2,-12(fp)
40097804:	18800426 	beq	r3,r2,40097818 <altera_avalon_jtag_uart_read+0x1e0>
    return ptr - buffer;
40097808:	e0fff517 	ldw	r3,-44(fp)
4009780c:	e0bffd17 	ldw	r2,-12(fp)
40097810:	1885c83a 	sub	r2,r3,r2
40097814:	00000606 	br	40097830 <altera_avalon_jtag_uart_read+0x1f8>
  else if (flags & O_NONBLOCK)
40097818:	e0bfff17 	ldw	r2,-4(fp)
4009781c:	1090000c 	andi	r2,r2,16384
40097820:	10000226 	beq	r2,zero,4009782c <altera_avalon_jtag_uart_read+0x1f4>
    return -EWOULDBLOCK;
40097824:	00bffd44 	movi	r2,-11
40097828:	00000106 	br	40097830 <altera_avalon_jtag_uart_read+0x1f8>
  else
    return -EIO;
4009782c:	00bffec4 	movi	r2,-5
}
40097830:	e037883a 	mov	sp,fp
40097834:	dfc00117 	ldw	ra,4(sp)
40097838:	df000017 	ldw	fp,0(sp)
4009783c:	dec00204 	addi	sp,sp,8
40097840:	f800283a 	ret

40097844 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
40097844:	defff304 	addi	sp,sp,-52
40097848:	dfc00c15 	stw	ra,48(sp)
4009784c:	df000b15 	stw	fp,44(sp)
40097850:	df000b04 	addi	fp,sp,44
40097854:	e13ffc15 	stw	r4,-16(fp)
40097858:	e17ffd15 	stw	r5,-12(fp)
4009785c:	e1bffe15 	stw	r6,-8(fp)
40097860:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
40097864:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
40097868:	e0bffd17 	ldw	r2,-12(fp)
4009786c:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
40097870:	00003806 	br	40097954 <altera_avalon_jtag_uart_write+0x110>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
40097874:	e0bffc17 	ldw	r2,-16(fp)
40097878:	10800c17 	ldw	r2,48(r2)
4009787c:	e0bff815 	stw	r2,-32(fp)
      out = sp->tx_out;
40097880:	e0bffc17 	ldw	r2,-16(fp)
40097884:	10800d17 	ldw	r2,52(r2)
40097888:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
4009788c:	e0fff817 	ldw	r3,-32(fp)
40097890:	e0bff517 	ldw	r2,-44(fp)
40097894:	1880062e 	bgeu	r3,r2,400978b0 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
40097898:	e0fff517 	ldw	r3,-44(fp)
4009789c:	e0bff817 	ldw	r2,-32(fp)
400978a0:	1885c83a 	sub	r2,r3,r2
400978a4:	10bfffc4 	addi	r2,r2,-1
400978a8:	e0bff615 	stw	r2,-40(fp)
400978ac:	00000b06 	br	400978dc <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
400978b0:	e0bff517 	ldw	r2,-44(fp)
400978b4:	10000526 	beq	r2,zero,400978cc <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
400978b8:	00c20004 	movi	r3,2048
400978bc:	e0bff817 	ldw	r2,-32(fp)
400978c0:	1885c83a 	sub	r2,r3,r2
400978c4:	e0bff615 	stw	r2,-40(fp)
400978c8:	00000406 	br	400978dc <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
400978cc:	00c1ffc4 	movi	r3,2047
400978d0:	e0bff817 	ldw	r2,-32(fp)
400978d4:	1885c83a 	sub	r2,r3,r2
400978d8:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
400978dc:	e0bff617 	ldw	r2,-40(fp)
400978e0:	1000011e 	bne	r2,zero,400978e8 <altera_avalon_jtag_uart_write+0xa4>
        break;
400978e4:	00001d06 	br	4009795c <altera_avalon_jtag_uart_write+0x118>

      if (n > count)
400978e8:	e0fffe17 	ldw	r3,-8(fp)
400978ec:	e0bff617 	ldw	r2,-40(fp)
400978f0:	1880022e 	bgeu	r3,r2,400978fc <altera_avalon_jtag_uart_write+0xb8>
        n = count;
400978f4:	e0bffe17 	ldw	r2,-8(fp)
400978f8:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
400978fc:	e0bff817 	ldw	r2,-32(fp)
40097900:	10820e04 	addi	r2,r2,2104
40097904:	e0fffc17 	ldw	r3,-16(fp)
40097908:	1885883a 	add	r2,r3,r2
4009790c:	1009883a 	mov	r4,r2
40097910:	e17ffd17 	ldw	r5,-12(fp)
40097914:	e1bff617 	ldw	r6,-40(fp)
40097918:	008f3f00 	call	4008f3f0 <memcpy>
      ptr   += n;
4009791c:	e0fffd17 	ldw	r3,-12(fp)
40097920:	e0bff617 	ldw	r2,-40(fp)
40097924:	1885883a 	add	r2,r3,r2
40097928:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
4009792c:	e0fffe17 	ldw	r3,-8(fp)
40097930:	e0bff617 	ldw	r2,-40(fp)
40097934:	1885c83a 	sub	r2,r3,r2
40097938:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
4009793c:	e0fff817 	ldw	r3,-32(fp)
40097940:	e0bff617 	ldw	r2,-40(fp)
40097944:	1885883a 	add	r2,r3,r2
40097948:	10c1ffcc 	andi	r3,r2,2047
4009794c:	e0bffc17 	ldw	r2,-16(fp)
40097950:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
40097954:	e0bffe17 	ldw	r2,-8(fp)
40097958:	00bfc616 	blt	zero,r2,40097874 <__alt_mem_epcs+0xfff56874>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
4009795c:	0005303a 	rdctl	r2,status
40097960:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
40097964:	e0fffa17 	ldw	r3,-24(fp)
40097968:	00bfff84 	movi	r2,-2
4009796c:	1884703a 	and	r2,r3,r2
40097970:	1001703a 	wrctl	status,r2
  
  return context;
40097974:	e0bffa17 	ldw	r2,-24(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
40097978:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
4009797c:	e0bffc17 	ldw	r2,-16(fp)
40097980:	10800817 	ldw	r2,32(r2)
40097984:	10c00094 	ori	r3,r2,2
40097988:	e0bffc17 	ldw	r2,-16(fp)
4009798c:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
40097990:	e0bffc17 	ldw	r2,-16(fp)
40097994:	10800017 	ldw	r2,0(r2)
40097998:	10800104 	addi	r2,r2,4
4009799c:	1007883a 	mov	r3,r2
400979a0:	e0bffc17 	ldw	r2,-16(fp)
400979a4:	10800817 	ldw	r2,32(r2)
400979a8:	18800035 	stwio	r2,0(r3)
400979ac:	e0bff917 	ldw	r2,-28(fp)
400979b0:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
400979b4:	e0bffb17 	ldw	r2,-20(fp)
400979b8:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
400979bc:	e0bffe17 	ldw	r2,-8(fp)
400979c0:	0080120e 	bge	zero,r2,40097a0c <altera_avalon_jtag_uart_write+0x1c8>
    {
      if (flags & O_NONBLOCK)
400979c4:	e0bfff17 	ldw	r2,-4(fp)
400979c8:	1090000c 	andi	r2,r2,16384
400979cc:	10000126 	beq	r2,zero,400979d4 <altera_avalon_jtag_uart_write+0x190>
        break;
400979d0:	00001006 	br	40097a14 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
400979d4:	0001883a 	nop
400979d8:	e0bffc17 	ldw	r2,-16(fp)
400979dc:	10c00d17 	ldw	r3,52(r2)
400979e0:	e0bff517 	ldw	r2,-44(fp)
400979e4:	1880051e 	bne	r3,r2,400979fc <altera_avalon_jtag_uart_write+0x1b8>
400979e8:	e0bffc17 	ldw	r2,-16(fp)
400979ec:	10c00917 	ldw	r3,36(r2)
400979f0:	e0bffc17 	ldw	r2,-16(fp)
400979f4:	10800117 	ldw	r2,4(r2)
400979f8:	18bff736 	bltu	r3,r2,400979d8 <__alt_mem_epcs+0xfff569d8>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
400979fc:	e0bffc17 	ldw	r2,-16(fp)
40097a00:	10800917 	ldw	r2,36(r2)
40097a04:	10000126 	beq	r2,zero,40097a0c <altera_avalon_jtag_uart_write+0x1c8>
         break;
40097a08:	00000206 	br	40097a14 <altera_avalon_jtag_uart_write+0x1d0>
    }
  }
  while (count > 0);
40097a0c:	e0bffe17 	ldw	r2,-8(fp)
40097a10:	00bf9716 	blt	zero,r2,40097870 <__alt_mem_epcs+0xfff56870>
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
40097a14:	e0fffd17 	ldw	r3,-12(fp)
40097a18:	e0bff717 	ldw	r2,-36(fp)
40097a1c:	18800426 	beq	r3,r2,40097a30 <altera_avalon_jtag_uart_write+0x1ec>
    return ptr - start;
40097a20:	e0fffd17 	ldw	r3,-12(fp)
40097a24:	e0bff717 	ldw	r2,-36(fp)
40097a28:	1885c83a 	sub	r2,r3,r2
40097a2c:	00000606 	br	40097a48 <altera_avalon_jtag_uart_write+0x204>
  else if (flags & O_NONBLOCK)
40097a30:	e0bfff17 	ldw	r2,-4(fp)
40097a34:	1090000c 	andi	r2,r2,16384
40097a38:	10000226 	beq	r2,zero,40097a44 <altera_avalon_jtag_uart_write+0x200>
    return -EWOULDBLOCK;
40097a3c:	00bffd44 	movi	r2,-11
40097a40:	00000106 	br	40097a48 <altera_avalon_jtag_uart_write+0x204>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
40097a44:	00bffec4 	movi	r2,-5
}
40097a48:	e037883a 	mov	sp,fp
40097a4c:	dfc00117 	ldw	ra,4(sp)
40097a50:	df000017 	ldw	fp,0(sp)
40097a54:	dec00204 	addi	sp,sp,8
40097a58:	f800283a 	ret

40097a5c <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
40097a5c:	defffa04 	addi	sp,sp,-24
40097a60:	dfc00515 	stw	ra,20(sp)
40097a64:	df000415 	stw	fp,16(sp)
40097a68:	df000404 	addi	fp,sp,16
40097a6c:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
40097a70:	0007883a 	mov	r3,zero
40097a74:	e0bfff17 	ldw	r2,-4(fp)
40097a78:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
40097a7c:	e0bfff17 	ldw	r2,-4(fp)
40097a80:	10800104 	addi	r2,r2,4
40097a84:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
40097a88:	0005303a 	rdctl	r2,status
40097a8c:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
40097a90:	e0fffd17 	ldw	r3,-12(fp)
40097a94:	00bfff84 	movi	r2,-2
40097a98:	1884703a 	and	r2,r3,r2
40097a9c:	1001703a 	wrctl	status,r2
  
  return context;
40097aa0:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
40097aa4:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
40097aa8:	00961a40 	call	400961a4 <alt_tick>
40097aac:	e0bffc17 	ldw	r2,-16(fp)
40097ab0:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
40097ab4:	e0bffe17 	ldw	r2,-8(fp)
40097ab8:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
40097abc:	e037883a 	mov	sp,fp
40097ac0:	dfc00117 	ldw	ra,4(sp)
40097ac4:	df000017 	ldw	fp,0(sp)
40097ac8:	dec00204 	addi	sp,sp,8
40097acc:	f800283a 	ret

40097ad0 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
40097ad0:	defff804 	addi	sp,sp,-32
40097ad4:	dfc00715 	stw	ra,28(sp)
40097ad8:	df000615 	stw	fp,24(sp)
40097adc:	df000604 	addi	fp,sp,24
40097ae0:	e13ffc15 	stw	r4,-16(fp)
40097ae4:	e17ffd15 	stw	r5,-12(fp)
40097ae8:	e1bffe15 	stw	r6,-8(fp)
40097aec:	e1ffff15 	stw	r7,-4(fp)
40097af0:	e0bfff17 	ldw	r2,-4(fp)
40097af4:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
40097af8:	009002b4 	movhi	r2,16394
40097afc:	10b73804 	addi	r2,r2,-8992
40097b00:	10800017 	ldw	r2,0(r2)
40097b04:	1000041e 	bne	r2,zero,40097b18 <alt_avalon_timer_sc_init+0x48>
  {
    _alt_tick_rate = nticks;
40097b08:	009002b4 	movhi	r2,16394
40097b0c:	10b73804 	addi	r2,r2,-8992
40097b10:	e0fffb17 	ldw	r3,-20(fp)
40097b14:	10c00015 	stw	r3,0(r2)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
40097b18:	e0bffc17 	ldw	r2,-16(fp)
40097b1c:	10800104 	addi	r2,r2,4
40097b20:	00c001c4 	movi	r3,7
40097b24:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
40097b28:	d8000015 	stw	zero,0(sp)
40097b2c:	e13ffd17 	ldw	r4,-12(fp)
40097b30:	e17ffe17 	ldw	r5,-8(fp)
40097b34:	01900274 	movhi	r6,16393
40097b38:	319e9704 	addi	r6,r6,31324
40097b3c:	e1fffc17 	ldw	r7,-16(fp)
40097b40:	0098e740 	call	40098e74 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
40097b44:	e037883a 	mov	sp,fp
40097b48:	dfc00117 	ldw	ra,4(sp)
40097b4c:	df000017 	ldw	fp,0(sp)
40097b50:	dec00204 	addi	sp,sp,8
40097b54:	f800283a 	ret

40097b58 <altera_avalon_uart_read_fd>:
 *
 */

int 
altera_avalon_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
40097b58:	defffa04 	addi	sp,sp,-24
40097b5c:	dfc00515 	stw	ra,20(sp)
40097b60:	df000415 	stw	fp,16(sp)
40097b64:	df000404 	addi	fp,sp,16
40097b68:	e13ffd15 	stw	r4,-12(fp)
40097b6c:	e17ffe15 	stw	r5,-8(fp)
40097b70:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
40097b74:	e0bffd17 	ldw	r2,-12(fp)
40097b78:	10800017 	ldw	r2,0(r2)
40097b7c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_uart_read(&dev->state, buffer, space,
40097b80:	e0bffc17 	ldw	r2,-16(fp)
40097b84:	10c00a04 	addi	r3,r2,40
40097b88:	e0bffd17 	ldw	r2,-12(fp)
40097b8c:	10800217 	ldw	r2,8(r2)
40097b90:	1809883a 	mov	r4,r3
40097b94:	e17ffe17 	ldw	r5,-8(fp)
40097b98:	e1bfff17 	ldw	r6,-4(fp)
40097b9c:	100f883a 	mov	r7,r2
40097ba0:	00980700 	call	40098070 <altera_avalon_uart_read>
      fd->fd_flags);
}
40097ba4:	e037883a 	mov	sp,fp
40097ba8:	dfc00117 	ldw	ra,4(sp)
40097bac:	df000017 	ldw	fp,0(sp)
40097bb0:	dec00204 	addi	sp,sp,8
40097bb4:	f800283a 	ret

40097bb8 <altera_avalon_uart_write_fd>:

int 
altera_avalon_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
40097bb8:	defffa04 	addi	sp,sp,-24
40097bbc:	dfc00515 	stw	ra,20(sp)
40097bc0:	df000415 	stw	fp,16(sp)
40097bc4:	df000404 	addi	fp,sp,16
40097bc8:	e13ffd15 	stw	r4,-12(fp)
40097bcc:	e17ffe15 	stw	r5,-8(fp)
40097bd0:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
40097bd4:	e0bffd17 	ldw	r2,-12(fp)
40097bd8:	10800017 	ldw	r2,0(r2)
40097bdc:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_uart_write(&dev->state, buffer, space,
40097be0:	e0bffc17 	ldw	r2,-16(fp)
40097be4:	10c00a04 	addi	r3,r2,40
40097be8:	e0bffd17 	ldw	r2,-12(fp)
40097bec:	10800217 	ldw	r2,8(r2)
40097bf0:	1809883a 	mov	r4,r3
40097bf4:	e17ffe17 	ldw	r5,-8(fp)
40097bf8:	e1bfff17 	ldw	r6,-4(fp)
40097bfc:	100f883a 	mov	r7,r2
40097c00:	009829c0 	call	4009829c <altera_avalon_uart_write>
      fd->fd_flags);
}
40097c04:	e037883a 	mov	sp,fp
40097c08:	dfc00117 	ldw	ra,4(sp)
40097c0c:	df000017 	ldw	fp,0(sp)
40097c10:	dec00204 	addi	sp,sp,8
40097c14:	f800283a 	ret

40097c18 <altera_avalon_uart_close_fd>:

#endif /* ALTERA_AVALON_UART_USE_IOCTL */

int 
altera_avalon_uart_close_fd(alt_fd* fd)
{
40097c18:	defffc04 	addi	sp,sp,-16
40097c1c:	dfc00315 	stw	ra,12(sp)
40097c20:	df000215 	stw	fp,8(sp)
40097c24:	df000204 	addi	fp,sp,8
40097c28:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
40097c2c:	e0bfff17 	ldw	r2,-4(fp)
40097c30:	10800017 	ldw	r2,0(r2)
40097c34:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_uart_close(&dev->state, fd->fd_flags);
40097c38:	e0bffe17 	ldw	r2,-8(fp)
40097c3c:	10c00a04 	addi	r3,r2,40
40097c40:	e0bfff17 	ldw	r2,-4(fp)
40097c44:	10800217 	ldw	r2,8(r2)
40097c48:	1809883a 	mov	r4,r3
40097c4c:	100b883a 	mov	r5,r2
40097c50:	0097fcc0 	call	40097fcc <altera_avalon_uart_close>
}
40097c54:	e037883a 	mov	sp,fp
40097c58:	dfc00117 	ldw	ra,4(sp)
40097c5c:	df000017 	ldw	fp,0(sp)
40097c60:	dec00204 	addi	sp,sp,8
40097c64:	f800283a 	ret

40097c68 <altera_avalon_uart_init>:
  alt_u32 status);

void 
altera_avalon_uart_init(altera_avalon_uart_state* sp, 
  alt_u32 irq_controller_id,  alt_u32 irq)
{
40097c68:	defff804 	addi	sp,sp,-32
40097c6c:	dfc00715 	stw	ra,28(sp)
40097c70:	df000615 	stw	fp,24(sp)
40097c74:	df000604 	addi	fp,sp,24
40097c78:	e13ffd15 	stw	r4,-12(fp)
40097c7c:	e17ffe15 	stw	r5,-8(fp)
40097c80:	e1bfff15 	stw	r6,-4(fp)
  void* base = sp->base;
40097c84:	e0bffd17 	ldw	r2,-12(fp)
40097c88:	10800017 	ldw	r2,0(r2)
40097c8c:	e0bffb15 	stw	r2,-20(fp)
 * HAL.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_no_error (void)
{
  return 0;
40097c90:	0005883a 	mov	r2,zero
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
40097c94:	1000041e 	bne	r2,zero,40097ca8 <altera_avalon_uart_init+0x40>
40097c98:	0005883a 	mov	r2,zero
  /* 
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
40097c9c:	1000021e 	bne	r2,zero,40097ca8 <altera_avalon_uart_init+0x40>
40097ca0:	0005883a 	mov	r2,zero
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
40097ca4:	10000226 	beq	r2,zero,40097cb0 <altera_avalon_uart_init+0x48>
40097ca8:	00800044 	movi	r2,1
40097cac:	00000106 	br	40097cb4 <altera_avalon_uart_init+0x4c>
40097cb0:	0005883a 	mov	r2,zero
  /* 
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
40097cb4:	e0bffc15 	stw	r2,-16(fp)
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
          ALT_SEM_CREATE (&sp->write_lock, 1);

  if (!error)
40097cb8:	e0bffc17 	ldw	r2,-16(fp)
40097cbc:	10000f1e 	bne	r2,zero,40097cfc <altera_avalon_uart_init+0x94>
  {
    /* enable interrupts at the device */
    sp->ctrl = ALTERA_AVALON_UART_CONTROL_RTS_MSK  |
40097cc0:	e0bffd17 	ldw	r2,-12(fp)
40097cc4:	00c32004 	movi	r3,3200
40097cc8:	10c00115 	stw	r3,4(r2)
                ALTERA_AVALON_UART_CONTROL_RRDY_MSK |
                ALTERA_AVALON_UART_CONTROL_DCTS_MSK;

    IOWR_ALTERA_AVALON_UART_CONTROL(base, sp->ctrl); 
40097ccc:	e0bffb17 	ldw	r2,-20(fp)
40097cd0:	10800304 	addi	r2,r2,12
40097cd4:	e0fffd17 	ldw	r3,-12(fp)
40097cd8:	18c00117 	ldw	r3,4(r3)
40097cdc:	10c00035 	stwio	r3,0(r2)
  
    /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
    alt_ic_isr_register(irq_controller_id, irq, altera_avalon_uart_irq, sp, 
40097ce0:	d8000015 	stw	zero,0(sp)
40097ce4:	e13ffe17 	ldw	r4,-8(fp)
40097ce8:	e17fff17 	ldw	r5,-4(fp)
40097cec:	01900274 	movhi	r6,16393
40097cf0:	319f4404 	addi	r6,r6,32016
40097cf4:	e1fffd17 	ldw	r7,-12(fp)
40097cf8:	0098e740 	call	40098e74 <alt_ic_isr_register>
      0x0);
#else
    alt_irq_register (irq, sp, altera_avalon_uart_irq);
#endif  
  }
}
40097cfc:	e037883a 	mov	sp,fp
40097d00:	dfc00117 	ldw	ra,4(sp)
40097d04:	df000017 	ldw	fp,0(sp)
40097d08:	dec00204 	addi	sp,sp,8
40097d0c:	f800283a 	ret

40097d10 <altera_avalon_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_uart_irq(void* context)
#else
static void altera_avalon_uart_irq(void* context, alt_u32 id)
#endif
{
40097d10:	defffa04 	addi	sp,sp,-24
40097d14:	dfc00515 	stw	ra,20(sp)
40097d18:	df000415 	stw	fp,16(sp)
40097d1c:	df000404 	addi	fp,sp,16
40097d20:	e13fff15 	stw	r4,-4(fp)
  alt_u32 status;

  altera_avalon_uart_state* sp = (altera_avalon_uart_state*) context;
40097d24:	e0bfff17 	ldw	r2,-4(fp)
40097d28:	e0bffc15 	stw	r2,-16(fp)
  void* base               = sp->base;
40097d2c:	e0bffc17 	ldw	r2,-16(fp)
40097d30:	10800017 	ldw	r2,0(r2)
40097d34:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Read the status register in order to determine the cause of the
   * interrupt.
   */

  status = IORD_ALTERA_AVALON_UART_STATUS(base);
40097d38:	e0bffd17 	ldw	r2,-12(fp)
40097d3c:	10800204 	addi	r2,r2,8
40097d40:	10800037 	ldwio	r2,0(r2)
40097d44:	e0bffe15 	stw	r2,-8(fp)

  /* Clear any error flags set at the device */
  IOWR_ALTERA_AVALON_UART_STATUS(base, 0);
40097d48:	e0bffd17 	ldw	r2,-12(fp)
40097d4c:	10800204 	addi	r2,r2,8
40097d50:	0007883a 	mov	r3,zero
40097d54:	10c00035 	stwio	r3,0(r2)

  /* Dummy read to ensure IRQ is negated before ISR returns */
  IORD_ALTERA_AVALON_UART_STATUS(base);
40097d58:	e0bffd17 	ldw	r2,-12(fp)
40097d5c:	10800204 	addi	r2,r2,8
40097d60:	10800037 	ldwio	r2,0(r2)
  
  /* process a read irq */
  if (status & ALTERA_AVALON_UART_STATUS_RRDY_MSK)
40097d64:	e0bffe17 	ldw	r2,-8(fp)
40097d68:	1080200c 	andi	r2,r2,128
40097d6c:	10000326 	beq	r2,zero,40097d7c <altera_avalon_uart_irq+0x6c>
  {
    altera_avalon_uart_rxirq(sp, status);
40097d70:	e13ffc17 	ldw	r4,-16(fp)
40097d74:	e17ffe17 	ldw	r5,-8(fp)
40097d78:	0097da80 	call	40097da8 <altera_avalon_uart_rxirq>
  }

  /* process a write irq */
  if (status & (ALTERA_AVALON_UART_STATUS_TRDY_MSK | 
40097d7c:	e0bffe17 	ldw	r2,-8(fp)
40097d80:	1081100c 	andi	r2,r2,1088
40097d84:	10000326 	beq	r2,zero,40097d94 <altera_avalon_uart_irq+0x84>
                  ALTERA_AVALON_UART_STATUS_DCTS_MSK))
  {
    altera_avalon_uart_txirq(sp, status);
40097d88:	e13ffc17 	ldw	r4,-16(fp)
40097d8c:	e17ffe17 	ldw	r5,-8(fp)
40097d90:	0097e880 	call	40097e88 <altera_avalon_uart_txirq>
  }
  

}
40097d94:	e037883a 	mov	sp,fp
40097d98:	dfc00117 	ldw	ra,4(sp)
40097d9c:	df000017 	ldw	fp,0(sp)
40097da0:	dec00204 	addi	sp,sp,8
40097da4:	f800283a 	ret

40097da8 <altera_avalon_uart_rxirq>:
 * the receive circular buffer, and sets the apropriate flags to indicate 
 * that there is data ready to be processed.
 */
static void 
altera_avalon_uart_rxirq(altera_avalon_uart_state* sp, alt_u32 status)
{
40097da8:	defffc04 	addi	sp,sp,-16
40097dac:	df000315 	stw	fp,12(sp)
40097db0:	df000304 	addi	fp,sp,12
40097db4:	e13ffe15 	stw	r4,-8(fp)
40097db8:	e17fff15 	stw	r5,-4(fp)
  alt_u32 next;
  
  /* If there was an error, discard the data */

  if (status & (ALTERA_AVALON_UART_STATUS_PE_MSK | 
40097dbc:	e0bfff17 	ldw	r2,-4(fp)
40097dc0:	108000cc 	andi	r2,r2,3
40097dc4:	10000126 	beq	r2,zero,40097dcc <altera_avalon_uart_rxirq+0x24>
                  ALTERA_AVALON_UART_STATUS_FE_MSK))
  {
    return;
40097dc8:	00002b06 	br	40097e78 <altera_avalon_uart_rxirq+0xd0>
   * In a multi-threaded environment, set the read event flag to indicate
   * that there is data ready. This is only done if the circular buffer was
   * previously empty.
   */

  if (sp->rx_end == sp->rx_start)
40097dcc:	e0bffe17 	ldw	r2,-8(fp)
40097dd0:	10800317 	ldw	r2,12(r2)
40097dd4:	e0bffe17 	ldw	r2,-8(fp)
40097dd8:	10800217 	ldw	r2,8(r2)
    ALT_FLAG_POST (sp->events, ALT_UART_READ_RDY, OS_FLAG_SET);
  }

  /* Determine which slot to use next in the circular buffer */

  next = (sp->rx_end + 1) & ALT_AVALON_UART_BUF_MSK;
40097ddc:	e0bffe17 	ldw	r2,-8(fp)
40097de0:	10800317 	ldw	r2,12(r2)
40097de4:	10800044 	addi	r2,r2,1
40097de8:	10800fcc 	andi	r2,r2,63
40097dec:	e0bffd15 	stw	r2,-12(fp)

  /* Transfer data from the device to the circular buffer */

  sp->rx_buf[sp->rx_end] = IORD_ALTERA_AVALON_UART_RXDATA(sp->base);
40097df0:	e0bffe17 	ldw	r2,-8(fp)
40097df4:	10800317 	ldw	r2,12(r2)
40097df8:	e0fffe17 	ldw	r3,-8(fp)
40097dfc:	18c00017 	ldw	r3,0(r3)
40097e00:	18c00037 	ldwio	r3,0(r3)
40097e04:	1809883a 	mov	r4,r3
40097e08:	e0fffe17 	ldw	r3,-8(fp)
40097e0c:	1885883a 	add	r2,r3,r2
40097e10:	10800704 	addi	r2,r2,28
40097e14:	11000005 	stb	r4,0(r2)

  sp->rx_end = next;
40097e18:	e0bffe17 	ldw	r2,-8(fp)
40097e1c:	e0fffd17 	ldw	r3,-12(fp)
40097e20:	10c00315 	stw	r3,12(r2)

  next = (sp->rx_end + 1) & ALT_AVALON_UART_BUF_MSK;
40097e24:	e0bffe17 	ldw	r2,-8(fp)
40097e28:	10800317 	ldw	r2,12(r2)
40097e2c:	10800044 	addi	r2,r2,1
40097e30:	10800fcc 	andi	r2,r2,63
40097e34:	e0bffd15 	stw	r2,-12(fp)
  /*
   * If the cicular buffer was full, disable interrupts. Interrupts will be
   * re-enabled when data is removed from the buffer.
   */

  if (next == sp->rx_start)
40097e38:	e0bffe17 	ldw	r2,-8(fp)
40097e3c:	10c00217 	ldw	r3,8(r2)
40097e40:	e0bffd17 	ldw	r2,-12(fp)
40097e44:	18800c1e 	bne	r3,r2,40097e78 <altera_avalon_uart_rxirq+0xd0>
  {
    sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
40097e48:	e0bffe17 	ldw	r2,-8(fp)
40097e4c:	10c00117 	ldw	r3,4(r2)
40097e50:	00bfdfc4 	movi	r2,-129
40097e54:	1886703a 	and	r3,r3,r2
40097e58:	e0bffe17 	ldw	r2,-8(fp)
40097e5c:	10c00115 	stw	r3,4(r2)
    IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl); 
40097e60:	e0bffe17 	ldw	r2,-8(fp)
40097e64:	10800017 	ldw	r2,0(r2)
40097e68:	10800304 	addi	r2,r2,12
40097e6c:	e0fffe17 	ldw	r3,-8(fp)
40097e70:	18c00117 	ldw	r3,4(r3)
40097e74:	10c00035 	stwio	r3,0(r2)
  }   
}
40097e78:	e037883a 	mov	sp,fp
40097e7c:	df000017 	ldw	fp,0(sp)
40097e80:	dec00104 	addi	sp,sp,4
40097e84:	f800283a 	ret

40097e88 <altera_avalon_uart_txirq>:
 * buffer to the device, and sets the apropriate flags to indicate that 
 * there is data ready to be processed.
 */
static void 
altera_avalon_uart_txirq(altera_avalon_uart_state* sp, alt_u32 status)
{
40097e88:	defffb04 	addi	sp,sp,-20
40097e8c:	df000415 	stw	fp,16(sp)
40097e90:	df000404 	addi	fp,sp,16
40097e94:	e13ffc15 	stw	r4,-16(fp)
40097e98:	e17ffd15 	stw	r5,-12(fp)
  /* Transfer data if there is some ready to be transfered */

  if (sp->tx_start != sp->tx_end)
40097e9c:	e0bffc17 	ldw	r2,-16(fp)
40097ea0:	10c00417 	ldw	r3,16(r2)
40097ea4:	e0bffc17 	ldw	r2,-16(fp)
40097ea8:	10800517 	ldw	r2,20(r2)
40097eac:	18803226 	beq	r3,r2,40097f78 <altera_avalon_uart_txirq+0xf0>
    /* 
     * If the device is using flow control (i.e. RTS/CTS), then the
     * transmitter is required to throttle if CTS is high.
     */

    if (!(sp->flags & ALT_AVALON_UART_FC) ||
40097eb0:	e0bffc17 	ldw	r2,-16(fp)
40097eb4:	10800617 	ldw	r2,24(r2)
40097eb8:	1080008c 	andi	r2,r2,2
40097ebc:	10000326 	beq	r2,zero,40097ecc <altera_avalon_uart_txirq+0x44>
      (status & ALTERA_AVALON_UART_STATUS_CTS_MSK))
40097ec0:	e0bffd17 	ldw	r2,-12(fp)
40097ec4:	1082000c 	andi	r2,r2,2048
    /* 
     * If the device is using flow control (i.e. RTS/CTS), then the
     * transmitter is required to throttle if CTS is high.
     */

    if (!(sp->flags & ALT_AVALON_UART_FC) ||
40097ec8:	10001d26 	beq	r2,zero,40097f40 <altera_avalon_uart_txirq+0xb8>
       * In a multi-threaded environment, set the write event flag to indicate
       * that there is space in the circular buffer. This is only done if the
       * buffer was previously empty.
       */

      if (sp->tx_start == ((sp->tx_end + 1) & ALT_AVALON_UART_BUF_MSK))
40097ecc:	e0bffc17 	ldw	r2,-16(fp)
40097ed0:	10800417 	ldw	r2,16(r2)
40097ed4:	e0bffc17 	ldw	r2,-16(fp)
40097ed8:	10800517 	ldw	r2,20(r2)
                       OS_FLAG_SET);
      }

      /* Write the data to the device */

      IOWR_ALTERA_AVALON_UART_TXDATA(sp->base, sp->tx_buf[sp->tx_start]);
40097edc:	e0bffc17 	ldw	r2,-16(fp)
40097ee0:	10800017 	ldw	r2,0(r2)
40097ee4:	10800104 	addi	r2,r2,4
40097ee8:	e0fffc17 	ldw	r3,-16(fp)
40097eec:	18c00417 	ldw	r3,16(r3)
40097ef0:	e13ffc17 	ldw	r4,-16(fp)
40097ef4:	20c7883a 	add	r3,r4,r3
40097ef8:	18c01704 	addi	r3,r3,92
40097efc:	18c00003 	ldbu	r3,0(r3)
40097f00:	18c03fcc 	andi	r3,r3,255
40097f04:	10c00035 	stwio	r3,0(r2)

      sp->tx_start = (++sp->tx_start) & ALT_AVALON_UART_BUF_MSK;
40097f08:	e0bffc17 	ldw	r2,-16(fp)
40097f0c:	10800417 	ldw	r2,16(r2)
40097f10:	10800044 	addi	r2,r2,1
40097f14:	e0fffc17 	ldw	r3,-16(fp)
40097f18:	18800415 	stw	r2,16(r3)
40097f1c:	10c00fcc 	andi	r3,r2,63
40097f20:	e0bffc17 	ldw	r2,-16(fp)
40097f24:	10c00415 	stw	r3,16(r2)
      /*
       * In case the tranmit interrupt had previously been disabled by 
       * detecting a low value on CTS, it is reenabled here.
       */ 

      sp->ctrl |= ALTERA_AVALON_UART_CONTROL_TRDY_MSK;
40097f28:	e0bffc17 	ldw	r2,-16(fp)
40097f2c:	10800117 	ldw	r2,4(r2)
40097f30:	10c01014 	ori	r3,r2,64
40097f34:	e0bffc17 	ldw	r2,-16(fp)
40097f38:	10c00115 	stw	r3,4(r2)
40097f3c:	00000e06 	br	40097f78 <altera_avalon_uart_txirq+0xf0>
       * the last write to the status register. To avoid this resulting in
       * deadlock, it's necessary to re-check the status register here
       * before throttling.
       */
 
      status = IORD_ALTERA_AVALON_UART_STATUS(sp->base); 
40097f40:	e0bffc17 	ldw	r2,-16(fp)
40097f44:	10800017 	ldw	r2,0(r2)
40097f48:	10800204 	addi	r2,r2,8
40097f4c:	10800037 	ldwio	r2,0(r2)
40097f50:	e0bffd15 	stw	r2,-12(fp)

      if (!(status & ALTERA_AVALON_UART_STATUS_CTS_MSK))
40097f54:	e0bffd17 	ldw	r2,-12(fp)
40097f58:	1082000c 	andi	r2,r2,2048
40097f5c:	1000061e 	bne	r2,zero,40097f78 <altera_avalon_uart_txirq+0xf0>
      {
        sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_TRDY_MSK;
40097f60:	e0bffc17 	ldw	r2,-16(fp)
40097f64:	10c00117 	ldw	r3,4(r2)
40097f68:	00bfefc4 	movi	r2,-65
40097f6c:	1886703a 	and	r3,r3,r2
40097f70:	e0bffc17 	ldw	r2,-16(fp)
40097f74:	10c00115 	stw	r3,4(r2)
  /*
   * If the circular buffer is empty, disable the interrupt. This will be
   * re-enabled when new data is placed in the buffer.
   */

  if (sp->tx_start == sp->tx_end)
40097f78:	e0bffc17 	ldw	r2,-16(fp)
40097f7c:	10c00417 	ldw	r3,16(r2)
40097f80:	e0bffc17 	ldw	r2,-16(fp)
40097f84:	10800517 	ldw	r2,20(r2)
40097f88:	1880061e 	bne	r3,r2,40097fa4 <altera_avalon_uart_txirq+0x11c>
  {
    sp->ctrl &= ~(ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
40097f8c:	e0bffc17 	ldw	r2,-16(fp)
40097f90:	10c00117 	ldw	r3,4(r2)
40097f94:	00beefc4 	movi	r2,-1089
40097f98:	1886703a 	and	r3,r3,r2
40097f9c:	e0bffc17 	ldw	r2,-16(fp)
40097fa0:	10c00115 	stw	r3,4(r2)
                    ALTERA_AVALON_UART_CONTROL_DCTS_MSK);
  }

  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
40097fa4:	e0bffc17 	ldw	r2,-16(fp)
40097fa8:	10800017 	ldw	r2,0(r2)
40097fac:	10800304 	addi	r2,r2,12
40097fb0:	e0fffc17 	ldw	r3,-16(fp)
40097fb4:	18c00117 	ldw	r3,4(r3)
40097fb8:	10c00035 	stwio	r3,0(r2)
}
40097fbc:	e037883a 	mov	sp,fp
40097fc0:	df000017 	ldw	fp,0(sp)
40097fc4:	dec00104 	addi	sp,sp,4
40097fc8:	f800283a 	ret

40097fcc <altera_avalon_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_uart_close(altera_avalon_uart_state* sp, int flags)
{
40097fcc:	defffd04 	addi	sp,sp,-12
40097fd0:	df000215 	stw	fp,8(sp)
40097fd4:	df000204 	addi	fp,sp,8
40097fd8:	e13ffe15 	stw	r4,-8(fp)
40097fdc:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the UART ISR.
   */
  while (sp->tx_start != sp->tx_end) {
40097fe0:	00000506 	br	40097ff8 <altera_avalon_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
40097fe4:	e0bfff17 	ldw	r2,-4(fp)
40097fe8:	1090000c 	andi	r2,r2,16384
40097fec:	10000226 	beq	r2,zero,40097ff8 <altera_avalon_uart_close+0x2c>
      return -EWOULDBLOCK; 
40097ff0:	00bffd44 	movi	r2,-11
40097ff4:	00000606 	br	40098010 <altera_avalon_uart_close+0x44>
int altera_avalon_uart_close(altera_avalon_uart_state* sp, int flags)
{
  /* 
   * Wait for all transmit data to be emptied by the UART ISR.
   */
  while (sp->tx_start != sp->tx_end) {
40097ff8:	e0bffe17 	ldw	r2,-8(fp)
40097ffc:	10c00417 	ldw	r3,16(r2)
40098000:	e0bffe17 	ldw	r2,-8(fp)
40098004:	10800517 	ldw	r2,20(r2)
40098008:	18bff61e 	bne	r3,r2,40097fe4 <__alt_mem_epcs+0xfff56fe4>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
4009800c:	0005883a 	mov	r2,zero
}
40098010:	e037883a 	mov	sp,fp
40098014:	df000017 	ldw	fp,0(sp)
40098018:	dec00104 	addi	sp,sp,4
4009801c:	f800283a 	ret

40098020 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
40098020:	defffe04 	addi	sp,sp,-8
40098024:	dfc00115 	stw	ra,4(sp)
40098028:	df000015 	stw	fp,0(sp)
4009802c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
40098030:	009002b4 	movhi	r2,16394
40098034:	10aff504 	addi	r2,r2,-16428
40098038:	10800017 	ldw	r2,0(r2)
4009803c:	10000526 	beq	r2,zero,40098054 <alt_get_errno+0x34>
40098040:	009002b4 	movhi	r2,16394
40098044:	10aff504 	addi	r2,r2,-16428
40098048:	10800017 	ldw	r2,0(r2)
4009804c:	103ee83a 	callr	r2
40098050:	00000206 	br	4009805c <alt_get_errno+0x3c>
40098054:	009002b4 	movhi	r2,16394
40098058:	10b73304 	addi	r2,r2,-9012
}
4009805c:	e037883a 	mov	sp,fp
40098060:	dfc00117 	ldw	ra,4(sp)
40098064:	df000017 	ldw	fp,0(sp)
40098068:	dec00204 	addi	sp,sp,8
4009806c:	f800283a 	ret

40098070 <altera_avalon_uart_read>:
 */

int 
altera_avalon_uart_read(altera_avalon_uart_state* sp, char* ptr, int len,
  int flags)
{
40098070:	defff204 	addi	sp,sp,-56
40098074:	dfc00d15 	stw	ra,52(sp)
40098078:	df000c15 	stw	fp,48(sp)
4009807c:	df000c04 	addi	fp,sp,48
40098080:	e13ffc15 	stw	r4,-16(fp)
40098084:	e17ffd15 	stw	r5,-12(fp)
40098088:	e1bffe15 	stw	r6,-8(fp)
4009808c:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context context;
  int             block;
  alt_u8          read_would_block = 0;
40098090:	e03ff405 	stb	zero,-48(fp)
  int             count = 0;
40098094:	e03ff515 	stw	zero,-44(fp)
  /* 
   * Construct a flag to indicate whether the device is being accessed in
   * blocking or non-blocking mode.
   */

  block = !(flags & O_NONBLOCK);
40098098:	e0bfff17 	ldw	r2,-4(fp)
4009809c:	1090000c 	andi	r2,r2,16384
400980a0:	1005003a 	cmpeq	r2,r2,zero
400980a4:	10803fcc 	andi	r2,r2,255
400980a8:	e0bff615 	stw	r2,-40(fp)
    /*
     * Read the required amount of data, until the circular buffer runs
     * empty
     */

    while ((count < len) && (sp->rx_start != sp->rx_end))
400980ac:	00001306 	br	400980fc <altera_avalon_uart_read+0x8c>
    {
      count++;
400980b0:	e0bff517 	ldw	r2,-44(fp)
400980b4:	10800044 	addi	r2,r2,1
400980b8:	e0bff515 	stw	r2,-44(fp)
      *ptr++ = sp->rx_buf[sp->rx_start];
400980bc:	e0bffd17 	ldw	r2,-12(fp)
400980c0:	10c00044 	addi	r3,r2,1
400980c4:	e0fffd15 	stw	r3,-12(fp)
400980c8:	e0fffc17 	ldw	r3,-16(fp)
400980cc:	18c00217 	ldw	r3,8(r3)
400980d0:	e13ffc17 	ldw	r4,-16(fp)
400980d4:	20c7883a 	add	r3,r4,r3
400980d8:	18c00704 	addi	r3,r3,28
400980dc:	18c00003 	ldbu	r3,0(r3)
400980e0:	10c00005 	stb	r3,0(r2)
      
      sp->rx_start = (sp->rx_start+1) & ALT_AVALON_UART_BUF_MSK;
400980e4:	e0bffc17 	ldw	r2,-16(fp)
400980e8:	10800217 	ldw	r2,8(r2)
400980ec:	10800044 	addi	r2,r2,1
400980f0:	10c00fcc 	andi	r3,r2,63
400980f4:	e0bffc17 	ldw	r2,-16(fp)
400980f8:	10c00215 	stw	r3,8(r2)
    /*
     * Read the required amount of data, until the circular buffer runs
     * empty
     */

    while ((count < len) && (sp->rx_start != sp->rx_end))
400980fc:	e0fff517 	ldw	r3,-44(fp)
40098100:	e0bffe17 	ldw	r2,-8(fp)
40098104:	1880050e 	bge	r3,r2,4009811c <altera_avalon_uart_read+0xac>
40098108:	e0bffc17 	ldw	r2,-16(fp)
4009810c:	10c00217 	ldw	r3,8(r2)
40098110:	e0bffc17 	ldw	r2,-16(fp)
40098114:	10800317 	ldw	r2,12(r2)
40098118:	18bfe51e 	bne	r3,r2,400980b0 <__alt_mem_epcs+0xfff570b0>
    /*
     * If no data has been transferred, the circular buffer is empty, and
     * this is not a non-blocking access, block waiting for data to arrive.
     */

    if (!count && (sp->rx_start == sp->rx_end))
4009811c:	e0bff517 	ldw	r2,-44(fp)
40098120:	1000251e 	bne	r2,zero,400981b8 <altera_avalon_uart_read+0x148>
40098124:	e0bffc17 	ldw	r2,-16(fp)
40098128:	10c00217 	ldw	r3,8(r2)
4009812c:	e0bffc17 	ldw	r2,-16(fp)
40098130:	10800317 	ldw	r2,12(r2)
40098134:	1880201e 	bne	r3,r2,400981b8 <altera_avalon_uart_read+0x148>
    {
      if (!block)
40098138:	e0bff617 	ldw	r2,-40(fp)
4009813c:	1000071e 	bne	r2,zero,4009815c <altera_avalon_uart_read+0xec>
      {
        /* Set errno to indicate the reason we're not returning any data */

        ALT_ERRNO = EWOULDBLOCK;
40098140:	00980200 	call	40098020 <alt_get_errno>
40098144:	1007883a 	mov	r3,r2
40098148:	008002c4 	movi	r2,11
4009814c:	18800015 	stw	r2,0(r3)
        read_would_block = 1;
40098150:	00800044 	movi	r2,1
40098154:	e0bff405 	stb	r2,-48(fp)
        break;
40098158:	00001b06 	br	400981c8 <altera_avalon_uart_read+0x158>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
4009815c:	0005303a 	rdctl	r2,status
40098160:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
40098164:	e0fff817 	ldw	r3,-32(fp)
40098168:	00bfff84 	movi	r2,-2
4009816c:	1884703a 	and	r2,r3,r2
40098170:	1001703a 	wrctl	status,r2
  
  return context;
40098174:	e0bff817 	ldw	r2,-32(fp)
      {
       /* Block waiting for some data to arrive */

       /* First, ensure read interrupts are enabled to avoid deadlock */

       context = alt_irq_disable_all ();
40098178:	e0bff715 	stw	r2,-36(fp)
       sp->ctrl |= ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
4009817c:	e0bffc17 	ldw	r2,-16(fp)
40098180:	10800117 	ldw	r2,4(r2)
40098184:	10c02014 	ori	r3,r2,128
40098188:	e0bffc17 	ldw	r2,-16(fp)
4009818c:	10c00115 	stw	r3,4(r2)
       IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
40098190:	e0bffc17 	ldw	r2,-16(fp)
40098194:	10800017 	ldw	r2,0(r2)
40098198:	10800304 	addi	r2,r2,12
4009819c:	e0fffc17 	ldw	r3,-16(fp)
400981a0:	18c00117 	ldw	r3,4(r3)
400981a4:	10c00035 	stwio	r3,0(r2)
400981a8:	e0bff717 	ldw	r2,-36(fp)
400981ac:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
400981b0:	e0bff917 	ldw	r2,-28(fp)
400981b4:	1001703a 	wrctl	status,r2
                      OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                      0);
      }
    }
  }
  while (!count && len);
400981b8:	e0bff517 	ldw	r2,-44(fp)
400981bc:	1000021e 	bne	r2,zero,400981c8 <altera_avalon_uart_read+0x158>
400981c0:	e0bffe17 	ldw	r2,-8(fp)
400981c4:	103fb91e 	bne	r2,zero,400980ac <__alt_mem_epcs+0xfff570ac>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
400981c8:	0005303a 	rdctl	r2,status
400981cc:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
400981d0:	e0fffa17 	ldw	r3,-24(fp)
400981d4:	00bfff84 	movi	r2,-2
400981d8:	1884703a 	and	r2,r3,r2
400981dc:	1001703a 	wrctl	status,r2
  
  return context;
400981e0:	e0bffa17 	ldw	r2,-24(fp)
  /*
   * Ensure that interrupts are enabled, so that the circular buffer can
   * re-fill.
   */

  context = alt_irq_disable_all ();
400981e4:	e0bff715 	stw	r2,-36(fp)
  sp->ctrl |= ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
400981e8:	e0bffc17 	ldw	r2,-16(fp)
400981ec:	10800117 	ldw	r2,4(r2)
400981f0:	10c02014 	ori	r3,r2,128
400981f4:	e0bffc17 	ldw	r2,-16(fp)
400981f8:	10c00115 	stw	r3,4(r2)
  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
400981fc:	e0bffc17 	ldw	r2,-16(fp)
40098200:	10800017 	ldw	r2,0(r2)
40098204:	10800304 	addi	r2,r2,12
40098208:	e0fffc17 	ldw	r3,-16(fp)
4009820c:	18c00117 	ldw	r3,4(r3)
40098210:	10c00035 	stwio	r3,0(r2)
40098214:	e0bff717 	ldw	r2,-36(fp)
40098218:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
4009821c:	e0bffb17 	ldw	r2,-20(fp)
40098220:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (context);

  /* Return the number of bytes read */
  if(read_would_block) {
40098224:	e0bff403 	ldbu	r2,-48(fp)
40098228:	10000226 	beq	r2,zero,40098234 <altera_avalon_uart_read+0x1c4>
    return -EWOULDBLOCK;
4009822c:	00bffd44 	movi	r2,-11
40098230:	00000106 	br	40098238 <altera_avalon_uart_read+0x1c8>
  }
  else {
    return count;
40098234:	e0bff517 	ldw	r2,-44(fp)
  }
}
40098238:	e037883a 	mov	sp,fp
4009823c:	dfc00117 	ldw	ra,4(sp)
40098240:	df000017 	ldw	fp,0(sp)
40098244:	dec00204 	addi	sp,sp,8
40098248:	f800283a 	ret

4009824c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
4009824c:	defffe04 	addi	sp,sp,-8
40098250:	dfc00115 	stw	ra,4(sp)
40098254:	df000015 	stw	fp,0(sp)
40098258:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
4009825c:	009002b4 	movhi	r2,16394
40098260:	10aff504 	addi	r2,r2,-16428
40098264:	10800017 	ldw	r2,0(r2)
40098268:	10000526 	beq	r2,zero,40098280 <alt_get_errno+0x34>
4009826c:	009002b4 	movhi	r2,16394
40098270:	10aff504 	addi	r2,r2,-16428
40098274:	10800017 	ldw	r2,0(r2)
40098278:	103ee83a 	callr	r2
4009827c:	00000206 	br	40098288 <alt_get_errno+0x3c>
40098280:	009002b4 	movhi	r2,16394
40098284:	10b73304 	addi	r2,r2,-9012
}
40098288:	e037883a 	mov	sp,fp
4009828c:	dfc00117 	ldw	ra,4(sp)
40098290:	df000017 	ldw	fp,0(sp)
40098294:	dec00204 	addi	sp,sp,8
40098298:	f800283a 	ret

4009829c <altera_avalon_uart_write>:
 */

int
altera_avalon_uart_write(altera_avalon_uart_state* sp, const char* ptr, int len,
  int flags)
{
4009829c:	defff204 	addi	sp,sp,-56
400982a0:	dfc00d15 	stw	ra,52(sp)
400982a4:	df000c15 	stw	fp,48(sp)
400982a8:	df000c04 	addi	fp,sp,48
400982ac:	e13ffc15 	stw	r4,-16(fp)
400982b0:	e17ffd15 	stw	r5,-12(fp)
400982b4:	e1bffe15 	stw	r6,-8(fp)
400982b8:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context context;
  int             no_block;
  alt_u32         next;
  int             count = len;
400982bc:	e0bffe17 	ldw	r2,-8(fp)
400982c0:	e0bff415 	stw	r2,-48(fp)
  /* 
   * Construct a flag to indicate whether the device is being accessed in
   * blocking or non-blocking mode.
   */

  no_block = (flags & O_NONBLOCK);
400982c4:	e0bfff17 	ldw	r2,-4(fp)
400982c8:	1090000c 	andi	r2,r2,16384
400982cc:	e0bff515 	stw	r2,-44(fp)
   * Loop transferring data from the input buffer to the transmit circular
   * buffer. The loop is terminated once all the data has been transferred,
   * or, (if in non-blocking mode) the buffer becomes full.
   */

  while (count)
400982d0:	00003c06 	br	400983c4 <altera_avalon_uart_write+0x128>
  {
    /* Determine the next slot in the buffer to access */

    next = (sp->tx_end + 1) & ALT_AVALON_UART_BUF_MSK;
400982d4:	e0bffc17 	ldw	r2,-16(fp)
400982d8:	10800517 	ldw	r2,20(r2)
400982dc:	10800044 	addi	r2,r2,1
400982e0:	10800fcc 	andi	r2,r2,63
400982e4:	e0bff615 	stw	r2,-40(fp)

    /* block waiting for space if necessary */

    if (next == sp->tx_start)
400982e8:	e0bffc17 	ldw	r2,-16(fp)
400982ec:	10c00417 	ldw	r3,16(r2)
400982f0:	e0bff617 	ldw	r2,-40(fp)
400982f4:	1880221e 	bne	r3,r2,40098380 <altera_avalon_uart_write+0xe4>
    {
      if (no_block)
400982f8:	e0bff517 	ldw	r2,-44(fp)
400982fc:	10000526 	beq	r2,zero,40098314 <altera_avalon_uart_write+0x78>
      {
        /* Set errno to indicate why this function returned early */
 
        ALT_ERRNO = EWOULDBLOCK;
40098300:	009824c0 	call	4009824c <alt_get_errno>
40098304:	1007883a 	mov	r3,r2
40098308:	008002c4 	movi	r2,11
4009830c:	18800015 	stw	r2,0(r3)
        break;
40098310:	00002e06 	br	400983cc <altera_avalon_uart_write+0x130>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
40098314:	0005303a 	rdctl	r2,status
40098318:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
4009831c:	e0fff817 	ldw	r3,-32(fp)
40098320:	00bfff84 	movi	r2,-2
40098324:	1884703a 	and	r2,r3,r2
40098328:	1001703a 	wrctl	status,r2
  
  return context;
4009832c:	e0bff817 	ldw	r2,-32(fp)
      {
        /* Block waiting for space in the circular buffer */

        /* First, ensure transmit interrupts are enabled to avoid deadlock */

        context = alt_irq_disable_all ();
40098330:	e0bff715 	stw	r2,-36(fp)
        sp->ctrl |= (ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
40098334:	e0bffc17 	ldw	r2,-16(fp)
40098338:	10800117 	ldw	r2,4(r2)
4009833c:	10c11014 	ori	r3,r2,1088
40098340:	e0bffc17 	ldw	r2,-16(fp)
40098344:	10c00115 	stw	r3,4(r2)
                        ALTERA_AVALON_UART_CONTROL_DCTS_MSK);
        IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
40098348:	e0bffc17 	ldw	r2,-16(fp)
4009834c:	10800017 	ldw	r2,0(r2)
40098350:	10800304 	addi	r2,r2,12
40098354:	e0fffc17 	ldw	r3,-16(fp)
40098358:	18c00117 	ldw	r3,4(r3)
4009835c:	10c00035 	stwio	r3,0(r2)
40098360:	e0bff717 	ldw	r2,-36(fp)
40098364:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
40098368:	e0bff917 	ldw	r2,-28(fp)
4009836c:	1001703a 	wrctl	status,r2
          ALT_FLAG_PEND (sp->events, 
                         ALT_UART_WRITE_RDY,
                         OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                         0);
        }
        while ((next == sp->tx_start));
40098370:	e0bffc17 	ldw	r2,-16(fp)
40098374:	10c00417 	ldw	r3,16(r2)
40098378:	e0bff617 	ldw	r2,-40(fp)
4009837c:	18bffc26 	beq	r3,r2,40098370 <__alt_mem_epcs+0xfff57370>
      }
    }

    count--;
40098380:	e0bff417 	ldw	r2,-48(fp)
40098384:	10bfffc4 	addi	r2,r2,-1
40098388:	e0bff415 	stw	r2,-48(fp)

    /* Add the next character to the transmit buffer */

    sp->tx_buf[sp->tx_end] = *ptr++;
4009838c:	e0bffc17 	ldw	r2,-16(fp)
40098390:	10c00517 	ldw	r3,20(r2)
40098394:	e0bffd17 	ldw	r2,-12(fp)
40098398:	11000044 	addi	r4,r2,1
4009839c:	e13ffd15 	stw	r4,-12(fp)
400983a0:	10800003 	ldbu	r2,0(r2)
400983a4:	1009883a 	mov	r4,r2
400983a8:	e0bffc17 	ldw	r2,-16(fp)
400983ac:	10c5883a 	add	r2,r2,r3
400983b0:	10801704 	addi	r2,r2,92
400983b4:	11000005 	stb	r4,0(r2)
    sp->tx_end = next;
400983b8:	e0bffc17 	ldw	r2,-16(fp)
400983bc:	e0fff617 	ldw	r3,-40(fp)
400983c0:	10c00515 	stw	r3,20(r2)
   * Loop transferring data from the input buffer to the transmit circular
   * buffer. The loop is terminated once all the data has been transferred,
   * or, (if in non-blocking mode) the buffer becomes full.
   */

  while (count)
400983c4:	e0bff417 	ldw	r2,-48(fp)
400983c8:	103fc21e 	bne	r2,zero,400982d4 <__alt_mem_epcs+0xfff572d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
400983cc:	0005303a 	rdctl	r2,status
400983d0:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
400983d4:	e0fffa17 	ldw	r3,-24(fp)
400983d8:	00bfff84 	movi	r2,-2
400983dc:	1884703a 	and	r2,r3,r2
400983e0:	1001703a 	wrctl	status,r2
  
  return context;
400983e4:	e0bffa17 	ldw	r2,-24(fp)
  /* 
   * Ensure that interrupts are enabled, so that the circular buffer can 
   * drain.
   */

  context = alt_irq_disable_all ();
400983e8:	e0bff715 	stw	r2,-36(fp)
  sp->ctrl |= ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
400983ec:	e0bffc17 	ldw	r2,-16(fp)
400983f0:	10800117 	ldw	r2,4(r2)
400983f4:	10c11014 	ori	r3,r2,1088
400983f8:	e0bffc17 	ldw	r2,-16(fp)
400983fc:	10c00115 	stw	r3,4(r2)
                 ALTERA_AVALON_UART_CONTROL_DCTS_MSK;
  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
40098400:	e0bffc17 	ldw	r2,-16(fp)
40098404:	10800017 	ldw	r2,0(r2)
40098408:	10800304 	addi	r2,r2,12
4009840c:	e0fffc17 	ldw	r3,-16(fp)
40098410:	18c00117 	ldw	r3,4(r3)
40098414:	10c00035 	stwio	r3,0(r2)
40098418:	e0bff717 	ldw	r2,-36(fp)
4009841c:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
40098420:	e0bffb17 	ldw	r2,-20(fp)
40098424:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (context);

  /* return the number of bytes written */

  return (len - count);
40098428:	e0fffe17 	ldw	r3,-8(fp)
4009842c:	e0bff417 	ldw	r2,-48(fp)
40098430:	1885c83a 	sub	r2,r3,r2
}
40098434:	e037883a 	mov	sp,fp
40098438:	dfc00117 	ldw	ra,4(sp)
4009843c:	df000017 	ldw	fp,0(sp)
40098440:	dec00204 	addi	sp,sp,8
40098444:	f800283a 	ret

40098448 <epcs_read_status_register>:
#include "alt_types.h"
#include "epcs_commands.h"
#include "altera_avalon_spi.h"

alt_u8 epcs_read_status_register(alt_u32 base)
{
40098448:	defff904 	addi	sp,sp,-28
4009844c:	dfc00615 	stw	ra,24(sp)
40098450:	df000515 	stw	fp,20(sp)
40098454:	df000504 	addi	fp,sp,20
40098458:	e13fff15 	stw	r4,-4(fp)
  const alt_u8 rdsr = epcs_rdsr;
4009845c:	00800144 	movi	r2,5
40098460:	e0bffe05 	stb	r2,-8(fp)
  alt_u8 status;
  alt_avalon_spi_command(
40098464:	00800044 	movi	r2,1
40098468:	d8800015 	stw	r2,0(sp)
4009846c:	e0bffe44 	addi	r2,fp,-7
40098470:	d8800115 	stw	r2,4(sp)
40098474:	d8000215 	stw	zero,8(sp)
40098478:	e13fff17 	ldw	r4,-4(fp)
4009847c:	000b883a 	mov	r5,zero
40098480:	01800044 	movi	r6,1
40098484:	e1fffe04 	addi	r7,fp,-8
40098488:	00995100 	call	40099510 <alt_avalon_spi_command>
    1,
    &status,
    0
  );

  return status;
4009848c:	e0bffe43 	ldbu	r2,-7(fp)
}
40098490:	e037883a 	mov	sp,fp
40098494:	dfc00117 	ldw	ra,4(sp)
40098498:	df000017 	ldw	fp,0(sp)
4009849c:	dec00204 	addi	sp,sp,8
400984a0:	f800283a 	ret

400984a4 <epcs_test_wip>:

static ALT_INLINE int epcs_test_wip(alt_u32 base)
{
400984a4:	defffd04 	addi	sp,sp,-12
400984a8:	dfc00215 	stw	ra,8(sp)
400984ac:	df000115 	stw	fp,4(sp)
400984b0:	df000104 	addi	fp,sp,4
400984b4:	e13fff15 	stw	r4,-4(fp)
  return epcs_read_status_register(base) & 1;
400984b8:	e13fff17 	ldw	r4,-4(fp)
400984bc:	00984480 	call	40098448 <epcs_read_status_register>
400984c0:	10803fcc 	andi	r2,r2,255
400984c4:	1080004c 	andi	r2,r2,1
}
400984c8:	e037883a 	mov	sp,fp
400984cc:	dfc00117 	ldw	ra,4(sp)
400984d0:	df000017 	ldw	fp,0(sp)
400984d4:	dec00204 	addi	sp,sp,8
400984d8:	f800283a 	ret

400984dc <epcs_await_wip_released>:

static ALT_INLINE void epcs_await_wip_released(alt_u32 base)
{
400984dc:	defffd04 	addi	sp,sp,-12
400984e0:	dfc00215 	stw	ra,8(sp)
400984e4:	df000115 	stw	fp,4(sp)
400984e8:	df000104 	addi	fp,sp,4
400984ec:	e13fff15 	stw	r4,-4(fp)
  /* Wait until the WIP bit goes low. */
  while (epcs_test_wip(base))
400984f0:	0001883a 	nop
400984f4:	e13fff17 	ldw	r4,-4(fp)
400984f8:	00984a40 	call	400984a4 <epcs_test_wip>
400984fc:	103ffd1e 	bne	r2,zero,400984f4 <__alt_mem_epcs+0xfff574f4>
  {
  }
}
40098500:	e037883a 	mov	sp,fp
40098504:	dfc00117 	ldw	ra,4(sp)
40098508:	df000017 	ldw	fp,0(sp)
4009850c:	dec00204 	addi	sp,sp,8
40098510:	f800283a 	ret

40098514 <epcs_sector_erase>:

void epcs_sector_erase(alt_u32 base, alt_u32 offset, alt_u32 four_bytes_mode)
{
40098514:	defff604 	addi	sp,sp,-40
40098518:	dfc00915 	stw	ra,36(sp)
4009851c:	df000815 	stw	fp,32(sp)
40098520:	df000804 	addi	fp,sp,32
40098524:	e13ffd15 	stw	r4,-12(fp)
40098528:	e17ffe15 	stw	r5,-8(fp)
4009852c:	e1bfff15 	stw	r6,-4(fp)
  alt_u8 se[5];
  alt_u8 len;
  
  if(four_bytes_mode)
40098530:	e0bfff17 	ldw	r2,-4(fp)
40098534:	10001226 	beq	r2,zero,40098580 <epcs_sector_erase+0x6c>
  {
      se[0] = epcs_se;  /* Note: Use epcs_se for Micron EPCS256 */
40098538:	00bff604 	movi	r2,-40
4009853c:	e0bffb45 	stb	r2,-19(fp)
      se[1] = (offset >> 24) & 0xFF;
40098540:	e0bffe17 	ldw	r2,-8(fp)
40098544:	1004d63a 	srli	r2,r2,24
40098548:	e0bffb85 	stb	r2,-18(fp)
      se[2] = (offset >> 16) & 0xFF;
4009854c:	e0bffe17 	ldw	r2,-8(fp)
40098550:	1004d43a 	srli	r2,r2,16
40098554:	e0bffbc5 	stb	r2,-17(fp)
      se[3] = (offset >> 8) & 0xFF;
40098558:	e0bffe17 	ldw	r2,-8(fp)
4009855c:	1004d23a 	srli	r2,r2,8
40098560:	e0bffc05 	stb	r2,-16(fp)
      se[4] = offset & 0xFF;
40098564:	e0bffe17 	ldw	r2,-8(fp)
40098568:	e0bffc45 	stb	r2,-15(fp)
      len   = 5;
4009856c:	00800144 	movi	r2,5
40098570:	e0bffb05 	stb	r2,-20(fp)
      epcs_enter_4_bytes_mode(base);
40098574:	e13ffd17 	ldw	r4,-12(fp)
40098578:	00989bc0 	call	400989bc <epcs_enter_4_bytes_mode>
4009857c:	00000c06 	br	400985b0 <epcs_sector_erase+0x9c>
  }
  else
  {
      se[0] = epcs_se;
40098580:	00bff604 	movi	r2,-40
40098584:	e0bffb45 	stb	r2,-19(fp)
      se[1] = (offset >> 16) & 0xFF;
40098588:	e0bffe17 	ldw	r2,-8(fp)
4009858c:	1004d43a 	srli	r2,r2,16
40098590:	e0bffb85 	stb	r2,-18(fp)
      se[2] = (offset >> 8) & 0xFF;
40098594:	e0bffe17 	ldw	r2,-8(fp)
40098598:	1004d23a 	srli	r2,r2,8
4009859c:	e0bffbc5 	stb	r2,-17(fp)
      se[3] = offset & 0xFF;
400985a0:	e0bffe17 	ldw	r2,-8(fp)
400985a4:	e0bffc05 	stb	r2,-16(fp)
      len   = 4;
400985a8:	00800104 	movi	r2,4
400985ac:	e0bffb05 	stb	r2,-20(fp)
  }

  /* Execute a WREN instruction */
  epcs_write_enable(base);
400985b0:	e13ffd17 	ldw	r4,-12(fp)
400985b4:	00987000 	call	40098700 <epcs_write_enable>

  alt_avalon_spi_command(
400985b8:	e0fffb03 	ldbu	r3,-20(fp)
400985bc:	e0bffb44 	addi	r2,fp,-19
400985c0:	d8000015 	stw	zero,0(sp)
400985c4:	d8000115 	stw	zero,4(sp)
400985c8:	d8000215 	stw	zero,8(sp)
400985cc:	e13ffd17 	ldw	r4,-12(fp)
400985d0:	000b883a 	mov	r5,zero
400985d4:	180d883a 	mov	r6,r3
400985d8:	100f883a 	mov	r7,r2
400985dc:	00995100 	call	40099510 <alt_avalon_spi_command>
    0,
    (alt_u8*)0,
    0
  );

  epcs_await_wip_released(base);
400985e0:	e13ffd17 	ldw	r4,-12(fp)
400985e4:	00984dc0 	call	400984dc <epcs_await_wip_released>

  if(four_bytes_mode)
400985e8:	e0bfff17 	ldw	r2,-4(fp)
400985ec:	10000226 	beq	r2,zero,400985f8 <epcs_sector_erase+0xe4>
  {
    epcs_exit_4_bytes_mode(base);
400985f0:	e13ffd17 	ldw	r4,-12(fp)
400985f4:	0098a180 	call	40098a18 <epcs_exit_4_bytes_mode>
  }
}
400985f8:	e037883a 	mov	sp,fp
400985fc:	dfc00117 	ldw	ra,4(sp)
40098600:	df000017 	ldw	fp,0(sp)
40098604:	dec00204 	addi	sp,sp,8
40098608:	f800283a 	ret

4009860c <epcs_read_buffer>:

alt_32 epcs_read_buffer(alt_u32 base, int offset, alt_u8 *dest_addr, int length,
                        alt_u32 four_bytes_mode)
{
4009860c:	defff404 	addi	sp,sp,-48
40098610:	dfc00b15 	stw	ra,44(sp)
40098614:	df000a15 	stw	fp,40(sp)
40098618:	df000a04 	addi	fp,sp,40
4009861c:	e13ffc15 	stw	r4,-16(fp)
40098620:	e17ffd15 	stw	r5,-12(fp)
40098624:	e1bffe15 	stw	r6,-8(fp)
40098628:	e1ffff15 	stw	r7,-4(fp)
  alt_u8 read_command[5];
  alt_u32 cmd_len;

  read_command[0] = epcs_read;
4009862c:	008000c4 	movi	r2,3
40098630:	e0bffa05 	stb	r2,-24(fp)
  
  if(four_bytes_mode)
40098634:	e0800217 	ldw	r2,8(fp)
40098638:	10001026 	beq	r2,zero,4009867c <epcs_read_buffer+0x70>
  {
        read_command[1] = (offset >> 24) & 0xFF;
4009863c:	e0bffd17 	ldw	r2,-12(fp)
40098640:	1004d63a 	srli	r2,r2,24
40098644:	e0bffa45 	stb	r2,-23(fp)
        read_command[2] = (offset >> 16) & 0xFF;
40098648:	e0bffd17 	ldw	r2,-12(fp)
4009864c:	1005d43a 	srai	r2,r2,16
40098650:	e0bffa85 	stb	r2,-22(fp)
        read_command[3] = (offset >> 8) & 0xFF;
40098654:	e0bffd17 	ldw	r2,-12(fp)
40098658:	1005d23a 	srai	r2,r2,8
4009865c:	e0bffac5 	stb	r2,-21(fp)
        read_command[4] = offset & 0xFF;
40098660:	e0bffd17 	ldw	r2,-12(fp)
40098664:	e0bffb05 	stb	r2,-20(fp)
        cmd_len = 5;
40098668:	00800144 	movi	r2,5
4009866c:	e0bff915 	stw	r2,-28(fp)
        epcs_enter_4_bytes_mode(base);
40098670:	e13ffc17 	ldw	r4,-16(fp)
40098674:	00989bc0 	call	400989bc <epcs_enter_4_bytes_mode>
40098678:	00000a06 	br	400986a4 <epcs_read_buffer+0x98>
  }
  else
  {
        read_command[1] = (offset >> 16) & 0xFF;
4009867c:	e0bffd17 	ldw	r2,-12(fp)
40098680:	1005d43a 	srai	r2,r2,16
40098684:	e0bffa45 	stb	r2,-23(fp)
        read_command[2] = (offset >> 8) & 0xFF;
40098688:	e0bffd17 	ldw	r2,-12(fp)
4009868c:	1005d23a 	srai	r2,r2,8
40098690:	e0bffa85 	stb	r2,-22(fp)
        read_command[3] = offset & 0xFF;
40098694:	e0bffd17 	ldw	r2,-12(fp)
40098698:	e0bffac5 	stb	r2,-21(fp)
        cmd_len = 4;
4009869c:	00800104 	movi	r2,4
400986a0:	e0bff915 	stw	r2,-28(fp)
  }

  epcs_await_wip_released(base);
400986a4:	e13ffc17 	ldw	r4,-16(fp)
400986a8:	00984dc0 	call	400984dc <epcs_await_wip_released>

  alt_avalon_spi_command(
400986ac:	e0bfff17 	ldw	r2,-4(fp)
400986b0:	e0fffa04 	addi	r3,fp,-24
400986b4:	d8800015 	stw	r2,0(sp)
400986b8:	e0bffe17 	ldw	r2,-8(fp)
400986bc:	d8800115 	stw	r2,4(sp)
400986c0:	d8000215 	stw	zero,8(sp)
400986c4:	e13ffc17 	ldw	r4,-16(fp)
400986c8:	000b883a 	mov	r5,zero
400986cc:	e1bff917 	ldw	r6,-28(fp)
400986d0:	180f883a 	mov	r7,r3
400986d4:	00995100 	call	40099510 <alt_avalon_spi_command>
    length,
    (alt_u8*)dest_addr,
    0
  );

  if(four_bytes_mode)
400986d8:	e0800217 	ldw	r2,8(fp)
400986dc:	10000226 	beq	r2,zero,400986e8 <epcs_read_buffer+0xdc>
  {
    epcs_exit_4_bytes_mode(base);
400986e0:	e13ffc17 	ldw	r4,-16(fp)
400986e4:	0098a180 	call	40098a18 <epcs_exit_4_bytes_mode>
  }

  return length;
400986e8:	e0bfff17 	ldw	r2,-4(fp)
}
400986ec:	e037883a 	mov	sp,fp
400986f0:	dfc00117 	ldw	ra,4(sp)
400986f4:	df000017 	ldw	fp,0(sp)
400986f8:	dec00204 	addi	sp,sp,8
400986fc:	f800283a 	ret

40098700 <epcs_write_enable>:

void epcs_write_enable(alt_u32 base)
{
40098700:	defff904 	addi	sp,sp,-28
40098704:	dfc00615 	stw	ra,24(sp)
40098708:	df000515 	stw	fp,20(sp)
4009870c:	df000504 	addi	fp,sp,20
40098710:	e13fff15 	stw	r4,-4(fp)
  const alt_u8 wren = epcs_wren;
40098714:	00800184 	movi	r2,6
40098718:	e0bffe05 	stb	r2,-8(fp)
  alt_avalon_spi_command(
4009871c:	d8000015 	stw	zero,0(sp)
40098720:	d8000115 	stw	zero,4(sp)
40098724:	d8000215 	stw	zero,8(sp)
40098728:	e13fff17 	ldw	r4,-4(fp)
4009872c:	000b883a 	mov	r5,zero
40098730:	01800044 	movi	r6,1
40098734:	e1fffe04 	addi	r7,fp,-8
40098738:	00995100 	call	40099510 <alt_avalon_spi_command>
    &wren,
    0,
    (alt_u8*)0,
    0
  );
}
4009873c:	e037883a 	mov	sp,fp
40098740:	dfc00117 	ldw	ra,4(sp)
40098744:	df000017 	ldw	fp,0(sp)
40098748:	dec00204 	addi	sp,sp,8
4009874c:	f800283a 	ret

40098750 <epcs_write_status_register>:

void epcs_write_status_register(alt_u32 base, alt_u8 value)
{
40098750:	defff804 	addi	sp,sp,-32
40098754:	dfc00715 	stw	ra,28(sp)
40098758:	df000615 	stw	fp,24(sp)
4009875c:	df000604 	addi	fp,sp,24
40098760:	e13ffe15 	stw	r4,-8(fp)
40098764:	2805883a 	mov	r2,r5
40098768:	e0bfff05 	stb	r2,-4(fp)
  alt_u8 wrsr[2];
  
  wrsr[0] = epcs_wrsr;
4009876c:	00800044 	movi	r2,1
40098770:	e0bffd05 	stb	r2,-12(fp)
  wrsr[1] = value;
40098774:	e0bfff03 	ldbu	r2,-4(fp)
40098778:	e0bffd45 	stb	r2,-11(fp)

  alt_avalon_spi_command(
4009877c:	d8000015 	stw	zero,0(sp)
40098780:	d8000115 	stw	zero,4(sp)
40098784:	d8000215 	stw	zero,8(sp)
40098788:	e13ffe17 	ldw	r4,-8(fp)
4009878c:	000b883a 	mov	r5,zero
40098790:	01800084 	movi	r6,2
40098794:	e1fffd04 	addi	r7,fp,-12
40098798:	00995100 	call	40099510 <alt_avalon_spi_command>
    0,
    (alt_u8*)0,
    0
  );

  epcs_await_wip_released(base);
4009879c:	e13ffe17 	ldw	r4,-8(fp)
400987a0:	00984dc0 	call	400984dc <epcs_await_wip_released>
}
400987a4:	e037883a 	mov	sp,fp
400987a8:	dfc00117 	ldw	ra,4(sp)
400987ac:	df000017 	ldw	fp,0(sp)
400987b0:	dec00204 	addi	sp,sp,8
400987b4:	f800283a 	ret

400987b8 <epcs_write_buffer>:

/* Write a partial or full page, assuming that page has been erased */
alt_32 epcs_write_buffer(alt_u32 base, int offset, const alt_u8* src_addr, 
                         int length, alt_u32 four_bytes_mode)
{
400987b8:	defff404 	addi	sp,sp,-48
400987bc:	dfc00b15 	stw	ra,44(sp)
400987c0:	df000a15 	stw	fp,40(sp)
400987c4:	df000a04 	addi	fp,sp,40
400987c8:	e13ffc15 	stw	r4,-16(fp)
400987cc:	e17ffd15 	stw	r5,-12(fp)
400987d0:	e1bffe15 	stw	r6,-8(fp)
400987d4:	e1ffff15 	stw	r7,-4(fp)
  alt_u8 pp[5];
  alt_u32 cmd_len;
  
  pp[0] = epcs_pp;
400987d8:	00800084 	movi	r2,2
400987dc:	e0bffa05 	stb	r2,-24(fp)
  
  if(four_bytes_mode)
400987e0:	e0800217 	ldw	r2,8(fp)
400987e4:	10001026 	beq	r2,zero,40098828 <epcs_write_buffer+0x70>
  {
      pp[1] = (offset >> 24) & 0xFF;
400987e8:	e0bffd17 	ldw	r2,-12(fp)
400987ec:	1004d63a 	srli	r2,r2,24
400987f0:	e0bffa45 	stb	r2,-23(fp)
      pp[2] = (offset >> 16) & 0xFF;
400987f4:	e0bffd17 	ldw	r2,-12(fp)
400987f8:	1005d43a 	srai	r2,r2,16
400987fc:	e0bffa85 	stb	r2,-22(fp)
      pp[3] = (offset >> 8) & 0xFF;
40098800:	e0bffd17 	ldw	r2,-12(fp)
40098804:	1005d23a 	srai	r2,r2,8
40098808:	e0bffac5 	stb	r2,-21(fp)
      pp[4] = offset & 0xFF;
4009880c:	e0bffd17 	ldw	r2,-12(fp)
40098810:	e0bffb05 	stb	r2,-20(fp)
      cmd_len = 5;
40098814:	00800144 	movi	r2,5
40098818:	e0bff915 	stw	r2,-28(fp)
      epcs_enter_4_bytes_mode(base);
4009881c:	e13ffc17 	ldw	r4,-16(fp)
40098820:	00989bc0 	call	400989bc <epcs_enter_4_bytes_mode>
40098824:	00000a06 	br	40098850 <epcs_write_buffer+0x98>
  }
  else
  {
      pp[1] = (offset >> 16) & 0xFF;
40098828:	e0bffd17 	ldw	r2,-12(fp)
4009882c:	1005d43a 	srai	r2,r2,16
40098830:	e0bffa45 	stb	r2,-23(fp)
      pp[2] = (offset >> 8) & 0xFF;
40098834:	e0bffd17 	ldw	r2,-12(fp)
40098838:	1005d23a 	srai	r2,r2,8
4009883c:	e0bffa85 	stb	r2,-22(fp)
      pp[3] = offset & 0xFF;
40098840:	e0bffd17 	ldw	r2,-12(fp)
40098844:	e0bffac5 	stb	r2,-21(fp)
      cmd_len = 4;
40098848:	00800104 	movi	r2,4
4009884c:	e0bff915 	stw	r2,-28(fp)
  }

  /* First, WREN */
  epcs_write_enable(base);
40098850:	e13ffc17 	ldw	r4,-16(fp)
40098854:	00987000 	call	40098700 <epcs_write_enable>

  /* Send the PP command */
  alt_avalon_spi_command(
40098858:	e0fffa04 	addi	r3,fp,-24
4009885c:	d8000015 	stw	zero,0(sp)
40098860:	d8000115 	stw	zero,4(sp)
40098864:	00800044 	movi	r2,1
40098868:	d8800215 	stw	r2,8(sp)
4009886c:	e13ffc17 	ldw	r4,-16(fp)
40098870:	000b883a 	mov	r5,zero
40098874:	e1bff917 	ldw	r6,-28(fp)
40098878:	180f883a 	mov	r7,r3
4009887c:	00995100 	call	40099510 <alt_avalon_spi_command>
    (alt_u8*)0,
    ALT_AVALON_SPI_COMMAND_MERGE
  );

  /* Send the user's buffer */
  alt_avalon_spi_command(
40098880:	e0bfff17 	ldw	r2,-4(fp)
40098884:	d8000015 	stw	zero,0(sp)
40098888:	d8000115 	stw	zero,4(sp)
4009888c:	d8000215 	stw	zero,8(sp)
40098890:	e13ffc17 	ldw	r4,-16(fp)
40098894:	000b883a 	mov	r5,zero
40098898:	100d883a 	mov	r6,r2
4009889c:	e1fffe17 	ldw	r7,-8(fp)
400988a0:	00995100 	call	40099510 <alt_avalon_spi_command>
   * if the user's going to go off and ignore the flash for
   * a while, its writes could occur in parallel with user code
   * execution.  Unfortunately, I have to guard all reads/writes
   * with wip-tests, to make that happen.
   */
  epcs_await_wip_released(base);
400988a4:	e13ffc17 	ldw	r4,-16(fp)
400988a8:	00984dc0 	call	400984dc <epcs_await_wip_released>

  if(four_bytes_mode)
400988ac:	e0800217 	ldw	r2,8(fp)
400988b0:	10000226 	beq	r2,zero,400988bc <epcs_write_buffer+0x104>
  {
    epcs_exit_4_bytes_mode(base);
400988b4:	e13ffc17 	ldw	r4,-16(fp)
400988b8:	0098a180 	call	40098a18 <epcs_exit_4_bytes_mode>
  }

  return length;
400988bc:	e0bfff17 	ldw	r2,-4(fp)
}
400988c0:	e037883a 	mov	sp,fp
400988c4:	dfc00117 	ldw	ra,4(sp)
400988c8:	df000017 	ldw	fp,0(sp)
400988cc:	dec00204 	addi	sp,sp,8
400988d0:	f800283a 	ret

400988d4 <epcs_read_electronic_signature>:


alt_u8 epcs_read_electronic_signature(alt_u32 base)
{
400988d4:	defff804 	addi	sp,sp,-32
400988d8:	dfc00715 	stw	ra,28(sp)
400988dc:	df000615 	stw	fp,24(sp)
400988e0:	df000604 	addi	fp,sp,24
400988e4:	e13fff15 	stw	r4,-4(fp)
  const alt_u8 res_cmd[] = {epcs_res, 0, 0, 0};
400988e8:	00bfeac4 	movi	r2,-85
400988ec:	e0bffd05 	stb	r2,-12(fp)
400988f0:	e03ffd45 	stb	zero,-11(fp)
400988f4:	e03ffd85 	stb	zero,-10(fp)
400988f8:	e03ffdc5 	stb	zero,-9(fp)
  alt_u8 res;

  alt_avalon_spi_command(
400988fc:	00800044 	movi	r2,1
40098900:	d8800015 	stw	r2,0(sp)
40098904:	e0bffe04 	addi	r2,fp,-8
40098908:	d8800115 	stw	r2,4(sp)
4009890c:	d8000215 	stw	zero,8(sp)
40098910:	e13fff17 	ldw	r4,-4(fp)
40098914:	000b883a 	mov	r5,zero
40098918:	01800104 	movi	r6,4
4009891c:	e1fffd04 	addi	r7,fp,-12
40098920:	00995100 	call	40099510 <alt_avalon_spi_command>
    1,
    &res,
    0
  );

  return res;
40098924:	e0bffe03 	ldbu	r2,-8(fp)
}
40098928:	e037883a 	mov	sp,fp
4009892c:	dfc00117 	ldw	ra,4(sp)
40098930:	df000017 	ldw	fp,0(sp)
40098934:	dec00204 	addi	sp,sp,8
40098938:	f800283a 	ret

4009893c <epcs_read_device_id>:

alt_u32 epcs_read_device_id(alt_u32 base)
{
4009893c:	defff904 	addi	sp,sp,-28
40098940:	dfc00615 	stw	ra,24(sp)
40098944:	df000515 	stw	fp,20(sp)
40098948:	df000504 	addi	fp,sp,20
4009894c:	e13fff15 	stw	r4,-4(fp)
  const alt_u8 rd_id_cmd[] = {epcs_rdid};
40098950:	00bfe7c4 	movi	r2,-97
40098954:	e0bffe05 	stb	r2,-8(fp)
  alt_u8 id[3];

  alt_avalon_spi_command(
40098958:	008000c4 	movi	r2,3
4009895c:	d8800015 	stw	r2,0(sp)
40098960:	e0bffe44 	addi	r2,fp,-7
40098964:	d8800115 	stw	r2,4(sp)
40098968:	d8000215 	stw	zero,8(sp)
4009896c:	e13fff17 	ldw	r4,-4(fp)
40098970:	000b883a 	mov	r5,zero
40098974:	01800044 	movi	r6,1
40098978:	e1fffe04 	addi	r7,fp,-8
4009897c:	00995100 	call	40099510 <alt_avalon_spi_command>
    3,
    id,
    0
  );

  return (alt_u32) ((id[0] << 16) | (id[1] << 8) | id[2]);
40098980:	e0bffe43 	ldbu	r2,-7(fp)
40098984:	10803fcc 	andi	r2,r2,255
40098988:	1006943a 	slli	r3,r2,16
4009898c:	e0bffe83 	ldbu	r2,-6(fp)
40098990:	10803fcc 	andi	r2,r2,255
40098994:	1004923a 	slli	r2,r2,8
40098998:	1886b03a 	or	r3,r3,r2
4009899c:	e0bffec3 	ldbu	r2,-5(fp)
400989a0:	10803fcc 	andi	r2,r2,255
400989a4:	1884b03a 	or	r2,r3,r2
}
400989a8:	e037883a 	mov	sp,fp
400989ac:	dfc00117 	ldw	ra,4(sp)
400989b0:	df000017 	ldw	fp,0(sp)
400989b4:	dec00204 	addi	sp,sp,8
400989b8:	f800283a 	ret

400989bc <epcs_enter_4_bytes_mode>:

void epcs_enter_4_bytes_mode(alt_u32 base)
{
400989bc:	defff904 	addi	sp,sp,-28
400989c0:	dfc00615 	stw	ra,24(sp)
400989c4:	df000515 	stw	fp,20(sp)
400989c8:	df000504 	addi	fp,sp,20
400989cc:	e13fff15 	stw	r4,-4(fp)
  const alt_u8 en4b_cmd = epcs_en4b;
400989d0:	00bfedc4 	movi	r2,-73
400989d4:	e0bffe05 	stb	r2,-8(fp)

  /* First, WREN */
  epcs_write_enable(base);
400989d8:	e13fff17 	ldw	r4,-4(fp)
400989dc:	00987000 	call	40098700 <epcs_write_enable>

  alt_avalon_spi_command(
400989e0:	d8000015 	stw	zero,0(sp)
400989e4:	d8000115 	stw	zero,4(sp)
400989e8:	d8000215 	stw	zero,8(sp)
400989ec:	e13fff17 	ldw	r4,-4(fp)
400989f0:	000b883a 	mov	r5,zero
400989f4:	01800044 	movi	r6,1
400989f8:	e1fffe04 	addi	r7,fp,-8
400989fc:	00995100 	call	40099510 <alt_avalon_spi_command>
    0,
    (alt_u8*)0,
    0
  );

  return;
40098a00:	0001883a 	nop
}
40098a04:	e037883a 	mov	sp,fp
40098a08:	dfc00117 	ldw	ra,4(sp)
40098a0c:	df000017 	ldw	fp,0(sp)
40098a10:	dec00204 	addi	sp,sp,8
40098a14:	f800283a 	ret

40098a18 <epcs_exit_4_bytes_mode>:

void epcs_exit_4_bytes_mode(alt_u32 base)
{
40098a18:	defff904 	addi	sp,sp,-28
40098a1c:	dfc00615 	stw	ra,24(sp)
40098a20:	df000515 	stw	fp,20(sp)
40098a24:	df000504 	addi	fp,sp,20
40098a28:	e13fff15 	stw	r4,-4(fp)
  const alt_u8 exit4b_cmd = epcs_dis4b;
40098a2c:	00bffa44 	movi	r2,-23
40098a30:	e0bffe05 	stb	r2,-8(fp)

  /* First, WREN */
  epcs_write_enable(base);
40098a34:	e13fff17 	ldw	r4,-4(fp)
40098a38:	00987000 	call	40098700 <epcs_write_enable>

  alt_avalon_spi_command(
40098a3c:	d8000015 	stw	zero,0(sp)
40098a40:	d8000115 	stw	zero,4(sp)
40098a44:	d8000215 	stw	zero,8(sp)
40098a48:	e13fff17 	ldw	r4,-4(fp)
40098a4c:	000b883a 	mov	r5,zero
40098a50:	01800044 	movi	r6,1
40098a54:	e1fffe04 	addi	r7,fp,-8
40098a58:	00995100 	call	40099510 <alt_avalon_spi_command>
    0,
    (alt_u8*)0,
    0
  );

  return;
40098a5c:	0001883a 	nop
}
40098a60:	e037883a 	mov	sp,fp
40098a64:	dfc00117 	ldw	ra,4(sp)
40098a68:	df000017 	ldw	fp,0(sp)
40098a6c:	dec00204 	addi	sp,sp,8
40098a70:	f800283a 	ret

40098a74 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
40098a74:	defffb04 	addi	sp,sp,-20
40098a78:	df000415 	stw	fp,16(sp)
40098a7c:	df000404 	addi	fp,sp,16
40098a80:	e13fff15 	stw	r4,-4(fp)
  {
    cycles_per_loop = 9;
  }
  else  
  {
    cycles_per_loop = 3;
40098a84:	008000c4 	movi	r2,3
40098a88:	e0bffd15 	stw	r2,-12(fp)
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
40098a8c:	e0fffd17 	ldw	r3,-12(fp)
40098a90:	008003f4 	movhi	r2,15
40098a94:	10909004 	addi	r2,r2,16960
40098a98:	1887383a 	mul	r3,r3,r2
40098a9c:	0081dcf4 	movhi	r2,1907
40098aa0:	10965004 	addi	r2,r2,22848
40098aa4:	10c7203a 	divu	r3,r2,r3
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
40098aa8:	00a00034 	movhi	r2,32768
40098aac:	10bfffc4 	addi	r2,r2,-1
40098ab0:	10c5203a 	divu	r2,r2,r3
40098ab4:	e0ffff17 	ldw	r3,-4(fp)
40098ab8:	1885203a 	divu	r2,r3,r2
40098abc:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
40098ac0:	e0bffe17 	ldw	r2,-8(fp)
40098ac4:	10002526 	beq	r2,zero,40098b5c <alt_busy_sleep+0xe8>
  {
    for(i=0;i<big_loops;i++)
40098ac8:	e03ffc15 	stw	zero,-16(fp)
40098acc:	00001406 	br	40098b20 <alt_busy_sleep+0xac>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
40098ad0:	00a00034 	movhi	r2,32768
40098ad4:	10bfffc4 	addi	r2,r2,-1
40098ad8:	10bfffc4 	addi	r2,r2,-1
40098adc:	103ffe1e 	bne	r2,zero,40098ad8 <__alt_mem_epcs+0xfff57ad8>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
40098ae0:	e0fffd17 	ldw	r3,-12(fp)
40098ae4:	008003f4 	movhi	r2,15
40098ae8:	10909004 	addi	r2,r2,16960
40098aec:	1887383a 	mul	r3,r3,r2
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
40098af0:	0081dcf4 	movhi	r2,1907
40098af4:	10965004 	addi	r2,r2,22848
40098af8:	10c7203a 	divu	r3,r2,r3
40098afc:	00a00034 	movhi	r2,32768
40098b00:	10bfffc4 	addi	r2,r2,-1
40098b04:	10c5203a 	divu	r2,r2,r3
40098b08:	e0ffff17 	ldw	r3,-4(fp)
40098b0c:	1885c83a 	sub	r2,r3,r2
40098b10:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
40098b14:	e0bffc17 	ldw	r2,-16(fp)
40098b18:	10800044 	addi	r2,r2,1
40098b1c:	e0bffc15 	stw	r2,-16(fp)
40098b20:	e0fffc17 	ldw	r3,-16(fp)
40098b24:	e0bffe17 	ldw	r2,-8(fp)
40098b28:	18bfe916 	blt	r3,r2,40098ad0 <__alt_mem_epcs+0xfff57ad0>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
40098b2c:	e0fffd17 	ldw	r3,-12(fp)
40098b30:	008003f4 	movhi	r2,15
40098b34:	10909004 	addi	r2,r2,16960
40098b38:	1887383a 	mul	r3,r3,r2
40098b3c:	0081dcf4 	movhi	r2,1907
40098b40:	10965004 	addi	r2,r2,22848
40098b44:	10c7203a 	divu	r3,r2,r3
40098b48:	e0bfff17 	ldw	r2,-4(fp)
40098b4c:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
40098b50:	10bfffc4 	addi	r2,r2,-1
40098b54:	103ffe1e 	bne	r2,zero,40098b50 <__alt_mem_epcs+0xfff57b50>
40098b58:	00000b06 	br	40098b88 <alt_busy_sleep+0x114>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
40098b5c:	e0fffd17 	ldw	r3,-12(fp)
40098b60:	008003f4 	movhi	r2,15
40098b64:	10909004 	addi	r2,r2,16960
40098b68:	1887383a 	mul	r3,r3,r2
40098b6c:	0081dcf4 	movhi	r2,1907
40098b70:	10965004 	addi	r2,r2,22848
40098b74:	10c7203a 	divu	r3,r2,r3
40098b78:	e0bfff17 	ldw	r2,-4(fp)
40098b7c:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
40098b80:	10bfffc4 	addi	r2,r2,-1
40098b84:	00bffe16 	blt	zero,r2,40098b80 <__alt_mem_epcs+0xfff57b80>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
40098b88:	0005883a 	mov	r2,zero
}
40098b8c:	e037883a 	mov	sp,fp
40098b90:	df000017 	ldw	fp,0(sp)
40098b94:	dec00104 	addi	sp,sp,4
40098b98:	f800283a 	ret

40098b9c <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
40098b9c:	defffe04 	addi	sp,sp,-8
40098ba0:	df000115 	stw	fp,4(sp)
40098ba4:	df000104 	addi	fp,sp,4
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
40098ba8:	e03fff15 	stw	zero,-4(fp)
40098bac:	00000506 	br	40098bc4 <alt_dcache_flush_all+0x28>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
40098bb0:	e0bfff17 	ldw	r2,-4(fp)
40098bb4:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
40098bb8:	e0bfff17 	ldw	r2,-4(fp)
40098bbc:	10800804 	addi	r2,r2,32
40098bc0:	e0bfff15 	stw	r2,-4(fp)
40098bc4:	e0bfff17 	ldw	r2,-4(fp)
40098bc8:	10820030 	cmpltui	r2,r2,2048
40098bcc:	103ff81e 	bne	r2,zero,40098bb0 <__alt_mem_epcs+0xfff57bb0>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
40098bd0:	e037883a 	mov	sp,fp
40098bd4:	df000017 	ldw	fp,0(sp)
40098bd8:	dec00104 	addi	sp,sp,4
40098bdc:	f800283a 	ret

40098be0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
40098be0:	defffe04 	addi	sp,sp,-8
40098be4:	dfc00115 	stw	ra,4(sp)
40098be8:	df000015 	stw	fp,0(sp)
40098bec:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
40098bf0:	009002b4 	movhi	r2,16394
40098bf4:	10aff504 	addi	r2,r2,-16428
40098bf8:	10800017 	ldw	r2,0(r2)
40098bfc:	10000526 	beq	r2,zero,40098c14 <alt_get_errno+0x34>
40098c00:	009002b4 	movhi	r2,16394
40098c04:	10aff504 	addi	r2,r2,-16428
40098c08:	10800017 	ldw	r2,0(r2)
40098c0c:	103ee83a 	callr	r2
40098c10:	00000206 	br	40098c1c <alt_get_errno+0x3c>
40098c14:	009002b4 	movhi	r2,16394
40098c18:	10b73304 	addi	r2,r2,-9012
}
40098c1c:	e037883a 	mov	sp,fp
40098c20:	dfc00117 	ldw	ra,4(sp)
40098c24:	df000017 	ldw	fp,0(sp)
40098c28:	dec00204 	addi	sp,sp,8
40098c2c:	f800283a 	ret

40098c30 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
40098c30:	defffa04 	addi	sp,sp,-24
40098c34:	dfc00515 	stw	ra,20(sp)
40098c38:	df000415 	stw	fp,16(sp)
40098c3c:	df000404 	addi	fp,sp,16
40098c40:	e13ffe15 	stw	r4,-8(fp)
40098c44:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
40098c48:	e0bffe17 	ldw	r2,-8(fp)
40098c4c:	10000326 	beq	r2,zero,40098c5c <alt_dev_llist_insert+0x2c>
40098c50:	e0bffe17 	ldw	r2,-8(fp)
40098c54:	10800217 	ldw	r2,8(r2)
40098c58:	1000061e 	bne	r2,zero,40098c74 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
40098c5c:	0098be00 	call	40098be0 <alt_get_errno>
40098c60:	1007883a 	mov	r3,r2
40098c64:	00800584 	movi	r2,22
40098c68:	18800015 	stw	r2,0(r3)
    return -EINVAL;
40098c6c:	00bffa84 	movi	r2,-22
40098c70:	00001306 	br	40098cc0 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
40098c74:	e0bffe17 	ldw	r2,-8(fp)
40098c78:	e0ffff17 	ldw	r3,-4(fp)
40098c7c:	e0fffc15 	stw	r3,-16(fp)
40098c80:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
40098c84:	e0bffd17 	ldw	r2,-12(fp)
40098c88:	e0fffc17 	ldw	r3,-16(fp)
40098c8c:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
40098c90:	e0bffc17 	ldw	r2,-16(fp)
40098c94:	10c00017 	ldw	r3,0(r2)
40098c98:	e0bffd17 	ldw	r2,-12(fp)
40098c9c:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
40098ca0:	e0bffc17 	ldw	r2,-16(fp)
40098ca4:	10800017 	ldw	r2,0(r2)
40098ca8:	e0fffd17 	ldw	r3,-12(fp)
40098cac:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
40098cb0:	e0bffc17 	ldw	r2,-16(fp)
40098cb4:	e0fffd17 	ldw	r3,-12(fp)
40098cb8:	10c00015 	stw	r3,0(r2)

  return 0;  
40098cbc:	0005883a 	mov	r2,zero
}
40098cc0:	e037883a 	mov	sp,fp
40098cc4:	dfc00117 	ldw	ra,4(sp)
40098cc8:	df000017 	ldw	fp,0(sp)
40098ccc:	dec00204 	addi	sp,sp,8
40098cd0:	f800283a 	ret

40098cd4 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
40098cd4:	defffd04 	addi	sp,sp,-12
40098cd8:	dfc00215 	stw	ra,8(sp)
40098cdc:	df000115 	stw	fp,4(sp)
40098ce0:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
40098ce4:	009002b4 	movhi	r2,16394
40098ce8:	10a76604 	addi	r2,r2,-25192
40098cec:	e0bfff15 	stw	r2,-4(fp)
40098cf0:	00000606 	br	40098d0c <_do_ctors+0x38>
        (*ctor) (); 
40098cf4:	e0bfff17 	ldw	r2,-4(fp)
40098cf8:	10800017 	ldw	r2,0(r2)
40098cfc:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
40098d00:	e0bfff17 	ldw	r2,-4(fp)
40098d04:	10bfff04 	addi	r2,r2,-4
40098d08:	e0bfff15 	stw	r2,-4(fp)
40098d0c:	e0ffff17 	ldw	r3,-4(fp)
40098d10:	009002b4 	movhi	r2,16394
40098d14:	10a76704 	addi	r2,r2,-25188
40098d18:	18bff62e 	bgeu	r3,r2,40098cf4 <__alt_mem_epcs+0xfff57cf4>
        (*ctor) (); 
}
40098d1c:	e037883a 	mov	sp,fp
40098d20:	dfc00117 	ldw	ra,4(sp)
40098d24:	df000017 	ldw	fp,0(sp)
40098d28:	dec00204 	addi	sp,sp,8
40098d2c:	f800283a 	ret

40098d30 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
40098d30:	defffd04 	addi	sp,sp,-12
40098d34:	dfc00215 	stw	ra,8(sp)
40098d38:	df000115 	stw	fp,4(sp)
40098d3c:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
40098d40:	009002b4 	movhi	r2,16394
40098d44:	10a76604 	addi	r2,r2,-25192
40098d48:	e0bfff15 	stw	r2,-4(fp)
40098d4c:	00000606 	br	40098d68 <_do_dtors+0x38>
        (*dtor) (); 
40098d50:	e0bfff17 	ldw	r2,-4(fp)
40098d54:	10800017 	ldw	r2,0(r2)
40098d58:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
40098d5c:	e0bfff17 	ldw	r2,-4(fp)
40098d60:	10bfff04 	addi	r2,r2,-4
40098d64:	e0bfff15 	stw	r2,-4(fp)
40098d68:	e0ffff17 	ldw	r3,-4(fp)
40098d6c:	009002b4 	movhi	r2,16394
40098d70:	10a76704 	addi	r2,r2,-25188
40098d74:	18bff62e 	bgeu	r3,r2,40098d50 <__alt_mem_epcs+0xfff57d50>
        (*dtor) (); 
}
40098d78:	e037883a 	mov	sp,fp
40098d7c:	dfc00117 	ldw	ra,4(sp)
40098d80:	df000017 	ldw	fp,0(sp)
40098d84:	dec00204 	addi	sp,sp,8
40098d88:	f800283a 	ret

40098d8c <alt_flash_open_dev>:
#include "priv/alt_file.h"

ALT_LLIST_HEAD(alt_flash_dev_list);

alt_flash_fd* alt_flash_open_dev(const char* name)
{
40098d8c:	defffc04 	addi	sp,sp,-16
40098d90:	dfc00315 	stw	ra,12(sp)
40098d94:	df000215 	stw	fp,8(sp)
40098d98:	df000204 	addi	fp,sp,8
40098d9c:	e13fff15 	stw	r4,-4(fp)
  alt_flash_dev* dev = (alt_flash_dev*)alt_find_dev(name, &alt_flash_dev_list);
40098da0:	e13fff17 	ldw	r4,-4(fp)
40098da4:	d1601104 	addi	r5,gp,-32700
40098da8:	00997140 	call	40099714 <alt_find_dev>
40098dac:	e0bffe15 	stw	r2,-8(fp)

  if ((dev) && dev->open)
40098db0:	e0bffe17 	ldw	r2,-8(fp)
40098db4:	10000926 	beq	r2,zero,40098ddc <alt_flash_open_dev+0x50>
40098db8:	e0bffe17 	ldw	r2,-8(fp)
40098dbc:	10800317 	ldw	r2,12(r2)
40098dc0:	10000626 	beq	r2,zero,40098ddc <alt_flash_open_dev+0x50>
  {
    return dev->open(dev, name);
40098dc4:	e0bffe17 	ldw	r2,-8(fp)
40098dc8:	10800317 	ldw	r2,12(r2)
40098dcc:	e13ffe17 	ldw	r4,-8(fp)
40098dd0:	e17fff17 	ldw	r5,-4(fp)
40098dd4:	103ee83a 	callr	r2
40098dd8:	00000106 	br	40098de0 <alt_flash_open_dev+0x54>
  }

  return dev;
40098ddc:	e0bffe17 	ldw	r2,-8(fp)
}
40098de0:	e037883a 	mov	sp,fp
40098de4:	dfc00117 	ldw	ra,4(sp)
40098de8:	df000017 	ldw	fp,0(sp)
40098dec:	dec00204 	addi	sp,sp,8
40098df0:	f800283a 	ret

40098df4 <alt_flash_close_dev>:

void alt_flash_close_dev(alt_flash_fd* fd)
{
40098df4:	defffd04 	addi	sp,sp,-12
40098df8:	dfc00215 	stw	ra,8(sp)
40098dfc:	df000115 	stw	fp,4(sp)
40098e00:	df000104 	addi	fp,sp,4
40098e04:	e13fff15 	stw	r4,-4(fp)
  if (fd && fd->close)
40098e08:	e0bfff17 	ldw	r2,-4(fp)
40098e0c:	10000726 	beq	r2,zero,40098e2c <alt_flash_close_dev+0x38>
40098e10:	e0bfff17 	ldw	r2,-4(fp)
40098e14:	10800417 	ldw	r2,16(r2)
40098e18:	10000426 	beq	r2,zero,40098e2c <alt_flash_close_dev+0x38>
  {
    fd->close(fd);
40098e1c:	e0bfff17 	ldw	r2,-4(fp)
40098e20:	10800417 	ldw	r2,16(r2)
40098e24:	e13fff17 	ldw	r4,-4(fp)
40098e28:	103ee83a 	callr	r2
  }
  return;
40098e2c:	0001883a 	nop
}
40098e30:	e037883a 	mov	sp,fp
40098e34:	dfc00117 	ldw	ra,4(sp)
40098e38:	df000017 	ldw	fp,0(sp)
40098e3c:	dec00204 	addi	sp,sp,8
40098e40:	f800283a 	ret

40098e44 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
40098e44:	defffe04 	addi	sp,sp,-8
40098e48:	dfc00115 	stw	ra,4(sp)
40098e4c:	df000015 	stw	fp,0(sp)
40098e50:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
40098e54:	0009883a 	mov	r4,zero
40098e58:	01440004 	movi	r5,4096
40098e5c:	009996c0 	call	4009996c <alt_icache_flush>
#endif
}
40098e60:	e037883a 	mov	sp,fp
40098e64:	dfc00117 	ldw	ra,4(sp)
40098e68:	df000017 	ldw	fp,0(sp)
40098e6c:	dec00204 	addi	sp,sp,8
40098e70:	f800283a 	ret

40098e74 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
40098e74:	defff904 	addi	sp,sp,-28
40098e78:	dfc00615 	stw	ra,24(sp)
40098e7c:	df000515 	stw	fp,20(sp)
40098e80:	df000504 	addi	fp,sp,20
40098e84:	e13ffc15 	stw	r4,-16(fp)
40098e88:	e17ffd15 	stw	r5,-12(fp)
40098e8c:	e1bffe15 	stw	r6,-8(fp)
40098e90:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
40098e94:	e0800217 	ldw	r2,8(fp)
40098e98:	d8800015 	stw	r2,0(sp)
40098e9c:	e13ffc17 	ldw	r4,-16(fp)
40098ea0:	e17ffd17 	ldw	r5,-12(fp)
40098ea4:	e1bffe17 	ldw	r6,-8(fp)
40098ea8:	e1ffff17 	ldw	r7,-4(fp)
40098eac:	00990540 	call	40099054 <alt_iic_isr_register>
}  
40098eb0:	e037883a 	mov	sp,fp
40098eb4:	dfc00117 	ldw	ra,4(sp)
40098eb8:	df000017 	ldw	fp,0(sp)
40098ebc:	dec00204 	addi	sp,sp,8
40098ec0:	f800283a 	ret

40098ec4 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
40098ec4:	defff904 	addi	sp,sp,-28
40098ec8:	df000615 	stw	fp,24(sp)
40098ecc:	df000604 	addi	fp,sp,24
40098ed0:	e13ffe15 	stw	r4,-8(fp)
40098ed4:	e17fff15 	stw	r5,-4(fp)
40098ed8:	e0bfff17 	ldw	r2,-4(fp)
40098edc:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
40098ee0:	0005303a 	rdctl	r2,status
40098ee4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
40098ee8:	e0fffb17 	ldw	r3,-20(fp)
40098eec:	00bfff84 	movi	r2,-2
40098ef0:	1884703a 	and	r2,r3,r2
40098ef4:	1001703a 	wrctl	status,r2
  
  return context;
40098ef8:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
40098efc:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
40098f00:	e0bffa17 	ldw	r2,-24(fp)
40098f04:	00c00044 	movi	r3,1
40098f08:	1884983a 	sll	r2,r3,r2
40098f0c:	1007883a 	mov	r3,r2
40098f10:	009002b4 	movhi	r2,16394
40098f14:	10b73404 	addi	r2,r2,-9008
40098f18:	10800017 	ldw	r2,0(r2)
40098f1c:	1886b03a 	or	r3,r3,r2
40098f20:	009002b4 	movhi	r2,16394
40098f24:	10b73404 	addi	r2,r2,-9008
40098f28:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
40098f2c:	009002b4 	movhi	r2,16394
40098f30:	10b73404 	addi	r2,r2,-9008
40098f34:	10800017 	ldw	r2,0(r2)
40098f38:	100170fa 	wrctl	ienable,r2
40098f3c:	e0bffc17 	ldw	r2,-16(fp)
40098f40:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
40098f44:	e0bffd17 	ldw	r2,-12(fp)
40098f48:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
40098f4c:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
40098f50:	0001883a 	nop
}
40098f54:	e037883a 	mov	sp,fp
40098f58:	df000017 	ldw	fp,0(sp)
40098f5c:	dec00104 	addi	sp,sp,4
40098f60:	f800283a 	ret

40098f64 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
40098f64:	defff904 	addi	sp,sp,-28
40098f68:	df000615 	stw	fp,24(sp)
40098f6c:	df000604 	addi	fp,sp,24
40098f70:	e13ffe15 	stw	r4,-8(fp)
40098f74:	e17fff15 	stw	r5,-4(fp)
40098f78:	e0bfff17 	ldw	r2,-4(fp)
40098f7c:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
40098f80:	0005303a 	rdctl	r2,status
40098f84:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
40098f88:	e0fffb17 	ldw	r3,-20(fp)
40098f8c:	00bfff84 	movi	r2,-2
40098f90:	1884703a 	and	r2,r3,r2
40098f94:	1001703a 	wrctl	status,r2
  
  return context;
40098f98:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
40098f9c:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
40098fa0:	e0bffa17 	ldw	r2,-24(fp)
40098fa4:	00c00044 	movi	r3,1
40098fa8:	1884983a 	sll	r2,r3,r2
40098fac:	0084303a 	nor	r2,zero,r2
40098fb0:	1007883a 	mov	r3,r2
40098fb4:	009002b4 	movhi	r2,16394
40098fb8:	10b73404 	addi	r2,r2,-9008
40098fbc:	10800017 	ldw	r2,0(r2)
40098fc0:	1886703a 	and	r3,r3,r2
40098fc4:	009002b4 	movhi	r2,16394
40098fc8:	10b73404 	addi	r2,r2,-9008
40098fcc:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
40098fd0:	009002b4 	movhi	r2,16394
40098fd4:	10b73404 	addi	r2,r2,-9008
40098fd8:	10800017 	ldw	r2,0(r2)
40098fdc:	100170fa 	wrctl	ienable,r2
40098fe0:	e0bffc17 	ldw	r2,-16(fp)
40098fe4:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
40098fe8:	e0bffd17 	ldw	r2,-12(fp)
40098fec:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
40098ff0:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
40098ff4:	0001883a 	nop
}
40098ff8:	e037883a 	mov	sp,fp
40098ffc:	df000017 	ldw	fp,0(sp)
40099000:	dec00104 	addi	sp,sp,4
40099004:	f800283a 	ret

40099008 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
40099008:	defffc04 	addi	sp,sp,-16
4009900c:	df000315 	stw	fp,12(sp)
40099010:	df000304 	addi	fp,sp,12
40099014:	e13ffe15 	stw	r4,-8(fp)
40099018:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
4009901c:	000530fa 	rdctl	r2,ienable
40099020:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
40099024:	e0bfff17 	ldw	r2,-4(fp)
40099028:	00c00044 	movi	r3,1
4009902c:	1884983a 	sll	r2,r3,r2
40099030:	1007883a 	mov	r3,r2
40099034:	e0bffd17 	ldw	r2,-12(fp)
40099038:	1884703a 	and	r2,r3,r2
4009903c:	1004c03a 	cmpne	r2,r2,zero
40099040:	10803fcc 	andi	r2,r2,255
}
40099044:	e037883a 	mov	sp,fp
40099048:	df000017 	ldw	fp,0(sp)
4009904c:	dec00104 	addi	sp,sp,4
40099050:	f800283a 	ret

40099054 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
40099054:	defff504 	addi	sp,sp,-44
40099058:	dfc00a15 	stw	ra,40(sp)
4009905c:	df000915 	stw	fp,36(sp)
40099060:	df000904 	addi	fp,sp,36
40099064:	e13ffc15 	stw	r4,-16(fp)
40099068:	e17ffd15 	stw	r5,-12(fp)
4009906c:	e1bffe15 	stw	r6,-8(fp)
40099070:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
40099074:	00bffa84 	movi	r2,-22
40099078:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
4009907c:	e0bffd17 	ldw	r2,-12(fp)
40099080:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
40099084:	e0bff817 	ldw	r2,-32(fp)
40099088:	10800808 	cmpgei	r2,r2,32
4009908c:	1000271e 	bne	r2,zero,4009912c <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
40099090:	0005303a 	rdctl	r2,status
40099094:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
40099098:	e0fffa17 	ldw	r3,-24(fp)
4009909c:	00bfff84 	movi	r2,-2
400990a0:	1884703a 	and	r2,r3,r2
400990a4:	1001703a 	wrctl	status,r2
  
  return context;
400990a8:	e0bffa17 	ldw	r2,-24(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
400990ac:	e0bff915 	stw	r2,-28(fp)

    alt_irq[id].handler = isr;
400990b0:	009002b4 	movhi	r2,16394
400990b4:	1086f504 	addi	r2,r2,7124
400990b8:	e0fff817 	ldw	r3,-32(fp)
400990bc:	180690fa 	slli	r3,r3,3
400990c0:	10c5883a 	add	r2,r2,r3
400990c4:	e0fffe17 	ldw	r3,-8(fp)
400990c8:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
400990cc:	009002b4 	movhi	r2,16394
400990d0:	1086f504 	addi	r2,r2,7124
400990d4:	e0fff817 	ldw	r3,-32(fp)
400990d8:	180690fa 	slli	r3,r3,3
400990dc:	10c5883a 	add	r2,r2,r3
400990e0:	10800104 	addi	r2,r2,4
400990e4:	e0ffff17 	ldw	r3,-4(fp)
400990e8:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
400990ec:	e0bffe17 	ldw	r2,-8(fp)
400990f0:	10000526 	beq	r2,zero,40099108 <alt_iic_isr_register+0xb4>
400990f4:	e0bff817 	ldw	r2,-32(fp)
400990f8:	e13ffc17 	ldw	r4,-16(fp)
400990fc:	100b883a 	mov	r5,r2
40099100:	0098ec40 	call	40098ec4 <alt_ic_irq_enable>
40099104:	00000406 	br	40099118 <alt_iic_isr_register+0xc4>
40099108:	e0bff817 	ldw	r2,-32(fp)
4009910c:	e13ffc17 	ldw	r4,-16(fp)
40099110:	100b883a 	mov	r5,r2
40099114:	0098f640 	call	40098f64 <alt_ic_irq_disable>
40099118:	e0bff715 	stw	r2,-36(fp)
4009911c:	e0bff917 	ldw	r2,-28(fp)
40099120:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
40099124:	e0bffb17 	ldw	r2,-20(fp)
40099128:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
4009912c:	e0bff717 	ldw	r2,-36(fp)
}
40099130:	e037883a 	mov	sp,fp
40099134:	dfc00117 	ldw	ra,4(sp)
40099138:	df000017 	ldw	fp,0(sp)
4009913c:	dec00204 	addi	sp,sp,8
40099140:	f800283a 	ret

40099144 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
40099144:	defff904 	addi	sp,sp,-28
40099148:	dfc00615 	stw	ra,24(sp)
4009914c:	df000515 	stw	fp,20(sp)
40099150:	df000504 	addi	fp,sp,20
40099154:	e13ffc15 	stw	r4,-16(fp)
40099158:	e17ffd15 	stw	r5,-12(fp)
4009915c:	e1bffe15 	stw	r6,-8(fp)
40099160:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
40099164:	e13ffd17 	ldw	r4,-12(fp)
40099168:	e17ffe17 	ldw	r5,-8(fp)
4009916c:	e1bfff17 	ldw	r6,-4(fp)
40099170:	00993980 	call	40099398 <open>
40099174:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
40099178:	e0bffb17 	ldw	r2,-20(fp)
4009917c:	10001c16 	blt	r2,zero,400991f0 <alt_open_fd+0xac>
  {
    fd->dev      = alt_fd_list[old].dev;
40099180:	009002b4 	movhi	r2,16394
40099184:	10ab0d04 	addi	r2,r2,-21452
40099188:	e0fffb17 	ldw	r3,-20(fp)
4009918c:	18c00324 	muli	r3,r3,12
40099190:	10c5883a 	add	r2,r2,r3
40099194:	10c00017 	ldw	r3,0(r2)
40099198:	e0bffc17 	ldw	r2,-16(fp)
4009919c:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
400991a0:	009002b4 	movhi	r2,16394
400991a4:	10ab0d04 	addi	r2,r2,-21452
400991a8:	e0fffb17 	ldw	r3,-20(fp)
400991ac:	18c00324 	muli	r3,r3,12
400991b0:	10c5883a 	add	r2,r2,r3
400991b4:	10800104 	addi	r2,r2,4
400991b8:	10c00017 	ldw	r3,0(r2)
400991bc:	e0bffc17 	ldw	r2,-16(fp)
400991c0:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
400991c4:	009002b4 	movhi	r2,16394
400991c8:	10ab0d04 	addi	r2,r2,-21452
400991cc:	e0fffb17 	ldw	r3,-20(fp)
400991d0:	18c00324 	muli	r3,r3,12
400991d4:	10c5883a 	add	r2,r2,r3
400991d8:	10800204 	addi	r2,r2,8
400991dc:	10c00017 	ldw	r3,0(r2)
400991e0:	e0bffc17 	ldw	r2,-16(fp)
400991e4:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
400991e8:	e13ffb17 	ldw	r4,-20(fp)
400991ec:	0095ffc0 	call	40095ffc <alt_release_fd>
  }
} 
400991f0:	e037883a 	mov	sp,fp
400991f4:	dfc00117 	ldw	ra,4(sp)
400991f8:	df000017 	ldw	fp,0(sp)
400991fc:	dec00204 	addi	sp,sp,8
40099200:	f800283a 	ret

40099204 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
40099204:	defffb04 	addi	sp,sp,-20
40099208:	dfc00415 	stw	ra,16(sp)
4009920c:	df000315 	stw	fp,12(sp)
40099210:	df000304 	addi	fp,sp,12
40099214:	e13ffd15 	stw	r4,-12(fp)
40099218:	e17ffe15 	stw	r5,-8(fp)
4009921c:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
40099220:	011002b4 	movhi	r4,16394
40099224:	212b1004 	addi	r4,r4,-21440
40099228:	e17ffd17 	ldw	r5,-12(fp)
4009922c:	01800044 	movi	r6,1
40099230:	01c07fc4 	movi	r7,511
40099234:	00991440 	call	40099144 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
40099238:	011002b4 	movhi	r4,16394
4009923c:	212b0d04 	addi	r4,r4,-21452
40099240:	e17ffe17 	ldw	r5,-8(fp)
40099244:	000d883a 	mov	r6,zero
40099248:	01c07fc4 	movi	r7,511
4009924c:	00991440 	call	40099144 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
40099250:	011002b4 	movhi	r4,16394
40099254:	212b1304 	addi	r4,r4,-21428
40099258:	e17fff17 	ldw	r5,-4(fp)
4009925c:	01800044 	movi	r6,1
40099260:	01c07fc4 	movi	r7,511
40099264:	00991440 	call	40099144 <alt_open_fd>
}  
40099268:	e037883a 	mov	sp,fp
4009926c:	dfc00117 	ldw	ra,4(sp)
40099270:	df000017 	ldw	fp,0(sp)
40099274:	dec00204 	addi	sp,sp,8
40099278:	f800283a 	ret

4009927c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
4009927c:	defffe04 	addi	sp,sp,-8
40099280:	dfc00115 	stw	ra,4(sp)
40099284:	df000015 	stw	fp,0(sp)
40099288:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
4009928c:	009002b4 	movhi	r2,16394
40099290:	10aff504 	addi	r2,r2,-16428
40099294:	10800017 	ldw	r2,0(r2)
40099298:	10000526 	beq	r2,zero,400992b0 <alt_get_errno+0x34>
4009929c:	009002b4 	movhi	r2,16394
400992a0:	10aff504 	addi	r2,r2,-16428
400992a4:	10800017 	ldw	r2,0(r2)
400992a8:	103ee83a 	callr	r2
400992ac:	00000206 	br	400992b8 <alt_get_errno+0x3c>
400992b0:	009002b4 	movhi	r2,16394
400992b4:	10b73304 	addi	r2,r2,-9012
}
400992b8:	e037883a 	mov	sp,fp
400992bc:	dfc00117 	ldw	ra,4(sp)
400992c0:	df000017 	ldw	fp,0(sp)
400992c4:	dec00204 	addi	sp,sp,8
400992c8:	f800283a 	ret

400992cc <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
400992cc:	defffd04 	addi	sp,sp,-12
400992d0:	df000215 	stw	fp,8(sp)
400992d4:	df000204 	addi	fp,sp,8
400992d8:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
400992dc:	e0bfff17 	ldw	r2,-4(fp)
400992e0:	10800217 	ldw	r2,8(r2)
400992e4:	10d00034 	orhi	r3,r2,16384
400992e8:	e0bfff17 	ldw	r2,-4(fp)
400992ec:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
400992f0:	e03ffe15 	stw	zero,-8(fp)
400992f4:	00001d06 	br	4009936c <alt_file_locked+0xa0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
400992f8:	009002b4 	movhi	r2,16394
400992fc:	10ab0d04 	addi	r2,r2,-21452
40099300:	e0fffe17 	ldw	r3,-8(fp)
40099304:	18c00324 	muli	r3,r3,12
40099308:	10c5883a 	add	r2,r2,r3
4009930c:	10c00017 	ldw	r3,0(r2)
40099310:	e0bfff17 	ldw	r2,-4(fp)
40099314:	10800017 	ldw	r2,0(r2)
40099318:	1880111e 	bne	r3,r2,40099360 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
4009931c:	009002b4 	movhi	r2,16394
40099320:	10ab0d04 	addi	r2,r2,-21452
40099324:	e0fffe17 	ldw	r3,-8(fp)
40099328:	18c00324 	muli	r3,r3,12
4009932c:	10c5883a 	add	r2,r2,r3
40099330:	10800204 	addi	r2,r2,8
40099334:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
40099338:	1000090e 	bge	r2,zero,40099360 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
4009933c:	e0bffe17 	ldw	r2,-8(fp)
40099340:	10c00324 	muli	r3,r2,12
40099344:	009002b4 	movhi	r2,16394
40099348:	10ab0d04 	addi	r2,r2,-21452
4009934c:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
40099350:	e0bfff17 	ldw	r2,-4(fp)
40099354:	18800226 	beq	r3,r2,40099360 <alt_file_locked+0x94>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
40099358:	00bffcc4 	movi	r2,-13
4009935c:	00000a06 	br	40099388 <alt_file_locked+0xbc>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
40099360:	e0bffe17 	ldw	r2,-8(fp)
40099364:	10800044 	addi	r2,r2,1
40099368:	e0bffe15 	stw	r2,-8(fp)
4009936c:	009002b4 	movhi	r2,16394
40099370:	10aff404 	addi	r2,r2,-16432
40099374:	10800017 	ldw	r2,0(r2)
40099378:	1007883a 	mov	r3,r2
4009937c:	e0bffe17 	ldw	r2,-8(fp)
40099380:	18bfdd2e 	bgeu	r3,r2,400992f8 <__alt_mem_epcs+0xfff582f8>
    }
  }
  
  /* The device is not locked */
 
  return 0;
40099384:	0005883a 	mov	r2,zero
}
40099388:	e037883a 	mov	sp,fp
4009938c:	df000017 	ldw	fp,0(sp)
40099390:	dec00104 	addi	sp,sp,4
40099394:	f800283a 	ret

40099398 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
40099398:	defff604 	addi	sp,sp,-40
4009939c:	dfc00915 	stw	ra,36(sp)
400993a0:	df000815 	stw	fp,32(sp)
400993a4:	df000804 	addi	fp,sp,32
400993a8:	e13ffd15 	stw	r4,-12(fp)
400993ac:	e17ffe15 	stw	r5,-8(fp)
400993b0:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
400993b4:	00bfffc4 	movi	r2,-1
400993b8:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
400993bc:	00bffb44 	movi	r2,-19
400993c0:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
400993c4:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
400993c8:	e13ffd17 	ldw	r4,-12(fp)
400993cc:	015002b4 	movhi	r5,16394
400993d0:	296ff204 	addi	r5,r5,-16440
400993d4:	00997140 	call	40099714 <alt_find_dev>
400993d8:	e0bff815 	stw	r2,-32(fp)
400993dc:	e0bff817 	ldw	r2,-32(fp)
400993e0:	1000051e 	bne	r2,zero,400993f8 <open+0x60>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
400993e4:	e13ffd17 	ldw	r4,-12(fp)
400993e8:	00997a40 	call	400997a4 <alt_find_file>
400993ec:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
400993f0:	00800044 	movi	r2,1
400993f4:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
400993f8:	e0bff817 	ldw	r2,-32(fp)
400993fc:	10002926 	beq	r2,zero,400994a4 <open+0x10c>
  {
    if ((index = alt_get_fd (dev)) < 0)
40099400:	e13ff817 	ldw	r4,-32(fp)
40099404:	00998b80 	call	400998b8 <alt_get_fd>
40099408:	e0bff915 	stw	r2,-28(fp)
4009940c:	e0bff917 	ldw	r2,-28(fp)
40099410:	1000030e 	bge	r2,zero,40099420 <open+0x88>
    {
      status = index;
40099414:	e0bff917 	ldw	r2,-28(fp)
40099418:	e0bffa15 	stw	r2,-24(fp)
4009941c:	00002306 	br	400994ac <open+0x114>
    }
    else
    {
      fd = &alt_fd_list[index];
40099420:	e0bff917 	ldw	r2,-28(fp)
40099424:	10c00324 	muli	r3,r2,12
40099428:	009002b4 	movhi	r2,16394
4009942c:	10ab0d04 	addi	r2,r2,-21452
40099430:	1885883a 	add	r2,r3,r2
40099434:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
40099438:	e0fffe17 	ldw	r3,-8(fp)
4009943c:	00900034 	movhi	r2,16384
40099440:	10bfffc4 	addi	r2,r2,-1
40099444:	1886703a 	and	r3,r3,r2
40099448:	e0bffc17 	ldw	r2,-16(fp)
4009944c:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
40099450:	e0bffb17 	ldw	r2,-20(fp)
40099454:	1000051e 	bne	r2,zero,4009946c <open+0xd4>
40099458:	e13ffc17 	ldw	r4,-16(fp)
4009945c:	00992cc0 	call	400992cc <alt_file_locked>
40099460:	e0bffa15 	stw	r2,-24(fp)
40099464:	e0bffa17 	ldw	r2,-24(fp)
40099468:	10001016 	blt	r2,zero,400994ac <open+0x114>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
4009946c:	e0bff817 	ldw	r2,-32(fp)
40099470:	10800317 	ldw	r2,12(r2)
40099474:	10000826 	beq	r2,zero,40099498 <open+0x100>
40099478:	e0bff817 	ldw	r2,-32(fp)
4009947c:	10800317 	ldw	r2,12(r2)
40099480:	e13ffc17 	ldw	r4,-16(fp)
40099484:	e17ffd17 	ldw	r5,-12(fp)
40099488:	e1bffe17 	ldw	r6,-8(fp)
4009948c:	e1ffff17 	ldw	r7,-4(fp)
40099490:	103ee83a 	callr	r2
40099494:	00000106 	br	4009949c <open+0x104>
40099498:	0005883a 	mov	r2,zero
4009949c:	e0bffa15 	stw	r2,-24(fp)
400994a0:	00000206 	br	400994ac <open+0x114>
      }
    }
  }
  else
  {
    status = -ENODEV;
400994a4:	00bffb44 	movi	r2,-19
400994a8:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
400994ac:	e0bffa17 	ldw	r2,-24(fp)
400994b0:	1000090e 	bge	r2,zero,400994d8 <open+0x140>
  {
    alt_release_fd (index);  
400994b4:	e13ff917 	ldw	r4,-28(fp)
400994b8:	0095ffc0 	call	40095ffc <alt_release_fd>
    ALT_ERRNO = -status;
400994bc:	009927c0 	call	4009927c <alt_get_errno>
400994c0:	1007883a 	mov	r3,r2
400994c4:	e0bffa17 	ldw	r2,-24(fp)
400994c8:	0085c83a 	sub	r2,zero,r2
400994cc:	18800015 	stw	r2,0(r3)
    return -1;
400994d0:	00bfffc4 	movi	r2,-1
400994d4:	00000106 	br	400994dc <open+0x144>
  }
  
  /* return the reference upon success */

  return index;
400994d8:	e0bff917 	ldw	r2,-28(fp)
}
400994dc:	e037883a 	mov	sp,fp
400994e0:	dfc00117 	ldw	ra,4(sp)
400994e4:	df000017 	ldw	fp,0(sp)
400994e8:	dec00204 	addi	sp,sp,8
400994ec:	f800283a 	ret

400994f0 <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
400994f0:	deffff04 	addi	sp,sp,-4
400994f4:	df000015 	stw	fp,0(sp)
400994f8:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
400994fc:	000170fa 	wrctl	ienable,zero
}
40099500:	e037883a 	mov	sp,fp
40099504:	df000017 	ldw	fp,0(sp)
40099508:	dec00104 	addi	sp,sp,4
4009950c:	f800283a 	ret

40099510 <alt_avalon_spi_command>:

int alt_avalon_spi_command(alt_u32 base, alt_u32 slave,
                           alt_u32 write_length, const alt_u8 * write_data,
                           alt_u32 read_length, alt_u8 * read_data,
                           alt_u32 flags)
{
40099510:	defff404 	addi	sp,sp,-48
40099514:	df000b15 	stw	fp,44(sp)
40099518:	df000b04 	addi	fp,sp,44
4009951c:	e13ffc15 	stw	r4,-16(fp)
40099520:	e17ffd15 	stw	r5,-12(fp)
40099524:	e1bffe15 	stw	r6,-8(fp)
40099528:	e1ffff15 	stw	r7,-4(fp)
  const alt_u8 * write_end = write_data + write_length;
4009952c:	e0ffff17 	ldw	r3,-4(fp)
40099530:	e0bffe17 	ldw	r2,-8(fp)
40099534:	1885883a 	add	r2,r3,r2
40099538:	e0bff815 	stw	r2,-32(fp)
  alt_u8 * read_end = read_data + read_length;
4009953c:	e0c00217 	ldw	r3,8(fp)
40099540:	e0800117 	ldw	r2,4(fp)
40099544:	1885883a 	add	r2,r3,r2
40099548:	e0bff915 	stw	r2,-28(fp)

  alt_u32 write_zeros = read_length;
4009954c:	e0800117 	ldw	r2,4(fp)
40099550:	e0bff515 	stw	r2,-44(fp)
  alt_u32 read_ignore = write_length;
40099554:	e0bffe17 	ldw	r2,-8(fp)
40099558:	e0bff615 	stw	r2,-40(fp)

  /* We must not send more than two bytes to the target before it has
   * returned any as otherwise it will overflow. */
  /* Unfortunately the hardware does not seem to work with credits > 1,
   * leave it at 1 for now. */
  alt_32 credits = 1;
4009955c:	00800044 	movi	r2,1
40099560:	e0bff715 	stw	r2,-36(fp)
  /* Warning: this function is not currently safe if called in a multi-threaded
   * environment, something above must perform locking to make it safe if more
   * than one thread intends to use it.
   */

  IOWR_ALTERA_AVALON_SPI_SLAVE_SEL(base, 1 << slave);
40099564:	e0bffc17 	ldw	r2,-16(fp)
40099568:	10800504 	addi	r2,r2,20
4009956c:	1009883a 	mov	r4,r2
40099570:	e0bffd17 	ldw	r2,-12(fp)
40099574:	00c00044 	movi	r3,1
40099578:	1884983a 	sll	r2,r3,r2
4009957c:	20800035 	stwio	r2,0(r4)
  
  /* Set the SSO bit (force chipselect) only if the toggle flag is not set */
  if ((flags & ALT_AVALON_SPI_COMMAND_TOGGLE_SS_N) == 0) {
40099580:	e0800317 	ldw	r2,12(fp)
40099584:	1080008c 	andi	r2,r2,2
40099588:	1000051e 	bne	r2,zero,400995a0 <alt_avalon_spi_command+0x90>
    IOWR_ALTERA_AVALON_SPI_CONTROL(base, ALTERA_AVALON_SPI_CONTROL_SSO_MSK);
4009958c:	e0bffc17 	ldw	r2,-16(fp)
40099590:	10800304 	addi	r2,r2,12
40099594:	1007883a 	mov	r3,r2
40099598:	00810004 	movi	r2,1024
4009959c:	18800035 	stwio	r2,0(r3)
  /*
   * Discard any stale data present in the RXDATA register, in case
   * previous communication was interrupted and stale data was left
   * behind.
   */
  IORD_ALTERA_AVALON_SPI_RXDATA(base);
400995a0:	e0bffc17 	ldw	r2,-16(fp)
400995a4:	10800037 	ldwio	r2,0(r2)
  for ( ; ; )
  {
    
    do
    {
      status = IORD_ALTERA_AVALON_SPI_STATUS(base);
400995a8:	e0bffc17 	ldw	r2,-16(fp)
400995ac:	10800204 	addi	r2,r2,8
400995b0:	10800037 	ldwio	r2,0(r2)
400995b4:	e0bffa15 	stw	r2,-24(fp)
    }
    while (((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) == 0 || credits == 0) &&
400995b8:	e0bffa17 	ldw	r2,-24(fp)
400995bc:	1080100c 	andi	r2,r2,64
            (status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) == 0);
400995c0:	10000226 	beq	r2,zero,400995cc <alt_avalon_spi_command+0xbc>
    
    do
    {
      status = IORD_ALTERA_AVALON_SPI_STATUS(base);
    }
    while (((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) == 0 || credits == 0) &&
400995c4:	e0bff717 	ldw	r2,-36(fp)
400995c8:	1000031e 	bne	r2,zero,400995d8 <alt_avalon_spi_command+0xc8>
            (status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) == 0);
400995cc:	e0bffa17 	ldw	r2,-24(fp)
400995d0:	1080200c 	andi	r2,r2,128
    
    do
    {
      status = IORD_ALTERA_AVALON_SPI_STATUS(base);
    }
    while (((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) == 0 || credits == 0) &&
400995d4:	103ff426 	beq	r2,zero,400995a8 <__alt_mem_epcs+0xfff585a8>
            (status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) == 0);

    if ((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) != 0 && credits > 0)
400995d8:	e0bffa17 	ldw	r2,-24(fp)
400995dc:	1080100c 	andi	r2,r2,64
400995e0:	10001e26 	beq	r2,zero,4009965c <alt_avalon_spi_command+0x14c>
400995e4:	e0bff717 	ldw	r2,-36(fp)
400995e8:	00801c0e 	bge	zero,r2,4009965c <alt_avalon_spi_command+0x14c>
    {
      credits--;
400995ec:	e0bff717 	ldw	r2,-36(fp)
400995f0:	10bfffc4 	addi	r2,r2,-1
400995f4:	e0bff715 	stw	r2,-36(fp)

      if (write_data < write_end)
400995f8:	e0ffff17 	ldw	r3,-4(fp)
400995fc:	e0bff817 	ldw	r2,-32(fp)
40099600:	18800a2e 	bgeu	r3,r2,4009962c <alt_avalon_spi_command+0x11c>
        IOWR_ALTERA_AVALON_SPI_TXDATA(base, *write_data++);
40099604:	e0bffc17 	ldw	r2,-16(fp)
40099608:	10800104 	addi	r2,r2,4
4009960c:	1009883a 	mov	r4,r2
40099610:	e0bfff17 	ldw	r2,-4(fp)
40099614:	10c00044 	addi	r3,r2,1
40099618:	e0ffff15 	stw	r3,-4(fp)
4009961c:	10800003 	ldbu	r2,0(r2)
40099620:	10803fcc 	andi	r2,r2,255
40099624:	20800035 	stwio	r2,0(r4)
40099628:	00000c06 	br	4009965c <alt_avalon_spi_command+0x14c>
      else if (write_zeros > 0)
4009962c:	e0bff517 	ldw	r2,-44(fp)
40099630:	10000826 	beq	r2,zero,40099654 <alt_avalon_spi_command+0x144>
      {
        write_zeros--;
40099634:	e0bff517 	ldw	r2,-44(fp)
40099638:	10bfffc4 	addi	r2,r2,-1
4009963c:	e0bff515 	stw	r2,-44(fp)
        IOWR_ALTERA_AVALON_SPI_TXDATA(base, 0);
40099640:	e0bffc17 	ldw	r2,-16(fp)
40099644:	10800104 	addi	r2,r2,4
40099648:	0007883a 	mov	r3,zero
4009964c:	10c00035 	stwio	r3,0(r2)
40099650:	00000206 	br	4009965c <alt_avalon_spi_command+0x14c>
      }
      else
        credits = -1024;
40099654:	00bf0004 	movi	r2,-1024
40099658:	e0bff715 	stw	r2,-36(fp)
    };

    if ((status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) != 0)
4009965c:	e0bffa17 	ldw	r2,-24(fp)
40099660:	1080200c 	andi	r2,r2,128
40099664:	10001726 	beq	r2,zero,400996c4 <alt_avalon_spi_command+0x1b4>
    {
      alt_u32 rxdata = IORD_ALTERA_AVALON_SPI_RXDATA(base);
40099668:	e0bffc17 	ldw	r2,-16(fp)
4009966c:	10800037 	ldwio	r2,0(r2)
40099670:	e0bffb15 	stw	r2,-20(fp)

      if (read_ignore > 0)
40099674:	e0bff617 	ldw	r2,-40(fp)
40099678:	10000426 	beq	r2,zero,4009968c <alt_avalon_spi_command+0x17c>
        read_ignore--;
4009967c:	e0bff617 	ldw	r2,-40(fp)
40099680:	10bfffc4 	addi	r2,r2,-1
40099684:	e0bff615 	stw	r2,-40(fp)
40099688:	00000506 	br	400996a0 <alt_avalon_spi_command+0x190>
      else
        *read_data++ = (alt_u8)rxdata;
4009968c:	e0800217 	ldw	r2,8(fp)
40099690:	10c00044 	addi	r3,r2,1
40099694:	e0c00215 	stw	r3,8(fp)
40099698:	e0fffb17 	ldw	r3,-20(fp)
4009969c:	10c00005 	stb	r3,0(r2)
      credits++;
400996a0:	e0bff717 	ldw	r2,-36(fp)
400996a4:	10800044 	addi	r2,r2,1
400996a8:	e0bff715 	stw	r2,-36(fp)

      if (read_ignore == 0 && read_data == read_end)
400996ac:	e0bff617 	ldw	r2,-40(fp)
400996b0:	1000041e 	bne	r2,zero,400996c4 <alt_avalon_spi_command+0x1b4>
400996b4:	e0c00217 	ldw	r3,8(fp)
400996b8:	e0bff917 	ldw	r2,-28(fp)
400996bc:	1880011e 	bne	r3,r2,400996c4 <alt_avalon_spi_command+0x1b4>
        break;
400996c0:	00000106 	br	400996c8 <alt_avalon_spi_command+0x1b8>
    }
    
  }
400996c4:	003fb806 	br	400995a8 <__alt_mem_epcs+0xfff585a8>

  /* Wait until the interface has finished transmitting */
  do
  {
    status = IORD_ALTERA_AVALON_SPI_STATUS(base);
400996c8:	e0bffc17 	ldw	r2,-16(fp)
400996cc:	10800204 	addi	r2,r2,8
400996d0:	10800037 	ldwio	r2,0(r2)
400996d4:	e0bffa15 	stw	r2,-24(fp)
  }
  while ((status & ALTERA_AVALON_SPI_STATUS_TMT_MSK) == 0);
400996d8:	e0bffa17 	ldw	r2,-24(fp)
400996dc:	1080080c 	andi	r2,r2,32
400996e0:	103ff926 	beq	r2,zero,400996c8 <__alt_mem_epcs+0xfff586c8>

  /* Clear SSO (release chipselect) unless the caller is going to
   * keep using this chip
   */
  if ((flags & ALT_AVALON_SPI_COMMAND_MERGE) == 0)
400996e4:	e0800317 	ldw	r2,12(fp)
400996e8:	1080004c 	andi	r2,r2,1
400996ec:	1000041e 	bne	r2,zero,40099700 <alt_avalon_spi_command+0x1f0>
    IOWR_ALTERA_AVALON_SPI_CONTROL(base, 0);
400996f0:	e0bffc17 	ldw	r2,-16(fp)
400996f4:	10800304 	addi	r2,r2,12
400996f8:	0007883a 	mov	r3,zero
400996fc:	10c00035 	stwio	r3,0(r2)

  return read_length;
40099700:	e0800117 	ldw	r2,4(fp)
}
40099704:	e037883a 	mov	sp,fp
40099708:	df000017 	ldw	fp,0(sp)
4009970c:	dec00104 	addi	sp,sp,4
40099710:	f800283a 	ret

40099714 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
40099714:	defffa04 	addi	sp,sp,-24
40099718:	dfc00515 	stw	ra,20(sp)
4009971c:	df000415 	stw	fp,16(sp)
40099720:	df000404 	addi	fp,sp,16
40099724:	e13ffe15 	stw	r4,-8(fp)
40099728:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
4009972c:	e0bfff17 	ldw	r2,-4(fp)
40099730:	10800017 	ldw	r2,0(r2)
40099734:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
40099738:	e13ffe17 	ldw	r4,-8(fp)
4009973c:	0089d980 	call	40089d98 <strlen>
40099740:	10800044 	addi	r2,r2,1
40099744:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
40099748:	00000d06 	br	40099780 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
4009974c:	e0bffc17 	ldw	r2,-16(fp)
40099750:	10c00217 	ldw	r3,8(r2)
40099754:	e0bffd17 	ldw	r2,-12(fp)
40099758:	1809883a 	mov	r4,r3
4009975c:	e17ffe17 	ldw	r5,-8(fp)
40099760:	100d883a 	mov	r6,r2
40099764:	0099a440 	call	40099a44 <memcmp>
40099768:	1000021e 	bne	r2,zero,40099774 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
4009976c:	e0bffc17 	ldw	r2,-16(fp)
40099770:	00000706 	br	40099790 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
40099774:	e0bffc17 	ldw	r2,-16(fp)
40099778:	10800017 	ldw	r2,0(r2)
4009977c:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
40099780:	e0fffc17 	ldw	r3,-16(fp)
40099784:	e0bfff17 	ldw	r2,-4(fp)
40099788:	18bff01e 	bne	r3,r2,4009974c <__alt_mem_epcs+0xfff5874c>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
4009978c:	0005883a 	mov	r2,zero
}
40099790:	e037883a 	mov	sp,fp
40099794:	dfc00117 	ldw	ra,4(sp)
40099798:	df000017 	ldw	fp,0(sp)
4009979c:	dec00204 	addi	sp,sp,8
400997a0:	f800283a 	ret

400997a4 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
400997a4:	defffb04 	addi	sp,sp,-20
400997a8:	dfc00415 	stw	ra,16(sp)
400997ac:	df000315 	stw	fp,12(sp)
400997b0:	df000304 	addi	fp,sp,12
400997b4:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
400997b8:	009002b4 	movhi	r2,16394
400997bc:	10aff004 	addi	r2,r2,-16448
400997c0:	10800017 	ldw	r2,0(r2)
400997c4:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
400997c8:	00003106 	br	40099890 <alt_find_file+0xec>
  {
    len = strlen(next->name);
400997cc:	e0bffd17 	ldw	r2,-12(fp)
400997d0:	10800217 	ldw	r2,8(r2)
400997d4:	1009883a 	mov	r4,r2
400997d8:	0089d980 	call	40089d98 <strlen>
400997dc:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
400997e0:	e0bffd17 	ldw	r2,-12(fp)
400997e4:	10c00217 	ldw	r3,8(r2)
400997e8:	e0bffe17 	ldw	r2,-8(fp)
400997ec:	10bfffc4 	addi	r2,r2,-1
400997f0:	1885883a 	add	r2,r3,r2
400997f4:	10800003 	ldbu	r2,0(r2)
400997f8:	10803fcc 	andi	r2,r2,255
400997fc:	1080201c 	xori	r2,r2,128
40099800:	10bfe004 	addi	r2,r2,-128
40099804:	10800bd8 	cmpnei	r2,r2,47
40099808:	1000031e 	bne	r2,zero,40099818 <alt_find_file+0x74>
    {
      len -= 1;
4009980c:	e0bffe17 	ldw	r2,-8(fp)
40099810:	10bfffc4 	addi	r2,r2,-1
40099814:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
40099818:	e0bffe17 	ldw	r2,-8(fp)
4009981c:	e0ffff17 	ldw	r3,-4(fp)
40099820:	1885883a 	add	r2,r3,r2
40099824:	10800003 	ldbu	r2,0(r2)
40099828:	10803fcc 	andi	r2,r2,255
4009982c:	1080201c 	xori	r2,r2,128
40099830:	10bfe004 	addi	r2,r2,-128
40099834:	10800be0 	cmpeqi	r2,r2,47
40099838:	1000081e 	bne	r2,zero,4009985c <alt_find_file+0xb8>
4009983c:	e0bffe17 	ldw	r2,-8(fp)
40099840:	e0ffff17 	ldw	r3,-4(fp)
40099844:	1885883a 	add	r2,r3,r2
40099848:	10800003 	ldbu	r2,0(r2)
4009984c:	10803fcc 	andi	r2,r2,255
40099850:	1080201c 	xori	r2,r2,128
40099854:	10bfe004 	addi	r2,r2,-128
40099858:	10000a1e 	bne	r2,zero,40099884 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
4009985c:	e0bffd17 	ldw	r2,-12(fp)
40099860:	10c00217 	ldw	r3,8(r2)
40099864:	e0bffe17 	ldw	r2,-8(fp)
40099868:	1809883a 	mov	r4,r3
4009986c:	e17fff17 	ldw	r5,-4(fp)
40099870:	100d883a 	mov	r6,r2
40099874:	0099a440 	call	40099a44 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
40099878:	1000021e 	bne	r2,zero,40099884 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
4009987c:	e0bffd17 	ldw	r2,-12(fp)
40099880:	00000806 	br	400998a4 <alt_find_file+0x100>
    }
    next = (alt_dev*) next->llist.next;
40099884:	e0bffd17 	ldw	r2,-12(fp)
40099888:	10800017 	ldw	r2,0(r2)
4009988c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
40099890:	e0fffd17 	ldw	r3,-12(fp)
40099894:	009002b4 	movhi	r2,16394
40099898:	10aff004 	addi	r2,r2,-16448
4009989c:	18bfcb1e 	bne	r3,r2,400997cc <__alt_mem_epcs+0xfff587cc>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
400998a0:	0005883a 	mov	r2,zero
}
400998a4:	e037883a 	mov	sp,fp
400998a8:	dfc00117 	ldw	ra,4(sp)
400998ac:	df000017 	ldw	fp,0(sp)
400998b0:	dec00204 	addi	sp,sp,8
400998b4:	f800283a 	ret

400998b8 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
400998b8:	defffc04 	addi	sp,sp,-16
400998bc:	df000315 	stw	fp,12(sp)
400998c0:	df000304 	addi	fp,sp,12
400998c4:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
400998c8:	00bffa04 	movi	r2,-24
400998cc:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
400998d0:	e03ffd15 	stw	zero,-12(fp)
400998d4:	00001d06 	br	4009994c <alt_get_fd+0x94>
  {
    if (!alt_fd_list[i].dev)
400998d8:	009002b4 	movhi	r2,16394
400998dc:	10ab0d04 	addi	r2,r2,-21452
400998e0:	e0fffd17 	ldw	r3,-12(fp)
400998e4:	18c00324 	muli	r3,r3,12
400998e8:	10c5883a 	add	r2,r2,r3
400998ec:	10800017 	ldw	r2,0(r2)
400998f0:	1000131e 	bne	r2,zero,40099940 <alt_get_fd+0x88>
    {
      alt_fd_list[i].dev = dev;
400998f4:	009002b4 	movhi	r2,16394
400998f8:	10ab0d04 	addi	r2,r2,-21452
400998fc:	e0fffd17 	ldw	r3,-12(fp)
40099900:	18c00324 	muli	r3,r3,12
40099904:	10c5883a 	add	r2,r2,r3
40099908:	e0ffff17 	ldw	r3,-4(fp)
4009990c:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
40099910:	009002b4 	movhi	r2,16394
40099914:	10aff404 	addi	r2,r2,-16432
40099918:	10c00017 	ldw	r3,0(r2)
4009991c:	e0bffd17 	ldw	r2,-12(fp)
40099920:	1880040e 	bge	r3,r2,40099934 <alt_get_fd+0x7c>
      {
        alt_max_fd = i;
40099924:	009002b4 	movhi	r2,16394
40099928:	10aff404 	addi	r2,r2,-16432
4009992c:	e0fffd17 	ldw	r3,-12(fp)
40099930:	10c00015 	stw	r3,0(r2)
      }
      rc = i;
40099934:	e0bffd17 	ldw	r2,-12(fp)
40099938:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
4009993c:	00000606 	br	40099958 <alt_get_fd+0xa0>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
40099940:	e0bffd17 	ldw	r2,-12(fp)
40099944:	10800044 	addi	r2,r2,1
40099948:	e0bffd15 	stw	r2,-12(fp)
4009994c:	e0bffd17 	ldw	r2,-12(fp)
40099950:	10800810 	cmplti	r2,r2,32
40099954:	103fe01e 	bne	r2,zero,400998d8 <__alt_mem_epcs+0xfff588d8>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
40099958:	e0bffe17 	ldw	r2,-8(fp)
}
4009995c:	e037883a 	mov	sp,fp
40099960:	df000017 	ldw	fp,0(sp)
40099964:	dec00104 	addi	sp,sp,4
40099968:	f800283a 	ret

4009996c <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
4009996c:	defffb04 	addi	sp,sp,-20
40099970:	df000415 	stw	fp,16(sp)
40099974:	df000404 	addi	fp,sp,16
40099978:	e13ffe15 	stw	r4,-8(fp)
4009997c:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
40099980:	e0bfff17 	ldw	r2,-4(fp)
40099984:	10840070 	cmpltui	r2,r2,4097
40099988:	1000021e 	bne	r2,zero,40099994 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
4009998c:	00840004 	movi	r2,4096
40099990:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
40099994:	e0fffe17 	ldw	r3,-8(fp)
40099998:	e0bfff17 	ldw	r2,-4(fp)
4009999c:	1885883a 	add	r2,r3,r2
400999a0:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
400999a4:	e0bffe17 	ldw	r2,-8(fp)
400999a8:	e0bffc15 	stw	r2,-16(fp)
400999ac:	00000506 	br	400999c4 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
400999b0:	e0bffc17 	ldw	r2,-16(fp)
400999b4:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
400999b8:	e0bffc17 	ldw	r2,-16(fp)
400999bc:	10800804 	addi	r2,r2,32
400999c0:	e0bffc15 	stw	r2,-16(fp)
400999c4:	e0fffc17 	ldw	r3,-16(fp)
400999c8:	e0bffd17 	ldw	r2,-12(fp)
400999cc:	18bff836 	bltu	r3,r2,400999b0 <__alt_mem_epcs+0xfff589b0>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
400999d0:	e0bffe17 	ldw	r2,-8(fp)
400999d4:	108007cc 	andi	r2,r2,31
400999d8:	10000226 	beq	r2,zero,400999e4 <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
400999dc:	e0bffc17 	ldw	r2,-16(fp)
400999e0:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
400999e4:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
400999e8:	e037883a 	mov	sp,fp
400999ec:	df000017 	ldw	fp,0(sp)
400999f0:	dec00104 	addi	sp,sp,4
400999f4:	f800283a 	ret

400999f8 <atexit>:
400999f8:	200b883a 	mov	r5,r4
400999fc:	000d883a 	mov	r6,zero
40099a00:	0009883a 	mov	r4,zero
40099a04:	000f883a 	mov	r7,zero
40099a08:	0099ac01 	jmpi	40099ac0 <__register_exitproc>

40099a0c <exit>:
40099a0c:	defffe04 	addi	sp,sp,-8
40099a10:	000b883a 	mov	r5,zero
40099a14:	dc000015 	stw	r16,0(sp)
40099a18:	dfc00115 	stw	ra,4(sp)
40099a1c:	2021883a 	mov	r16,r4
40099a20:	0099bd40 	call	40099bd4 <__call_exitprocs>
40099a24:	009002b4 	movhi	r2,16394
40099a28:	10afea04 	addi	r2,r2,-16472
40099a2c:	11000017 	ldw	r4,0(r2)
40099a30:	20800f17 	ldw	r2,60(r4)
40099a34:	10000126 	beq	r2,zero,40099a3c <exit+0x30>
40099a38:	103ee83a 	callr	r2
40099a3c:	8009883a 	mov	r4,r16
40099a40:	0099d680 	call	40099d68 <_exit>

40099a44 <memcmp>:
40099a44:	01c000c4 	movi	r7,3
40099a48:	3980192e 	bgeu	r7,r6,40099ab0 <memcmp+0x6c>
40099a4c:	2144b03a 	or	r2,r4,r5
40099a50:	11c4703a 	and	r2,r2,r7
40099a54:	10000f26 	beq	r2,zero,40099a94 <memcmp+0x50>
40099a58:	20800003 	ldbu	r2,0(r4)
40099a5c:	28c00003 	ldbu	r3,0(r5)
40099a60:	10c0151e 	bne	r2,r3,40099ab8 <memcmp+0x74>
40099a64:	31bfff84 	addi	r6,r6,-2
40099a68:	01ffffc4 	movi	r7,-1
40099a6c:	00000406 	br	40099a80 <memcmp+0x3c>
40099a70:	20800003 	ldbu	r2,0(r4)
40099a74:	28c00003 	ldbu	r3,0(r5)
40099a78:	31bfffc4 	addi	r6,r6,-1
40099a7c:	10c00e1e 	bne	r2,r3,40099ab8 <memcmp+0x74>
40099a80:	21000044 	addi	r4,r4,1
40099a84:	29400044 	addi	r5,r5,1
40099a88:	31fff91e 	bne	r6,r7,40099a70 <__alt_mem_epcs+0xfff58a70>
40099a8c:	0005883a 	mov	r2,zero
40099a90:	f800283a 	ret
40099a94:	20c00017 	ldw	r3,0(r4)
40099a98:	28800017 	ldw	r2,0(r5)
40099a9c:	1880041e 	bne	r3,r2,40099ab0 <memcmp+0x6c>
40099aa0:	31bfff04 	addi	r6,r6,-4
40099aa4:	21000104 	addi	r4,r4,4
40099aa8:	29400104 	addi	r5,r5,4
40099aac:	39bff936 	bltu	r7,r6,40099a94 <__alt_mem_epcs+0xfff58a94>
40099ab0:	303fe91e 	bne	r6,zero,40099a58 <__alt_mem_epcs+0xfff58a58>
40099ab4:	003ff506 	br	40099a8c <__alt_mem_epcs+0xfff58a8c>
40099ab8:	10c5c83a 	sub	r2,r2,r3
40099abc:	f800283a 	ret

40099ac0 <__register_exitproc>:
40099ac0:	009002b4 	movhi	r2,16394
40099ac4:	defffa04 	addi	sp,sp,-24
40099ac8:	10afea04 	addi	r2,r2,-16472
40099acc:	dc000315 	stw	r16,12(sp)
40099ad0:	14000017 	ldw	r16,0(r2)
40099ad4:	dc400415 	stw	r17,16(sp)
40099ad8:	dfc00515 	stw	ra,20(sp)
40099adc:	80805217 	ldw	r2,328(r16)
40099ae0:	2023883a 	mov	r17,r4
40099ae4:	10003626 	beq	r2,zero,40099bc0 <__register_exitproc+0x100>
40099ae8:	10c00117 	ldw	r3,4(r2)
40099aec:	010007c4 	movi	r4,31
40099af0:	20c00e16 	blt	r4,r3,40099b2c <__register_exitproc+0x6c>
40099af4:	1a400044 	addi	r9,r3,1
40099af8:	8800211e 	bne	r17,zero,40099b80 <__register_exitproc+0xc0>
40099afc:	18c00084 	addi	r3,r3,2
40099b00:	18c7883a 	add	r3,r3,r3
40099b04:	18c7883a 	add	r3,r3,r3
40099b08:	12400115 	stw	r9,4(r2)
40099b0c:	10c7883a 	add	r3,r2,r3
40099b10:	19400015 	stw	r5,0(r3)
40099b14:	0005883a 	mov	r2,zero
40099b18:	dfc00517 	ldw	ra,20(sp)
40099b1c:	dc400417 	ldw	r17,16(sp)
40099b20:	dc000317 	ldw	r16,12(sp)
40099b24:	dec00604 	addi	sp,sp,24
40099b28:	f800283a 	ret
40099b2c:	00800034 	movhi	r2,0
40099b30:	10800004 	addi	r2,r2,0
40099b34:	10002526 	beq	r2,zero,40099bcc <__register_exitproc+0x10c>
40099b38:	01006404 	movi	r4,400
40099b3c:	d9400015 	stw	r5,0(sp)
40099b40:	d9800115 	stw	r6,4(sp)
40099b44:	d9c00215 	stw	r7,8(sp)
40099b48:	00000000 	call	40000000 <__alt_mem_sram-0x80000>
40099b4c:	d9400017 	ldw	r5,0(sp)
40099b50:	d9800117 	ldw	r6,4(sp)
40099b54:	d9c00217 	ldw	r7,8(sp)
40099b58:	10001c26 	beq	r2,zero,40099bcc <__register_exitproc+0x10c>
40099b5c:	80c05217 	ldw	r3,328(r16)
40099b60:	10000115 	stw	zero,4(r2)
40099b64:	02400044 	movi	r9,1
40099b68:	10c00015 	stw	r3,0(r2)
40099b6c:	80805215 	stw	r2,328(r16)
40099b70:	10006215 	stw	zero,392(r2)
40099b74:	10006315 	stw	zero,396(r2)
40099b78:	0007883a 	mov	r3,zero
40099b7c:	883fdf26 	beq	r17,zero,40099afc <__alt_mem_epcs+0xfff58afc>
40099b80:	18d1883a 	add	r8,r3,r3
40099b84:	4211883a 	add	r8,r8,r8
40099b88:	1211883a 	add	r8,r2,r8
40099b8c:	41802215 	stw	r6,136(r8)
40099b90:	01000044 	movi	r4,1
40099b94:	11806217 	ldw	r6,392(r2)
40099b98:	20c8983a 	sll	r4,r4,r3
40099b9c:	310cb03a 	or	r6,r6,r4
40099ba0:	11806215 	stw	r6,392(r2)
40099ba4:	41c04215 	stw	r7,264(r8)
40099ba8:	01800084 	movi	r6,2
40099bac:	89bfd31e 	bne	r17,r6,40099afc <__alt_mem_epcs+0xfff58afc>
40099bb0:	11806317 	ldw	r6,396(r2)
40099bb4:	3108b03a 	or	r4,r6,r4
40099bb8:	11006315 	stw	r4,396(r2)
40099bbc:	003fcf06 	br	40099afc <__alt_mem_epcs+0xfff58afc>
40099bc0:	80805304 	addi	r2,r16,332
40099bc4:	80805215 	stw	r2,328(r16)
40099bc8:	003fc706 	br	40099ae8 <__alt_mem_epcs+0xfff58ae8>
40099bcc:	00bfffc4 	movi	r2,-1
40099bd0:	003fd106 	br	40099b18 <__alt_mem_epcs+0xfff58b18>

40099bd4 <__call_exitprocs>:
40099bd4:	009002b4 	movhi	r2,16394
40099bd8:	10afea04 	addi	r2,r2,-16472
40099bdc:	10800017 	ldw	r2,0(r2)
40099be0:	defff404 	addi	sp,sp,-48
40099be4:	dd800815 	stw	r22,32(sp)
40099be8:	d8800015 	stw	r2,0(sp)
40099bec:	10805204 	addi	r2,r2,328
40099bf0:	dd000615 	stw	r20,24(sp)
40099bf4:	dc800415 	stw	r18,16(sp)
40099bf8:	dfc00b15 	stw	ra,44(sp)
40099bfc:	df000a15 	stw	fp,40(sp)
40099c00:	ddc00915 	stw	r23,36(sp)
40099c04:	dd400715 	stw	r21,28(sp)
40099c08:	dcc00515 	stw	r19,20(sp)
40099c0c:	dc400315 	stw	r17,12(sp)
40099c10:	dc000215 	stw	r16,8(sp)
40099c14:	2025883a 	mov	r18,r4
40099c18:	2829883a 	mov	r20,r5
40099c1c:	d8800115 	stw	r2,4(sp)
40099c20:	05bfffc4 	movi	r22,-1
40099c24:	d8800017 	ldw	r2,0(sp)
40099c28:	14c05217 	ldw	r19,328(r2)
40099c2c:	98001d26 	beq	r19,zero,40099ca4 <__call_exitprocs+0xd0>
40099c30:	dd400117 	ldw	r21,4(sp)
40099c34:	98800117 	ldw	r2,4(r19)
40099c38:	173fffc4 	addi	fp,r2,-1
40099c3c:	e0000d16 	blt	fp,zero,40099c74 <__call_exitprocs+0xa0>
40099c40:	14000044 	addi	r16,r2,1
40099c44:	8421883a 	add	r16,r16,r16
40099c48:	8421883a 	add	r16,r16,r16
40099c4c:	84402004 	addi	r17,r16,128
40099c50:	9c63883a 	add	r17,r19,r17
40099c54:	9c21883a 	add	r16,r19,r16
40099c58:	a0001e26 	beq	r20,zero,40099cd4 <__call_exitprocs+0x100>
40099c5c:	80804017 	ldw	r2,256(r16)
40099c60:	15001c26 	beq	r2,r20,40099cd4 <__call_exitprocs+0x100>
40099c64:	e73fffc4 	addi	fp,fp,-1
40099c68:	843fff04 	addi	r16,r16,-4
40099c6c:	8c7fff04 	addi	r17,r17,-4
40099c70:	e5bff91e 	bne	fp,r22,40099c58 <__alt_mem_epcs+0xfff58c58>
40099c74:	00800034 	movhi	r2,0
40099c78:	10800004 	addi	r2,r2,0
40099c7c:	10000926 	beq	r2,zero,40099ca4 <__call_exitprocs+0xd0>
40099c80:	98800117 	ldw	r2,4(r19)
40099c84:	1000311e 	bne	r2,zero,40099d4c <__call_exitprocs+0x178>
40099c88:	98800017 	ldw	r2,0(r19)
40099c8c:	10003426 	beq	r2,zero,40099d60 <__call_exitprocs+0x18c>
40099c90:	9809883a 	mov	r4,r19
40099c94:	a8800015 	stw	r2,0(r21)
40099c98:	00000000 	call	40000000 <__alt_mem_sram-0x80000>
40099c9c:	acc00017 	ldw	r19,0(r21)
40099ca0:	983fe41e 	bne	r19,zero,40099c34 <__alt_mem_epcs+0xfff58c34>
40099ca4:	dfc00b17 	ldw	ra,44(sp)
40099ca8:	df000a17 	ldw	fp,40(sp)
40099cac:	ddc00917 	ldw	r23,36(sp)
40099cb0:	dd800817 	ldw	r22,32(sp)
40099cb4:	dd400717 	ldw	r21,28(sp)
40099cb8:	dd000617 	ldw	r20,24(sp)
40099cbc:	dcc00517 	ldw	r19,20(sp)
40099cc0:	dc800417 	ldw	r18,16(sp)
40099cc4:	dc400317 	ldw	r17,12(sp)
40099cc8:	dc000217 	ldw	r16,8(sp)
40099ccc:	dec00c04 	addi	sp,sp,48
40099cd0:	f800283a 	ret
40099cd4:	98800117 	ldw	r2,4(r19)
40099cd8:	80c00017 	ldw	r3,0(r16)
40099cdc:	10bfffc4 	addi	r2,r2,-1
40099ce0:	17001526 	beq	r2,fp,40099d38 <__call_exitprocs+0x164>
40099ce4:	80000015 	stw	zero,0(r16)
40099ce8:	183fde26 	beq	r3,zero,40099c64 <__alt_mem_epcs+0xfff58c64>
40099cec:	00800044 	movi	r2,1
40099cf0:	1708983a 	sll	r4,r2,fp
40099cf4:	98806217 	ldw	r2,392(r19)
40099cf8:	9dc00117 	ldw	r23,4(r19)
40099cfc:	2084703a 	and	r2,r4,r2
40099d00:	1000061e 	bne	r2,zero,40099d1c <__call_exitprocs+0x148>
40099d04:	183ee83a 	callr	r3
40099d08:	98800117 	ldw	r2,4(r19)
40099d0c:	15ffc51e 	bne	r2,r23,40099c24 <__alt_mem_epcs+0xfff58c24>
40099d10:	a8800017 	ldw	r2,0(r21)
40099d14:	14ffd326 	beq	r2,r19,40099c64 <__alt_mem_epcs+0xfff58c64>
40099d18:	003fc206 	br	40099c24 <__alt_mem_epcs+0xfff58c24>
40099d1c:	98806317 	ldw	r2,396(r19)
40099d20:	2084703a 	and	r2,r4,r2
40099d24:	1000061e 	bne	r2,zero,40099d40 <__call_exitprocs+0x16c>
40099d28:	89400017 	ldw	r5,0(r17)
40099d2c:	9009883a 	mov	r4,r18
40099d30:	183ee83a 	callr	r3
40099d34:	003ff406 	br	40099d08 <__alt_mem_epcs+0xfff58d08>
40099d38:	9f000115 	stw	fp,4(r19)
40099d3c:	003fea06 	br	40099ce8 <__alt_mem_epcs+0xfff58ce8>
40099d40:	89000017 	ldw	r4,0(r17)
40099d44:	183ee83a 	callr	r3
40099d48:	003fef06 	br	40099d08 <__alt_mem_epcs+0xfff58d08>
40099d4c:	98800017 	ldw	r2,0(r19)
40099d50:	982b883a 	mov	r21,r19
40099d54:	1027883a 	mov	r19,r2
40099d58:	983fb61e 	bne	r19,zero,40099c34 <__alt_mem_epcs+0xfff58c34>
40099d5c:	003fd106 	br	40099ca4 <__alt_mem_epcs+0xfff58ca4>
40099d60:	0005883a 	mov	r2,zero
40099d64:	003ffa06 	br	40099d50 <__alt_mem_epcs+0xfff58d50>

40099d68 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
40099d68:	defffd04 	addi	sp,sp,-12
40099d6c:	df000215 	stw	fp,8(sp)
40099d70:	df000204 	addi	fp,sp,8
40099d74:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
40099d78:	0001883a 	nop
40099d7c:	e0bfff17 	ldw	r2,-4(fp)
40099d80:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
40099d84:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
40099d88:	10000226 	beq	r2,zero,40099d94 <_exit+0x2c>
    ALT_SIM_FAIL();
40099d8c:	002af070 	cmpltui	zero,zero,43969
40099d90:	00000106 	br	40099d98 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
40099d94:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
40099d98:	003fff06 	br	40099d98 <__alt_mem_epcs+0xfff58d98>
